
Cable Undefined V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000592c  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f00  08005b10  08005b10  00006b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a10  08006a10  00008d20  2**0
                  CONTENTS
  4 .ARM          00000008  08006a10  08006a10  00007a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a18  08006a18  00008d20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a18  08006a18  00007a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a1c  08006a1c  00007a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000d20  20000000  08006a20  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003500  20000d20  08007740  00008d20  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004220  08007740  00009220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008d20  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c40  00000000  00000000  00008d49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002380  00000000  00000000  00012989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  00014d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000857  00000000  00000000  00015868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dc5a  00000000  00000000  000160bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ec8  00000000  00000000  00033d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c56c  00000000  00000000  0003dbe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da14d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b04  00000000  00000000  000da190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000ddc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000d20 	.word	0x20000d20
 8000200:	00000000 	.word	0x00000000
 8000204:	08005af8 	.word	0x08005af8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000d24 	.word	0x20000d24
 8000220:	08005af8 	.word	0x08005af8

08000224 <strcmp>:
 8000224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800022c:	2a01      	cmp	r2, #1
 800022e:	bf28      	it	cs
 8000230:	429a      	cmpcs	r2, r3
 8000232:	d0f7      	beq.n	8000224 <strcmp>
 8000234:	1ad0      	subs	r0, r2, r3
 8000236:	4770      	bx	lr

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	0a1b      	lsrs	r3, r3, #8
 8000256:	b29a      	uxth	r2, r3
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	611a      	str	r2, [r3, #16]
}
 800025c:	bf00      	nop
 800025e:	370c      	adds	r7, #12
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr

08000266 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000266:	b480      	push	{r7}
 8000268:	b083      	sub	sp, #12
 800026a:	af00      	add	r7, sp, #0
 800026c:	6078      	str	r0, [r7, #4]
 800026e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	0a1b      	lsrs	r3, r3, #8
 8000274:	b29a      	uxth	r2, r3
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	615a      	str	r2, [r3, #20]
}
 800027a:	bf00      	nop
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr

08000284 <FAULT_5v_HandleInterrupt>:
}

/**
 * @brief Handles the 5V FAULT interrupt, only sets flags
 */
void FAULT_5v_HandleInterrupt(void) {
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
    // Set trigger flag when interrupt occurs
	fault_5v_triggered = 1;
 8000288:	4b04      	ldr	r3, [pc, #16]	@ (800029c <FAULT_5v_HandleInterrupt+0x18>)
 800028a:	2201      	movs	r2, #1
 800028c:	701a      	strb	r2, [r3, #0]
    fault_sent = 0;  // Reset message sent flag to allow new transmission
 800028e:	4b04      	ldr	r3, [pc, #16]	@ (80002a0 <FAULT_5v_HandleInterrupt+0x1c>)
 8000290:	2200      	movs	r2, #0
 8000292:	701a      	strb	r2, [r3, #0]
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr
 800029c:	20000d3d 	.word	0x20000d3d
 80002a0:	20000d3e 	.word	0x20000d3e

080002a4 <FAULT_3v3_HandleInterrupt>:

/**
 * @brief Handles the 5V FAULT interrupt, only sets flags
 */
void FAULT_3v3_HandleInterrupt(void) {
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
    // Set trigger flag when interrupt occurs
	fault_3v3_triggered = 1;
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <FAULT_3v3_HandleInterrupt+0x18>)
 80002aa:	2201      	movs	r2, #1
 80002ac:	701a      	strb	r2, [r3, #0]
    fault_sent = 0;  // Reset message sent flag to allow new transmission
 80002ae:	4b04      	ldr	r3, [pc, #16]	@ (80002c0 <FAULT_3v3_HandleInterrupt+0x1c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	701a      	strb	r2, [r3, #0]
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	20000d3c 	.word	0x20000d3c
 80002c0:	20000d3e 	.word	0x20000d3e

080002c4 <FAULT_5v_HandleMsg>:

void FAULT_5v_HandleMsg(void){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	printf("Reseting the protection gpio, 5V");
 80002c8:	480d      	ldr	r0, [pc, #52]	@ (8000300 <FAULT_5v_HandleMsg+0x3c>)
 80002ca:	f003 ff11 	bl	80040f0 <iprintf>
	fflush(stdout);
 80002ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000304 <FAULT_5v_HandleMsg+0x40>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	689b      	ldr	r3, [r3, #8]
 80002d4:	4618      	mov	r0, r3
 80002d6:	f003 fe35 	bl	8003f44 <fflush>

	fault_5v_triggered = 0;
 80002da:	4b0b      	ldr	r3, [pc, #44]	@ (8000308 <FAULT_5v_HandleMsg+0x44>)
 80002dc:	2200      	movs	r2, #0
 80002de:	701a      	strb	r2, [r3, #0]
    fault_sent = 0;
 80002e0:	4b0a      	ldr	r3, [pc, #40]	@ (800030c <FAULT_5v_HandleMsg+0x48>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	701a      	strb	r2, [r3, #0]

    LL_GPIO_ResetOutputPin(PROTECTION_GPIO, PROTECTION_PIN);
 80002e6:	490a      	ldr	r1, [pc, #40]	@ (8000310 <FAULT_5v_HandleMsg+0x4c>)
 80002e8:	480a      	ldr	r0, [pc, #40]	@ (8000314 <FAULT_5v_HandleMsg+0x50>)
 80002ea:	f7ff ffbc 	bl	8000266 <LL_GPIO_ResetOutputPin>
    LL_mDelay(20);
 80002ee:	2014      	movs	r0, #20
 80002f0:	f003 fd4e 	bl	8003d90 <LL_mDelay>
    LL_GPIO_SetOutputPin(PROTECTION_GPIO, PROTECTION_PIN);
 80002f4:	4906      	ldr	r1, [pc, #24]	@ (8000310 <FAULT_5v_HandleMsg+0x4c>)
 80002f6:	4807      	ldr	r0, [pc, #28]	@ (8000314 <FAULT_5v_HandleMsg+0x50>)
 80002f8:	f7ff ffa6 	bl	8000248 <LL_GPIO_SetOutputPin>
}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	08005b38 	.word	0x08005b38
 8000304:	20000cd0 	.word	0x20000cd0
 8000308:	20000d3d 	.word	0x20000d3d
 800030c:	20000d3e 	.word	0x20000d3e
 8000310:	04080008 	.word	0x04080008
 8000314:	40011800 	.word	0x40011800

08000318 <FAULT_3v3_HandleMsg>:

void FAULT_3v3_HandleMsg(void){
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	printf("reseting the protection gpio, 3V3");
 800031c:	480d      	ldr	r0, [pc, #52]	@ (8000354 <FAULT_3v3_HandleMsg+0x3c>)
 800031e:	f003 fee7 	bl	80040f0 <iprintf>
	fflush(stdout);
 8000322:	4b0d      	ldr	r3, [pc, #52]	@ (8000358 <FAULT_3v3_HandleMsg+0x40>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	4618      	mov	r0, r3
 800032a:	f003 fe0b 	bl	8003f44 <fflush>

	fault_3v3_triggered = 0;
 800032e:	4b0b      	ldr	r3, [pc, #44]	@ (800035c <FAULT_3v3_HandleMsg+0x44>)
 8000330:	2200      	movs	r2, #0
 8000332:	701a      	strb	r2, [r3, #0]
    fault_sent = 0;
 8000334:	4b0a      	ldr	r3, [pc, #40]	@ (8000360 <FAULT_3v3_HandleMsg+0x48>)
 8000336:	2200      	movs	r2, #0
 8000338:	701a      	strb	r2, [r3, #0]

    LL_GPIO_ResetOutputPin(PROTECTION_GPIO, PROTECTION_PIN);
 800033a:	490a      	ldr	r1, [pc, #40]	@ (8000364 <FAULT_3v3_HandleMsg+0x4c>)
 800033c:	480a      	ldr	r0, [pc, #40]	@ (8000368 <FAULT_3v3_HandleMsg+0x50>)
 800033e:	f7ff ff92 	bl	8000266 <LL_GPIO_ResetOutputPin>
    LL_mDelay(20);
 8000342:	2014      	movs	r0, #20
 8000344:	f003 fd24 	bl	8003d90 <LL_mDelay>
    LL_GPIO_SetOutputPin(PROTECTION_GPIO, PROTECTION_PIN);
 8000348:	4906      	ldr	r1, [pc, #24]	@ (8000364 <FAULT_3v3_HandleMsg+0x4c>)
 800034a:	4807      	ldr	r0, [pc, #28]	@ (8000368 <FAULT_3v3_HandleMsg+0x50>)
 800034c:	f7ff ff7c 	bl	8000248 <LL_GPIO_SetOutputPin>
}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}
 8000354:	08005b5c 	.word	0x08005b5c
 8000358:	20000cd0 	.word	0x20000cd0
 800035c:	20000d3c 	.word	0x20000d3c
 8000360:	20000d3e 	.word	0x20000d3e
 8000364:	04080008 	.word	0x04080008
 8000368:	40011800 	.word	0x40011800

0800036c <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	3b01      	subs	r3, #1
 800037a:	4a0a      	ldr	r2, [pc, #40]	@ (80003a4 <LL_DMA_EnableChannel+0x38>)
 800037c:	5cd3      	ldrb	r3, [r2, r3]
 800037e:	461a      	mov	r2, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4413      	add	r3, r2
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	683a      	ldr	r2, [r7, #0]
 8000388:	3a01      	subs	r2, #1
 800038a:	4906      	ldr	r1, [pc, #24]	@ (80003a4 <LL_DMA_EnableChannel+0x38>)
 800038c:	5c8a      	ldrb	r2, [r1, r2]
 800038e:	4611      	mov	r1, r2
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	440a      	add	r2, r1
 8000394:	f043 0301 	orr.w	r3, r3, #1
 8000398:	6013      	str	r3, [r2, #0]
}
 800039a:	bf00      	nop
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr
 80003a4:	08006668 	.word	0x08006668

080003a8 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	60f8      	str	r0, [r7, #12]
 80003b0:	60b9      	str	r1, [r7, #8]
 80003b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	3b01      	subs	r3, #1
 80003b8:	4a0b      	ldr	r2, [pc, #44]	@ (80003e8 <LL_DMA_SetDataLength+0x40>)
 80003ba:	5cd3      	ldrb	r3, [r2, r3]
 80003bc:	461a      	mov	r2, r3
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	4413      	add	r3, r2
 80003c2:	685b      	ldr	r3, [r3, #4]
 80003c4:	0c1b      	lsrs	r3, r3, #16
 80003c6:	041b      	lsls	r3, r3, #16
 80003c8:	68ba      	ldr	r2, [r7, #8]
 80003ca:	3a01      	subs	r2, #1
 80003cc:	4906      	ldr	r1, [pc, #24]	@ (80003e8 <LL_DMA_SetDataLength+0x40>)
 80003ce:	5c8a      	ldrb	r2, [r1, r2]
 80003d0:	4611      	mov	r1, r2
 80003d2:	68fa      	ldr	r2, [r7, #12]
 80003d4:	440a      	add	r2, r1
 80003d6:	4611      	mov	r1, r2
 80003d8:	687a      	ldr	r2, [r7, #4]
 80003da:	4313      	orrs	r3, r2
 80003dc:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80003de:	bf00      	nop
 80003e0:	3714      	adds	r7, #20
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr
 80003e8:	08006668 	.word	0x08006668

080003ec <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b085      	sub	sp, #20
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	607a      	str	r2, [r7, #4]
 80003f8:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80003fa:	69bb      	ldr	r3, [r7, #24]
 80003fc:	2b10      	cmp	r3, #16
 80003fe:	d114      	bne.n	800042a <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	3b01      	subs	r3, #1
 8000404:	4a15      	ldr	r2, [pc, #84]	@ (800045c <LL_DMA_ConfigAddresses+0x70>)
 8000406:	5cd3      	ldrb	r3, [r2, r3]
 8000408:	461a      	mov	r2, r3
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	4413      	add	r3, r2
 800040e:	461a      	mov	r2, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	3b01      	subs	r3, #1
 8000418:	4a10      	ldr	r2, [pc, #64]	@ (800045c <LL_DMA_ConfigAddresses+0x70>)
 800041a:	5cd3      	ldrb	r3, [r2, r3]
 800041c:	461a      	mov	r2, r3
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	4413      	add	r3, r2
 8000422:	461a      	mov	r2, r3
 8000424:	683b      	ldr	r3, [r7, #0]
 8000426:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 8000428:	e013      	b.n	8000452 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 800042a:	68bb      	ldr	r3, [r7, #8]
 800042c:	3b01      	subs	r3, #1
 800042e:	4a0b      	ldr	r2, [pc, #44]	@ (800045c <LL_DMA_ConfigAddresses+0x70>)
 8000430:	5cd3      	ldrb	r3, [r2, r3]
 8000432:	461a      	mov	r2, r3
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	4413      	add	r3, r2
 8000438:	461a      	mov	r2, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	3b01      	subs	r3, #1
 8000442:	4a06      	ldr	r2, [pc, #24]	@ (800045c <LL_DMA_ConfigAddresses+0x70>)
 8000444:	5cd3      	ldrb	r3, [r2, r3]
 8000446:	461a      	mov	r2, r3
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	4413      	add	r3, r2
 800044c:	461a      	mov	r2, r3
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	60d3      	str	r3, [r2, #12]
}
 8000452:	bf00      	nop
 8000454:	3714      	adds	r7, #20
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr
 800045c:	08006668 	.word	0x08006668

08000460 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	3b01      	subs	r3, #1
 800046e:	4a0a      	ldr	r2, [pc, #40]	@ (8000498 <LL_DMA_EnableIT_TC+0x38>)
 8000470:	5cd3      	ldrb	r3, [r2, r3]
 8000472:	461a      	mov	r2, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4413      	add	r3, r2
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	683a      	ldr	r2, [r7, #0]
 800047c:	3a01      	subs	r2, #1
 800047e:	4906      	ldr	r1, [pc, #24]	@ (8000498 <LL_DMA_EnableIT_TC+0x38>)
 8000480:	5c8a      	ldrb	r2, [r1, r2]
 8000482:	4611      	mov	r1, r2
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	440a      	add	r2, r1
 8000488:	f043 0302 	orr.w	r3, r3, #2
 800048c:	6013      	str	r3, [r2, #0]
}
 800048e:	bf00      	nop
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	08006668 	.word	0x08006668

0800049c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	f043 0201 	orr.w	r2, r3, #1
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	601a      	str	r2, [r3, #0]
}
 80004b0:	bf00      	nop
 80004b2:	370c      	adds	r7, #12
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bc80      	pop	{r7}
 80004b8:	4770      	bx	lr

080004ba <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 80004ba:	b480      	push	{r7}
 80004bc:	b083      	sub	sp, #12
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f023 0201 	bic.w	r2, r3, #1
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	601a      	str	r2, [r3, #0]
}
 80004ce:	bf00      	nop
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr

080004d8 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	6a1a      	ldr	r2, [r3, #32]
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	431a      	orrs	r2, r3
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	621a      	str	r2, [r3, #32]
}
 80004ee:	bf00      	nop
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr

080004f8 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	6a1a      	ldr	r2, [r3, #32]
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	43db      	mvns	r3, r3
 800050a:	401a      	ands	r2, r3
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	621a      	str	r2, [r3, #32]
}
 8000510:	bf00      	nop
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr

0800051a <LL_TIM_EnableDMAReq_CC1>:
  * @rmtoll DIER         CC1DE         LL_TIM_EnableDMAReq_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_CC1(TIM_TypeDef *TIMx)
{
 800051a:	b480      	push	{r7}
 800051c:	b083      	sub	sp, #12
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	68db      	ldr	r3, [r3, #12]
 8000526:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	60da      	str	r2, [r3, #12]
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr

08000538 <LL_TIM_DisableDMAReq_CC1>:
  * @rmtoll DIER         CC1DE         LL_TIM_DisableDMAReq_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableDMAReq_CC1(TIM_TypeDef *TIMx)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	68db      	ldr	r3, [r3, #12]
 8000544:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	60da      	str	r2, [r3, #12]
}
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr
	...

08000558 <addToPins>:

LedPair LedPairs[NUM_PIXELS/2];
uint8_t numLedPairs = 0;


void addToPins(uint8_t pin1, uint8_t pin2, RGB_t color) {
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	603a      	str	r2, [r7, #0]
 8000562:	71fb      	strb	r3, [r7, #7]
 8000564:	460b      	mov	r3, r1
 8000566:	71bb      	strb	r3, [r7, #6]
    if (pin1 == pin2 || pin1 == 0 || pin2 == 0 || pin1 >= NUM_PIXELS+1 || pin2 >= NUM_PIXELS+1 || numLedPairs >= NUM_PIXELS/2) {
 8000568:	79fa      	ldrb	r2, [r7, #7]
 800056a:	79bb      	ldrb	r3, [r7, #6]
 800056c:	429a      	cmp	r2, r3
 800056e:	d02b      	beq.n	80005c8 <addToPins+0x70>
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d028      	beq.n	80005c8 <addToPins+0x70>
 8000576:	79bb      	ldrb	r3, [r7, #6]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d025      	beq.n	80005c8 <addToPins+0x70>
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	2b78      	cmp	r3, #120	@ 0x78
 8000580:	d822      	bhi.n	80005c8 <addToPins+0x70>
 8000582:	79bb      	ldrb	r3, [r7, #6]
 8000584:	2b78      	cmp	r3, #120	@ 0x78
 8000586:	d81f      	bhi.n	80005c8 <addToPins+0x70>
 8000588:	4b12      	ldr	r3, [pc, #72]	@ (80005d4 <addToPins+0x7c>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b3b      	cmp	r3, #59	@ 0x3b
 800058e:	d81b      	bhi.n	80005c8 <addToPins+0x70>
        return;
    }

    LedPairs[numLedPairs].pin1 = pin1;
 8000590:	4b10      	ldr	r3, [pc, #64]	@ (80005d4 <addToPins+0x7c>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	4619      	mov	r1, r3
 8000596:	4a10      	ldr	r2, [pc, #64]	@ (80005d8 <addToPins+0x80>)
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	f802 3031 	strb.w	r3, [r2, r1, lsl #3]
    LedPairs[numLedPairs].pin2 = pin2;
 800059e:	4b0d      	ldr	r3, [pc, #52]	@ (80005d4 <addToPins+0x7c>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	4a0d      	ldr	r2, [pc, #52]	@ (80005d8 <addToPins+0x80>)
 80005a4:	00db      	lsls	r3, r3, #3
 80005a6:	4413      	add	r3, r2
 80005a8:	79ba      	ldrb	r2, [r7, #6]
 80005aa:	705a      	strb	r2, [r3, #1]
    LedPairs[numLedPairs].color = color;
 80005ac:	4b09      	ldr	r3, [pc, #36]	@ (80005d4 <addToPins+0x7c>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	4a09      	ldr	r2, [pc, #36]	@ (80005d8 <addToPins+0x80>)
 80005b2:	00db      	lsls	r3, r3, #3
 80005b4:	4413      	add	r3, r2
 80005b6:	683a      	ldr	r2, [r7, #0]
 80005b8:	605a      	str	r2, [r3, #4]
    numLedPairs++;
 80005ba:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <addToPins+0x7c>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	3301      	adds	r3, #1
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	4b04      	ldr	r3, [pc, #16]	@ (80005d4 <addToPins+0x7c>)
 80005c4:	701a      	strb	r2, [r3, #0]
 80005c6:	e000      	b.n	80005ca <addToPins+0x72>
        return;
 80005c8:	bf00      	nop
}
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20003e04 	.word	0x20003e04
 80005d8:	20003c24 	.word	0x20003c24

080005dc <clearBoard>:
        }
    }
}


void clearBoard(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
    int i;
    uint32_t *pBuff = dmaBuffer;
 80005e2:	4b17      	ldr	r3, [pc, #92]	@ (8000640 <clearBoard+0x64>)
 80005e4:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < NUM_PIXELS; i++) {
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	e010      	b.n	800060e <clearBoard+0x32>
        for (int j = 23; j >= 0; j--) {
 80005ec:	2317      	movs	r3, #23
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	e007      	b.n	8000602 <clearBoard+0x26>
            *pBuff++ = NEOPIXEL_ZERO;
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	1d1a      	adds	r2, r3, #4
 80005f6:	60ba      	str	r2, [r7, #8]
 80005f8:	221d      	movs	r2, #29
 80005fa:	601a      	str	r2, [r3, #0]
        for (int j = 23; j >= 0; j--) {
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3b01      	subs	r3, #1
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b00      	cmp	r3, #0
 8000606:	daf4      	bge.n	80005f2 <clearBoard+0x16>
    for (i = 0; i < NUM_PIXELS; i++) {
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	3301      	adds	r3, #1
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	2b77      	cmp	r3, #119	@ 0x77
 8000612:	ddeb      	ble.n	80005ec <clearBoard+0x10>
        }
    }

    dmaBuffer[DMA_BUFF_SIZE - 1] = 0;
 8000614:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <clearBoard+0x64>)
 8000616:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800061a:	461a      	mov	r2, r3
 800061c:	2300      	movs	r3, #0
 800061e:	f8c2 3d00 	str.w	r3, [r2, #3328]	@ 0xd00

    PWM_Start_DMA(TIM2, LL_TIM_CHANNEL_CH1, dmaBuffer, DMA_BUFF_SIZE);
 8000622:	f640 3341 	movw	r3, #2881	@ 0xb41
 8000626:	4a06      	ldr	r2, [pc, #24]	@ (8000640 <clearBoard+0x64>)
 8000628:	2101      	movs	r1, #1
 800062a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800062e:	f000 f8ef 	bl	8000810 <PWM_Start_DMA>
    LL_mDelay(10);
 8000632:	200a      	movs	r0, #10
 8000634:	f003 fbac 	bl	8003d90 <LL_mDelay>
}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000f20 	.word	0x20000f20

08000644 <sendPixelData>:

void sendPixelData() {
 8000644:	b580      	push	{r7, lr}
 8000646:	b086      	sub	sp, #24
 8000648:	af00      	add	r7, sp, #0
    if (numLedPairs == 0) {
 800064a:	4b6d      	ldr	r3, [pc, #436]	@ (8000800 <sendPixelData+0x1bc>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d102      	bne.n	8000658 <sendPixelData+0x14>
    	clearBoard();
 8000652:	f7ff ffc3 	bl	80005dc <clearBoard>
        return;
 8000656:	e0cf      	b.n	80007f8 <sendPixelData+0x1b4>
    }

    int i, j;
    uint32_t *pBuff = dmaBuffer;
 8000658:	4b6a      	ldr	r3, [pc, #424]	@ (8000804 <sendPixelData+0x1c0>)
 800065a:	60fb      	str	r3, [r7, #12]

    // Reset all pixels
    for (i = 0; i < NUM_PIXELS; i++) {
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	e007      	b.n	8000672 <sendPixelData+0x2e>
        pixel[i].data = 0;  // Turn off all pixels initially
 8000662:	4a69      	ldr	r2, [pc, #420]	@ (8000808 <sendPixelData+0x1c4>)
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	2100      	movs	r1, #0
 8000668:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0; i < NUM_PIXELS; i++) {
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	3301      	adds	r3, #1
 8000670:	617b      	str	r3, [r7, #20]
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	2b77      	cmp	r3, #119	@ 0x77
 8000676:	ddf4      	ble.n	8000662 <sendPixelData+0x1e>
    }

    for (i = 0; i < numLedPairs; i++) {
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	e07f      	b.n	800077e <sendPixelData+0x13a>
	   uint8_t pin1 = LedPairs[i].pin1;
 800067e:	4a63      	ldr	r2, [pc, #396]	@ (800080c <sendPixelData+0x1c8>)
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000686:	72fb      	strb	r3, [r7, #11]
	   uint8_t pin2 = LedPairs[i].pin2;
 8000688:	4a60      	ldr	r2, [pc, #384]	@ (800080c <sendPixelData+0x1c8>)
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	00db      	lsls	r3, r3, #3
 800068e:	4413      	add	r3, r2
 8000690:	785b      	ldrb	r3, [r3, #1]
 8000692:	72bb      	strb	r3, [r7, #10]
	   RGB_t color = LedPairs[i].color;
 8000694:	4a5d      	ldr	r2, [pc, #372]	@ (800080c <sendPixelData+0x1c8>)
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	00db      	lsls	r3, r3, #3
 800069a:	4413      	add	r3, r2
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	607b      	str	r3, [r7, #4]

	   if (pin1 > 0 && pin1 <= NUM_PIXELS) {
 80006a0:	7afb      	ldrb	r3, [r7, #11]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d032      	beq.n	800070c <sendPixelData+0xc8>
 80006a6:	7afb      	ldrb	r3, [r7, #11]
 80006a8:	2b78      	cmp	r3, #120	@ 0x78
 80006aa:	d82f      	bhi.n	800070c <sendPixelData+0xc8>
		   pixel[pin1 - 1] = color;  // Set the color for pin1
 80006ac:	7afb      	ldrb	r3, [r7, #11]
 80006ae:	3b01      	subs	r3, #1
 80006b0:	4955      	ldr	r1, [pc, #340]	@ (8000808 <sendPixelData+0x1c4>)
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		   pixel[pin1 - 1].color.r >>= 2;
 80006b8:	7afb      	ldrb	r3, [r7, #11]
 80006ba:	3b01      	subs	r3, #1
 80006bc:	4a52      	ldr	r2, [pc, #328]	@ (8000808 <sendPixelData+0x1c4>)
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	4413      	add	r3, r2
 80006c2:	785a      	ldrb	r2, [r3, #1]
 80006c4:	7afb      	ldrb	r3, [r7, #11]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	0892      	lsrs	r2, r2, #2
 80006ca:	b2d1      	uxtb	r1, r2
 80006cc:	4a4e      	ldr	r2, [pc, #312]	@ (8000808 <sendPixelData+0x1c4>)
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	4413      	add	r3, r2
 80006d2:	460a      	mov	r2, r1
 80006d4:	705a      	strb	r2, [r3, #1]
		   pixel[pin1 - 1].color.g >>= 2;
 80006d6:	7afb      	ldrb	r3, [r7, #11]
 80006d8:	3b01      	subs	r3, #1
 80006da:	4a4b      	ldr	r2, [pc, #300]	@ (8000808 <sendPixelData+0x1c4>)
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	4413      	add	r3, r2
 80006e0:	789a      	ldrb	r2, [r3, #2]
 80006e2:	7afb      	ldrb	r3, [r7, #11]
 80006e4:	3b01      	subs	r3, #1
 80006e6:	0892      	lsrs	r2, r2, #2
 80006e8:	b2d1      	uxtb	r1, r2
 80006ea:	4a47      	ldr	r2, [pc, #284]	@ (8000808 <sendPixelData+0x1c4>)
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	4413      	add	r3, r2
 80006f0:	460a      	mov	r2, r1
 80006f2:	709a      	strb	r2, [r3, #2]
		   pixel[pin1 - 1].color.b >>= 2;
 80006f4:	7afb      	ldrb	r3, [r7, #11]
 80006f6:	3b01      	subs	r3, #1
 80006f8:	4a43      	ldr	r2, [pc, #268]	@ (8000808 <sendPixelData+0x1c4>)
 80006fa:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 80006fe:	7afb      	ldrb	r3, [r7, #11]
 8000700:	3b01      	subs	r3, #1
 8000702:	0892      	lsrs	r2, r2, #2
 8000704:	b2d1      	uxtb	r1, r2
 8000706:	4a40      	ldr	r2, [pc, #256]	@ (8000808 <sendPixelData+0x1c4>)
 8000708:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	   }

	   if (pin2 > 0 && pin2 <= NUM_PIXELS) {
 800070c:	7abb      	ldrb	r3, [r7, #10]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d032      	beq.n	8000778 <sendPixelData+0x134>
 8000712:	7abb      	ldrb	r3, [r7, #10]
 8000714:	2b78      	cmp	r3, #120	@ 0x78
 8000716:	d82f      	bhi.n	8000778 <sendPixelData+0x134>
		   pixel[pin2 - 1] = color;  // Set the color for pin2
 8000718:	7abb      	ldrb	r3, [r7, #10]
 800071a:	3b01      	subs	r3, #1
 800071c:	493a      	ldr	r1, [pc, #232]	@ (8000808 <sendPixelData+0x1c4>)
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		   pixel[pin2 - 1].color.r >>= 2;
 8000724:	7abb      	ldrb	r3, [r7, #10]
 8000726:	3b01      	subs	r3, #1
 8000728:	4a37      	ldr	r2, [pc, #220]	@ (8000808 <sendPixelData+0x1c4>)
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	4413      	add	r3, r2
 800072e:	785a      	ldrb	r2, [r3, #1]
 8000730:	7abb      	ldrb	r3, [r7, #10]
 8000732:	3b01      	subs	r3, #1
 8000734:	0892      	lsrs	r2, r2, #2
 8000736:	b2d1      	uxtb	r1, r2
 8000738:	4a33      	ldr	r2, [pc, #204]	@ (8000808 <sendPixelData+0x1c4>)
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	4413      	add	r3, r2
 800073e:	460a      	mov	r2, r1
 8000740:	705a      	strb	r2, [r3, #1]
		   pixel[pin2 - 1].color.g >>= 2;
 8000742:	7abb      	ldrb	r3, [r7, #10]
 8000744:	3b01      	subs	r3, #1
 8000746:	4a30      	ldr	r2, [pc, #192]	@ (8000808 <sendPixelData+0x1c4>)
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	4413      	add	r3, r2
 800074c:	789a      	ldrb	r2, [r3, #2]
 800074e:	7abb      	ldrb	r3, [r7, #10]
 8000750:	3b01      	subs	r3, #1
 8000752:	0892      	lsrs	r2, r2, #2
 8000754:	b2d1      	uxtb	r1, r2
 8000756:	4a2c      	ldr	r2, [pc, #176]	@ (8000808 <sendPixelData+0x1c4>)
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	4413      	add	r3, r2
 800075c:	460a      	mov	r2, r1
 800075e:	709a      	strb	r2, [r3, #2]
		   pixel[pin2 - 1].color.b >>= 2;
 8000760:	7abb      	ldrb	r3, [r7, #10]
 8000762:	3b01      	subs	r3, #1
 8000764:	4a28      	ldr	r2, [pc, #160]	@ (8000808 <sendPixelData+0x1c4>)
 8000766:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800076a:	7abb      	ldrb	r3, [r7, #10]
 800076c:	3b01      	subs	r3, #1
 800076e:	0892      	lsrs	r2, r2, #2
 8000770:	b2d1      	uxtb	r1, r2
 8000772:	4a25      	ldr	r2, [pc, #148]	@ (8000808 <sendPixelData+0x1c4>)
 8000774:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    for (i = 0; i < numLedPairs; i++) {
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	3301      	adds	r3, #1
 800077c:	617b      	str	r3, [r7, #20]
 800077e:	4b20      	ldr	r3, [pc, #128]	@ (8000800 <sendPixelData+0x1bc>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	461a      	mov	r2, r3
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	4293      	cmp	r3, r2
 8000788:	f6ff af79 	blt.w	800067e <sendPixelData+0x3a>
	   }
   }


    // Transfer data to DMA buffer
    for (i = 0; i < NUM_PIXELS; i++) {
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	e01d      	b.n	80007ce <sendPixelData+0x18a>
        for (j = 23; j >= 0; j--) {
 8000792:	2317      	movs	r3, #23
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	e014      	b.n	80007c2 <sendPixelData+0x17e>
            *pBuff++ = (pixel[i].data >> j) & 0x01 ? NEOPIXEL_ONE : NEOPIXEL_ZERO;
 8000798:	4a1b      	ldr	r2, [pc, #108]	@ (8000808 <sendPixelData+0x1c4>)
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	fa22 f303 	lsr.w	r3, r2, r3
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <sendPixelData+0x16e>
 80007ae:	223a      	movs	r2, #58	@ 0x3a
 80007b0:	e000      	b.n	80007b4 <sendPixelData+0x170>
 80007b2:	221d      	movs	r2, #29
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	1d19      	adds	r1, r3, #4
 80007b8:	60f9      	str	r1, [r7, #12]
 80007ba:	601a      	str	r2, [r3, #0]
        for (j = 23; j >= 0; j--) {
 80007bc:	693b      	ldr	r3, [r7, #16]
 80007be:	3b01      	subs	r3, #1
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	693b      	ldr	r3, [r7, #16]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	dae7      	bge.n	8000798 <sendPixelData+0x154>
    for (i = 0; i < NUM_PIXELS; i++) {
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	3301      	adds	r3, #1
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	2b77      	cmp	r3, #119	@ 0x77
 80007d2:	ddde      	ble.n	8000792 <sendPixelData+0x14e>
        }
    }

    // The last element should be 0
    dmaBuffer[DMA_BUFF_SIZE - 1] = 0;
 80007d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <sendPixelData+0x1c0>)
 80007d6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80007da:	461a      	mov	r2, r3
 80007dc:	2300      	movs	r3, #0
 80007de:	f8c2 3d00 	str.w	r3, [r2, #3328]	@ 0xd00

    PWM_Start_DMA(TIM2, LL_TIM_CHANNEL_CH1, dmaBuffer, DMA_BUFF_SIZE);
 80007e2:	f640 3341 	movw	r3, #2881	@ 0xb41
 80007e6:	4a07      	ldr	r2, [pc, #28]	@ (8000804 <sendPixelData+0x1c0>)
 80007e8:	2101      	movs	r1, #1
 80007ea:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80007ee:	f000 f80f 	bl	8000810 <PWM_Start_DMA>
	LL_mDelay(10);
 80007f2:	200a      	movs	r0, #10
 80007f4:	f003 facc 	bl	8003d90 <LL_mDelay>
}
 80007f8:	3718      	adds	r7, #24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20003e04 	.word	0x20003e04
 8000804:	20000f20 	.word	0x20000f20
 8000808:	20000d40 	.word	0x20000d40
 800080c:	20003c24 	.word	0x20003c24

08000810 <PWM_Start_DMA>:




void PWM_Start_DMA(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t *buffer, uint32_t size)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af02      	add	r7, sp, #8
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
 800081c:	603b      	str	r3, [r7, #0]
    // 1. Configure DMA source and destination
    LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_5,
 800081e:	687a      	ldr	r2, [r7, #4]
                           (uint32_t)buffer,                      // Memory Address (source)
                           (uint32_t)&TIMx->CCR1,                 // Peripheral Address (destination)
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	3334      	adds	r3, #52	@ 0x34
    LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_5,
 8000824:	4619      	mov	r1, r3
 8000826:	2310      	movs	r3, #16
 8000828:	9300      	str	r3, [sp, #0]
 800082a:	460b      	mov	r3, r1
 800082c:	2105      	movs	r1, #5
 800082e:	480f      	ldr	r0, [pc, #60]	@ (800086c <PWM_Start_DMA+0x5c>)
 8000830:	f7ff fddc 	bl	80003ec <LL_DMA_ConfigAddresses>
                           LL_DMA_DIRECTION_MEMORY_TO_PERIPH);    // Memory-to-Peripheral

    // 2. Set number of data items
    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_5, size);
 8000834:	683a      	ldr	r2, [r7, #0]
 8000836:	2105      	movs	r1, #5
 8000838:	480c      	ldr	r0, [pc, #48]	@ (800086c <PWM_Start_DMA+0x5c>)
 800083a:	f7ff fdb5 	bl	80003a8 <LL_DMA_SetDataLength>

    // 3. Enable DMA Transfer Complete Interrupt (optional)
    LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_5);
 800083e:	2105      	movs	r1, #5
 8000840:	480a      	ldr	r0, [pc, #40]	@ (800086c <PWM_Start_DMA+0x5c>)
 8000842:	f7ff fe0d 	bl	8000460 <LL_DMA_EnableIT_TC>

    // 4. Enable DMA Stream
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_5);
 8000846:	2105      	movs	r1, #5
 8000848:	4808      	ldr	r0, [pc, #32]	@ (800086c <PWM_Start_DMA+0x5c>)
 800084a:	f7ff fd8f 	bl	800036c <LL_DMA_EnableChannel>

    // 5. Enable TIM2 DMA request for CC1
    LL_TIM_EnableDMAReq_CC1(TIMx);
 800084e:	68f8      	ldr	r0, [r7, #12]
 8000850:	f7ff fe63 	bl	800051a <LL_TIM_EnableDMAReq_CC1>

    // 6. Enable TIM2 Channel 1 (PWM mode must already be configured)
    LL_TIM_CC_EnableChannel(TIMx, Channel);
 8000854:	68b9      	ldr	r1, [r7, #8]
 8000856:	68f8      	ldr	r0, [r7, #12]
 8000858:	f7ff fe3e 	bl	80004d8 <LL_TIM_CC_EnableChannel>

    // 7. Start Timer
    LL_TIM_EnableCounter(TIMx);
 800085c:	68f8      	ldr	r0, [r7, #12]
 800085e:	f7ff fe1d 	bl	800049c <LL_TIM_EnableCounter>
}
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40020000 	.word	0x40020000

08000870 <LL_TIM_PWM_PulseFinishedCallback>:

void LL_TIM_PWM_PulseFinishedCallback(TIM_TypeDef *TIMx)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	LL_TIM_DisableDMAReq_CC1(TIMx);
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f7ff fe5d 	bl	8000538 <LL_TIM_DisableDMAReq_CC1>
	LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH1);
 800087e:	2101      	movs	r1, #1
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f7ff fe39 	bl	80004f8 <LL_TIM_CC_DisableChannel>
	LL_TIM_DisableCounter(TIMx);
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f7ff fe17 	bl	80004ba <LL_TIM_DisableCounter>
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a4:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <__NVIC_SetPriorityGrouping+0x44>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008aa:	68ba      	ldr	r2, [r7, #8]
 80008ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008b0:	4013      	ands	r3, r2
 80008b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008c6:	4a04      	ldr	r2, [pc, #16]	@ (80008d8 <__NVIC_SetPriorityGrouping+0x44>)
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	60d3      	str	r3, [r2, #12]
}
 80008cc:	bf00      	nop
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e0:	4b04      	ldr	r3, [pc, #16]	@ (80008f4 <__NVIC_GetPriorityGrouping+0x18>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	0a1b      	lsrs	r3, r3, #8
 80008e6:	f003 0307 	and.w	r3, r3, #7
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000906:	2b00      	cmp	r3, #0
 8000908:	db0b      	blt.n	8000922 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	f003 021f 	and.w	r2, r3, #31
 8000910:	4906      	ldr	r1, [pc, #24]	@ (800092c <__NVIC_EnableIRQ+0x34>)
 8000912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000916:	095b      	lsrs	r3, r3, #5
 8000918:	2001      	movs	r0, #1
 800091a:	fa00 f202 	lsl.w	r2, r0, r2
 800091e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	e000e100 	.word	0xe000e100

08000930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	6039      	str	r1, [r7, #0]
 800093a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800093c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000940:	2b00      	cmp	r3, #0
 8000942:	db0a      	blt.n	800095a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	b2da      	uxtb	r2, r3
 8000948:	490c      	ldr	r1, [pc, #48]	@ (800097c <__NVIC_SetPriority+0x4c>)
 800094a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094e:	0112      	lsls	r2, r2, #4
 8000950:	b2d2      	uxtb	r2, r2
 8000952:	440b      	add	r3, r1
 8000954:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000958:	e00a      	b.n	8000970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4908      	ldr	r1, [pc, #32]	@ (8000980 <__NVIC_SetPriority+0x50>)
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	f003 030f 	and.w	r3, r3, #15
 8000966:	3b04      	subs	r3, #4
 8000968:	0112      	lsls	r2, r2, #4
 800096a:	b2d2      	uxtb	r2, r2
 800096c:	440b      	add	r3, r1
 800096e:	761a      	strb	r2, [r3, #24]
}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e000e100 	.word	0xe000e100
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000984:	b480      	push	{r7}
 8000986:	b089      	sub	sp, #36	@ 0x24
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	f1c3 0307 	rsb	r3, r3, #7
 800099e:	2b04      	cmp	r3, #4
 80009a0:	bf28      	it	cs
 80009a2:	2304      	movcs	r3, #4
 80009a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	3304      	adds	r3, #4
 80009aa:	2b06      	cmp	r3, #6
 80009ac:	d902      	bls.n	80009b4 <NVIC_EncodePriority+0x30>
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	3b03      	subs	r3, #3
 80009b2:	e000      	b.n	80009b6 <NVIC_EncodePriority+0x32>
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b8:	f04f 32ff 	mov.w	r2, #4294967295
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43da      	mvns	r2, r3
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	401a      	ands	r2, r3
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009cc:	f04f 31ff 	mov.w	r1, #4294967295
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	fa01 f303 	lsl.w	r3, r1, r3
 80009d6:	43d9      	mvns	r1, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009dc:	4313      	orrs	r3, r2
         );
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3724      	adds	r7, #36	@ 0x24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr

080009e8 <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b089      	sub	sp, #36	@ 0x24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	332c      	adds	r3, #44	@ 0x2c
 80009f8:	4619      	mov	r1, r3
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8000a00:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000a04:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a06:	69ba      	ldr	r2, [r7, #24]
 8000a08:	fa92 f2a2 	rbit	r2, r2
 8000a0c:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000a0e:	697a      	ldr	r2, [r7, #20]
 8000a10:	fab2 f282 	clz	r2, r2
 8000a14:	b2d2      	uxtb	r2, r2
 8000a16:	40d3      	lsrs	r3, r2
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	440b      	add	r3, r1
 8000a1c:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	f003 031f 	and.w	r3, r3, #31
 8000a28:	211f      	movs	r1, #31
 8000a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	401a      	ands	r2, r3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f003 011f 	and.w	r1, r3, #31
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	f003 031f 	and.w	r3, r3, #31
 8000a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a42:	431a      	orrs	r2, r3
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000a48:	bf00      	nop
 8000a4a:	3724      	adds	r7, #36	@ 0x24
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr

08000a52 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000a52:	b480      	push	{r7}
 8000a54:	b08d      	sub	sp, #52	@ 0x34
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	60f8      	str	r0, [r7, #12]
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	330c      	adds	r3, #12
 8000a62:	4619      	mov	r1, r3
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a6a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000a6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a70:	69ba      	ldr	r2, [r7, #24]
 8000a72:	fa92 f2a2 	rbit	r2, r2
 8000a76:	617a      	str	r2, [r7, #20]
  return result;
 8000a78:	697a      	ldr	r2, [r7, #20]
 8000a7a:	fab2 f282 	clz	r2, r2
 8000a7e:	b2d2      	uxtb	r2, r2
 8000a80:	40d3      	lsrs	r3, r2
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	440b      	add	r3, r1
 8000a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  MODIFY_REG(*preg,
 8000a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8000a92:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8000a96:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a98:	6a39      	ldr	r1, [r7, #32]
 8000a9a:	fa91 f1a1 	rbit	r1, r1
 8000a9e:	61f9      	str	r1, [r7, #28]
  return result;
 8000aa0:	69f9      	ldr	r1, [r7, #28]
 8000aa2:	fab1 f181 	clz	r1, r1
 8000aa6:	b2c9      	uxtb	r1, r1
 8000aa8:	40cb      	lsrs	r3, r1
 8000aaa:	2107      	movs	r1, #7
 8000aac:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	401a      	ands	r2, r3
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8000aba:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8000abe:	62b9      	str	r1, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ac0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000ac2:	fa91 f1a1 	rbit	r1, r1
 8000ac6:	6279      	str	r1, [r7, #36]	@ 0x24
  return result;
 8000ac8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000aca:	fab1 f181 	clz	r1, r1
 8000ace:	b2c9      	uxtb	r1, r1
 8000ad0:	40cb      	lsrs	r3, r1
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad8:	431a      	orrs	r2, r3
 8000ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000adc:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8000ade:	bf00      	nop
 8000ae0:	3734      	adds	r7, #52	@ 0x34
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <LL_DMA_SetDataTransferDirection>:
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	4a0c      	ldr	r2, [pc, #48]	@ (8000b2c <LL_DMA_SetDataTransferDirection+0x44>)
 8000afa:	5cd3      	ldrb	r3, [r2, r3]
 8000afc:	461a      	mov	r2, r3
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	4413      	add	r3, r2
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000b08:	f023 0310 	bic.w	r3, r3, #16
 8000b0c:	68ba      	ldr	r2, [r7, #8]
 8000b0e:	3a01      	subs	r2, #1
 8000b10:	4906      	ldr	r1, [pc, #24]	@ (8000b2c <LL_DMA_SetDataTransferDirection+0x44>)
 8000b12:	5c8a      	ldrb	r2, [r1, r2]
 8000b14:	4611      	mov	r1, r2
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	440a      	add	r2, r1
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	600b      	str	r3, [r1, #0]
}
 8000b22:	bf00      	nop
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	08006670 	.word	0x08006670

08000b30 <LL_DMA_SetMode>:
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	4a0b      	ldr	r2, [pc, #44]	@ (8000b70 <LL_DMA_SetMode+0x40>)
 8000b42:	5cd3      	ldrb	r3, [r2, r3]
 8000b44:	461a      	mov	r2, r3
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	4413      	add	r3, r2
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f023 0220 	bic.w	r2, r3, #32
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	4906      	ldr	r1, [pc, #24]	@ (8000b70 <LL_DMA_SetMode+0x40>)
 8000b56:	5ccb      	ldrb	r3, [r1, r3]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	440b      	add	r3, r1
 8000b5e:	4619      	mov	r1, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	600b      	str	r3, [r1, #0]
}
 8000b66:	bf00      	nop
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr
 8000b70:	08006670 	.word	0x08006670

08000b74 <LL_DMA_SetPeriphIncMode>:
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	4a0b      	ldr	r2, [pc, #44]	@ (8000bb4 <LL_DMA_SetPeriphIncMode+0x40>)
 8000b86:	5cd3      	ldrb	r3, [r2, r3]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	4906      	ldr	r1, [pc, #24]	@ (8000bb4 <LL_DMA_SetPeriphIncMode+0x40>)
 8000b9a:	5ccb      	ldrb	r3, [r1, r3]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	440b      	add	r3, r1
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	600b      	str	r3, [r1, #0]
}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	08006670 	.word	0x08006670

08000bb8 <LL_DMA_SetMemoryIncMode>:
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	4a0b      	ldr	r2, [pc, #44]	@ (8000bf8 <LL_DMA_SetMemoryIncMode+0x40>)
 8000bca:	5cd3      	ldrb	r3, [r2, r3]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	4906      	ldr	r1, [pc, #24]	@ (8000bf8 <LL_DMA_SetMemoryIncMode+0x40>)
 8000bde:	5ccb      	ldrb	r3, [r1, r3]
 8000be0:	4619      	mov	r1, r3
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	440b      	add	r3, r1
 8000be6:	4619      	mov	r1, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	600b      	str	r3, [r1, #0]
}
 8000bee:	bf00      	nop
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	08006670 	.word	0x08006670

08000bfc <LL_DMA_SetPeriphSize>:
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c3c <LL_DMA_SetPeriphSize+0x40>)
 8000c0e:	5cd3      	ldrb	r3, [r2, r3]
 8000c10:	461a      	mov	r2, r3
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	4413      	add	r3, r2
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	4906      	ldr	r1, [pc, #24]	@ (8000c3c <LL_DMA_SetPeriphSize+0x40>)
 8000c22:	5ccb      	ldrb	r3, [r1, r3]
 8000c24:	4619      	mov	r1, r3
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	440b      	add	r3, r1
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	600b      	str	r3, [r1, #0]
}
 8000c32:	bf00      	nop
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr
 8000c3c:	08006670 	.word	0x08006670

08000c40 <LL_DMA_SetMemorySize>:
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	4a0b      	ldr	r2, [pc, #44]	@ (8000c80 <LL_DMA_SetMemorySize+0x40>)
 8000c52:	5cd3      	ldrb	r3, [r2, r3]
 8000c54:	461a      	mov	r2, r3
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	4413      	add	r3, r2
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	4906      	ldr	r1, [pc, #24]	@ (8000c80 <LL_DMA_SetMemorySize+0x40>)
 8000c66:	5ccb      	ldrb	r3, [r1, r3]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	440b      	add	r3, r1
 8000c6e:	4619      	mov	r1, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	600b      	str	r3, [r1, #0]
}
 8000c76:	bf00      	nop
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	08006670 	.word	0x08006670

08000c84 <LL_DMA_SetChannelPriorityLevel>:
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc4 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000c96:	5cd3      	ldrb	r3, [r2, r3]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	4906      	ldr	r1, [pc, #24]	@ (8000cc4 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000caa:	5ccb      	ldrb	r3, [r1, r3]
 8000cac:	4619      	mov	r1, r3
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	440b      	add	r3, r1
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	600b      	str	r3, [r1, #0]
}
 8000cba:	bf00      	nop
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr
 8000cc4:	08006670 	.word	0x08006670

08000cc8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000ccc:	4b04      	ldr	r3, [pc, #16]	@ (8000ce0 <LL_RCC_HSE_Enable+0x18>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a03      	ldr	r2, [pc, #12]	@ (8000ce0 <LL_RCC_HSE_Enable+0x18>)
 8000cd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000ce8:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <LL_RCC_HSE_IsReady+0x20>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000cf4:	bf0c      	ite	eq
 8000cf6:	2301      	moveq	r3, #1
 8000cf8:	2300      	movne	r3, #0
 8000cfa:	b2db      	uxtb	r3, r3
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	40021000 	.word	0x40021000

08000d08 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000d10:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <LL_RCC_SetSysClkSource+0x24>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f023 0203 	bic.w	r2, r3, #3
 8000d18:	4904      	ldr	r1, [pc, #16]	@ (8000d2c <LL_RCC_SetSysClkSource+0x24>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	604b      	str	r3, [r1, #4]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40021000 	.word	0x40021000

08000d30 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000d34:	4b03      	ldr	r3, [pc, #12]	@ (8000d44 <LL_RCC_GetSysClkSource+0x14>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f003 030c 	and.w	r3, r3, #12
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr
 8000d44:	40021000 	.word	0x40021000

08000d48 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <LL_RCC_SetAHBPrescaler+0x24>)
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d58:	4904      	ldr	r1, [pc, #16]	@ (8000d6c <LL_RCC_SetAHBPrescaler+0x24>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	604b      	str	r3, [r1, #4]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	40021000 	.word	0x40021000

08000d70 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000d78:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000d80:	4904      	ldr	r1, [pc, #16]	@ (8000d94 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	604b      	str	r3, [r1, #4]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40021000 	.word	0x40021000

08000d98 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <LL_RCC_SetAPB2Prescaler+0x24>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000da8:	4904      	ldr	r1, [pc, #16]	@ (8000dbc <LL_RCC_SetAPB2Prescaler+0x24>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	604b      	str	r3, [r1, #4]
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bc80      	pop	{r7}
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	40021000 	.word	0x40021000

08000dc0 <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <LL_RCC_SetADCClockSource+0x24>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000dd0:	4904      	ldr	r1, [pc, #16]	@ (8000de4 <LL_RCC_SetADCClockSource+0x24>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	604b      	str	r3, [r1, #4]
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000

08000de8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000dec:	4b04      	ldr	r3, [pc, #16]	@ (8000e00 <LL_RCC_PLL_Enable+0x18>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a03      	ldr	r2, [pc, #12]	@ (8000e00 <LL_RCC_PLL_Enable+0x18>)
 8000df2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000df6:	6013      	str	r3, [r2, #0]
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr
 8000e00:	40021000 	.word	0x40021000

08000e04 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000e08:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <LL_RCC_PLL_IsReady+0x20>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000e14:	bf0c      	ite	eq
 8000e16:	2301      	moveq	r3, #1
 8000e18:	2300      	movne	r3, #0
 8000e1a:	b2db      	uxtb	r3, r3
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr
 8000e24:	40021000 	.word	0x40021000

08000e28 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8000e32:	4b11      	ldr	r3, [pc, #68]	@ (8000e78 <LL_RCC_PLL_ConfigDomain_SYS+0x50>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	430b      	orrs	r3, r1
 8000e44:	490c      	ldr	r1, [pc, #48]	@ (8000e78 <LL_RCC_PLL_ConfigDomain_SYS+0x50>)
 8000e46:	4313      	orrs	r3, r2
 8000e48:	604b      	str	r3, [r1, #4]
             (Source & (RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE)) | PLLMul);
#if defined(RCC_CFGR2_PREDIV1)
#if defined(RCC_CFGR2_PREDIV1SRC)
  MODIFY_REG(RCC->CFGR2, (RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC),
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e78 <LL_RCC_PLL_ConfigDomain_SYS+0x50>)
 8000e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e52:	f023 030f 	bic.w	r3, r3, #15
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	f002 010f 	and.w	r1, r2, #15
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	0912      	lsrs	r2, r2, #4
 8000e60:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8000e64:	430a      	orrs	r2, r1
 8000e66:	4904      	ldr	r1, [pc, #16]	@ (8000e78 <LL_RCC_PLL_ConfigDomain_SYS+0x50>)
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	62cb      	str	r3, [r1, #44]	@ 0x2c
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40021000 	.word	0x40021000

08000e7c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000e84:	4b08      	ldr	r3, [pc, #32]	@ (8000ea8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e86:	695a      	ldr	r2, [r3, #20]
 8000e88:	4907      	ldr	r1, [pc, #28]	@ (8000ea8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000e90:	4b05      	ldr	r3, [pc, #20]	@ (8000ea8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e92:	695a      	ldr	r2, [r3, #20]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4013      	ands	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40021000 	.word	0x40021000

08000eac <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000eb4:	4b08      	ldr	r3, [pc, #32]	@ (8000ed8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000eb6:	69da      	ldr	r2, [r3, #28]
 8000eb8:	4907      	ldr	r1, [pc, #28]	@ (8000ed8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000ec0:	4b05      	ldr	r3, [pc, #20]	@ (8000ed8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ec2:	69da      	ldr	r2, [r3, #28]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eca:	68fb      	ldr	r3, [r7, #12]
}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40021000 	.word	0x40021000

08000edc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ee4:	4b08      	ldr	r3, [pc, #32]	@ (8000f08 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ee6:	699a      	ldr	r2, [r3, #24]
 8000ee8:	4907      	ldr	r1, [pc, #28]	@ (8000f08 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ef0:	4b05      	ldr	r3, [pc, #20]	@ (8000f08 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ef2:	699a      	ldr	r2, [r3, #24]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000efa:	68fb      	ldr	r3, [r7, #12]
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40021000 	.word	0x40021000

08000f0c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <LL_FLASH_SetLatency+0x24>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f023 0207 	bic.w	r2, r3, #7
 8000f1c:	4904      	ldr	r1, [pc, #16]	@ (8000f30 <LL_FLASH_SetLatency+0x24>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	600b      	str	r3, [r1, #0]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40022000 	.word	0x40022000

08000f34 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000f38:	4b03      	ldr	r3, [pc, #12]	@ (8000f48 <LL_FLASH_GetLatency+0x14>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 0307 	and.w	r3, r3, #7
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr
 8000f48:	40022000 	.word	0x40022000

08000f4c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000f54:	4b05      	ldr	r3, [pc, #20]	@ (8000f6c <LL_EXTI_EnableIT_0_31+0x20>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4904      	ldr	r1, [pc, #16]	@ (8000f6c <LL_EXTI_EnableIT_0_31+0x20>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	600b      	str	r3, [r1, #0]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40010400 	.word	0x40010400

08000f70 <LL_TIM_DisableARRPreload>:
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	601a      	str	r2, [r3, #0]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
	...

08000f90 <LL_TIM_OC_DisableFast>:
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d01c      	beq.n	8000fda <LL_TIM_OC_DisableFast+0x4a>
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	d017      	beq.n	8000fd6 <LL_TIM_OC_DisableFast+0x46>
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	2b10      	cmp	r3, #16
 8000faa:	d012      	beq.n	8000fd2 <LL_TIM_OC_DisableFast+0x42>
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	2b40      	cmp	r3, #64	@ 0x40
 8000fb0:	d00d      	beq.n	8000fce <LL_TIM_OC_DisableFast+0x3e>
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fb8:	d007      	beq.n	8000fca <LL_TIM_OC_DisableFast+0x3a>
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fc0:	d101      	bne.n	8000fc6 <LL_TIM_OC_DisableFast+0x36>
 8000fc2:	2305      	movs	r3, #5
 8000fc4:	e00a      	b.n	8000fdc <LL_TIM_OC_DisableFast+0x4c>
 8000fc6:	2306      	movs	r3, #6
 8000fc8:	e008      	b.n	8000fdc <LL_TIM_OC_DisableFast+0x4c>
 8000fca:	2304      	movs	r3, #4
 8000fcc:	e006      	b.n	8000fdc <LL_TIM_OC_DisableFast+0x4c>
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e004      	b.n	8000fdc <LL_TIM_OC_DisableFast+0x4c>
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	e002      	b.n	8000fdc <LL_TIM_OC_DisableFast+0x4c>
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e000      	b.n	8000fdc <LL_TIM_OC_DisableFast+0x4c>
 8000fda:	2300      	movs	r3, #0
 8000fdc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3318      	adds	r3, #24
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8001010 <LL_TIM_OC_DisableFast+0x80>)
 8000fe8:	5cd3      	ldrb	r3, [r2, r3]
 8000fea:	440b      	add	r3, r1
 8000fec:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	4907      	ldr	r1, [pc, #28]	@ (8001014 <LL_TIM_OC_DisableFast+0x84>)
 8000ff6:	5ccb      	ldrb	r3, [r1, r3]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	408b      	lsls	r3, r1
 8000ffe:	43db      	mvns	r3, r3
 8001000:	401a      	ands	r2, r3
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	601a      	str	r2, [r3, #0]
}
 8001006:	bf00      	nop
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr
 8001010:	08006678 	.word	0x08006678
 8001014:	08006680 	.word	0x08006680

08001018 <LL_TIM_OC_EnablePreload>:
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d01c      	beq.n	8001062 <LL_TIM_OC_EnablePreload+0x4a>
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	2b04      	cmp	r3, #4
 800102c:	d017      	beq.n	800105e <LL_TIM_OC_EnablePreload+0x46>
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	2b10      	cmp	r3, #16
 8001032:	d012      	beq.n	800105a <LL_TIM_OC_EnablePreload+0x42>
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	2b40      	cmp	r3, #64	@ 0x40
 8001038:	d00d      	beq.n	8001056 <LL_TIM_OC_EnablePreload+0x3e>
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001040:	d007      	beq.n	8001052 <LL_TIM_OC_EnablePreload+0x3a>
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001048:	d101      	bne.n	800104e <LL_TIM_OC_EnablePreload+0x36>
 800104a:	2305      	movs	r3, #5
 800104c:	e00a      	b.n	8001064 <LL_TIM_OC_EnablePreload+0x4c>
 800104e:	2306      	movs	r3, #6
 8001050:	e008      	b.n	8001064 <LL_TIM_OC_EnablePreload+0x4c>
 8001052:	2304      	movs	r3, #4
 8001054:	e006      	b.n	8001064 <LL_TIM_OC_EnablePreload+0x4c>
 8001056:	2303      	movs	r3, #3
 8001058:	e004      	b.n	8001064 <LL_TIM_OC_EnablePreload+0x4c>
 800105a:	2302      	movs	r3, #2
 800105c:	e002      	b.n	8001064 <LL_TIM_OC_EnablePreload+0x4c>
 800105e:	2301      	movs	r3, #1
 8001060:	e000      	b.n	8001064 <LL_TIM_OC_EnablePreload+0x4c>
 8001062:	2300      	movs	r3, #0
 8001064:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3318      	adds	r3, #24
 800106a:	4619      	mov	r1, r3
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	4a0a      	ldr	r2, [pc, #40]	@ (8001098 <LL_TIM_OC_EnablePreload+0x80>)
 8001070:	5cd3      	ldrb	r3, [r2, r3]
 8001072:	440b      	add	r3, r1
 8001074:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	4907      	ldr	r1, [pc, #28]	@ (800109c <LL_TIM_OC_EnablePreload+0x84>)
 800107e:	5ccb      	ldrb	r3, [r1, r3]
 8001080:	4619      	mov	r1, r3
 8001082:	2308      	movs	r3, #8
 8001084:	408b      	lsls	r3, r1
 8001086:	431a      	orrs	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	601a      	str	r2, [r3, #0]
}
 800108c:	bf00      	nop
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	08006678 	.word	0x08006678
 800109c:	08006680 	.word	0x08006680

080010a0 <LL_TIM_SetClockSource>:
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80010b2:	f023 0307 	bic.w	r3, r3, #7
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	431a      	orrs	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	609a      	str	r2, [r3, #8]
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <LL_TIM_SetTriggerOutput>:
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	431a      	orrs	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	605a      	str	r2, [r3, #4]
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr

080010ec <LL_TIM_DisableMasterSlaveMode>:
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	609a      	str	r2, [r3, #8]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr

0800110a <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	60da      	str	r2, [r3, #12]
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	615a      	str	r2, [r3, #20]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr

08001152 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001162:	2b40      	cmp	r3, #64	@ 0x40
 8001164:	bf0c      	ite	eq
 8001166:	2301      	moveq	r3, #1
 8001168:	2300      	movne	r3, #0
 800116a:	b2db      	uxtb	r3, r3
}
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr

08001176 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001186:	2b80      	cmp	r3, #128	@ 0x80
 8001188:	bf0c      	ite	eq
 800118a:	2301      	moveq	r3, #1
 800118c:	2300      	movne	r3, #0
 800118e:	b2db      	uxtb	r3, r3
}
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr

0800119a <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800119a:	b480      	push	{r7}
 800119c:	b089      	sub	sp, #36	@ 0x24
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	330c      	adds	r3, #12
 80011a6:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	e853 3f00 	ldrex	r3, [r3]
 80011ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	f043 0320 	orr.w	r3, r3, #32
 80011b6:	61fb      	str	r3, [r7, #28]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	330c      	adds	r3, #12
 80011bc:	69fa      	ldr	r2, [r7, #28]
 80011be:	61ba      	str	r2, [r7, #24]
 80011c0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80011c2:	6979      	ldr	r1, [r7, #20]
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	e841 2300 	strex	r3, r2, [r1]
 80011ca:	613b      	str	r3, [r7, #16]
   return(result);
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1e7      	bne.n	80011a2 <LL_USART_EnableIT_RXNE+0x8>
}
 80011d2:	bf00      	nop
 80011d4:	bf00      	nop
 80011d6:	3724      	adds	r7, #36	@ 0x24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr

080011de <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	460b      	mov	r3, r1
 80011e8:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80011ea:	78fa      	ldrb	r2, [r7, #3]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	605a      	str	r2, [r3, #4]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr

080011fa <LL_GPIO_SetPinMode>:
{
 80011fa:	b490      	push	{r4, r7}
 80011fc:	b088      	sub	sp, #32
 80011fe:	af00      	add	r7, sp, #0
 8001200:	60f8      	str	r0, [r7, #12]
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	461a      	mov	r2, r3
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	0e1b      	lsrs	r3, r3, #24
 800120e:	4413      	add	r3, r2
 8001210:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001212:	6822      	ldr	r2, [r4, #0]
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fa93 f3a3 	rbit	r3, r3
 800121e:	613b      	str	r3, [r7, #16]
  return result;
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	fab3 f383 	clz	r3, r3
 8001226:	b2db      	uxtb	r3, r3
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	210f      	movs	r1, #15
 800122c:	fa01 f303 	lsl.w	r3, r1, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	401a      	ands	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	fa93 f3a3 	rbit	r3, r3
 800123e:	61bb      	str	r3, [r7, #24]
  return result;
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	fab3 f383 	clz	r3, r3
 8001246:	b2db      	uxtb	r3, r3
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	fa01 f303 	lsl.w	r3, r1, r3
 8001250:	4313      	orrs	r3, r2
 8001252:	6023      	str	r3, [r4, #0]
}
 8001254:	bf00      	nop
 8001256:	3720      	adds	r7, #32
 8001258:	46bd      	mov	sp, r7
 800125a:	bc90      	pop	{r4, r7}
 800125c:	4770      	bx	lr

0800125e <LL_GPIO_SetOutputPin>:
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
 8001266:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	0a1b      	lsrs	r3, r3, #8
 800126c:	b29a      	uxth	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	611a      	str	r2, [r3, #16]
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr

0800127c <LL_GPIO_ResetOutputPin>:
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	0a1b      	lsrs	r3, r3, #8
 800128a:	b29a      	uxth	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	615a      	str	r2, [r3, #20]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
	...

0800129c <LL_GPIO_AF_EnableRemap_USART2>:
  * @rmtoll MAPR          USART2_REMAP           LL_GPIO_AF_EnableRemap_USART2
  * @note  ENABLE: Remap     (CTS/PD3, RTS/PD4, TX/PD5, RX/PD6, CK/PD7)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_USART2(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_USART2_REMAP | AFIO_MAPR_SWJ_CFG);
 80012a0:	4b05      	ldr	r3, [pc, #20]	@ (80012b8 <LL_GPIO_AF_EnableRemap_USART2+0x1c>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	4a04      	ldr	r2, [pc, #16]	@ (80012b8 <LL_GPIO_AF_EnableRemap_USART2+0x1c>)
 80012a6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80012aa:	f043 0308 	orr.w	r3, r3, #8
 80012ae:	6053      	str	r3, [r2, #4]
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	40010000 	.word	0x40010000

080012bc <LL_GPIO_AF_RemapPartial1_TIM2>:
  * @rmtoll MAPR          TIM2_REMAP           LL_GPIO_AF_RemapPartial1_TIM2
  * @note  PARTIAL_1: Partial remap (CH1/ETR/PA15, CH2/PB3, CH3/PA2,  CH4/PA3)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_RemapPartial1_TIM2(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM2_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1 | AFIO_MAPR_SWJ_CFG));
 80012c0:	4b07      	ldr	r3, [pc, #28]	@ (80012e0 <LL_GPIO_AF_RemapPartial1_TIM2+0x24>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80012c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80012cc:	4a04      	ldr	r2, [pc, #16]	@ (80012e0 <LL_GPIO_AF_RemapPartial1_TIM2+0x24>)
 80012ce:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80012d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012d6:	6053      	str	r3, [r2, #4]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	40010000 	.word	0x40010000

080012e4 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 80012e8:	4b05      	ldr	r3, [pc, #20]	@ (8001300 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80012f0:	4a03      	ldr	r2, [pc, #12]	@ (8001300 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 80012f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012f6:	6053      	str	r3, [r2, #4]
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr
 8001300:	40010000 	.word	0x40010000

08001304 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800130e:	4a13      	ldr	r2, [pc, #76]	@ (800135c <LL_GPIO_AF_SetEXTISource+0x58>)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	b2db      	uxtb	r3, r3
 8001314:	3302      	adds	r3, #2
 8001316:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	0c1b      	lsrs	r3, r3, #16
 800131e:	43db      	mvns	r3, r3
 8001320:	ea02 0103 	and.w	r1, r2, r3
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	0c1b      	lsrs	r3, r3, #16
 8001328:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	fa93 f3a3 	rbit	r3, r3
 8001330:	60bb      	str	r3, [r7, #8]
  return result;
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	fab3 f383 	clz	r3, r3
 8001338:	b2db      	uxtb	r3, r3
 800133a:	461a      	mov	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	fa03 f202 	lsl.w	r2, r3, r2
 8001342:	4806      	ldr	r0, [pc, #24]	@ (800135c <LL_GPIO_AF_SetEXTISource+0x58>)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	430a      	orrs	r2, r1
 800134a:	3302      	adds	r3, #2
 800134c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001350:	bf00      	nop
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40010000 	.word	0x40010000

08001360 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Погледни чата с г-н Стефанов, _write e блокираща функция

int _write(int file, char *ptr, int len) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	e011      	b.n	8001396 <_write+0x36>
        while (!LL_USART_IsActiveFlag_TXE(USART2));  // Wait until TX buffer is empty
 8001372:	bf00      	nop
 8001374:	4810      	ldr	r0, [pc, #64]	@ (80013b8 <_write+0x58>)
 8001376:	f7ff fefe 	bl	8001176 <LL_USART_IsActiveFlag_TXE>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0f9      	beq.n	8001374 <_write+0x14>
        LL_USART_TransmitData8(USART2, ptr[i]);      // Send byte
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	4413      	add	r3, r2
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	480b      	ldr	r0, [pc, #44]	@ (80013b8 <_write+0x58>)
 800138c:	f7ff ff27 	bl	80011de <LL_USART_TransmitData8>
    for (int i = 0; i < len; i++) {
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	3301      	adds	r3, #1
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	429a      	cmp	r2, r3
 800139c:	dbe9      	blt.n	8001372 <_write+0x12>
    }

    while (!LL_USART_IsActiveFlag_TC(USART2));  // Wait for last transmission to complete
 800139e:	bf00      	nop
 80013a0:	4805      	ldr	r0, [pc, #20]	@ (80013b8 <_write+0x58>)
 80013a2:	f7ff fed6 	bl	8001152 <LL_USART_IsActiveFlag_TC>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0f9      	beq.n	80013a0 <_write+0x40>
    return len;
 80013ac:	687b      	ldr	r3, [r7, #4]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40004400 	.word	0x40004400

080013bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 80013c2:	2001      	movs	r0, #1
 80013c4:	f7ff fd8a 	bl	8000edc <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80013c8:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80013cc:	f7ff fd6e 	bl	8000eac <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d0:	2003      	movs	r0, #3
 80013d2:	f7ff fa5f 	bl	8000894 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80013d6:	f7ff fa81 	bl	80008dc <__NVIC_GetPriorityGrouping>
 80013da:	4603      	mov	r3, r0
 80013dc:	2200      	movs	r2, #0
 80013de:	210f      	movs	r1, #15
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff facf 	bl	8000984 <NVIC_EncodePriority>
 80013e6:	4603      	mov	r3, r0
 80013e8:	4619      	mov	r1, r3
 80013ea:	f04f 30ff 	mov.w	r0, #4294967295
 80013ee:	f7ff fa9f 	bl	8000930 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 80013f2:	f7ff ff77 	bl	80012e4 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f6:	f000 f851 	bl	800149c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013fa:	f000 faf9 	bl	80019f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80013fe:	f000 fadf 	bl	80019c0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001402:	f000 f88d 	bl	8001520 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001406:	f000 f9b3 	bl	8001770 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800140a:	f000 fa19 	bl	8001840 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800140e:	f000 fa6f 	bl	80018f0 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8001412:	f000 f983 	bl	800171c <MX_TIM6_Init>
  MX_TIM2_Init();
 8001416:	f000 f8e5 	bl	80015e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Enable UART Interupts
  LL_USART_EnableIT_RXNE(USART1);
 800141a:	481a      	ldr	r0, [pc, #104]	@ (8001484 <main+0xc8>)
 800141c:	f7ff febd 	bl	800119a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART3);
 8001420:	4819      	ldr	r0, [pc, #100]	@ (8001488 <main+0xcc>)
 8001422:	f7ff feba 	bl	800119a <LL_USART_EnableIT_RXNE>

  // Enable EXTI Fault GPIO Interrupts
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_12);
 8001426:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800142a:	f7ff fd8f 	bl	8000f4c <LL_EXTI_EnableIT_0_31>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_13);
 800142e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001432:	f7ff fd8b 	bl	8000f4c <LL_EXTI_EnableIT_0_31>

  SignalAnalyzer_Init();
 8001436:	f001 fae1 	bl	80029fc <SignalAnalyzer_Init>

  // Reset all Muxes
  LL_GPIO_SetOutputPin(RST_GPIO, RST_PIN);
 800143a:	4914      	ldr	r1, [pc, #80]	@ (800148c <main+0xd0>)
 800143c:	4814      	ldr	r0, [pc, #80]	@ (8001490 <main+0xd4>)
 800143e:	f7ff ff0e 	bl	800125e <LL_GPIO_SetOutputPin>
  LL_mDelay(20);
 8001442:	2014      	movs	r0, #20
 8001444:	f002 fca4 	bl	8003d90 <LL_mDelay>
  LL_GPIO_ResetOutputPin(RST_GPIO, RST_PIN);
 8001448:	4910      	ldr	r1, [pc, #64]	@ (800148c <main+0xd0>)
 800144a:	4811      	ldr	r0, [pc, #68]	@ (8001490 <main+0xd4>)
 800144c:	f7ff ff16 	bl	800127c <LL_GPIO_ResetOutputPin>
  LL_mDelay(20);
 8001450:	2014      	movs	r0, #20
 8001452:	f002 fc9d 	bl	8003d90 <LL_mDelay>

  // Enable Protection
  LL_GPIO_SetOutputPin(PROTECTION_GPIO, PROTECTION_PIN);
 8001456:	490f      	ldr	r1, [pc, #60]	@ (8001494 <main+0xd8>)
 8001458:	480f      	ldr	r0, [pc, #60]	@ (8001498 <main+0xdc>)
 800145a:	f7ff ff00 	bl	800125e <LL_GPIO_SetOutputPin>
//  for (int i = 0; i < 34; i++){
//	  setConnection(0, 0, muxes[i], 1);
//	  printf("I have set connection for mux[%d] on x0, y0 \n", i);
//  }

  	RGB_t color1 = { .color = { .r = 255, .g = 0, .b = 0 } };  // Red color
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	23ff      	movs	r3, #255	@ 0xff
 8001464:	717b      	strb	r3, [r7, #5]
//    RGB_t color2 = { .color = { .r = 0, .g = 255, .b = 0 } };  // Green color
//    RGB_t color3 = { .color = { .r = 0, .g = 0, .b = 255 } };  // Blue color
//    RGB_t color4 = { .color = { .r = 255, .g = 255, .b = 0 } };  // Yellow color
//
    addToPins(62, 33, color1);			//it starts from 1 and ends with 120
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	2121      	movs	r1, #33	@ 0x21
 800146a:	203e      	movs	r0, #62	@ 0x3e
 800146c:	f7ff f874 	bl	8000558 <addToPins>
    addToPins(10, 20, color1);
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	2114      	movs	r1, #20
 8001474:	200a      	movs	r0, #10
 8001476:	f7ff f86f 	bl	8000558 <addToPins>
//    addToPins(30, 50, color3);
//    addToPins(40, 60, color4);
//    addToPins(80, 100, color4);
//    removeFromPins(80,100);
		  sendPixelData();
 800147a:	f7ff f8e3 	bl	8000644 <sendPixelData>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  while (1)
 800147e:	bf00      	nop
 8001480:	e7fd      	b.n	800147e <main+0xc2>
 8001482:	bf00      	nop
 8001484:	40013800 	.word	0x40013800
 8001488:	40004800 	.word	0x40004800
 800148c:	04020002 	.word	0x04020002
 8001490:	40010c00 	.word	0x40010c00
 8001494:	04080008 	.word	0x04080008
 8001498:	40011800 	.word	0x40011800

0800149c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80014a0:	2002      	movs	r0, #2
 80014a2:	f7ff fd33 	bl	8000f0c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 80014a6:	bf00      	nop
 80014a8:	f7ff fd44 	bl	8000f34 <LL_FLASH_GetLatency>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d1fa      	bne.n	80014a8 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 80014b2:	f7ff fc09 	bl	8000cc8 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80014b6:	bf00      	nop
 80014b8:	f7ff fc14 	bl	8000ce4 <LL_RCC_HSE_IsReady>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d1fa      	bne.n	80014b8 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 80014c2:	f44f 11e0 	mov.w	r1, #1835008	@ 0x1c0000
 80014c6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80014ca:	f7ff fcad 	bl	8000e28 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80014ce:	f7ff fc8b 	bl	8000de8 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80014d2:	bf00      	nop
 80014d4:	f7ff fc96 	bl	8000e04 <LL_RCC_PLL_IsReady>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d1fa      	bne.n	80014d4 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80014de:	2000      	movs	r0, #0
 80014e0:	f7ff fc32 	bl	8000d48 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80014e4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80014e8:	f7ff fc42 	bl	8000d70 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80014ec:	2000      	movs	r0, #0
 80014ee:	f7ff fc53 	bl	8000d98 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80014f2:	2002      	movs	r0, #2
 80014f4:	f7ff fc08 	bl	8000d08 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80014f8:	bf00      	nop
 80014fa:	f7ff fc19 	bl	8000d30 <LL_RCC_GetSysClkSource>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b08      	cmp	r3, #8
 8001502:	d1fa      	bne.n	80014fa <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(72000000);
 8001504:	4805      	ldr	r0, [pc, #20]	@ (800151c <SystemClock_Config+0x80>)
 8001506:	f002 fc35 	bl	8003d74 <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 800150a:	4804      	ldr	r0, [pc, #16]	@ (800151c <SystemClock_Config+0x80>)
 800150c:	f002 fc64 	bl	8003dd8 <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_6);
 8001510:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001514:	f7ff fc54 	bl	8000dc0 <LL_RCC_SetADCClockSource>
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	044aa200 	.word	0x044aa200

08001520 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08e      	sub	sp, #56	@ 0x38
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001526:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001530:	2300      	movs	r3, #0
 8001532:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001534:	f107 0318 	add.w	r3, r7, #24
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
 8001550:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001552:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001556:	f7ff fcc1 	bl	8000edc <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800155a:	2004      	movs	r0, #4
 800155c:	f7ff fcbe 	bl	8000edc <LL_APB2_GRP1_EnableClock>
  PA4   ------> ADC1_IN4
  PA5   ------> ADC1_IN5
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8001560:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001564:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	4619      	mov	r1, r3
 800156e:	481a      	ldr	r0, [pc, #104]	@ (80015d8 <MX_ADC1_Init+0xb8>)
 8001570:	f001 fe69 	bl	8003246 <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001574:	2300      	movs	r3, #0
 8001576:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8001578:	2300      	movs	r3, #0
 800157a:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800157c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001580:	4619      	mov	r1, r3
 8001582:	4816      	ldr	r0, [pc, #88]	@ (80015dc <MX_ADC1_Init+0xbc>)
 8001584:	f001 fc2a 	bl	8002ddc <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8001588:	2300      	movs	r3, #0
 800158a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 800158c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001590:	4619      	mov	r1, r3
 8001592:	4812      	ldr	r0, [pc, #72]	@ (80015dc <MX_ADC1_Init+0xbc>)
 8001594:	f001 fbf0 	bl	8002d78 <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001598:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
 800159c:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 80015a6:	2302      	movs	r3, #2
 80015a8:	627b      	str	r3, [r7, #36]	@ 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80015ae:	f107 0318 	add.w	r3, r7, #24
 80015b2:	4619      	mov	r1, r3
 80015b4:	4809      	ldr	r0, [pc, #36]	@ (80015dc <MX_ADC1_Init+0xbc>)
 80015b6:	f001 fc38 	bl	8002e2a <LL_ADC_REG_Init>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 80015ba:	4a09      	ldr	r2, [pc, #36]	@ (80015e0 <MX_ADC1_Init+0xc0>)
 80015bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015c0:	4806      	ldr	r0, [pc, #24]	@ (80015dc <MX_ADC1_Init+0xbc>)
 80015c2:	f7ff fa11 	bl	80009e8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80015c6:	2200      	movs	r2, #0
 80015c8:	4905      	ldr	r1, [pc, #20]	@ (80015e0 <MX_ADC1_Init+0xc0>)
 80015ca:	4804      	ldr	r0, [pc, #16]	@ (80015dc <MX_ADC1_Init+0xbc>)
 80015cc:	f7ff fa41 	bl	8000a52 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	3738      	adds	r7, #56	@ 0x38
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40010800 	.word	0x40010800
 80015dc:	40012400 	.word	0x40012400
 80015e0:	02300001 	.word	0x02300001

080015e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b092      	sub	sp, #72	@ 0x48
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80015ea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
 80015f8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	2220      	movs	r2, #32
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f002 ff24 	bl	8004450 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	463b      	mov	r3, r7
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001616:	2001      	movs	r0, #1
 8001618:	f7ff fc48 	bl	8000eac <LL_APB1_GRP1_EnableClock>

  /* TIM2 DMA Init */

  /* TIM2_CH1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_5, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800161c:	2210      	movs	r2, #16
 800161e:	2105      	movs	r1, #5
 8001620:	483b      	ldr	r0, [pc, #236]	@ (8001710 <MX_TIM2_Init+0x12c>)
 8001622:	f7ff fa61 	bl	8000ae8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PRIORITY_VERYHIGH);
 8001626:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800162a:	2105      	movs	r1, #5
 800162c:	4838      	ldr	r0, [pc, #224]	@ (8001710 <MX_TIM2_Init+0x12c>)
 800162e:	f7ff fb29 	bl	8000c84 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MODE_NORMAL);
 8001632:	2200      	movs	r2, #0
 8001634:	2105      	movs	r1, #5
 8001636:	4836      	ldr	r0, [pc, #216]	@ (8001710 <MX_TIM2_Init+0x12c>)
 8001638:	f7ff fa7a 	bl	8000b30 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PERIPH_NOINCREMENT);
 800163c:	2200      	movs	r2, #0
 800163e:	2105      	movs	r1, #5
 8001640:	4833      	ldr	r0, [pc, #204]	@ (8001710 <MX_TIM2_Init+0x12c>)
 8001642:	f7ff fa97 	bl	8000b74 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MEMORY_INCREMENT);
 8001646:	2280      	movs	r2, #128	@ 0x80
 8001648:	2105      	movs	r1, #5
 800164a:	4831      	ldr	r0, [pc, #196]	@ (8001710 <MX_TIM2_Init+0x12c>)
 800164c:	f7ff fab4 	bl	8000bb8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PDATAALIGN_HALFWORD);
 8001650:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001654:	2105      	movs	r1, #5
 8001656:	482e      	ldr	r0, [pc, #184]	@ (8001710 <MX_TIM2_Init+0x12c>)
 8001658:	f7ff fad0 	bl	8000bfc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MDATAALIGN_HALFWORD);
 800165c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001660:	2105      	movs	r1, #5
 8001662:	482b      	ldr	r0, [pc, #172]	@ (8001710 <MX_TIM2_Init+0x12c>)
 8001664:	f7ff faec 	bl	8000c40 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	86bb      	strh	r3, [r7, #52]	@ 0x34
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800166c:	2300      	movs	r3, #0
 800166e:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_InitStruct.Autoreload = 89;
 8001670:	2359      	movs	r3, #89	@ 0x59
 8001672:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001674:	2300      	movs	r3, #0
 8001676:	643b      	str	r3, [r7, #64]	@ 0x40
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001678:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800167c:	4619      	mov	r1, r3
 800167e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001682:	f002 f81f 	bl	80036c4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001686:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800168a:	f7ff fc71 	bl	8000f70 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 800168e:	2100      	movs	r1, #0
 8001690:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001694:	f7ff fd04 	bl	80010a0 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8001698:	2101      	movs	r1, #1
 800169a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800169e:	f7ff fcbb 	bl	8001018 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80016a2:	2360      	movs	r3, #96	@ 0x60
 80016a4:	617b      	str	r3, [r7, #20]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.CompareValue = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80016b2:	2300      	movs	r3, #0
 80016b4:	627b      	str	r3, [r7, #36]	@ 0x24
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	461a      	mov	r2, r3
 80016bc:	2101      	movs	r1, #1
 80016be:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80016c2:	f002 f867 	bl	8003794 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 80016c6:	2101      	movs	r1, #1
 80016c8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80016cc:	f7ff fc60 	bl	8000f90 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80016d0:	2100      	movs	r1, #0
 80016d2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80016d6:	f7ff fcf7 	bl	80010c8 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80016da:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80016de:	f7ff fd05 	bl	80010ec <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80016e2:	2004      	movs	r0, #4
 80016e4:	f7ff fbfa 	bl	8000edc <LL_APB2_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA15   ------> TIM2_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80016e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001714 <MX_TIM2_Init+0x130>)
 80016ea:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80016ec:	2309      	movs	r3, #9
 80016ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80016f0:	2302      	movs	r3, #2
 80016f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f8:	463b      	mov	r3, r7
 80016fa:	4619      	mov	r1, r3
 80016fc:	4806      	ldr	r0, [pc, #24]	@ (8001718 <MX_TIM2_Init+0x134>)
 80016fe:	f001 fda2 	bl	8003246 <LL_GPIO_Init>

  LL_GPIO_AF_RemapPartial1_TIM2();
 8001702:	f7ff fddb 	bl	80012bc <LL_GPIO_AF_RemapPartial1_TIM2>

}
 8001706:	bf00      	nop
 8001708:	3748      	adds	r7, #72	@ 0x48
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40020000 	.word	0x40020000
 8001714:	04800080 	.word	0x04800080
 8001718:	40010800 	.word	0x40010800

0800171c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8001730:	2010      	movs	r0, #16
 8001732:	f7ff fbbb 	bl	8000eac <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800173a:	2300      	movs	r3, #0
 800173c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 800173e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001742:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	4619      	mov	r1, r3
 8001748:	4808      	ldr	r0, [pc, #32]	@ (800176c <MX_TIM6_Init+0x50>)
 800174a:	f001 ffbb 	bl	80036c4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 800174e:	4807      	ldr	r0, [pc, #28]	@ (800176c <MX_TIM6_Init+0x50>)
 8001750:	f7ff fc0e 	bl	8000f70 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8001754:	2100      	movs	r1, #0
 8001756:	4805      	ldr	r0, [pc, #20]	@ (800176c <MX_TIM6_Init+0x50>)
 8001758:	f7ff fcb6 	bl	80010c8 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 800175c:	4803      	ldr	r0, [pc, #12]	@ (800176c <MX_TIM6_Init+0x50>)
 800175e:	f7ff fcc5 	bl	80010ec <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40001000 	.word	0x40001000

08001770 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08c      	sub	sp, #48	@ 0x30
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	611a      	str	r2, [r3, #16]
 8001786:	615a      	str	r2, [r3, #20]
 8001788:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178a:	463b      	mov	r3, r7
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001798:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800179c:	f7ff fb9e 	bl	8000edc <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80017a0:	2004      	movs	r0, #4
 80017a2:	f7ff fb9b 	bl	8000edc <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80017a6:	4b22      	ldr	r3, [pc, #136]	@ (8001830 <MX_USART1_UART_Init+0xc0>)
 80017a8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017aa:	2309      	movs	r3, #9
 80017ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80017ae:	2303      	movs	r3, #3
 80017b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b6:	463b      	mov	r3, r7
 80017b8:	4619      	mov	r1, r3
 80017ba:	481e      	ldr	r0, [pc, #120]	@ (8001834 <MX_USART1_UART_Init+0xc4>)
 80017bc:	f001 fd43 	bl	8003246 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80017c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001838 <MX_USART1_UART_Init+0xc8>)
 80017c2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80017c4:	2304      	movs	r3, #4
 80017c6:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c8:	463b      	mov	r3, r7
 80017ca:	4619      	mov	r1, r3
 80017cc:	4819      	ldr	r0, [pc, #100]	@ (8001834 <MX_USART1_UART_Init+0xc4>)
 80017ce:	f001 fd3a 	bl	8003246 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80017d2:	f7ff f883 	bl	80008dc <__NVIC_GetPriorityGrouping>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2200      	movs	r2, #0
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff f8d1 	bl	8000984 <NVIC_EncodePriority>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4619      	mov	r1, r3
 80017e6:	2025      	movs	r0, #37	@ 0x25
 80017e8:	f7ff f8a2 	bl	8000930 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80017ec:	2025      	movs	r0, #37	@ 0x25
 80017ee:	f7ff f883 	bl	80008f8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80017f2:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80017f6:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001800:	2300      	movs	r3, #0
 8001802:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001804:	230c      	movs	r3, #12
 8001806:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001808:	2300      	movs	r3, #0
 800180a:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800180c:	2300      	movs	r3, #0
 800180e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	4619      	mov	r1, r3
 8001816:	4809      	ldr	r0, [pc, #36]	@ (800183c <MX_USART1_UART_Init+0xcc>)
 8001818:	f002 fa20 	bl	8003c5c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800181c:	4807      	ldr	r0, [pc, #28]	@ (800183c <MX_USART1_UART_Init+0xcc>)
 800181e:	f7ff fc83 	bl	8001128 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001822:	4806      	ldr	r0, [pc, #24]	@ (800183c <MX_USART1_UART_Init+0xcc>)
 8001824:	f7ff fc71 	bl	800110a <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001828:	bf00      	nop
 800182a:	3730      	adds	r7, #48	@ 0x30
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	04020002 	.word	0x04020002
 8001834:	40010800 	.word	0x40010800
 8001838:	04040004 	.word	0x04040004
 800183c:	40013800 	.word	0x40013800

08001840 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08c      	sub	sp, #48	@ 0x30
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	611a      	str	r2, [r3, #16]
 8001856:	615a      	str	r2, [r3, #20]
 8001858:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185a:	463b      	mov	r3, r7
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001868:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800186c:	f7ff fb1e 	bl	8000eac <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8001870:	2020      	movs	r0, #32
 8001872:	f7ff fb33 	bl	8000edc <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PD5   ------> USART2_TX
  PD6   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001876:	f242 0320 	movw	r3, #8224	@ 0x2020
 800187a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800187c:	2309      	movs	r3, #9
 800187e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001880:	2303      	movs	r3, #3
 8001882:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001888:	463b      	mov	r3, r7
 800188a:	4619      	mov	r1, r3
 800188c:	4816      	ldr	r0, [pc, #88]	@ (80018e8 <MX_USART2_UART_Init+0xa8>)
 800188e:	f001 fcda 	bl	8003246 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001892:	f244 0340 	movw	r3, #16448	@ 0x4040
 8001896:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001898:	2304      	movs	r3, #4
 800189a:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800189c:	463b      	mov	r3, r7
 800189e:	4619      	mov	r1, r3
 80018a0:	4811      	ldr	r0, [pc, #68]	@ (80018e8 <MX_USART2_UART_Init+0xa8>)
 80018a2:	f001 fcd0 	bl	8003246 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_USART2();
 80018a6:	f7ff fcf9 	bl	800129c <LL_GPIO_AF_EnableRemap_USART2>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80018aa:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80018ae:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80018bc:	230c      	movs	r3, #12
 80018be:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4619      	mov	r1, r3
 80018ce:	4807      	ldr	r0, [pc, #28]	@ (80018ec <MX_USART2_UART_Init+0xac>)
 80018d0:	f002 f9c4 	bl	8003c5c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80018d4:	4805      	ldr	r0, [pc, #20]	@ (80018ec <MX_USART2_UART_Init+0xac>)
 80018d6:	f7ff fc27 	bl	8001128 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80018da:	4804      	ldr	r0, [pc, #16]	@ (80018ec <MX_USART2_UART_Init+0xac>)
 80018dc:	f7ff fc15 	bl	800110a <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018e0:	bf00      	nop
 80018e2:	3730      	adds	r7, #48	@ 0x30
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40011400 	.word	0x40011400
 80018ec:	40004400 	.word	0x40004400

080018f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08c      	sub	sp, #48	@ 0x30
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
 8001904:	611a      	str	r2, [r3, #16]
 8001906:	615a      	str	r2, [r3, #20]
 8001908:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190a:	463b      	mov	r3, r7
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8001918:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800191c:	f7ff fac6 	bl	8000eac <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001920:	2008      	movs	r0, #8
 8001922:	f7ff fadb 	bl	8000edc <LL_APB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001926:	4b22      	ldr	r3, [pc, #136]	@ (80019b0 <MX_USART3_UART_Init+0xc0>)
 8001928:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800192a:	2309      	movs	r3, #9
 800192c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800192e:	2303      	movs	r3, #3
 8001930:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001936:	463b      	mov	r3, r7
 8001938:	4619      	mov	r1, r3
 800193a:	481e      	ldr	r0, [pc, #120]	@ (80019b4 <MX_USART3_UART_Init+0xc4>)
 800193c:	f001 fc83 	bl	8003246 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8001940:	4b1d      	ldr	r3, [pc, #116]	@ (80019b8 <MX_USART3_UART_Init+0xc8>)
 8001942:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001944:	2304      	movs	r3, #4
 8001946:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001948:	463b      	mov	r3, r7
 800194a:	4619      	mov	r1, r3
 800194c:	4819      	ldr	r0, [pc, #100]	@ (80019b4 <MX_USART3_UART_Init+0xc4>)
 800194e:	f001 fc7a 	bl	8003246 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001952:	f7fe ffc3 	bl	80008dc <__NVIC_GetPriorityGrouping>
 8001956:	4603      	mov	r3, r0
 8001958:	2200      	movs	r2, #0
 800195a:	2100      	movs	r1, #0
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff f811 	bl	8000984 <NVIC_EncodePriority>
 8001962:	4603      	mov	r3, r0
 8001964:	4619      	mov	r1, r3
 8001966:	2027      	movs	r0, #39	@ 0x27
 8001968:	f7fe ffe2 	bl	8000930 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 800196c:	2027      	movs	r0, #39	@ 0x27
 800196e:	f7fe ffc3 	bl	80008f8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001972:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001976:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001978:	2300      	movs	r3, #0
 800197a:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800197c:	2300      	movs	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001980:	2300      	movs	r3, #0
 8001982:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001984:	230c      	movs	r3, #12
 8001986:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001988:	2300      	movs	r3, #0
 800198a:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800198c:	2300      	movs	r3, #0
 800198e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART3, &USART_InitStruct);
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4619      	mov	r1, r3
 8001996:	4809      	ldr	r0, [pc, #36]	@ (80019bc <MX_USART3_UART_Init+0xcc>)
 8001998:	f002 f960 	bl	8003c5c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 800199c:	4807      	ldr	r0, [pc, #28]	@ (80019bc <MX_USART3_UART_Init+0xcc>)
 800199e:	f7ff fbc3 	bl	8001128 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 80019a2:	4806      	ldr	r0, [pc, #24]	@ (80019bc <MX_USART3_UART_Init+0xcc>)
 80019a4:	f7ff fbb1 	bl	800110a <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019a8:	bf00      	nop
 80019aa:	3730      	adds	r7, #48	@ 0x30
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	04040004 	.word	0x04040004
 80019b4:	40010c00 	.word	0x40010c00
 80019b8:	04080008 	.word	0x04080008
 80019bc:	40004800 	.word	0x40004800

080019c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80019c4:	2001      	movs	r0, #1
 80019c6:	f7ff fa59 	bl	8000e7c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80019ca:	f7fe ff87 	bl	80008dc <__NVIC_GetPriorityGrouping>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2200      	movs	r2, #0
 80019d2:	2100      	movs	r1, #0
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe ffd5 	bl	8000984 <NVIC_EncodePriority>
 80019da:	4603      	mov	r3, r0
 80019dc:	4619      	mov	r1, r3
 80019de:	200f      	movs	r0, #15
 80019e0:	f7fe ffa6 	bl	8000930 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80019e4:	200f      	movs	r0, #15
 80019e6:	f7fe ff87 	bl	80008f8 <__NVIC_EnableIRQ>

}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80019f6:	f107 0318 	add.w	r3, r7, #24
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
 8001a0a:	60da      	str	r2, [r3, #12]
 8001a0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOE);
 8001a0e:	2040      	movs	r0, #64	@ 0x40
 8001a10:	f7ff fa64 	bl	8000edc <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8001a14:	2010      	movs	r0, #16
 8001a16:	f7ff fa61 	bl	8000edc <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001a1a:	2004      	movs	r0, #4
 8001a1c:	f7ff fa5e 	bl	8000edc <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001a20:	2008      	movs	r0, #8
 8001a22:	f7ff fa5b 	bl	8000edc <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8001a26:	2020      	movs	r0, #32
 8001a28:	f7ff fa58 	bl	8000edc <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5
 8001a2c:	494c      	ldr	r1, [pc, #304]	@ (8001b60 <MX_GPIO_Init+0x170>)
 8001a2e:	484d      	ldr	r0, [pc, #308]	@ (8001b64 <MX_GPIO_Init+0x174>)
 8001a30:	f7ff fc24 	bl	800127c <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9
                          |LL_GPIO_PIN_11|LL_GPIO_PIN_0);

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2
 8001a34:	494c      	ldr	r1, [pc, #304]	@ (8001b68 <MX_GPIO_Init+0x178>)
 8001a36:	484d      	ldr	r0, [pc, #308]	@ (8001b6c <MX_GPIO_Init+0x17c>)
 8001a38:	f7ff fc20 	bl	800127c <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6
                          |LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_11);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_12
 8001a3c:	494c      	ldr	r1, [pc, #304]	@ (8001b70 <MX_GPIO_Init+0x180>)
 8001a3e:	484d      	ldr	r0, [pc, #308]	@ (8001b74 <MX_GPIO_Init+0x184>)
 8001a40:	f7ff fc1c 	bl	800127c <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11
 8001a44:	494c      	ldr	r1, [pc, #304]	@ (8001b78 <MX_GPIO_Init+0x188>)
 8001a46:	484d      	ldr	r0, [pc, #308]	@ (8001b7c <MX_GPIO_Init+0x18c>)
 8001a48:	f7ff fc18 	bl	800127c <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
                          |LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_7);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5
 8001a4c:	4b44      	ldr	r3, [pc, #272]	@ (8001b60 <MX_GPIO_Init+0x170>)
 8001a4e:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9
                          |LL_GPIO_PIN_11|LL_GPIO_PIN_0;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a50:	2301      	movs	r3, #1
 8001a52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a54:	2302      	movs	r3, #2
 8001a56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4840      	ldr	r0, [pc, #256]	@ (8001b64 <MX_GPIO_Init+0x174>)
 8001a62:	f001 fbf0 	bl	8003246 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2
 8001a66:	4b40      	ldr	r3, [pc, #256]	@ (8001b68 <MX_GPIO_Init+0x178>)
 8001a68:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6
                          |LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_11;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a76:	1d3b      	adds	r3, r7, #4
 8001a78:	4619      	mov	r1, r3
 8001a7a:	483c      	ldr	r0, [pc, #240]	@ (8001b6c <MX_GPIO_Init+0x17c>)
 8001a7c:	f001 fbe3 	bl	8003246 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_12
 8001a80:	4b3b      	ldr	r3, [pc, #236]	@ (8001b70 <MX_GPIO_Init+0x180>)
 8001a82:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8
                          |LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a84:	2301      	movs	r3, #1
 8001a86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	4619      	mov	r1, r3
 8001a94:	4837      	ldr	r0, [pc, #220]	@ (8001b74 <MX_GPIO_Init+0x184>)
 8001a96:	f001 fbd6 	bl	8003246 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8001a9a:	4b39      	ldr	r3, [pc, #228]	@ (8001b80 <MX_GPIO_Init+0x190>)
 8001a9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001a9e:	2304      	movs	r3, #4
 8001aa0:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aa2:	1d3b      	adds	r3, r7, #4
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	482f      	ldr	r0, [pc, #188]	@ (8001b64 <MX_GPIO_Init+0x174>)
 8001aa8:	f001 fbcd 	bl	8003246 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11
 8001aac:	4b32      	ldr	r3, [pc, #200]	@ (8001b78 <MX_GPIO_Init+0x188>)
 8001aae:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
                          |LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001abc:	1d3b      	adds	r3, r7, #4
 8001abe:	4619      	mov	r1, r3
 8001ac0:	482e      	ldr	r0, [pc, #184]	@ (8001b7c <MX_GPIO_Init+0x18c>)
 8001ac2:	f001 fbc0 	bl	8003246 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001ac6:	f240 2302 	movw	r3, #514	@ 0x202
 8001aca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4823      	ldr	r0, [pc, #140]	@ (8001b64 <MX_GPIO_Init+0x174>)
 8001ad6:	f001 fbb6 	bl	8003246 <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTE, LL_GPIO_AF_EXTI_LINE12);
 8001ada:	492a      	ldr	r1, [pc, #168]	@ (8001b84 <MX_GPIO_Init+0x194>)
 8001adc:	2004      	movs	r0, #4
 8001ade:	f7ff fc11 	bl	8001304 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTE, LL_GPIO_AF_EXTI_LINE13);
 8001ae2:	4929      	ldr	r1, [pc, #164]	@ (8001b88 <MX_GPIO_Init+0x198>)
 8001ae4:	2004      	movs	r0, #4
 8001ae6:	f7ff fc0d 	bl	8001304 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 8001aea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aee:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001af0:	2301      	movs	r3, #1
 8001af2:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001af4:	2300      	movs	r3, #0
 8001af6:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001af8:	2302      	movs	r3, #2
 8001afa:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001afc:	f107 0318 	add.w	r3, r7, #24
 8001b00:	4618      	mov	r0, r3
 8001b02:	f001 fa69 	bl	8002fd8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001b06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b0a:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001b10:	2300      	movs	r3, #0
 8001b12:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001b14:	2302      	movs	r3, #2
 8001b16:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001b18:	f107 0318 	add.w	r3, r7, #24
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f001 fa5b 	bl	8002fd8 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(GPIOE, LL_GPIO_PIN_12, LL_GPIO_MODE_FLOATING);
 8001b22:	2204      	movs	r2, #4
 8001b24:	4919      	ldr	r1, [pc, #100]	@ (8001b8c <MX_GPIO_Init+0x19c>)
 8001b26:	480f      	ldr	r0, [pc, #60]	@ (8001b64 <MX_GPIO_Init+0x174>)
 8001b28:	f7ff fb67 	bl	80011fa <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOE, LL_GPIO_PIN_13, LL_GPIO_MODE_FLOATING);
 8001b2c:	2204      	movs	r2, #4
 8001b2e:	4918      	ldr	r1, [pc, #96]	@ (8001b90 <MX_GPIO_Init+0x1a0>)
 8001b30:	480c      	ldr	r0, [pc, #48]	@ (8001b64 <MX_GPIO_Init+0x174>)
 8001b32:	f7ff fb62 	bl	80011fa <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001b36:	f7fe fed1 	bl	80008dc <__NVIC_GetPriorityGrouping>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe ff1f 	bl	8000984 <NVIC_EncodePriority>
 8001b46:	4603      	mov	r3, r0
 8001b48:	4619      	mov	r1, r3
 8001b4a:	2028      	movs	r0, #40	@ 0x28
 8001b4c:	f7fe fef0 	bl	8000930 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b50:	2028      	movs	r0, #40	@ 0x28
 8001b52:	f7fe fed1 	bl	80008f8 <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b56:	bf00      	nop
 8001b58:	3720      	adds	r7, #32
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	040bfdff 	.word	0x040bfdff
 8001b64:	40011800 	.word	0x40011800
 8001b68:	042bffff 	.word	0x042bffff
 8001b6c:	40011000 	.word	0x40011000
 8001b70:	04d3ffff 	.word	0x04d3ffff
 8001b74:	40010c00 	.word	0x40010c00
 8001b78:	04ff9bff 	.word	0x04ff9bff
 8001b7c:	40011400 	.word	0x40011400
 8001b80:	04c000c0 	.word	0x04c000c0
 8001b84:	000f0003 	.word	0x000f0003
 8001b88:	00f00003 	.word	0x00f00003
 8001b8c:	04100010 	.word	0x04100010
 8001b90:	04200020 	.word	0x04200020

08001b94 <LL_GPIO_SetOutputPin>:
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	611a      	str	r2, [r3, #16]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr

08001bb2 <LL_GPIO_ResetOutputPin>:
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
 8001bba:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	0a1b      	lsrs	r3, r3, #8
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	615a      	str	r2, [r3, #20]
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <getPortName>:
    {GPIOE, LL_GPIO_PIN_7, &xPins32, &yPins32},  // CS_32 (PE7)
    {GPIOE, LL_GPIO_PIN_8, &xPins33, &yPins33},  // CS_33 (PE8)
    {GPIOE, LL_GPIO_PIN_9, &xPins34, &yPins34}   // CS_34 (PE9)
};

const char* getPortName(GPIO_TypeDef* port) {
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
    if (port == GPIOA) return "GPIOA";
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a11      	ldr	r2, [pc, #68]	@ (8001c20 <getPortName+0x50>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d101      	bne.n	8001be4 <getPortName+0x14>
 8001be0:	4b10      	ldr	r3, [pc, #64]	@ (8001c24 <getPortName+0x54>)
 8001be2:	e018      	b.n	8001c16 <getPortName+0x46>
    if (port == GPIOB) return "GPIOB";
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a10      	ldr	r2, [pc, #64]	@ (8001c28 <getPortName+0x58>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d101      	bne.n	8001bf0 <getPortName+0x20>
 8001bec:	4b0f      	ldr	r3, [pc, #60]	@ (8001c2c <getPortName+0x5c>)
 8001bee:	e012      	b.n	8001c16 <getPortName+0x46>
    if (port == GPIOC) return "GPIOC";
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a0f      	ldr	r2, [pc, #60]	@ (8001c30 <getPortName+0x60>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d101      	bne.n	8001bfc <getPortName+0x2c>
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c34 <getPortName+0x64>)
 8001bfa:	e00c      	b.n	8001c16 <getPortName+0x46>
    if (port == GPIOD) return "GPIOD";
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a0e      	ldr	r2, [pc, #56]	@ (8001c38 <getPortName+0x68>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d101      	bne.n	8001c08 <getPortName+0x38>
 8001c04:	4b0d      	ldr	r3, [pc, #52]	@ (8001c3c <getPortName+0x6c>)
 8001c06:	e006      	b.n	8001c16 <getPortName+0x46>
    if (port == GPIOE) return "GPIOE";
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a0d      	ldr	r2, [pc, #52]	@ (8001c40 <getPortName+0x70>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d101      	bne.n	8001c14 <getPortName+0x44>
 8001c10:	4b0c      	ldr	r3, [pc, #48]	@ (8001c44 <getPortName+0x74>)
 8001c12:	e000      	b.n	8001c16 <getPortName+0x46>
    return "UNKNOWN";
 8001c14:	4b0c      	ldr	r3, [pc, #48]	@ (8001c48 <getPortName+0x78>)
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr
 8001c20:	40010800 	.word	0x40010800
 8001c24:	08006070 	.word	0x08006070
 8001c28:	40010c00 	.word	0x40010c00
 8001c2c:	08006078 	.word	0x08006078
 8001c30:	40011000 	.word	0x40011000
 8001c34:	08006080 	.word	0x08006080
 8001c38:	40011400 	.word	0x40011400
 8001c3c:	08006088 	.word	0x08006088
 8001c40:	40011800 	.word	0x40011800
 8001c44:	08006090 	.word	0x08006090
 8001c48:	08006098 	.word	0x08006098

08001c4c <getPinName>:

const char* getPinName(uint32_t pin) {
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
    switch (pin) {
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a5a      	ldr	r2, [pc, #360]	@ (8001dc0 <getPinName+0x174>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	f000 80a8 	beq.w	8001dae <getPinName+0x162>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a57      	ldr	r2, [pc, #348]	@ (8001dc0 <getPinName+0x174>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	f200 80a5 	bhi.w	8001db2 <getPinName+0x166>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a56      	ldr	r2, [pc, #344]	@ (8001dc4 <getPinName+0x178>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	f000 809c 	beq.w	8001daa <getPinName+0x15e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a53      	ldr	r2, [pc, #332]	@ (8001dc4 <getPinName+0x178>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	f200 809b 	bhi.w	8001db2 <getPinName+0x166>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a52      	ldr	r2, [pc, #328]	@ (8001dc8 <getPinName+0x17c>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	f000 8090 	beq.w	8001da6 <getPinName+0x15a>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a4f      	ldr	r2, [pc, #316]	@ (8001dc8 <getPinName+0x17c>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	f200 8091 	bhi.w	8001db2 <getPinName+0x166>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a4e      	ldr	r2, [pc, #312]	@ (8001dcc <getPinName+0x180>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	f000 8084 	beq.w	8001da2 <getPinName+0x156>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a4b      	ldr	r2, [pc, #300]	@ (8001dcc <getPinName+0x180>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	f200 8087 	bhi.w	8001db2 <getPinName+0x166>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a4a      	ldr	r2, [pc, #296]	@ (8001dd0 <getPinName+0x184>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d078      	beq.n	8001d9e <getPinName+0x152>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a48      	ldr	r2, [pc, #288]	@ (8001dd0 <getPinName+0x184>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d87e      	bhi.n	8001db2 <getPinName+0x166>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a47      	ldr	r2, [pc, #284]	@ (8001dd4 <getPinName+0x188>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d06e      	beq.n	8001d9a <getPinName+0x14e>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a45      	ldr	r2, [pc, #276]	@ (8001dd4 <getPinName+0x188>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d876      	bhi.n	8001db2 <getPinName+0x166>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a44      	ldr	r2, [pc, #272]	@ (8001dd8 <getPinName+0x18c>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d064      	beq.n	8001d96 <getPinName+0x14a>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a42      	ldr	r2, [pc, #264]	@ (8001dd8 <getPinName+0x18c>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d86e      	bhi.n	8001db2 <getPinName+0x166>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a41      	ldr	r2, [pc, #260]	@ (8001ddc <getPinName+0x190>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d05a      	beq.n	8001d92 <getPinName+0x146>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a3f      	ldr	r2, [pc, #252]	@ (8001ddc <getPinName+0x190>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d866      	bhi.n	8001db2 <getPinName+0x166>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f248 0280 	movw	r2, #32896	@ 0x8080
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d04f      	beq.n	8001d8e <getPinName+0x142>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f248 0280 	movw	r2, #32896	@ 0x8080
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d85c      	bhi.n	8001db2 <getPinName+0x166>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f244 0240 	movw	r2, #16448	@ 0x4040
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d043      	beq.n	8001d8a <getPinName+0x13e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f244 0240 	movw	r2, #16448	@ 0x4040
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d852      	bhi.n	8001db2 <getPinName+0x166>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f242 0220 	movw	r2, #8224	@ 0x2020
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d037      	beq.n	8001d86 <getPinName+0x13a>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f242 0220 	movw	r2, #8224	@ 0x2020
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d848      	bhi.n	8001db2 <getPinName+0x166>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f241 0210 	movw	r2, #4112	@ 0x1010
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d02b      	beq.n	8001d82 <getPinName+0x136>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f241 0210 	movw	r2, #4112	@ 0x1010
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d83e      	bhi.n	8001db2 <getPinName+0x166>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f640 0208 	movw	r2, #2056	@ 0x808
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d01f      	beq.n	8001d7e <getPinName+0x132>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f640 0208 	movw	r2, #2056	@ 0x808
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d834      	bhi.n	8001db2 <getPinName+0x166>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f240 4204 	movw	r2, #1028	@ 0x404
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d013      	beq.n	8001d7a <getPinName+0x12e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f240 4204 	movw	r2, #1028	@ 0x404
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d82a      	bhi.n	8001db2 <getPinName+0x166>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f240 1201 	movw	r2, #257	@ 0x101
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d005      	beq.n	8001d72 <getPinName+0x126>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f240 2202 	movw	r2, #514	@ 0x202
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d002      	beq.n	8001d76 <getPinName+0x12a>
 8001d70:	e01f      	b.n	8001db2 <getPinName+0x166>
        case LL_GPIO_PIN_0:  return "Pin 0";
 8001d72:	4b1b      	ldr	r3, [pc, #108]	@ (8001de0 <getPinName+0x194>)
 8001d74:	e01e      	b.n	8001db4 <getPinName+0x168>
        case LL_GPIO_PIN_1:  return "Pin 1";
 8001d76:	4b1b      	ldr	r3, [pc, #108]	@ (8001de4 <getPinName+0x198>)
 8001d78:	e01c      	b.n	8001db4 <getPinName+0x168>
        case LL_GPIO_PIN_2:  return "Pin 2";
 8001d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001de8 <getPinName+0x19c>)
 8001d7c:	e01a      	b.n	8001db4 <getPinName+0x168>
        case LL_GPIO_PIN_3:  return "Pin 3";
 8001d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dec <getPinName+0x1a0>)
 8001d80:	e018      	b.n	8001db4 <getPinName+0x168>
        case LL_GPIO_PIN_4:  return "Pin 4";
 8001d82:	4b1b      	ldr	r3, [pc, #108]	@ (8001df0 <getPinName+0x1a4>)
 8001d84:	e016      	b.n	8001db4 <getPinName+0x168>
        case LL_GPIO_PIN_5:  return "Pin 5";
 8001d86:	4b1b      	ldr	r3, [pc, #108]	@ (8001df4 <getPinName+0x1a8>)
 8001d88:	e014      	b.n	8001db4 <getPinName+0x168>
        case LL_GPIO_PIN_6:  return "Pin 6";
 8001d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001df8 <getPinName+0x1ac>)
 8001d8c:	e012      	b.n	8001db4 <getPinName+0x168>
        case LL_GPIO_PIN_7:  return "Pin 7";
 8001d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dfc <getPinName+0x1b0>)
 8001d90:	e010      	b.n	8001db4 <getPinName+0x168>
        case LL_GPIO_PIN_8:  return "Pin 8";
 8001d92:	4b1b      	ldr	r3, [pc, #108]	@ (8001e00 <getPinName+0x1b4>)
 8001d94:	e00e      	b.n	8001db4 <getPinName+0x168>
        case LL_GPIO_PIN_9:  return "Pin 9";
 8001d96:	4b1b      	ldr	r3, [pc, #108]	@ (8001e04 <getPinName+0x1b8>)
 8001d98:	e00c      	b.n	8001db4 <getPinName+0x168>
        case LL_GPIO_PIN_10: return "Pin 10";
 8001d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e08 <getPinName+0x1bc>)
 8001d9c:	e00a      	b.n	8001db4 <getPinName+0x168>
        case LL_GPIO_PIN_11: return "Pin 11";
 8001d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001e0c <getPinName+0x1c0>)
 8001da0:	e008      	b.n	8001db4 <getPinName+0x168>
        case LL_GPIO_PIN_12: return "Pin 12";
 8001da2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e10 <getPinName+0x1c4>)
 8001da4:	e006      	b.n	8001db4 <getPinName+0x168>
        case LL_GPIO_PIN_13: return "Pin 13";
 8001da6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e14 <getPinName+0x1c8>)
 8001da8:	e004      	b.n	8001db4 <getPinName+0x168>
        case LL_GPIO_PIN_14: return "Pin 14";
 8001daa:	4b1b      	ldr	r3, [pc, #108]	@ (8001e18 <getPinName+0x1cc>)
 8001dac:	e002      	b.n	8001db4 <getPinName+0x168>
        case LL_GPIO_PIN_15: return "Pin 15";
 8001dae:	4b1b      	ldr	r3, [pc, #108]	@ (8001e1c <getPinName+0x1d0>)
 8001db0:	e000      	b.n	8001db4 <getPinName+0x168>
        default: return "Unknown Pin";
 8001db2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e20 <getPinName+0x1d4>)
    }
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	04800080 	.word	0x04800080
 8001dc4:	04400040 	.word	0x04400040
 8001dc8:	04200020 	.word	0x04200020
 8001dcc:	04100010 	.word	0x04100010
 8001dd0:	04080008 	.word	0x04080008
 8001dd4:	04040004 	.word	0x04040004
 8001dd8:	04020002 	.word	0x04020002
 8001ddc:	04010001 	.word	0x04010001
 8001de0:	080060a0 	.word	0x080060a0
 8001de4:	080060a8 	.word	0x080060a8
 8001de8:	080060b0 	.word	0x080060b0
 8001dec:	080060b8 	.word	0x080060b8
 8001df0:	080060c0 	.word	0x080060c0
 8001df4:	080060c8 	.word	0x080060c8
 8001df8:	080060d0 	.word	0x080060d0
 8001dfc:	080060d8 	.word	0x080060d8
 8001e00:	080060e0 	.word	0x080060e0
 8001e04:	080060e8 	.word	0x080060e8
 8001e08:	080060f0 	.word	0x080060f0
 8001e0c:	080060f8 	.word	0x080060f8
 8001e10:	08006100 	.word	0x08006100
 8001e14:	08006108 	.word	0x08006108
 8001e18:	08006110 	.word	0x08006110
 8001e1c:	08006118 	.word	0x08006118
 8001e20:	08006120 	.word	0x08006120

08001e24 <setConnection>:


MainTrack mainTracks[32] = {0};
SignalAnalyzerTrack signalAnalyzerTracks[8] = {0};

void setConnection(int x, int y, MUX mux, uint8_t mode) {
 8001e24:	b082      	sub	sp, #8
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	6039      	str	r1, [r7, #0]
 8001e30:	f107 0110 	add.w	r1, r7, #16
 8001e34:	e881 000c 	stmia.w	r1, {r2, r3}
    if (x < 0 || x > 15 || y < 0 || y > 7) {
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f2c0 80bd 	blt.w	8001fba <setConnection+0x196>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b0f      	cmp	r3, #15
 8001e44:	f300 80b9 	bgt.w	8001fba <setConnection+0x196>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f2c0 80b5 	blt.w	8001fba <setConnection+0x196>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	2b07      	cmp	r3, #7
 8001e54:	f300 80b1 	bgt.w	8001fba <setConnection+0x196>
    }

//    printMUXDetails(&mux);

    // Activate multiplexer using the struct for CS
    LL_GPIO_ResetOutputPin(mux.port, mux.pin);
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	4611      	mov	r1, r2
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fea7 	bl	8001bb2 <LL_GPIO_ResetOutputPin>
    LL_mDelay(20);
 8001e64:	2014      	movs	r0, #20
 8001e66:	f001 ff93 	bl	8003d90 <LL_mDelay>
    LL_GPIO_SetOutputPin(mux.port, mux.pin);
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	4611      	mov	r1, r2
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fe8f 	bl	8001b94 <LL_GPIO_SetOutputPin>
    LL_mDelay(20);
 8001e76:	2014      	movs	r0, #20
 8001e78:	f001 ff8a 	bl	8003d90 <LL_mDelay>

    // Set X address
    // Set X address
    (x & 0x01) ? LL_GPIO_SetOutputPin(AX_GPIO, AX0_PIN) : LL_GPIO_ResetOutputPin(AX_GPIO, AX0_PIN);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d005      	beq.n	8001e92 <setConnection+0x6e>
 8001e86:	f244 0140 	movw	r1, #16448	@ 0x4040
 8001e8a:	484f      	ldr	r0, [pc, #316]	@ (8001fc8 <setConnection+0x1a4>)
 8001e8c:	f7ff fe82 	bl	8001b94 <LL_GPIO_SetOutputPin>
 8001e90:	e004      	b.n	8001e9c <setConnection+0x78>
 8001e92:	f244 0140 	movw	r1, #16448	@ 0x4040
 8001e96:	484c      	ldr	r0, [pc, #304]	@ (8001fc8 <setConnection+0x1a4>)
 8001e98:	f7ff fe8b 	bl	8001bb2 <LL_GPIO_ResetOutputPin>
    (x & 0x02) ? LL_GPIO_SetOutputPin(AX_GPIO, AX1_PIN) : LL_GPIO_ResetOutputPin(AX_GPIO, AX1_PIN);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d005      	beq.n	8001eb2 <setConnection+0x8e>
 8001ea6:	f241 0110 	movw	r1, #4112	@ 0x1010
 8001eaa:	4847      	ldr	r0, [pc, #284]	@ (8001fc8 <setConnection+0x1a4>)
 8001eac:	f7ff fe72 	bl	8001b94 <LL_GPIO_SetOutputPin>
 8001eb0:	e004      	b.n	8001ebc <setConnection+0x98>
 8001eb2:	f241 0110 	movw	r1, #4112	@ 0x1010
 8001eb6:	4844      	ldr	r0, [pc, #272]	@ (8001fc8 <setConnection+0x1a4>)
 8001eb8:	f7ff fe7b 	bl	8001bb2 <LL_GPIO_ResetOutputPin>
    (x & 0x04) ? LL_GPIO_SetOutputPin(AX_GPIO, AX2_PIN) : LL_GPIO_ResetOutputPin(AX_GPIO, AX2_PIN);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d005      	beq.n	8001ed2 <setConnection+0xae>
 8001ec6:	f640 0108 	movw	r1, #2056	@ 0x808
 8001eca:	483f      	ldr	r0, [pc, #252]	@ (8001fc8 <setConnection+0x1a4>)
 8001ecc:	f7ff fe62 	bl	8001b94 <LL_GPIO_SetOutputPin>
 8001ed0:	e004      	b.n	8001edc <setConnection+0xb8>
 8001ed2:	f640 0108 	movw	r1, #2056	@ 0x808
 8001ed6:	483c      	ldr	r0, [pc, #240]	@ (8001fc8 <setConnection+0x1a4>)
 8001ed8:	f7ff fe6b 	bl	8001bb2 <LL_GPIO_ResetOutputPin>
    (x & 0x08) ? LL_GPIO_SetOutputPin(AX_GPIO, AX3_PIN) : LL_GPIO_ResetOutputPin(AX_GPIO, AX3_PIN);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d005      	beq.n	8001ef2 <setConnection+0xce>
 8001ee6:	f242 0120 	movw	r1, #8224	@ 0x2020
 8001eea:	4837      	ldr	r0, [pc, #220]	@ (8001fc8 <setConnection+0x1a4>)
 8001eec:	f7ff fe52 	bl	8001b94 <LL_GPIO_SetOutputPin>
 8001ef0:	e004      	b.n	8001efc <setConnection+0xd8>
 8001ef2:	f242 0120 	movw	r1, #8224	@ 0x2020
 8001ef6:	4834      	ldr	r0, [pc, #208]	@ (8001fc8 <setConnection+0x1a4>)
 8001ef8:	f7ff fe5b 	bl	8001bb2 <LL_GPIO_ResetOutputPin>

    // Set Y address
    (y & 0x01) ? LL_GPIO_SetOutputPin(AY_GPIO, AY0_PIN) : LL_GPIO_ResetOutputPin(AY_GPIO, AY0_PIN);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d005      	beq.n	8001f12 <setConnection+0xee>
 8001f06:	f240 1101 	movw	r1, #257	@ 0x101
 8001f0a:	482f      	ldr	r0, [pc, #188]	@ (8001fc8 <setConnection+0x1a4>)
 8001f0c:	f7ff fe42 	bl	8001b94 <LL_GPIO_SetOutputPin>
 8001f10:	e004      	b.n	8001f1c <setConnection+0xf8>
 8001f12:	f240 1101 	movw	r1, #257	@ 0x101
 8001f16:	482c      	ldr	r0, [pc, #176]	@ (8001fc8 <setConnection+0x1a4>)
 8001f18:	f7ff fe4b 	bl	8001bb2 <LL_GPIO_ResetOutputPin>
    (y & 0x02) ? LL_GPIO_SetOutputPin(AY_GPIO, AY1_PIN) : LL_GPIO_ResetOutputPin(AY_GPIO, AY1_PIN);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d005      	beq.n	8001f32 <setConnection+0x10e>
 8001f26:	f240 2102 	movw	r1, #514	@ 0x202
 8001f2a:	4827      	ldr	r0, [pc, #156]	@ (8001fc8 <setConnection+0x1a4>)
 8001f2c:	f7ff fe32 	bl	8001b94 <LL_GPIO_SetOutputPin>
 8001f30:	e004      	b.n	8001f3c <setConnection+0x118>
 8001f32:	f240 2102 	movw	r1, #514	@ 0x202
 8001f36:	4824      	ldr	r0, [pc, #144]	@ (8001fc8 <setConnection+0x1a4>)
 8001f38:	f7ff fe3b 	bl	8001bb2 <LL_GPIO_ResetOutputPin>
    (y & 0x04) ? LL_GPIO_SetOutputPin(AY_GPIO, AY2_PIN) : LL_GPIO_ResetOutputPin(AY_GPIO, AY2_PIN);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d005      	beq.n	8001f52 <setConnection+0x12e>
 8001f46:	f240 4104 	movw	r1, #1028	@ 0x404
 8001f4a:	481f      	ldr	r0, [pc, #124]	@ (8001fc8 <setConnection+0x1a4>)
 8001f4c:	f7ff fe22 	bl	8001b94 <LL_GPIO_SetOutputPin>
 8001f50:	e004      	b.n	8001f5c <setConnection+0x138>
 8001f52:	f240 4104 	movw	r1, #1028	@ 0x404
 8001f56:	481c      	ldr	r0, [pc, #112]	@ (8001fc8 <setConnection+0x1a4>)
 8001f58:	f7ff fe2b 	bl	8001bb2 <LL_GPIO_ResetOutputPin>


    // Set data pin
    mode ? LL_GPIO_SetOutputPin(DAT_GPIO, DAT_PIN) : LL_GPIO_ResetOutputPin(DAT_GPIO, DAT_PIN);
 8001f5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d005      	beq.n	8001f70 <setConnection+0x14c>
 8001f64:	f248 0180 	movw	r1, #32896	@ 0x8080
 8001f68:	4817      	ldr	r0, [pc, #92]	@ (8001fc8 <setConnection+0x1a4>)
 8001f6a:	f7ff fe13 	bl	8001b94 <LL_GPIO_SetOutputPin>
 8001f6e:	e004      	b.n	8001f7a <setConnection+0x156>
 8001f70:	f248 0180 	movw	r1, #32896	@ 0x8080
 8001f74:	4814      	ldr	r0, [pc, #80]	@ (8001fc8 <setConnection+0x1a4>)
 8001f76:	f7ff fe1c 	bl	8001bb2 <LL_GPIO_ResetOutputPin>

    // Strobe signal
    LL_mDelay(20);
 8001f7a:	2014      	movs	r0, #20
 8001f7c:	f001 ff08 	bl	8003d90 <LL_mDelay>
	LL_GPIO_SetOutputPin(STB_GPIO, STB_PIN);
 8001f80:	4912      	ldr	r1, [pc, #72]	@ (8001fcc <setConnection+0x1a8>)
 8001f82:	4811      	ldr	r0, [pc, #68]	@ (8001fc8 <setConnection+0x1a4>)
 8001f84:	f7ff fe06 	bl	8001b94 <LL_GPIO_SetOutputPin>
	LL_mDelay(20);
 8001f88:	2014      	movs	r0, #20
 8001f8a:	f001 ff01 	bl	8003d90 <LL_mDelay>
	LL_GPIO_ResetOutputPin(STB_GPIO, STB_PIN);
 8001f8e:	490f      	ldr	r1, [pc, #60]	@ (8001fcc <setConnection+0x1a8>)
 8001f90:	480d      	ldr	r0, [pc, #52]	@ (8001fc8 <setConnection+0x1a4>)
 8001f92:	f7ff fe0e 	bl	8001bb2 <LL_GPIO_ResetOutputPin>

	LL_mDelay(20);
 8001f96:	2014      	movs	r0, #20
 8001f98:	f001 fefa 	bl	8003d90 <LL_mDelay>

	LL_GPIO_ResetOutputPin(DAT_GPIO, DAT_PIN);
 8001f9c:	f248 0180 	movw	r1, #32896	@ 0x8080
 8001fa0:	4809      	ldr	r0, [pc, #36]	@ (8001fc8 <setConnection+0x1a4>)
 8001fa2:	f7ff fe06 	bl	8001bb2 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(mux.port, mux.pin);
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	4611      	mov	r1, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fe00 	bl	8001bb2 <LL_GPIO_ResetOutputPin>

	LL_mDelay(20);
 8001fb2:	2014      	movs	r0, #20
 8001fb4:	f001 feec 	bl	8003d90 <LL_mDelay>
 8001fb8:	e000      	b.n	8001fbc <setConnection+0x198>
        return;
 8001fba:	bf00      	nop
}
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001fc4:	b002      	add	sp, #8
 8001fc6:	4770      	bx	lr
 8001fc8:	40010c00 	.word	0x40010c00
 8001fcc:	04010001 	.word	0x04010001

08001fd0 <routeBreadboard>:

void routeBreadboard(int breadboardPin1, int breadboardPin2, int net_id, MUX *muxes, size_t muxCount, uint8_t mode, RGB rgb) {
 8001fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fd2:	b0a7      	sub	sp, #156	@ 0x9c
 8001fd4:	af0c      	add	r7, sp, #48	@ 0x30
 8001fd6:	6278      	str	r0, [r7, #36]	@ 0x24
 8001fd8:	6239      	str	r1, [r7, #32]
 8001fda:	61fa      	str	r2, [r7, #28]
 8001fdc:	61bb      	str	r3, [r7, #24]

    char pin1Name[6], pin2Name[6];
    snprintf(pin1Name, sizeof(pin1Name), "B_%d", breadboardPin1);
 8001fde:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe4:	4a9c      	ldr	r2, [pc, #624]	@ (8002258 <routeBreadboard+0x288>)
 8001fe6:	2106      	movs	r1, #6
 8001fe8:	f002 f8fa 	bl	80041e0 <sniprintf>
    snprintf(pin2Name, sizeof(pin2Name), "B_%d", breadboardPin2);
 8001fec:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
 8001ff2:	4a99      	ldr	r2, [pc, #612]	@ (8002258 <routeBreadboard+0x288>)
 8001ff4:	2106      	movs	r1, #6
 8001ff6:	f002 f8f3 	bl	80041e0 <sniprintf>


    printf("Routing %s to %s with net ID: %d\n", pin1Name, pin2Name, net_id);
 8001ffa:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001ffe:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	4895      	ldr	r0, [pc, #596]	@ (800225c <routeBreadboard+0x28c>)
 8002006:	f002 f873 	bl	80040f0 <iprintf>
    fflush(stdout);
 800200a:	4b95      	ldr	r3, [pc, #596]	@ (8002260 <routeBreadboard+0x290>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	4618      	mov	r0, r3
 8002012:	f001 ff97 	bl	8003f44 <fflush>

    int xIndex1 = -1, yIndex1 = -1;
 8002016:	f04f 33ff 	mov.w	r3, #4294967295
 800201a:	667b      	str	r3, [r7, #100]	@ 0x64
 800201c:	f04f 33ff 	mov.w	r3, #4294967295
 8002020:	663b      	str	r3, [r7, #96]	@ 0x60
    int xIndex2 = -1, yIndex2 = -1;
 8002022:	f04f 33ff 	mov.w	r3, #4294967295
 8002026:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002028:	f04f 33ff 	mov.w	r3, #4294967295
 800202c:	65bb      	str	r3, [r7, #88]	@ 0x58
    MUX *mux1 = NULL;
 800202e:	2300      	movs	r3, #0
 8002030:	657b      	str	r3, [r7, #84]	@ 0x54
    MUX *mux2 = NULL;
 8002032:	2300      	movs	r3, #0
 8002034:	653b      	str	r3, [r7, #80]	@ 0x50
    MainTrack *selectedTrack = NULL;
 8002036:	2300      	movs	r3, #0
 8002038:	64fb      	str	r3, [r7, #76]	@ 0x4c
    int muxIndex = -1;
 800203a:	f04f 33ff 	mov.w	r3, #4294967295
 800203e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // Find an available or existing main track for the given net ID
    for (int x = 0; x < 32; ++x) {
 8002040:	2300      	movs	r3, #0
 8002042:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002044:	e02c      	b.n	80020a0 <routeBreadboard+0xd0>
        if (mainTracks[x].net_id == net_id) {
 8002046:	4a87      	ldr	r2, [pc, #540]	@ (8002264 <routeBreadboard+0x294>)
 8002048:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800204a:	011b      	lsls	r3, r3, #4
 800204c:	4413      	add	r3, r2
 800204e:	3304      	adds	r3, #4
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	69fa      	ldr	r2, [r7, #28]
 8002054:	429a      	cmp	r2, r3
 8002056:	d105      	bne.n	8002064 <routeBreadboard+0x94>
            selectedTrack = &mainTracks[x];  // Reuse existing track if net ID matches
 8002058:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800205a:	011b      	lsls	r3, r3, #4
 800205c:	4a81      	ldr	r2, [pc, #516]	@ (8002264 <routeBreadboard+0x294>)
 800205e:	4413      	add	r3, r2
 8002060:	64fb      	str	r3, [r7, #76]	@ 0x4c
            break;
 8002062:	e020      	b.n	80020a6 <routeBreadboard+0xd6>
        } else if (!mainTracks[x].is_used) {
 8002064:	4a7f      	ldr	r2, [pc, #508]	@ (8002264 <routeBreadboard+0x294>)
 8002066:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	4413      	add	r3, r2
 800206c:	3308      	adds	r3, #8
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d112      	bne.n	800209a <routeBreadboard+0xca>
            selectedTrack = &mainTracks[x];  // Assign new track if available
 8002074:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002076:	011b      	lsls	r3, r3, #4
 8002078:	4a7a      	ldr	r2, [pc, #488]	@ (8002264 <routeBreadboard+0x294>)
 800207a:	4413      	add	r3, r2
 800207c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            selectedTrack->is_used = 1;
 800207e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002080:	2201      	movs	r2, #1
 8002082:	609a      	str	r2, [r3, #8]
            selectedTrack->net_id = net_id;
 8002084:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	605a      	str	r2, [r3, #4]
            selectedTrack->track_id = x; // Assign track ID here
 800208a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800208c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800208e:	601a      	str	r2, [r3, #0]
            printf("Selected Track id: %d\n", x);
 8002090:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002092:	4875      	ldr	r0, [pc, #468]	@ (8002268 <routeBreadboard+0x298>)
 8002094:	f002 f82c 	bl	80040f0 <iprintf>
            break;
 8002098:	e005      	b.n	80020a6 <routeBreadboard+0xd6>
    for (int x = 0; x < 32; ++x) {
 800209a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800209c:	3301      	adds	r3, #1
 800209e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80020a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020a2:	2b1f      	cmp	r3, #31
 80020a4:	ddcf      	ble.n	8002046 <routeBreadboard+0x76>
        }
    }

    if (!selectedTrack) {
 80020a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d104      	bne.n	80020b6 <routeBreadboard+0xe6>
        printf("Error: No available main track for net ID %d\n", net_id);
 80020ac:	69f9      	ldr	r1, [r7, #28]
 80020ae:	486f      	ldr	r0, [pc, #444]	@ (800226c <routeBreadboard+0x29c>)
 80020b0:	f002 f81e 	bl	80040f0 <iprintf>
 80020b4:	e148      	b.n	8002348 <routeBreadboard+0x378>
        return;
    }

    // Update connection counter based on mode
	if (mode == 1) {
 80020b6:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d10d      	bne.n	80020da <routeBreadboard+0x10a>
		selectedTrack->current_connections++; // Increment current connections
 80020be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020c6:	60da      	str	r2, [r3, #12]
		printf("Main Track %d incremented. Current connections: %d\n", selectedTrack->track_id, selectedTrack->current_connections);
 80020c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020ca:	6819      	ldr	r1, [r3, #0]
 80020cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	461a      	mov	r2, r3
 80020d2:	4867      	ldr	r0, [pc, #412]	@ (8002270 <routeBreadboard+0x2a0>)
 80020d4:	f002 f80c 	bl	80040f0 <iprintf>
 80020d8:	e025      	b.n	8002126 <routeBreadboard+0x156>
	} else if (mode == 0) {
 80020da:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d121      	bne.n	8002126 <routeBreadboard+0x156>
		selectedTrack->current_connections--; // Decrement current connections
 80020e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	1e5a      	subs	r2, r3, #1
 80020e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020ea:	60da      	str	r2, [r3, #12]
		if (selectedTrack->current_connections <= 0) { // If counter is 0, free track
 80020ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	dc10      	bgt.n	8002116 <routeBreadboard+0x146>
			printf("Main Track %d is now free\n", selectedTrack->track_id);
 80020f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4619      	mov	r1, r3
 80020fa:	485e      	ldr	r0, [pc, #376]	@ (8002274 <routeBreadboard+0x2a4>)
 80020fc:	f001 fff8 	bl	80040f0 <iprintf>
			selectedTrack->is_used = 0;
 8002100:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
			selectedTrack->net_id = -1;
 8002106:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002108:	f04f 32ff 	mov.w	r2, #4294967295
 800210c:	605a      	str	r2, [r3, #4]
			selectedTrack->current_connections = 0;
 800210e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002110:	2200      	movs	r2, #0
 8002112:	60da      	str	r2, [r3, #12]
 8002114:	e007      	b.n	8002126 <routeBreadboard+0x156>
		}else{
			printf("Main Track %d decremented, but still occupied. Current connections: %d\n", selectedTrack->track_id, selectedTrack->current_connections);
 8002116:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002118:	6819      	ldr	r1, [r3, #0]
 800211a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	461a      	mov	r2, r3
 8002120:	4855      	ldr	r0, [pc, #340]	@ (8002278 <routeBreadboard+0x2a8>)
 8002122:	f001 ffe5 	bl	80040f0 <iprintf>

		}
	}

    muxIndex = (selectedTrack->track_id < 16) ? 0 : 1;
 8002126:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2b0f      	cmp	r3, #15
 800212c:	bfcc      	ite	gt
 800212e:	2301      	movgt	r3, #1
 8002130:	2300      	movle	r3, #0
 8002132:	b2db      	uxtb	r3, r3
 8002134:	63fb      	str	r3, [r7, #60]	@ 0x3c

        for (size_t i = muxIndex; i < muxCount; i += 2) {
 8002136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002138:	647b      	str	r3, [r7, #68]	@ 0x44
 800213a:	e05b      	b.n	80021f4 <routeBreadboard+0x224>
            for (int y = 0; y < 8; ++y) {
 800213c:	2300      	movs	r3, #0
 800213e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002140:	e04c      	b.n	80021dc <routeBreadboard+0x20c>
                if (strcmp((*muxes[i].yPins)[y], pin1Name) == 0 && mux1 == NULL) {
 8002142:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4413      	add	r3, r2
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800214e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002152:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8002156:	4611      	mov	r1, r2
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe f863 	bl	8000224 <strcmp>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d113      	bne.n	800218c <routeBreadboard+0x1bc>
 8002164:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002166:	2b00      	cmp	r3, #0
 8002168:	d110      	bne.n	800218c <routeBreadboard+0x1bc>
                    xIndex1 = selectedTrack->track_id % 16;
 800216a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	425a      	negs	r2, r3
 8002170:	f003 030f 	and.w	r3, r3, #15
 8002174:	f002 020f 	and.w	r2, r2, #15
 8002178:	bf58      	it	pl
 800217a:	4253      	negpl	r3, r2
 800217c:	667b      	str	r3, [r7, #100]	@ 0x64
                    yIndex1 = y;
 800217e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002180:	663b      	str	r3, [r7, #96]	@ 0x60
                    mux1 = &muxes[i];
 8002182:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002184:	011b      	lsls	r3, r3, #4
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4413      	add	r3, r2
 800218a:	657b      	str	r3, [r7, #84]	@ 0x54
                }
                if (strcmp((*muxes[i].yPins)[y], pin2Name) == 0 && mux2 == NULL) {
 800218c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4413      	add	r3, r2
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800219c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80021a0:	4611      	mov	r1, r2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe f83e 	bl	8000224 <strcmp>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d113      	bne.n	80021d6 <routeBreadboard+0x206>
 80021ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d110      	bne.n	80021d6 <routeBreadboard+0x206>
                    xIndex2 = selectedTrack->track_id % 16;
 80021b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	425a      	negs	r2, r3
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	f002 020f 	and.w	r2, r2, #15
 80021c2:	bf58      	it	pl
 80021c4:	4253      	negpl	r3, r2
 80021c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    yIndex2 = y;
 80021c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021ca:	65bb      	str	r3, [r7, #88]	@ 0x58
                    mux2 = &muxes[i];
 80021cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4413      	add	r3, r2
 80021d4:	653b      	str	r3, [r7, #80]	@ 0x50
            for (int y = 0; y < 8; ++y) {
 80021d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021d8:	3301      	adds	r3, #1
 80021da:	643b      	str	r3, [r7, #64]	@ 0x40
 80021dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021de:	2b07      	cmp	r3, #7
 80021e0:	ddaf      	ble.n	8002142 <routeBreadboard+0x172>
                }
            }
            if (mux1 && mux2) break;
 80021e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d002      	beq.n	80021ee <routeBreadboard+0x21e>
 80021e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d108      	bne.n	8002200 <routeBreadboard+0x230>
        for (size_t i = muxIndex; i < muxCount; i += 2) {
 80021ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021f0:	3302      	adds	r3, #2
 80021f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80021f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80021f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d39e      	bcc.n	800213c <routeBreadboard+0x16c>
 80021fe:	e000      	b.n	8002202 <routeBreadboard+0x232>
            if (mux1 && mux2) break;
 8002200:	bf00      	nop
        }

        if (mux1 && mux2) {
 8002202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 8096 	beq.w	8002336 <routeBreadboard+0x366>
 800220a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 8092 	beq.w	8002336 <routeBreadboard+0x366>
        	printf("%s (X:%d, Y:%d) at MUX[%d] CS: %s, Pin: %s, Main Track: %d\n"
 8002212:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8002216:	2b00      	cmp	r3, #0
 8002218:	d002      	beq.n	8002220 <routeBreadboard+0x250>
 800221a:	4b18      	ldr	r3, [pc, #96]	@ (800227c <routeBreadboard+0x2ac>)
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	e001      	b.n	8002224 <routeBreadboard+0x254>
 8002220:	4b17      	ldr	r3, [pc, #92]	@ (8002280 <routeBreadboard+0x2b0>)
 8002222:	617b      	str	r3, [r7, #20]
        			"%s (X:%d, Y:%d) at MUX[%d] CS: %s, Pin: %s, Main Track: %d\n\n",
        	                mode ? "Connecting" : "Disconnecting",
        	                xIndex1, yIndex1, mux1 - muxes + 1, getPortName(mux1->port), getPinName(mux1->pin), selectedTrack->track_id,
 8002224:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	111b      	asrs	r3, r3, #4
        	printf("%s (X:%d, Y:%d) at MUX[%d] CS: %s, Pin: %s, Main Track: %d\n"
 800222c:	1c5c      	adds	r4, r3, #1
 800222e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fccc 	bl	8001bd0 <getPortName>
 8002238:	6138      	str	r0, [r7, #16]
 800223a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fd04 	bl	8001c4c <getPinName>
 8002244:	60f8      	str	r0, [r7, #12]
 8002246:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002248:	681d      	ldr	r5, [r3, #0]
 800224a:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800224e:	2b00      	cmp	r3, #0
 8002250:	d018      	beq.n	8002284 <routeBreadboard+0x2b4>
 8002252:	4e0a      	ldr	r6, [pc, #40]	@ (800227c <routeBreadboard+0x2ac>)
 8002254:	e017      	b.n	8002286 <routeBreadboard+0x2b6>
 8002256:	bf00      	nop
 8002258:	080061a4 	.word	0x080061a4
 800225c:	080061ac 	.word	0x080061ac
 8002260:	20000cd0 	.word	0x20000cd0
 8002264:	20003e08 	.word	0x20003e08
 8002268:	080061d0 	.word	0x080061d0
 800226c:	080061e8 	.word	0x080061e8
 8002270:	08006218 	.word	0x08006218
 8002274:	0800624c 	.word	0x0800624c
 8002278:	08006268 	.word	0x08006268
 800227c:	080062b0 	.word	0x080062b0
 8002280:	080062bc 	.word	0x080062bc
 8002284:	4e32      	ldr	r6, [pc, #200]	@ (8002350 <routeBreadboard+0x380>)
							mode ? "Connecting" : "Disconnecting",
        	                xIndex2, yIndex2, mux2 - muxes + 1, getPortName(mux2->port), getPinName(mux2->pin), selectedTrack->track_id);
 8002286:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	111b      	asrs	r3, r3, #4
        	printf("%s (X:%d, Y:%d) at MUX[%d] CS: %s, Pin: %s, Main Track: %d\n"
 800228e:	3301      	adds	r3, #1
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fc9a 	bl	8001bd0 <getPortName>
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff fcd2 	bl	8001c4c <getPinName>
 80022a8:	4602      	mov	r2, r0
 80022aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80022b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	9208      	str	r2, [sp, #32]
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	9307      	str	r3, [sp, #28]
 80022ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022bc:	9306      	str	r3, [sp, #24]
 80022be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022c0:	9305      	str	r3, [sp, #20]
 80022c2:	9604      	str	r6, [sp, #16]
 80022c4:	9503      	str	r5, [sp, #12]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	9302      	str	r3, [sp, #8]
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	9301      	str	r3, [sp, #4]
 80022ce:	9400      	str	r4, [sp, #0]
 80022d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022d2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80022d4:	6979      	ldr	r1, [r7, #20]
 80022d6:	481f      	ldr	r0, [pc, #124]	@ (8002354 <routeBreadboard+0x384>)
 80022d8:	f001 ff0a 	bl	80040f0 <iprintf>
        	        fflush(stdout);
 80022dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002358 <routeBreadboard+0x388>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f001 fe2e 	bl	8003f44 <fflush>
			fflush(stdout);
 80022e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002358 <routeBreadboard+0x388>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f001 fe28 	bl	8003f44 <fflush>


            setConnection(xIndex1, yIndex1, *mux1, mode);
 80022f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022f6:	f897 2084 	ldrb.w	r2, [r7, #132]	@ 0x84
 80022fa:	9202      	str	r2, [sp, #8]
 80022fc:	466c      	mov	r4, sp
 80022fe:	f103 0208 	add.w	r2, r3, #8
 8002302:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002306:	e884 0003 	stmia.w	r4, {r0, r1}
 800230a:	cb0c      	ldmia	r3, {r2, r3}
 800230c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800230e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002310:	f7ff fd88 	bl	8001e24 <setConnection>
            setConnection(xIndex2, yIndex2, *mux2, mode);
 8002314:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002316:	f897 2084 	ldrb.w	r2, [r7, #132]	@ 0x84
 800231a:	9202      	str	r2, [sp, #8]
 800231c:	466c      	mov	r4, sp
 800231e:	f103 0208 	add.w	r2, r3, #8
 8002322:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002326:	e884 0003 	stmia.w	r4, {r0, r1}
 800232a:	cb0c      	ldmia	r3, {r2, r3}
 800232c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800232e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002330:	f7ff fd78 	bl	8001e24 <setConnection>
 8002334:	e008      	b.n	8002348 <routeBreadboard+0x378>

// 			  Activate leds

        } else {
            printf("Error: Unable to route pins - No available MUX found!\n");
 8002336:	4809      	ldr	r0, [pc, #36]	@ (800235c <routeBreadboard+0x38c>)
 8002338:	f001 ff4a 	bl	80041d0 <puts>
            fflush(stdout);
 800233c:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <routeBreadboard+0x388>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	4618      	mov	r0, r3
 8002344:	f001 fdfe 	bl	8003f44 <fflush>
        }
    }
 8002348:	376c      	adds	r7, #108	@ 0x6c
 800234a:	46bd      	mov	sp, r7
 800234c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800234e:	bf00      	nop
 8002350:	080062bc 	.word	0x080062bc
 8002354:	080062cc 	.word	0x080062cc
 8002358:	20000cd0 	.word	0x20000cd0
 800235c:	08006344 	.word	0x08006344

08002360 <routeSignalAnalyzer>:

void routeSignalAnalyzer(int net_id, MUX *muxes, uint8_t mode) {
 8002360:	b590      	push	{r4, r7, lr}
 8002362:	b097      	sub	sp, #92	@ 0x5c
 8002364:	af04      	add	r7, sp, #16
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	4613      	mov	r3, r2
 800236c:	71fb      	strb	r3, [r7, #7]
    MainTrack *selectedTrack = NULL;
 800236e:	2300      	movs	r3, #0
 8002370:	647b      	str	r3, [r7, #68]	@ 0x44
    int trackIndex = -1;
 8002372:	f04f 33ff 	mov.w	r3, #4294967295
 8002376:	627b      	str	r3, [r7, #36]	@ 0x24
    char trackName[10];  // Buffer for formatted string
    int xIndex = -1, yIndex = -1;
 8002378:	f04f 33ff 	mov.w	r3, #4294967295
 800237c:	643b      	str	r3, [r7, #64]	@ 0x40
 800237e:	f04f 33ff 	mov.w	r3, #4294967295
 8002382:	63fb      	str	r3, [r7, #60]	@ 0x3c
    MUX *mux = NULL;
 8002384:	2300      	movs	r3, #0
 8002386:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Step 1: Find a main track that is used and has the matching net_id
    for (int i = 0; i < 32; i++) {
 8002388:	2300      	movs	r3, #0
 800238a:	637b      	str	r3, [r7, #52]	@ 0x34
 800238c:	e02b      	b.n	80023e6 <routeSignalAnalyzer+0x86>
        if (mainTracks[i].is_used && mainTracks[i].net_id == net_id) {
 800238e:	4a8e      	ldr	r2, [pc, #568]	@ (80025c8 <routeSignalAnalyzer+0x268>)
 8002390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	4413      	add	r3, r2
 8002396:	3308      	adds	r3, #8
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d020      	beq.n	80023e0 <routeSignalAnalyzer+0x80>
 800239e:	4a8a      	ldr	r2, [pc, #552]	@ (80025c8 <routeSignalAnalyzer+0x268>)
 80023a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	4413      	add	r3, r2
 80023a6:	3304      	adds	r3, #4
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d117      	bne.n	80023e0 <routeSignalAnalyzer+0x80>
            selectedTrack = &mainTracks[i];
 80023b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	4a84      	ldr	r2, [pc, #528]	@ (80025c8 <routeSignalAnalyzer+0x268>)
 80023b6:	4413      	add	r3, r2
 80023b8:	647b      	str	r3, [r7, #68]	@ 0x44
            trackIndex = i;
 80023ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023bc:	627b      	str	r3, [r7, #36]	@ 0x24
            snprintf(trackName, sizeof(trackName), "MT_%d", trackIndex + 1); // Convert to "MT_X"
 80023be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c0:	3301      	adds	r3, #1
 80023c2:	f107 0010 	add.w	r0, r7, #16
 80023c6:	4a81      	ldr	r2, [pc, #516]	@ (80025cc <routeSignalAnalyzer+0x26c>)
 80023c8:	210a      	movs	r1, #10
 80023ca:	f001 ff09 	bl	80041e0 <sniprintf>
			printf("Found Main Track %d (Name: %s) for Net ID %d\n", selectedTrack->track_id, trackName, net_id);
 80023ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023d0:	6819      	ldr	r1, [r3, #0]
 80023d2:	f107 0210 	add.w	r2, r7, #16
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	487d      	ldr	r0, [pc, #500]	@ (80025d0 <routeSignalAnalyzer+0x270>)
 80023da:	f001 fe89 	bl	80040f0 <iprintf>
			break;
 80023de:	e005      	b.n	80023ec <routeSignalAnalyzer+0x8c>
    for (int i = 0; i < 32; i++) {
 80023e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023e2:	3301      	adds	r3, #1
 80023e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80023e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023e8:	2b1f      	cmp	r3, #31
 80023ea:	ddd0      	ble.n	800238e <routeSignalAnalyzer+0x2e>
        }
    }

    if (!selectedTrack) {
 80023ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d104      	bne.n	80023fc <routeSignalAnalyzer+0x9c>
        printf("Error: No active Main Track found for Net ID %d\n", net_id);
 80023f2:	68f9      	ldr	r1, [r7, #12]
 80023f4:	4877      	ldr	r0, [pc, #476]	@ (80025d4 <routeSignalAnalyzer+0x274>)
 80023f6:	f001 fe7b 	bl	80040f0 <iprintf>
        return;
 80023fa:	e0e2      	b.n	80025c2 <routeSignalAnalyzer+0x262>
    }

    // Step 2: Check MUX 33 and 34
    MUX *mux33 = &muxes[32]; // MUX 33 (Array index 32)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002402:	623b      	str	r3, [r7, #32]
    MUX *mux34 = &muxes[33]; // MUX 34 (Array index 33)
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 800240a:	61fb      	str	r3, [r7, #28]

    // Step 3: Look for the track ID in X Pins of MUX 33 and 34

    for (int i = 0; i < 16; i++) {
 800240c:	2300      	movs	r3, #0
 800240e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002410:	e028      	b.n	8002464 <routeSignalAnalyzer+0x104>
        if (strcmp((*mux33->xPins)[i], trackName) == 0) {
 8002412:	6a3b      	ldr	r3, [r7, #32]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800241c:	f107 0210 	add.w	r2, r7, #16
 8002420:	4611      	mov	r1, r2
 8002422:	4618      	mov	r0, r3
 8002424:	f7fd fefe 	bl	8000224 <strcmp>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d104      	bne.n	8002438 <routeSignalAnalyzer+0xd8>
            xIndex = i;
 800242e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002430:	643b      	str	r3, [r7, #64]	@ 0x40
            mux = mux33;
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	63bb      	str	r3, [r7, #56]	@ 0x38
            break;
 8002436:	e018      	b.n	800246a <routeSignalAnalyzer+0x10a>
        }
        if (strcmp((*mux34->xPins)[i], trackName) == 0) {
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800243e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002442:	f107 0210 	add.w	r2, r7, #16
 8002446:	4611      	mov	r1, r2
 8002448:	4618      	mov	r0, r3
 800244a:	f7fd feeb 	bl	8000224 <strcmp>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d104      	bne.n	800245e <routeSignalAnalyzer+0xfe>
            xIndex = i;
 8002454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002456:	643b      	str	r3, [r7, #64]	@ 0x40
            mux = mux34;
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	63bb      	str	r3, [r7, #56]	@ 0x38
            break;
 800245c:	e005      	b.n	800246a <routeSignalAnalyzer+0x10a>
    for (int i = 0; i < 16; i++) {
 800245e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002460:	3301      	adds	r3, #1
 8002462:	633b      	str	r3, [r7, #48]	@ 0x30
 8002464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002466:	2b0f      	cmp	r3, #15
 8002468:	ddd3      	ble.n	8002412 <routeSignalAnalyzer+0xb2>
        }
    }

    if (mode == 1) {  // Connecting
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d139      	bne.n	80024e4 <routeSignalAnalyzer+0x184>
		for (int i = 0; i < 8; i++) {
 8002470:	2300      	movs	r3, #0
 8002472:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002474:	e032      	b.n	80024dc <routeSignalAnalyzer+0x17c>
			if (!signalAnalyzerTracks[i].is_used) {
 8002476:	4958      	ldr	r1, [pc, #352]	@ (80025d8 <routeSignalAnalyzer+0x278>)
 8002478:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800247a:	4613      	mov	r3, r2
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	4413      	add	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	440b      	add	r3, r1
 8002484:	3308      	adds	r3, #8
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d124      	bne.n	80024d6 <routeSignalAnalyzer+0x176>
				yIndex = i;
 800248c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800248e:	63fb      	str	r3, [r7, #60]	@ 0x3c
				signalAnalyzerTracks[i].is_used = 1;
 8002490:	4951      	ldr	r1, [pc, #324]	@ (80025d8 <routeSignalAnalyzer+0x278>)
 8002492:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002494:	4613      	mov	r3, r2
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	4413      	add	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	3308      	adds	r3, #8
 80024a0:	2201      	movs	r2, #1
 80024a2:	601a      	str	r2, [r3, #0]
				signalAnalyzerTracks[i].net_id = net_id;
 80024a4:	494c      	ldr	r1, [pc, #304]	@ (80025d8 <routeSignalAnalyzer+0x278>)
 80024a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024a8:	4613      	mov	r3, r2
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	4413      	add	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	3304      	adds	r3, #4
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	601a      	str	r2, [r3, #0]
				signalAnalyzerTracks[i].track_id = xIndex;
 80024b8:	4947      	ldr	r1, [pc, #284]	@ (80025d8 <routeSignalAnalyzer+0x278>)
 80024ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024bc:	4613      	mov	r3, r2
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	4413      	add	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80024c8:	601a      	str	r2, [r3, #0]
				printf("Assigned Y Pin %d to Net ID %d\n", yIndex, net_id);
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80024ce:	4843      	ldr	r0, [pc, #268]	@ (80025dc <routeSignalAnalyzer+0x27c>)
 80024d0:	f001 fe0e 	bl	80040f0 <iprintf>
				break;
 80024d4:	e04d      	b.n	8002572 <routeSignalAnalyzer+0x212>
		for (int i = 0; i < 8; i++) {
 80024d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024d8:	3301      	adds	r3, #1
 80024da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024de:	2b07      	cmp	r3, #7
 80024e0:	ddc9      	ble.n	8002476 <routeSignalAnalyzer+0x116>
 80024e2:	e046      	b.n	8002572 <routeSignalAnalyzer+0x212>
			}
		}
	} else {  // Disconnecting
		for (int i = 0; i < 8; i++) {
 80024e4:	2300      	movs	r3, #0
 80024e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024e8:	e040      	b.n	800256c <routeSignalAnalyzer+0x20c>
			if (signalAnalyzerTracks[i].is_used && signalAnalyzerTracks[i].net_id == net_id) {
 80024ea:	493b      	ldr	r1, [pc, #236]	@ (80025d8 <routeSignalAnalyzer+0x278>)
 80024ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024ee:	4613      	mov	r3, r2
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	4413      	add	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	440b      	add	r3, r1
 80024f8:	3308      	adds	r3, #8
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d032      	beq.n	8002566 <routeSignalAnalyzer+0x206>
 8002500:	4935      	ldr	r1, [pc, #212]	@ (80025d8 <routeSignalAnalyzer+0x278>)
 8002502:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002504:	4613      	mov	r3, r2
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	3304      	adds	r3, #4
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	429a      	cmp	r2, r3
 8002516:	d126      	bne.n	8002566 <routeSignalAnalyzer+0x206>
				yIndex = i;
 8002518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800251a:	63fb      	str	r3, [r7, #60]	@ 0x3c
				signalAnalyzerTracks[i].is_used = 0;
 800251c:	492e      	ldr	r1, [pc, #184]	@ (80025d8 <routeSignalAnalyzer+0x278>)
 800251e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002520:	4613      	mov	r3, r2
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	4413      	add	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	3308      	adds	r3, #8
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
				signalAnalyzerTracks[i].net_id = -1;
 8002530:	4929      	ldr	r1, [pc, #164]	@ (80025d8 <routeSignalAnalyzer+0x278>)
 8002532:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002534:	4613      	mov	r3, r2
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	4413      	add	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	3304      	adds	r3, #4
 8002540:	f04f 32ff 	mov.w	r2, #4294967295
 8002544:	601a      	str	r2, [r3, #0]
				signalAnalyzerTracks[i].track_id = -1;
 8002546:	4924      	ldr	r1, [pc, #144]	@ (80025d8 <routeSignalAnalyzer+0x278>)
 8002548:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800254a:	4613      	mov	r3, r2
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	f04f 32ff 	mov.w	r2, #4294967295
 8002558:	601a      	str	r2, [r3, #0]
				printf("Freed Y Pin %d for Net ID %d\n", yIndex, net_id);
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800255e:	4820      	ldr	r0, [pc, #128]	@ (80025e0 <routeSignalAnalyzer+0x280>)
 8002560:	f001 fdc6 	bl	80040f0 <iprintf>
				break;
 8002564:	e005      	b.n	8002572 <routeSignalAnalyzer+0x212>
		for (int i = 0; i < 8; i++) {
 8002566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002568:	3301      	adds	r3, #1
 800256a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800256c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800256e:	2b07      	cmp	r3, #7
 8002570:	ddbb      	ble.n	80024ea <routeSignalAnalyzer+0x18a>
			}
		}
	}

	if (yIndex == -1) {
 8002572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002578:	d103      	bne.n	8002582 <routeSignalAnalyzer+0x222>
		printf("Error: No available Y Pin found for Signal Analyzer\n");
 800257a:	481a      	ldr	r0, [pc, #104]	@ (80025e4 <routeSignalAnalyzer+0x284>)
 800257c:	f001 fe28 	bl	80041d0 <puts>
		return;
 8002580:	e01f      	b.n	80025c2 <routeSignalAnalyzer+0x262>
	}

	printf("Connecting Signal Analyzer to MUX %d at (X: %d, Y: %d) for Net ID %d\n",
 8002582:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002584:	6a3b      	ldr	r3, [r7, #32]
 8002586:	429a      	cmp	r2, r3
 8002588:	d101      	bne.n	800258e <routeSignalAnalyzer+0x22e>
 800258a:	2121      	movs	r1, #33	@ 0x21
 800258c:	e000      	b.n	8002590 <routeSignalAnalyzer+0x230>
 800258e:	2122      	movs	r1, #34	@ 0x22
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002596:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002598:	4813      	ldr	r0, [pc, #76]	@ (80025e8 <routeSignalAnalyzer+0x288>)
 800259a:	f001 fda9 	bl	80040f0 <iprintf>
		   (mux == mux33 ? 33 : 34), xIndex, yIndex, net_id);

	printf("\n");
 800259e:	200a      	movs	r0, #10
 80025a0:	f001 fdb8 	bl	8004114 <putchar>

	// Step 5: Set the connection
	setConnection(xIndex, yIndex, *mux, mode);
 80025a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025a6:	79fa      	ldrb	r2, [r7, #7]
 80025a8:	9202      	str	r2, [sp, #8]
 80025aa:	466c      	mov	r4, sp
 80025ac:	f103 0208 	add.w	r2, r3, #8
 80025b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025b4:	e884 0003 	stmia.w	r4, {r0, r1}
 80025b8:	cb0c      	ldmia	r3, {r2, r3}
 80025ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80025bc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80025be:	f7ff fc31 	bl	8001e24 <setConnection>
}
 80025c2:	374c      	adds	r7, #76	@ 0x4c
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd90      	pop	{r4, r7, pc}
 80025c8:	20003e08 	.word	0x20003e08
 80025cc:	0800637c 	.word	0x0800637c
 80025d0:	08006384 	.word	0x08006384
 80025d4:	080063b4 	.word	0x080063b4
 80025d8:	20004008 	.word	0x20004008
 80025dc:	080063e8 	.word	0x080063e8
 80025e0:	08006408 	.word	0x08006408
 80025e4:	08006428 	.word	0x08006428
 80025e8:	0800645c 	.word	0x0800645c

080025ec <clear>:

void clear() {
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
    printf("Clearing all main tracks and signal analyzer tracks...\n");
 80025f2:	4836      	ldr	r0, [pc, #216]	@ (80026cc <clear+0xe0>)
 80025f4:	f001 fdec 	bl	80041d0 <puts>

    // Step 1: Clear all main tracks
    for (int i = 0; i < 32; i++) {
 80025f8:	2300      	movs	r3, #0
 80025fa:	607b      	str	r3, [r7, #4]
 80025fc:	e01f      	b.n	800263e <clear+0x52>
        mainTracks[i].is_used = 0;
 80025fe:	4a34      	ldr	r2, [pc, #208]	@ (80026d0 <clear+0xe4>)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	4413      	add	r3, r2
 8002606:	3308      	adds	r3, #8
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
        mainTracks[i].net_id = -1;
 800260c:	4a30      	ldr	r2, [pc, #192]	@ (80026d0 <clear+0xe4>)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	4413      	add	r3, r2
 8002614:	3304      	adds	r3, #4
 8002616:	f04f 32ff 	mov.w	r2, #4294967295
 800261a:	601a      	str	r2, [r3, #0]
        mainTracks[i].current_connections = 0;
 800261c:	4a2c      	ldr	r2, [pc, #176]	@ (80026d0 <clear+0xe4>)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	4413      	add	r3, r2
 8002624:	330c      	adds	r3, #12
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
        mainTracks[i].track_id = -1;
 800262a:	4a29      	ldr	r2, [pc, #164]	@ (80026d0 <clear+0xe4>)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	4413      	add	r3, r2
 8002632:	f04f 32ff 	mov.w	r2, #4294967295
 8002636:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 32; i++) {
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3301      	adds	r3, #1
 800263c:	607b      	str	r3, [r7, #4]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b1f      	cmp	r3, #31
 8002642:	dddc      	ble.n	80025fe <clear+0x12>
    }

    printf("All main tracks cleared.\n");
 8002644:	4823      	ldr	r0, [pc, #140]	@ (80026d4 <clear+0xe8>)
 8002646:	f001 fdc3 	bl	80041d0 <puts>

    // Step 2: Clear all signal analyzer tracks
    for (int i = 0; i < 8; i++) {
 800264a:	2300      	movs	r3, #0
 800264c:	603b      	str	r3, [r7, #0]
 800264e:	e021      	b.n	8002694 <clear+0xa8>
        signalAnalyzerTracks[i].is_used = 0;
 8002650:	4921      	ldr	r1, [pc, #132]	@ (80026d8 <clear+0xec>)
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	4613      	mov	r3, r2
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	4413      	add	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	3308      	adds	r3, #8
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
        signalAnalyzerTracks[i].net_id = -1;
 8002664:	491c      	ldr	r1, [pc, #112]	@ (80026d8 <clear+0xec>)
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	4613      	mov	r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	3304      	adds	r3, #4
 8002674:	f04f 32ff 	mov.w	r2, #4294967295
 8002678:	601a      	str	r2, [r3, #0]
        signalAnalyzerTracks[i].track_id = -1;
 800267a:	4917      	ldr	r1, [pc, #92]	@ (80026d8 <clear+0xec>)
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	4613      	mov	r3, r2
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	4413      	add	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	440b      	add	r3, r1
 8002688:	f04f 32ff 	mov.w	r2, #4294967295
 800268c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	3301      	adds	r3, #1
 8002692:	603b      	str	r3, [r7, #0]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	2b07      	cmp	r3, #7
 8002698:	ddda      	ble.n	8002650 <clear+0x64>
    }

    printf("All signal analyzer tracks cleared.\n");
 800269a:	4810      	ldr	r0, [pc, #64]	@ (80026dc <clear+0xf0>)
 800269c:	f001 fd98 	bl	80041d0 <puts>
//    }
//
//    printf("All multiplexer connections cleared.\n");

    // Step 4: Perform hardware reset using RST_GPIO
    LL_GPIO_SetOutputPin(RST_GPIO, RST_PIN);
 80026a0:	490f      	ldr	r1, [pc, #60]	@ (80026e0 <clear+0xf4>)
 80026a2:	4810      	ldr	r0, [pc, #64]	@ (80026e4 <clear+0xf8>)
 80026a4:	f7ff fa76 	bl	8001b94 <LL_GPIO_SetOutputPin>
    LL_mDelay(20);
 80026a8:	2014      	movs	r0, #20
 80026aa:	f001 fb71 	bl	8003d90 <LL_mDelay>
    LL_GPIO_ResetOutputPin(RST_GPIO, RST_PIN);
 80026ae:	490c      	ldr	r1, [pc, #48]	@ (80026e0 <clear+0xf4>)
 80026b0:	480c      	ldr	r0, [pc, #48]	@ (80026e4 <clear+0xf8>)
 80026b2:	f7ff fa7e 	bl	8001bb2 <LL_GPIO_ResetOutputPin>
    LL_mDelay(20);
 80026b6:	2014      	movs	r0, #20
 80026b8:	f001 fb6a 	bl	8003d90 <LL_mDelay>

    printf("RST complete.\n\n");
 80026bc:	480a      	ldr	r0, [pc, #40]	@ (80026e8 <clear+0xfc>)
 80026be:	f001 fd87 	bl	80041d0 <puts>
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	080064a4 	.word	0x080064a4
 80026d0:	20003e08 	.word	0x20003e08
 80026d4:	080064dc 	.word	0x080064dc
 80026d8:	20004008 	.word	0x20004008
 80026dc:	080064f8 	.word	0x080064f8
 80026e0:	04020002 	.word	0x04020002
 80026e4:	40010c00 	.word	0x40010c00
 80026e8:	0800651c 	.word	0x0800651c

080026ec <processCommand>:

void processCommand(char *command) {
 80026ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ee:	b099      	sub	sp, #100	@ 0x64
 80026f0:	af06      	add	r7, sp, #24
 80026f2:	60f8      	str	r0, [r7, #12]
	if (!fault_3v3_triggered || !fault_5v_triggered){ // test tmr
 80026f4:	4b5f      	ldr	r3, [pc, #380]	@ (8002874 <processCommand+0x188>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d004      	beq.n	8002708 <processCommand+0x1c>
 80026fe:	4b5e      	ldr	r3, [pc, #376]	@ (8002878 <processCommand+0x18c>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d161      	bne.n	80027cc <processCommand+0xe0>

		if (strncmp(command, "RB", 2) == 0) {  // Check if it's a "ROUTE" command
 8002708:	2202      	movs	r2, #2
 800270a:	495c      	ldr	r1, [pc, #368]	@ (800287c <processCommand+0x190>)
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f001 fea7 	bl	8004460 <strncmp>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d159      	bne.n	80027cc <processCommand+0xe0>
				int pin1, pin2, net_id, mode, r, g, b;
				int parsed = sscanf(command, "RB %d %d %d %d %d %d %d",
 8002718:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800271c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8002720:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002724:	9304      	str	r3, [sp, #16]
 8002726:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800272a:	9303      	str	r3, [sp, #12]
 800272c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002730:	9302      	str	r3, [sp, #8]
 8002732:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002736:	9301      	str	r3, [sp, #4]
 8002738:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	460b      	mov	r3, r1
 8002740:	494f      	ldr	r1, [pc, #316]	@ (8002880 <processCommand+0x194>)
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f001 fd80 	bl	8004248 <siscanf>
 8002748:	6478      	str	r0, [r7, #68]	@ 0x44
									&pin1, &pin2, &net_id, &mode, &r, &g, &b);
				if (parsed == 7) {  // Ensure all arguments were parsed
 800274a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800274c:	2b07      	cmp	r3, #7
 800274e:	d134      	bne.n	80027ba <processCommand+0xce>
					RGB color = {r, g, b};
 8002750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002752:	61bb      	str	r3, [r7, #24]
 8002754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002756:	61fb      	str	r3, [r7, #28]
 8002758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275a:	623b      	str	r3, [r7, #32]
					printf("Calling routeBreadboard with: Pin1=%d, Pin2=%d, NetID=%d, Mode=%d, RGB(%d,%d,%d)\n",
 800275c:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 800275e:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 8002760:	6b7e      	ldr	r6, [r7, #52]	@ 0x34
 8002762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002764:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002766:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002768:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800276a:	9003      	str	r0, [sp, #12]
 800276c:	9102      	str	r1, [sp, #8]
 800276e:	9201      	str	r2, [sp, #4]
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	4633      	mov	r3, r6
 8002774:	462a      	mov	r2, r5
 8002776:	4621      	mov	r1, r4
 8002778:	4842      	ldr	r0, [pc, #264]	@ (8002884 <processCommand+0x198>)
 800277a:	f001 fcb9 	bl	80040f0 <iprintf>
						   pin1, pin2, net_id, mode, r, g, b);
					fflush(stdout);
 800277e:	4b42      	ldr	r3, [pc, #264]	@ (8002888 <processCommand+0x19c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	4618      	mov	r0, r3
 8002786:	f001 fbdd 	bl	8003f44 <fflush>

					routeBreadboard(pin1, pin2, net_id, muxes, sizeof(muxes) / sizeof(muxes[0]), mode, color);
 800278a:	6bfe      	ldr	r6, [r7, #60]	@ 0x3c
 800278c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002792:	607a      	str	r2, [r7, #4]
 8002794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002796:	b2dd      	uxtb	r5, r3
 8002798:	ac02      	add	r4, sp, #8
 800279a:	f107 0318 	add.w	r3, r7, #24
 800279e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80027a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80027a6:	9501      	str	r5, [sp, #4]
 80027a8:	2322      	movs	r3, #34	@ 0x22
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	4b37      	ldr	r3, [pc, #220]	@ (800288c <processCommand+0x1a0>)
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	4630      	mov	r0, r6
 80027b4:	f7ff fc0c 	bl	8001fd0 <routeBreadboard>
 80027b8:	e008      	b.n	80027cc <processCommand+0xe0>
				} else {
					printf("Error: Invalid RB command format!\n");
 80027ba:	4835      	ldr	r0, [pc, #212]	@ (8002890 <processCommand+0x1a4>)
 80027bc:	f001 fd08 	bl	80041d0 <puts>
					fflush(stdout);
 80027c0:	4b31      	ldr	r3, [pc, #196]	@ (8002888 <processCommand+0x19c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f001 fbbc 	bl	8003f44 <fflush>
				}
			}
		}
		if (strncmp(command, "RS", 2) == 0) {
 80027cc:	2202      	movs	r2, #2
 80027ce:	4931      	ldr	r1, [pc, #196]	@ (8002894 <processCommand+0x1a8>)
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f001 fe45 	bl	8004460 <strncmp>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d128      	bne.n	800282e <processCommand+0x142>
			int net_id, mode;
			int parsed = sscanf(command, "RS %d %d",
 80027dc:	f107 0310 	add.w	r3, r7, #16
 80027e0:	f107 0214 	add.w	r2, r7, #20
 80027e4:	492c      	ldr	r1, [pc, #176]	@ (8002898 <processCommand+0x1ac>)
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f001 fd2e 	bl	8004248 <siscanf>
 80027ec:	6438      	str	r0, [r7, #64]	@ 0x40
								&net_id, &mode);
			if (parsed == 2) {  // Ensure all arguments were parsed
 80027ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d113      	bne.n	800281c <processCommand+0x130>
				printf("Calling routeSignalAnalyzer with: NetID=%d, Mode=%d\n",
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4619      	mov	r1, r3
 80027fa:	4828      	ldr	r0, [pc, #160]	@ (800289c <processCommand+0x1b0>)
 80027fc:	f001 fc78 	bl	80040f0 <iprintf>
					   net_id, mode);
				fflush(stdout);
 8002800:	4b21      	ldr	r3, [pc, #132]	@ (8002888 <processCommand+0x19c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	4618      	mov	r0, r3
 8002808:	f001 fb9c 	bl	8003f44 <fflush>

				routeSignalAnalyzer(net_id, muxes, mode);
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	491e      	ldr	r1, [pc, #120]	@ (800288c <processCommand+0x1a0>)
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff fda3 	bl	8002360 <routeSignalAnalyzer>
 800281a:	e008      	b.n	800282e <processCommand+0x142>
			} else {
				printf("Error: Invalid RS command format!\n");
 800281c:	4820      	ldr	r0, [pc, #128]	@ (80028a0 <processCommand+0x1b4>)
 800281e:	f001 fcd7 	bl	80041d0 <puts>
				fflush(stdout);
 8002822:	4b19      	ldr	r3, [pc, #100]	@ (8002888 <processCommand+0x19c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	4618      	mov	r0, r3
 800282a:	f001 fb8b 	bl	8003f44 <fflush>
		}

	}

    if (strncmp(command, "CLR", 3) == 0) {
 800282e:	2203      	movs	r2, #3
 8002830:	491c      	ldr	r1, [pc, #112]	@ (80028a4 <processCommand+0x1b8>)
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f001 fe14 	bl	8004460 <strncmp>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <processCommand+0x156>
		clear();
 800283e:	f7ff fed5 	bl	80025ec <clear>
	}

    if (strncmp(command, "EN 5V", 5) == 0) {
 8002842:	2205      	movs	r2, #5
 8002844:	4918      	ldr	r1, [pc, #96]	@ (80028a8 <processCommand+0x1bc>)
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f001 fe0a 	bl	8004460 <strncmp>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <processCommand+0x16a>
    	FAULT_5v_HandleMsg();
 8002852:	f7fd fd37 	bl	80002c4 <FAULT_5v_HandleMsg>
	}

    if (strncmp(command, "EN 3V3", 6) == 0) {
 8002856:	2206      	movs	r2, #6
 8002858:	4914      	ldr	r1, [pc, #80]	@ (80028ac <processCommand+0x1c0>)
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f001 fe00 	bl	8004460 <strncmp>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <processCommand+0x17e>
    	FAULT_3v3_HandleMsg();
 8002866:	f7fd fd57 	bl	8000318 <FAULT_3v3_HandleMsg>
	}
}
 800286a:	bf00      	nop
 800286c:	374c      	adds	r7, #76	@ 0x4c
 800286e:	46bd      	mov	sp, r7
 8002870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002872:	bf00      	nop
 8002874:	20000d3c 	.word	0x20000d3c
 8002878:	20000d3d 	.word	0x20000d3d
 800287c:	0800652c 	.word	0x0800652c
 8002880:	08006530 	.word	0x08006530
 8002884:	08006548 	.word	0x08006548
 8002888:	20000cd0 	.word	0x20000cd0
 800288c:	08006688 	.word	0x08006688
 8002890:	0800659c 	.word	0x0800659c
 8002894:	080065c0 	.word	0x080065c0
 8002898:	080065c4 	.word	0x080065c4
 800289c:	080065d0 	.word	0x080065d0
 80028a0:	08006608 	.word	0x08006608
 80028a4:	0800662c 	.word	0x0800662c
 80028a8:	08006630 	.word	0x08006630
 80028ac:	08006638 	.word	0x08006638

080028b0 <UART_ProcessReceivedByte>:
}



void UART_ProcessReceivedByte(uint8_t byte, uint8_t uartNumber)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	460a      	mov	r2, r1
 80028ba:	71fb      	strb	r3, [r7, #7]
 80028bc:	4613      	mov	r3, r2
 80028be:	71bb      	strb	r3, [r7, #6]
    static uint8_t rxBuffer[RX_BUFFER_SIZE];
    static uint8_t rxIndex = 0;

    if (rxIndex < (RX_BUFFER_SIZE - 1))
 80028c0:	4b1a      	ldr	r3, [pc, #104]	@ (800292c <UART_ProcessReceivedByte+0x7c>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b62      	cmp	r3, #98	@ 0x62
 80028c6:	d809      	bhi.n	80028dc <UART_ProcessReceivedByte+0x2c>
    {
        rxBuffer[rxIndex++] = byte;
 80028c8:	4b18      	ldr	r3, [pc, #96]	@ (800292c <UART_ProcessReceivedByte+0x7c>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	b2d1      	uxtb	r1, r2
 80028d0:	4a16      	ldr	r2, [pc, #88]	@ (800292c <UART_ProcessReceivedByte+0x7c>)
 80028d2:	7011      	strb	r1, [r2, #0]
 80028d4:	4619      	mov	r1, r3
 80028d6:	4a16      	ldr	r2, [pc, #88]	@ (8002930 <UART_ProcessReceivedByte+0x80>)
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	5453      	strb	r3, [r2, r1]
    }

    if (byte == '\n' || byte == '\r')
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	2b0a      	cmp	r3, #10
 80028e0:	d002      	beq.n	80028e8 <UART_ProcessReceivedByte+0x38>
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	2b0d      	cmp	r3, #13
 80028e6:	d11c      	bne.n	8002922 <UART_ProcessReceivedByte+0x72>
    {
        rxBuffer[rxIndex] = '\0';  // Null-terminate
 80028e8:	4b10      	ldr	r3, [pc, #64]	@ (800292c <UART_ProcessReceivedByte+0x7c>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	461a      	mov	r2, r3
 80028ee:	4b10      	ldr	r3, [pc, #64]	@ (8002930 <UART_ProcessReceivedByte+0x80>)
 80028f0:	2100      	movs	r1, #0
 80028f2:	5499      	strb	r1, [r3, r2]
        printf("Received from UART%d: %s\n", uartNumber, rxBuffer);
 80028f4:	79bb      	ldrb	r3, [r7, #6]
 80028f6:	4a0e      	ldr	r2, [pc, #56]	@ (8002930 <UART_ProcessReceivedByte+0x80>)
 80028f8:	4619      	mov	r1, r3
 80028fa:	480e      	ldr	r0, [pc, #56]	@ (8002934 <UART_ProcessReceivedByte+0x84>)
 80028fc:	f001 fbf8 	bl	80040f0 <iprintf>
		fflush(stdout);
 8002900:	4b0d      	ldr	r3, [pc, #52]	@ (8002938 <UART_ProcessReceivedByte+0x88>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	4618      	mov	r0, r3
 8002908:	f001 fb1c 	bl	8003f44 <fflush>
        processCommand((char *)rxBuffer);  // Pass to processing function
 800290c:	4808      	ldr	r0, [pc, #32]	@ (8002930 <UART_ProcessReceivedByte+0x80>)
 800290e:	f7ff feed 	bl	80026ec <processCommand>

        memset(rxBuffer, 0, RX_BUFFER_SIZE);
 8002912:	2264      	movs	r2, #100	@ 0x64
 8002914:	2100      	movs	r1, #0
 8002916:	4806      	ldr	r0, [pc, #24]	@ (8002930 <UART_ProcessReceivedByte+0x80>)
 8002918:	f001 fd9a 	bl	8004450 <memset>
        rxIndex = 0;
 800291c:	4b03      	ldr	r3, [pc, #12]	@ (800292c <UART_ProcessReceivedByte+0x7c>)
 800291e:	2200      	movs	r2, #0
 8002920:	701a      	strb	r2, [r3, #0]
    }
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	20004068 	.word	0x20004068
 8002930:	2000406c 	.word	0x2000406c
 8002934:	08006640 	.word	0x08006640
 8002938:	20000cd0 	.word	0x20000cd0

0800293c <LL_ADC_REG_SetContinuousMode>:
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_CONT, Continuous);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f023 0202 	bic.w	r2, r3, #2
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	609a      	str	r2, [r3, #8]
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f043 0201 	orr.w	r2, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	609a      	str	r2, [r3, #8]
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr

0800297e <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f043 0204 	orr.w	r2, r3, #4
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	609a      	str	r2, [r3, #8]
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR2      CAL            LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	bf0c      	ite	eq
 80029b0:	2301      	moveq	r3, #1
 80029b2:	2300      	movne	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f443 02a0 	orr.w	r2, r3, #5242880	@ 0x500000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	609a      	str	r2, [r3, #8]
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr

080029de <LL_TIM_EnableCounter>:
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f043 0201 	orr.w	r2, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	601a      	str	r2, [r3, #0]
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <SignalAnalyzer_Init>:

/**
  * @brief  Initializes the ADC and TIM6.
  */
void SignalAnalyzer_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
    // Enable ADC
    LL_ADC_Enable(ADC1);
 8002a00:	480d      	ldr	r0, [pc, #52]	@ (8002a38 <SignalAnalyzer_Init+0x3c>)
 8002a02:	f7ff ffad 	bl	8002960 <LL_ADC_Enable>
    LL_mDelay(1);
 8002a06:	2001      	movs	r0, #1
 8002a08:	f001 f9c2 	bl	8003d90 <LL_mDelay>

    // Calibrate ADC before use (optional but recommended)
    LL_ADC_StartCalibration(ADC1);
 8002a0c:	480a      	ldr	r0, [pc, #40]	@ (8002a38 <SignalAnalyzer_Init+0x3c>)
 8002a0e:	f7ff ffb6 	bl	800297e <LL_ADC_StartCalibration>
    while (LL_ADC_IsCalibrationOnGoing(ADC1));
 8002a12:	bf00      	nop
 8002a14:	4808      	ldr	r0, [pc, #32]	@ (8002a38 <SignalAnalyzer_Init+0x3c>)
 8002a16:	f7ff ffc1 	bl	800299c <LL_ADC_IsCalibrationOnGoing>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1f9      	bne.n	8002a14 <SignalAnalyzer_Init+0x18>

    // Ensure ADC is set in continuous mode (if not set in CubeMX)
    LL_ADC_REG_SetContinuousMode(ADC1, LL_ADC_REG_CONV_CONTINUOUS);
 8002a20:	2102      	movs	r1, #2
 8002a22:	4805      	ldr	r0, [pc, #20]	@ (8002a38 <SignalAnalyzer_Init+0x3c>)
 8002a24:	f7ff ff8a 	bl	800293c <LL_ADC_REG_SetContinuousMode>

    // Start ADC conversion
    LL_ADC_REG_StartConversionSWStart(ADC1);
 8002a28:	4803      	ldr	r0, [pc, #12]	@ (8002a38 <SignalAnalyzer_Init+0x3c>)
 8002a2a:	f7ff ffc9 	bl	80029c0 <LL_ADC_REG_StartConversionSWStart>

    // Enable TIM6 for timestamping
    LL_TIM_EnableCounter(TIM6);
 8002a2e:	4803      	ldr	r0, [pc, #12]	@ (8002a3c <SignalAnalyzer_Init+0x40>)
 8002a30:	f7ff ffd5 	bl	80029de <LL_TIM_EnableCounter>
}
 8002a34:	bf00      	nop
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40012400 	.word	0x40012400
 8002a3c:	40001000 	.word	0x40001000

08002a40 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8002a48:	4b07      	ldr	r3, [pc, #28]	@ (8002a68 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8002a4a:	695a      	ldr	r2, [r3, #20]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	bf0c      	ite	eq
 8002a56:	2301      	moveq	r3, #1
 8002a58:	2300      	movne	r3, #0
 8002a5a:	b2db      	uxtb	r3, r3
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	40010400 	.word	0x40010400

08002a6c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8002a74:	4a03      	ldr	r2, [pc, #12]	@ (8002a84 <LL_EXTI_ClearFlag_0_31+0x18>)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6153      	str	r3, [r2, #20]
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr
 8002a84:	40010400 	.word	0x40010400

08002a88 <LL_USART_IsActiveFlag_RXNE>:
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0320 	and.w	r3, r3, #32
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	bf0c      	ite	eq
 8002a9c:	2301      	moveq	r3, #1
 8002a9e:	2300      	movne	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr

08002aac <LL_USART_ReceiveData8>:
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	b2db      	uxtb	r3, r3
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ac8:	bf00      	nop
 8002aca:	e7fd      	b.n	8002ac8 <NMI_Handler+0x4>

08002acc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ad0:	bf00      	nop
 8002ad2:	e7fd      	b.n	8002ad0 <HardFault_Handler+0x4>

08002ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ad8:	bf00      	nop
 8002ada:	e7fd      	b.n	8002ad8 <MemManage_Handler+0x4>

08002adc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ae0:	bf00      	nop
 8002ae2:	e7fd      	b.n	8002ae0 <BusFault_Handler+0x4>

08002ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ae8:	bf00      	nop
 8002aea:	e7fd      	b.n	8002ae8 <UsageFault_Handler+0x4>

08002aec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002af0:	bf00      	nop
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002afc:	bf00      	nop
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b08:	bf00      	nop
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr

08002b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

//	LL_TIM_DisableDMAReq_CC1(TIM2);
//	LL_TIM_CC_DisableChannel(TIM2, LL_TIM_CHANNEL_CH1);

	        LL_TIM_PWM_PulseFinishedCallback(TIM2);
 8002b20:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002b24:	f7fd fea4 	bl	8000870 <LL_TIM_PWM_PulseFinishedCallback>

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002b28:	bf00      	nop
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
	if (LL_USART_IsActiveFlag_RXNE(USART1))
 8002b32:	480a      	ldr	r0, [pc, #40]	@ (8002b5c <USART1_IRQHandler+0x30>)
 8002b34:	f7ff ffa8 	bl	8002a88 <LL_USART_IsActiveFlag_RXNE>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d009      	beq.n	8002b52 <USART1_IRQHandler+0x26>
	{
		uint8_t receivedByte = LL_USART_ReceiveData8(USART1);
 8002b3e:	4807      	ldr	r0, [pc, #28]	@ (8002b5c <USART1_IRQHandler+0x30>)
 8002b40:	f7ff ffb4 	bl	8002aac <LL_USART_ReceiveData8>
 8002b44:	4603      	mov	r3, r0
 8002b46:	71fb      	strb	r3, [r7, #7]
		UART_ProcessReceivedByte(receivedByte, 1);  // Process received data for UART1
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff feaf 	bl	80028b0 <UART_ProcessReceivedByte>
	}
  /* USER CODE END USART1_IRQn 1 */
}
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40013800 	.word	0x40013800

08002b60 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */
	 if (LL_USART_IsActiveFlag_RXNE(USART3))
 8002b66:	480a      	ldr	r0, [pc, #40]	@ (8002b90 <USART3_IRQHandler+0x30>)
 8002b68:	f7ff ff8e 	bl	8002a88 <LL_USART_IsActiveFlag_RXNE>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d009      	beq.n	8002b86 <USART3_IRQHandler+0x26>
	{
		uint8_t receivedByte = LL_USART_ReceiveData8(USART3);
 8002b72:	4807      	ldr	r0, [pc, #28]	@ (8002b90 <USART3_IRQHandler+0x30>)
 8002b74:	f7ff ff9a 	bl	8002aac <LL_USART_ReceiveData8>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	71fb      	strb	r3, [r7, #7]
		UART_ProcessReceivedByte(receivedByte, 3);  // Process received data for UART3
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	2103      	movs	r1, #3
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fe95 	bl	80028b0 <UART_ProcessReceivedByte>
	}
  /* USER CODE END USART3_IRQn 1 */
}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40004800 	.word	0x40004800

08002b94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_12) != RESET)
 8002b98:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002b9c:	f7ff ff50 	bl	8002a40 <LL_EXTI_IsActiveFlag_0_31>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d005      	beq.n	8002bb2 <EXTI15_10_IRQHandler+0x1e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_12);
 8002ba6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002baa:	f7ff ff5f 	bl	8002a6c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_12 */
    FAULT_3v3_HandleInterrupt();  // Handle FAULT 3V3
 8002bae:	f7fd fb79 	bl	80002a4 <FAULT_3v3_HandleInterrupt>
    /* USER CODE END LL_EXTI_LINE_12 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8002bb2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002bb6:	f7ff ff43 	bl	8002a40 <LL_EXTI_IsActiveFlag_0_31>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8002bc0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002bc4:	f7ff ff52 	bl	8002a6c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */
    FAULT_5v_HandleInterrupt();  // Handle FAULT 3V3
 8002bc8:	f7fd fb5c 	bl	8000284 <FAULT_5v_HandleInterrupt>
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002bcc:	bf00      	nop
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	e00a      	b.n	8002bf8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002be2:	f3af 8000 	nop.w
 8002be6:	4601      	mov	r1, r0
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	60ba      	str	r2, [r7, #8]
 8002bee:	b2ca      	uxtb	r2, r1
 8002bf0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	dbf0      	blt.n	8002be2 <_read+0x12>
  }

  return len;
 8002c00:	687b      	ldr	r3, [r7, #4]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <_close>:
  }
  return len;
}

int _close(int file)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr

08002c20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c30:	605a      	str	r2, [r3, #4]
  return 0;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr

08002c3e <_isatty>:

int _isatty(int file)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c46:	2301      	movs	r3, #1
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr

08002c52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b085      	sub	sp, #20
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr
	...

08002c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c74:	4a14      	ldr	r2, [pc, #80]	@ (8002cc8 <_sbrk+0x5c>)
 8002c76:	4b15      	ldr	r3, [pc, #84]	@ (8002ccc <_sbrk+0x60>)
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c80:	4b13      	ldr	r3, [pc, #76]	@ (8002cd0 <_sbrk+0x64>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d102      	bne.n	8002c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c88:	4b11      	ldr	r3, [pc, #68]	@ (8002cd0 <_sbrk+0x64>)
 8002c8a:	4a12      	ldr	r2, [pc, #72]	@ (8002cd4 <_sbrk+0x68>)
 8002c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c8e:	4b10      	ldr	r3, [pc, #64]	@ (8002cd0 <_sbrk+0x64>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4413      	add	r3, r2
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d207      	bcs.n	8002cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c9c:	f001 fc38 	bl	8004510 <__errno>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	220c      	movs	r2, #12
 8002ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8002caa:	e009      	b.n	8002cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cac:	4b08      	ldr	r3, [pc, #32]	@ (8002cd0 <_sbrk+0x64>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cb2:	4b07      	ldr	r3, [pc, #28]	@ (8002cd0 <_sbrk+0x64>)
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4413      	add	r3, r2
 8002cba:	4a05      	ldr	r2, [pc, #20]	@ (8002cd0 <_sbrk+0x64>)
 8002cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	20010000 	.word	0x20010000
 8002ccc:	00000400 	.word	0x00000400
 8002cd0:	200040d0 	.word	0x200040d0
 8002cd4:	20004220 	.word	0x20004220

08002cd8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cdc:	bf00      	nop
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr

08002ce4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ce4:	f7ff fff8 	bl	8002cd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ce8:	480b      	ldr	r0, [pc, #44]	@ (8002d18 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002cea:	490c      	ldr	r1, [pc, #48]	@ (8002d1c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002cec:	4a0c      	ldr	r2, [pc, #48]	@ (8002d20 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cf0:	e002      	b.n	8002cf8 <LoopCopyDataInit>

08002cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cf6:	3304      	adds	r3, #4

08002cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cfc:	d3f9      	bcc.n	8002cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cfe:	4a09      	ldr	r2, [pc, #36]	@ (8002d24 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002d00:	4c09      	ldr	r4, [pc, #36]	@ (8002d28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d04:	e001      	b.n	8002d0a <LoopFillZerobss>

08002d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d08:	3204      	adds	r2, #4

08002d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d0c:	d3fb      	bcc.n	8002d06 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8002d0e:	f001 fc05 	bl	800451c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d12:	f7fe fb53 	bl	80013bc <main>
  bx lr
 8002d16:	4770      	bx	lr
  ldr r0, =_sdata
 8002d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d1c:	20000d20 	.word	0x20000d20
  ldr r2, =_sidata
 8002d20:	08006a20 	.word	0x08006a20
  ldr r2, =_sbss
 8002d24:	20000d20 	.word	0x20000d20
  ldr r4, =_ebss
 8002d28:	20004220 	.word	0x20004220

08002d2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d2c:	e7fe      	b.n	8002d2c <ADC1_2_IRQHandler>

08002d2e <LL_ADC_REG_SetSequencerLength>:
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr

08002d52 <LL_ADC_IsEnabled>:
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	bf0c      	ite	eq
 8002d66:	2301      	moveq	r3, #1
 8002d68:	2300      	movne	r3, #0
 8002d6a:	b2db      	uxtb	r3, r3
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr
	...

08002d78 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8002d78:	b590      	push	{r4, r7, lr}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002d82:	2300      	movs	r3, #0
 8002d84:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8002d86:	4813      	ldr	r0, [pc, #76]	@ (8002dd4 <LL_ADC_CommonInit+0x5c>)
 8002d88:	f7ff ffe3 	bl	8002d52 <LL_ADC_IsEnabled>
 8002d8c:	4604      	mov	r4, r0
 8002d8e:	4812      	ldr	r0, [pc, #72]	@ (8002dd8 <LL_ADC_CommonInit+0x60>)
 8002d90:	f7ff ffdf 	bl	8002d52 <LL_ADC_IsEnabled>
 8002d94:	4603      	mov	r3, r0
 8002d96:	4323      	orrs	r3, r4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d114      	bne.n	8002dc6 <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d009      	beq.n	8002db8 <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	431a      	orrs	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	e008      	b.n	8002dca <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	605a      	str	r2, [r3, #4]
 8002dc4:	e001      	b.n	8002dca <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd90      	pop	{r4, r7, pc}
 8002dd4:	40012400 	.word	0x40012400
 8002dd8:	40012800 	.word	0x40012800

08002ddc <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002de6:	2300      	movs	r3, #0
 8002de8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7ff ffb1 	bl	8002d52 <LL_ADC_IsEnabled>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d112      	bne.n	8002e1c <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	609a      	str	r2, [r3, #8]
 8002e1a:	e001      	b.n	8002e20 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b084      	sub	sp, #16
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002e34:	2300      	movs	r3, #0
 8002e36:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff ff8a 	bl	8002d52 <LL_ADC_IsEnabled>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d131      	bne.n	8002ea8 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00c      	beq.n	8002e66 <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	6859      	ldr	r1, [r3, #4]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	605a      	str	r2, [r3, #4]
 8002e64:	e008      	b.n	8002e78 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 8002e80:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	6811      	ldr	r1, [r2, #0]
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	68d2      	ldr	r2, [r2, #12]
 8002e8c:	4311      	orrs	r1, r2
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	6912      	ldr	r2, [r2, #16]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	431a      	orrs	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff ff44 	bl	8002d2e <LL_ADC_REG_SetSequencerLength>
 8002ea6:	e001      	b.n	8002eac <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <LL_EXTI_EnableIT_0_31>:
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002ec0:	4b05      	ldr	r3, [pc, #20]	@ (8002ed8 <LL_EXTI_EnableIT_0_31+0x20>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4904      	ldr	r1, [pc, #16]	@ (8002ed8 <LL_EXTI_EnableIT_0_31+0x20>)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	600b      	str	r3, [r1, #0]
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40010400 	.word	0x40010400

08002edc <LL_EXTI_DisableIT_0_31>:
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002ee4:	4b05      	ldr	r3, [pc, #20]	@ (8002efc <LL_EXTI_DisableIT_0_31+0x20>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	43db      	mvns	r3, r3
 8002eec:	4903      	ldr	r1, [pc, #12]	@ (8002efc <LL_EXTI_DisableIT_0_31+0x20>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	600b      	str	r3, [r1, #0]
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr
 8002efc:	40010400 	.word	0x40010400

08002f00 <LL_EXTI_EnableEvent_0_31>:
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002f08:	4b05      	ldr	r3, [pc, #20]	@ (8002f20 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	4904      	ldr	r1, [pc, #16]	@ (8002f20 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	604b      	str	r3, [r1, #4]
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40010400 	.word	0x40010400

08002f24 <LL_EXTI_DisableEvent_0_31>:
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002f2c:	4b05      	ldr	r3, [pc, #20]	@ (8002f44 <LL_EXTI_DisableEvent_0_31+0x20>)
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	43db      	mvns	r3, r3
 8002f34:	4903      	ldr	r1, [pc, #12]	@ (8002f44 <LL_EXTI_DisableEvent_0_31+0x20>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	604b      	str	r3, [r1, #4]
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr
 8002f44:	40010400 	.word	0x40010400

08002f48 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002f50:	4b05      	ldr	r3, [pc, #20]	@ (8002f68 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	4904      	ldr	r1, [pc, #16]	@ (8002f68 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	608b      	str	r3, [r1, #8]
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40010400 	.word	0x40010400

08002f6c <LL_EXTI_DisableRisingTrig_0_31>:
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002f74:	4b05      	ldr	r3, [pc, #20]	@ (8002f8c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	4903      	ldr	r1, [pc, #12]	@ (8002f8c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	608b      	str	r3, [r1, #8]
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr
 8002f8c:	40010400 	.word	0x40010400

08002f90 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002f98:	4b05      	ldr	r3, [pc, #20]	@ (8002fb0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	4904      	ldr	r1, [pc, #16]	@ (8002fb0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60cb      	str	r3, [r1, #12]
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40010400 	.word	0x40010400

08002fb4 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002fbc:	4b05      	ldr	r3, [pc, #20]	@ (8002fd4 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002fbe:	68da      	ldr	r2, [r3, #12]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	4903      	ldr	r1, [pc, #12]	@ (8002fd4 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	60cb      	str	r3, [r1, #12]
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr
 8002fd4:	40010400 	.word	0x40010400

08002fd8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	791b      	ldrb	r3, [r3, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d065      	beq.n	80030b8 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d06b      	beq.n	80030cc <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	795b      	ldrb	r3, [r3, #5]
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d01c      	beq.n	8003036 <LL_EXTI_Init+0x5e>
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	dc25      	bgt.n	800304c <LL_EXTI_Init+0x74>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <LL_EXTI_Init+0x32>
 8003004:	2b01      	cmp	r3, #1
 8003006:	d00b      	beq.n	8003020 <LL_EXTI_Init+0x48>
 8003008:	e020      	b.n	800304c <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff ff88 	bl	8002f24 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff ff4d 	bl	8002eb8 <LL_EXTI_EnableIT_0_31>
          break;
 800301e:	e018      	b.n	8003052 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff ff59 	bl	8002edc <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff ff66 	bl	8002f00 <LL_EXTI_EnableEvent_0_31>
          break;
 8003034:	e00d      	b.n	8003052 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff ff3c 	bl	8002eb8 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff ff5b 	bl	8002f00 <LL_EXTI_EnableEvent_0_31>
          break;
 800304a:	e002      	b.n	8003052 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	73fb      	strb	r3, [r7, #15]
          break;
 8003050:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	799b      	ldrb	r3, [r3, #6]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d038      	beq.n	80030cc <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	799b      	ldrb	r3, [r3, #6]
 800305e:	2b03      	cmp	r3, #3
 8003060:	d01c      	beq.n	800309c <LL_EXTI_Init+0xc4>
 8003062:	2b03      	cmp	r3, #3
 8003064:	dc25      	bgt.n	80030b2 <LL_EXTI_Init+0xda>
 8003066:	2b01      	cmp	r3, #1
 8003068:	d002      	beq.n	8003070 <LL_EXTI_Init+0x98>
 800306a:	2b02      	cmp	r3, #2
 800306c:	d00b      	beq.n	8003086 <LL_EXTI_Init+0xae>
 800306e:	e020      	b.n	80030b2 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff ff9d 	bl	8002fb4 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff ff62 	bl	8002f48 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8003084:	e022      	b.n	80030cc <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff ff6e 	bl	8002f6c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff ff7b 	bl	8002f90 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800309a:	e017      	b.n	80030cc <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ff51 	bl	8002f48 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff ff70 	bl	8002f90 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80030b0:	e00c      	b.n	80030cc <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	73fb      	strb	r3, [r7, #15]
            break;
 80030b6:	e009      	b.n	80030cc <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff ff0d 	bl	8002edc <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff ff2c 	bl	8002f24 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <LL_GPIO_SetPinMode>:
{
 80030d6:	b490      	push	{r4, r7}
 80030d8:	b088      	sub	sp, #32
 80030da:	af00      	add	r7, sp, #0
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	461a      	mov	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	0e1b      	lsrs	r3, r3, #24
 80030ea:	4413      	add	r3, r2
 80030ec:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80030ee:	6822      	ldr	r2, [r4, #0]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	fa93 f3a3 	rbit	r3, r3
 80030fa:	613b      	str	r3, [r7, #16]
  return result;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	fab3 f383 	clz	r3, r3
 8003102:	b2db      	uxtb	r3, r3
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	210f      	movs	r1, #15
 8003108:	fa01 f303 	lsl.w	r3, r1, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	401a      	ands	r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	fa93 f3a3 	rbit	r3, r3
 800311a:	61bb      	str	r3, [r7, #24]
  return result;
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	fab3 f383 	clz	r3, r3
 8003122:	b2db      	uxtb	r3, r3
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	fa01 f303 	lsl.w	r3, r1, r3
 800312c:	4313      	orrs	r3, r2
 800312e:	6023      	str	r3, [r4, #0]
}
 8003130:	bf00      	nop
 8003132:	3720      	adds	r7, #32
 8003134:	46bd      	mov	sp, r7
 8003136:	bc90      	pop	{r4, r7}
 8003138:	4770      	bx	lr

0800313a <LL_GPIO_SetPinSpeed>:
{
 800313a:	b490      	push	{r4, r7}
 800313c:	b088      	sub	sp, #32
 800313e:	af00      	add	r7, sp, #0
 8003140:	60f8      	str	r0, [r7, #12]
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	461a      	mov	r2, r3
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	0e1b      	lsrs	r3, r3, #24
 800314e:	4413      	add	r3, r2
 8003150:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8003152:	6822      	ldr	r2, [r4, #0]
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	fa93 f3a3 	rbit	r3, r3
 800315e:	613b      	str	r3, [r7, #16]
  return result;
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	fab3 f383 	clz	r3, r3
 8003166:	b2db      	uxtb	r3, r3
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	2103      	movs	r1, #3
 800316c:	fa01 f303 	lsl.w	r3, r1, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	401a      	ands	r2, r3
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	fa93 f3a3 	rbit	r3, r3
 800317e:	61bb      	str	r3, [r7, #24]
  return result;
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	fab3 f383 	clz	r3, r3
 8003186:	b2db      	uxtb	r3, r3
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	fa01 f303 	lsl.w	r3, r1, r3
 8003190:	4313      	orrs	r3, r2
 8003192:	6023      	str	r3, [r4, #0]
}
 8003194:	bf00      	nop
 8003196:	3720      	adds	r7, #32
 8003198:	46bd      	mov	sp, r7
 800319a:	bc90      	pop	{r4, r7}
 800319c:	4770      	bx	lr

0800319e <LL_GPIO_SetPinOutputType>:
{
 800319e:	b490      	push	{r4, r7}
 80031a0:	b088      	sub	sp, #32
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	461a      	mov	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	0e1b      	lsrs	r3, r3, #24
 80031b2:	4413      	add	r3, r2
 80031b4:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80031b6:	6822      	ldr	r2, [r4, #0]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	fa93 f3a3 	rbit	r3, r3
 80031c2:	613b      	str	r3, [r7, #16]
  return result;
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	fab3 f383 	clz	r3, r3
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	2104      	movs	r1, #4
 80031d0:	fa01 f303 	lsl.w	r3, r1, r3
 80031d4:	43db      	mvns	r3, r3
 80031d6:	401a      	ands	r2, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	fa93 f3a3 	rbit	r3, r3
 80031e2:	61bb      	str	r3, [r7, #24]
  return result;
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	fab3 f383 	clz	r3, r3
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	fa01 f303 	lsl.w	r3, r1, r3
 80031f4:	4313      	orrs	r3, r2
 80031f6:	6023      	str	r3, [r4, #0]
}
 80031f8:	bf00      	nop
 80031fa:	3720      	adds	r7, #32
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc90      	pop	{r4, r7}
 8003200:	4770      	bx	lr

08003202 <LL_GPIO_SetPinPull>:
{
 8003202:	b480      	push	{r7}
 8003204:	b087      	sub	sp, #28
 8003206:	af00      	add	r7, sp, #0
 8003208:	60f8      	str	r0, [r7, #12]
 800320a:	60b9      	str	r1, [r7, #8]
 800320c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	0a1b      	lsrs	r3, r3, #8
 8003216:	43db      	mvns	r3, r3
 8003218:	401a      	ands	r2, r3
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	0a1b      	lsrs	r3, r3, #8
 800321e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	fa93 f3a3 	rbit	r3, r3
 8003226:	613b      	str	r3, [r7, #16]
  return result;
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	fab3 f383 	clz	r3, r3
 800322e:	b2db      	uxtb	r3, r3
 8003230:	4619      	mov	r1, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	408b      	lsls	r3, r1
 8003236:	431a      	orrs	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	60da      	str	r2, [r3, #12]
}
 800323c:	bf00      	nop
 800323e:	371c      	adds	r7, #28
 8003240:	46bd      	mov	sp, r7
 8003242:	bc80      	pop	{r7}
 8003244:	4770      	bx	lr

08003246 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b088      	sub	sp, #32
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	021b      	lsls	r3, r3, #8
 8003256:	0c1b      	lsrs	r3, r3, #16
 8003258:	617b      	str	r3, [r7, #20]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	fa93 f3a3 	rbit	r3, r3
 8003264:	60fb      	str	r3, [r7, #12]
  return result;
 8003266:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8003268:	fab3 f383 	clz	r3, r3
 800326c:	b2db      	uxtb	r3, r3
 800326e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8003270:	e044      	b.n	80032fc <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8003272:	2201      	movs	r2, #1
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	409a      	lsls	r2, r3
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	4013      	ands	r3, r2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d03a      	beq.n	80032f6 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	2b07      	cmp	r3, #7
 8003284:	d806      	bhi.n	8003294 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8003286:	f240 1201 	movw	r2, #257	@ 0x101
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	61bb      	str	r3, [r7, #24]
 8003292:	e008      	b.n	80032a6 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	3b08      	subs	r3, #8
 8003298:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80032a4:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d106      	bne.n	80032bc <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	461a      	mov	r2, r3
 80032b4:	69b9      	ldr	r1, [r7, #24]
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7ff ffa3 	bl	8003202 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	461a      	mov	r2, r3
 80032c2:	69b9      	ldr	r1, [r7, #24]
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f7ff ff06 	bl	80030d6 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d003      	beq.n	80032da <LL_GPIO_Init+0x94>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b09      	cmp	r3, #9
 80032d8:	d10d      	bne.n	80032f6 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	461a      	mov	r2, r3
 80032e0:	69b9      	ldr	r1, [r7, #24]
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff ff29 	bl	800313a <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	461a      	mov	r2, r3
 80032ee:	69b9      	ldr	r1, [r7, #24]
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7ff ff54 	bl	800319e <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	3301      	adds	r3, #1
 80032fa:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	fa22 f303 	lsr.w	r3, r2, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1b4      	bne.n	8003272 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3720      	adds	r7, #32
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
	...

08003314 <LL_RCC_HSE_GetPrediv2>:
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV2));
 8003318:	4b03      	ldr	r3, [pc, #12]	@ (8003328 <LL_RCC_HSE_GetPrediv2+0x14>)
 800331a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800331c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003320:	4618      	mov	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr
 8003328:	40021000 	.word	0x40021000

0800332c <LL_RCC_GetSysClkSource>:
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003330:	4b03      	ldr	r3, [pc, #12]	@ (8003340 <LL_RCC_GetSysClkSource+0x14>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f003 030c 	and.w	r3, r3, #12
}
 8003338:	4618      	mov	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr
 8003340:	40021000 	.word	0x40021000

08003344 <LL_RCC_GetAHBPrescaler>:
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003348:	4b03      	ldr	r3, [pc, #12]	@ (8003358 <LL_RCC_GetAHBPrescaler+0x14>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003350:	4618      	mov	r0, r3
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr
 8003358:	40021000 	.word	0x40021000

0800335c <LL_RCC_GetAPB1Prescaler>:
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003360:	4b03      	ldr	r3, [pc, #12]	@ (8003370 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8003368:	4618      	mov	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr
 8003370:	40021000 	.word	0x40021000

08003374 <LL_RCC_GetAPB2Prescaler>:
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003378:	4b03      	ldr	r3, [pc, #12]	@ (8003388 <LL_RCC_GetAPB2Prescaler+0x14>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8003380:	4618      	mov	r0, r3
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr
 8003388:	40021000 	.word	0x40021000

0800338c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
 8003392:	4b09      	ldr	r3, [pc, #36]	@ (80033b8 <LL_RCC_PLL_GetMainSource+0x2c>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800339a:	607b      	str	r3, [r7, #4]
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
 800339c:	4b06      	ldr	r3, [pc, #24]	@ (80033b8 <LL_RCC_PLL_GetMainSource+0x2c>)
 800339e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a0:	011b      	lsls	r3, r3, #4
 80033a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033a6:	603b      	str	r3, [r7, #0]
  return (uint32_t)(pllsrc | predivsrc);
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	4313      	orrs	r3, r2
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr
 80033b8:	40021000 	.word	0x40021000

080033bc <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 80033c0:	4b03      	ldr	r3, [pc, #12]	@ (80033d0 <LL_RCC_PLL_GetMultiplicator+0x14>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr
 80033d0:	40021000 	.word	0x40021000

080033d4 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
 80033d8:	4b03      	ldr	r3, [pc, #12]	@ (80033e8 <LL_RCC_PLL_GetPrediv+0x14>)
 80033da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033dc:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
#endif /*RCC_CFGR2_PREDIV1*/
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr
 80033e8:	40021000 	.word	0x40021000

080033ec <LL_RCC_PLL2_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL2_MUL_14
  *         @arg @ref LL_RCC_PLL2_MUL_16
  *         @arg @ref LL_RCC_PLL2_MUL_20
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetMultiplicator(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL2MUL));
 80033f0:	4b03      	ldr	r3, [pc, #12]	@ (8003400 <LL_RCC_PLL2_GetMultiplicator+0x14>)
 80033f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bc80      	pop	{r7}
 80033fe:	4770      	bx	lr
 8003400:	40021000 	.word	0x40021000

08003404 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800340c:	f000 f820 	bl	8003450 <RCC_GetSystemClockFreq>
 8003410:	4602      	mov	r2, r0
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f000 f83e 	bl	800349c <RCC_GetHCLKClockFreq>
 8003420:	4602      	mov	r2, r0
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	4618      	mov	r0, r3
 800342c:	f000 f84c 	bl	80034c8 <RCC_GetPCLK1ClockFreq>
 8003430:	4602      	mov	r2, r0
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	4618      	mov	r0, r3
 800343c:	f000 f858 	bl	80034f0 <RCC_GetPCLK2ClockFreq>
 8003440:	4602      	mov	r2, r0
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	60da      	str	r2, [r3, #12]
}
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
	...

08003450 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003456:	2300      	movs	r3, #0
 8003458:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800345a:	f7ff ff67 	bl	800332c <LL_RCC_GetSysClkSource>
 800345e:	4603      	mov	r3, r0
 8003460:	2b08      	cmp	r3, #8
 8003462:	d00c      	beq.n	800347e <RCC_GetSystemClockFreq+0x2e>
 8003464:	2b08      	cmp	r3, #8
 8003466:	d80e      	bhi.n	8003486 <RCC_GetSystemClockFreq+0x36>
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <RCC_GetSystemClockFreq+0x22>
 800346c:	2b04      	cmp	r3, #4
 800346e:	d003      	beq.n	8003478 <RCC_GetSystemClockFreq+0x28>
 8003470:	e009      	b.n	8003486 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003472:	4b09      	ldr	r3, [pc, #36]	@ (8003498 <RCC_GetSystemClockFreq+0x48>)
 8003474:	607b      	str	r3, [r7, #4]
      break;
 8003476:	e009      	b.n	800348c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003478:	4b07      	ldr	r3, [pc, #28]	@ (8003498 <RCC_GetSystemClockFreq+0x48>)
 800347a:	607b      	str	r3, [r7, #4]
      break;
 800347c:	e006      	b.n	800348c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800347e:	f000 f84b 	bl	8003518 <RCC_PLL_GetFreqDomain_SYS>
 8003482:	6078      	str	r0, [r7, #4]
      break;
 8003484:	e002      	b.n	800348c <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8003486:	4b04      	ldr	r3, [pc, #16]	@ (8003498 <RCC_GetSystemClockFreq+0x48>)
 8003488:	607b      	str	r3, [r7, #4]
      break;
 800348a:	bf00      	nop
  }

  return frequency;
 800348c:	687b      	ldr	r3, [r7, #4]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	007a1200 	.word	0x007a1200

0800349c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80034a4:	f7ff ff4e 	bl	8003344 <LL_RCC_GetAHBPrescaler>
 80034a8:	4603      	mov	r3, r0
 80034aa:	091b      	lsrs	r3, r3, #4
 80034ac:	f003 030f 	and.w	r3, r3, #15
 80034b0:	4a04      	ldr	r2, [pc, #16]	@ (80034c4 <RCC_GetHCLKClockFreq+0x28>)
 80034b2:	5cd3      	ldrb	r3, [r2, r3]
 80034b4:	461a      	mov	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	40d3      	lsrs	r3, r2
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	080068a8 	.word	0x080068a8

080034c8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80034d0:	f7ff ff44 	bl	800335c <LL_RCC_GetAPB1Prescaler>
 80034d4:	4603      	mov	r3, r0
 80034d6:	0a1b      	lsrs	r3, r3, #8
 80034d8:	4a04      	ldr	r2, [pc, #16]	@ (80034ec <RCC_GetPCLK1ClockFreq+0x24>)
 80034da:	5cd3      	ldrb	r3, [r2, r3]
 80034dc:	461a      	mov	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	40d3      	lsrs	r3, r2
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	080068b8 	.word	0x080068b8

080034f0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80034f8:	f7ff ff3c 	bl	8003374 <LL_RCC_GetAPB2Prescaler>
 80034fc:	4603      	mov	r3, r0
 80034fe:	0adb      	lsrs	r3, r3, #11
 8003500:	4a04      	ldr	r2, [pc, #16]	@ (8003514 <RCC_GetPCLK2ClockFreq+0x24>)
 8003502:	5cd3      	ldrb	r3, [r2, r3]
 8003504:	461a      	mov	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	40d3      	lsrs	r3, r2
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	080068b8 	.word	0x080068b8

08003518 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003518:	b590      	push	{r4, r7, lr}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800351e:	2300      	movs	r3, #0
 8003520:	607b      	str	r3, [r7, #4]
 8003522:	2300      	movs	r3, #0
 8003524:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003526:	f7ff ff31 	bl	800338c <LL_RCC_PLL_GetMainSource>
 800352a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8003532:	d017      	beq.n	8003564 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 800353a:	d81e      	bhi.n	800357a <RCC_PLL_GetFreqDomain_SYS+0x62>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d004      	beq.n	800354c <RCC_PLL_GetFreqDomain_SYS+0x34>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003548:	d003      	beq.n	8003552 <RCC_PLL_GetFreqDomain_SYS+0x3a>
 800354a:	e016      	b.n	800357a <RCC_PLL_GetFreqDomain_SYS+0x62>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 800354c:	4b1a      	ldr	r3, [pc, #104]	@ (80035b8 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 800354e:	607b      	str	r3, [r7, #4]
      break;
 8003550:	e016      	b.n	8003580 <RCC_PLL_GetFreqDomain_SYS+0x68>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8003552:	f7ff ff3f 	bl	80033d4 <LL_RCC_PLL_GetPrediv>
 8003556:	4603      	mov	r3, r0
 8003558:	3301      	adds	r3, #1
 800355a:	4a18      	ldr	r2, [pc, #96]	@ (80035bc <RCC_PLL_GetFreqDomain_SYS+0xa4>)
 800355c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003560:	607b      	str	r3, [r7, #4]
      break;
 8003562:	e00d      	b.n	8003580 <RCC_PLL_GetFreqDomain_SYS+0x68>

#if defined(RCC_PLL2_SUPPORT)
    case LL_RCC_PLLSOURCE_PLL2:       /* PLL2 used as PLL clock source */
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
 8003564:	f000 f82c 	bl	80035c0 <RCC_PLL2_GetFreqClockFreq>
 8003568:	4604      	mov	r4, r0
 800356a:	f7ff ff33 	bl	80033d4 <LL_RCC_PLL_GetPrediv>
 800356e:	4603      	mov	r3, r0
 8003570:	3301      	adds	r3, #1
 8003572:	fbb4 f3f3 	udiv	r3, r4, r3
 8003576:	607b      	str	r3, [r7, #4]
      break;
 8003578:	e002      	b.n	8003580 <RCC_PLL_GetFreqDomain_SYS+0x68>
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 800357a:	4b0f      	ldr	r3, [pc, #60]	@ (80035b8 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 800357c:	607b      	str	r3, [r7, #4]
      break;
 800357e:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8003580:	f7ff ff1c 	bl	80033bc <LL_RCC_PLL_GetMultiplicator>
 8003584:	4603      	mov	r3, r0
 8003586:	f5b3 1f50 	cmp.w	r3, #3407872	@ 0x340000
 800358a:	d00a      	beq.n	80035a2 <RCC_PLL_GetFreqDomain_SYS+0x8a>
 800358c:	f7ff ff16 	bl	80033bc <LL_RCC_PLL_GetMultiplicator>
 8003590:	4603      	mov	r3, r0
 8003592:	0c9b      	lsrs	r3, r3, #18
 8003594:	f003 030f 	and.w	r3, r3, #15
 8003598:	3302      	adds	r3, #2
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	fb02 f303 	mul.w	r3, r2, r3
 80035a0:	e006      	b.n	80035b0 <RCC_PLL_GetFreqDomain_SYS+0x98>
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	4613      	mov	r3, r2
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	4413      	add	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	085b      	lsrs	r3, r3, #1
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd90      	pop	{r4, r7, pc}
 80035b8:	003d0900 	.word	0x003d0900
 80035bc:	007a1200 	.word	0x007a1200

080035c0 <RCC_PLL2_GetFreqClockFreq>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL2_GetFreqClockFreq(void)
{
 80035c0:	b598      	push	{r3, r4, r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  return __LL_RCC_CALC_PLL2CLK_FREQ(HSE_VALUE, LL_RCC_PLL2_GetMultiplicator(), LL_RCC_HSE_GetPrediv2());
 80035c4:	f7ff ff12 	bl	80033ec <LL_RCC_PLL2_GetMultiplicator>
 80035c8:	4603      	mov	r3, r0
 80035ca:	0a1b      	lsrs	r3, r3, #8
 80035cc:	4a07      	ldr	r2, [pc, #28]	@ (80035ec <RCC_PLL2_GetFreqClockFreq+0x2c>)
 80035ce:	fb02 f303 	mul.w	r3, r2, r3
 80035d2:	f503 0474 	add.w	r4, r3, #15990784	@ 0xf40000
 80035d6:	f504 5410 	add.w	r4, r4, #9216	@ 0x2400
 80035da:	f7ff fe9b 	bl	8003314 <LL_RCC_HSE_GetPrediv2>
 80035de:	4603      	mov	r3, r0
 80035e0:	091b      	lsrs	r3, r3, #4
 80035e2:	3301      	adds	r3, #1
 80035e4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	bd98      	pop	{r3, r4, r7, pc}
 80035ec:	007a1200 	.word	0x007a1200

080035f0 <LL_TIM_SetPrescaler>:
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr

0800360a <LL_TIM_SetAutoReload>:
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	bc80      	pop	{r7}
 8003622:	4770      	bx	lr

08003624 <LL_TIM_SetRepetitionCounter>:
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	bc80      	pop	{r7}
 800363c:	4770      	bx	lr

0800363e <LL_TIM_OC_SetCompareCH1>:
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr

08003658 <LL_TIM_OC_SetCompareCH2>:
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr

08003672 <LL_TIM_OC_SetCompareCH3>:
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr

0800368c <LL_TIM_OC_SetCompareCH4>:
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bc80      	pop	{r7}
 80036a4:	4770      	bx	lr

080036a6 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	f043 0201 	orr.w	r2, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	615a      	str	r2, [r3, #20]
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr

080036c4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a2b      	ldr	r2, [pc, #172]	@ (8003784 <LL_TIM_Init+0xc0>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d00f      	beq.n	80036fc <LL_TIM_Init+0x38>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036e2:	d00b      	beq.n	80036fc <LL_TIM_Init+0x38>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a28      	ldr	r2, [pc, #160]	@ (8003788 <LL_TIM_Init+0xc4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d007      	beq.n	80036fc <LL_TIM_Init+0x38>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a27      	ldr	r2, [pc, #156]	@ (800378c <LL_TIM_Init+0xc8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d003      	beq.n	80036fc <LL_TIM_Init+0x38>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a26      	ldr	r2, [pc, #152]	@ (8003790 <LL_TIM_Init+0xcc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d106      	bne.n	800370a <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	4313      	orrs	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a1d      	ldr	r2, [pc, #116]	@ (8003784 <LL_TIM_Init+0xc0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00f      	beq.n	8003732 <LL_TIM_Init+0x6e>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003718:	d00b      	beq.n	8003732 <LL_TIM_Init+0x6e>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a1a      	ldr	r2, [pc, #104]	@ (8003788 <LL_TIM_Init+0xc4>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d007      	beq.n	8003732 <LL_TIM_Init+0x6e>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a19      	ldr	r2, [pc, #100]	@ (800378c <LL_TIM_Init+0xc8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d003      	beq.n	8003732 <LL_TIM_Init+0x6e>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a18      	ldr	r2, [pc, #96]	@ (8003790 <LL_TIM_Init+0xcc>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d106      	bne.n	8003740 <LL_TIM_Init+0x7c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	4313      	orrs	r3, r2
 800373e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	4619      	mov	r1, r3
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7ff ff5c 	bl	800360a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	4619      	mov	r1, r3
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f7ff ff49 	bl	80035f0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a08      	ldr	r2, [pc, #32]	@ (8003784 <LL_TIM_Init+0xc0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d105      	bne.n	8003772 <LL_TIM_Init+0xae>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	4619      	mov	r1, r3
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7ff ff59 	bl	8003624 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7ff ff97 	bl	80036a6 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	40012c00 	.word	0x40012c00
 8003788:	40000400 	.word	0x40000400
 800378c:	40000800 	.word	0x40000800
 8003790:	40000c00 	.word	0x40000c00

08003794 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037aa:	d027      	beq.n	80037fc <LL_TIM_OC_Init+0x68>
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037b2:	d82a      	bhi.n	800380a <LL_TIM_OC_Init+0x76>
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037ba:	d018      	beq.n	80037ee <LL_TIM_OC_Init+0x5a>
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037c2:	d822      	bhi.n	800380a <LL_TIM_OC_Init+0x76>
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d003      	beq.n	80037d2 <LL_TIM_OC_Init+0x3e>
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	2b10      	cmp	r3, #16
 80037ce:	d007      	beq.n	80037e0 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80037d0:	e01b      	b.n	800380a <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f81f 	bl	8003818 <OC1Config>
 80037da:	4603      	mov	r3, r0
 80037dc:	75fb      	strb	r3, [r7, #23]
      break;
 80037de:	e015      	b.n	800380c <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 f87e 	bl	80038e4 <OC2Config>
 80037e8:	4603      	mov	r3, r0
 80037ea:	75fb      	strb	r3, [r7, #23]
      break;
 80037ec:	e00e      	b.n	800380c <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 f8e1 	bl	80039b8 <OC3Config>
 80037f6:	4603      	mov	r3, r0
 80037f8:	75fb      	strb	r3, [r7, #23]
      break;
 80037fa:	e007      	b.n	800380c <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 f944 	bl	8003a8c <OC4Config>
 8003804:	4603      	mov	r3, r0
 8003806:	75fb      	strb	r3, [r7, #23]
      break;
 8003808:	e000      	b.n	800380c <LL_TIM_OC_Init+0x78>
      break;
 800380a:	bf00      	nop
  }

  return result;
 800380c:	7dfb      	ldrb	r3, [r7, #23]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	f023 0201 	bic.w	r2, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f023 0303 	bic.w	r3, r3, #3
 8003846:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4313      	orrs	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f023 0202 	bic.w	r2, r3, #2
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	f023 0201 	bic.w	r2, r3, #1
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	4313      	orrs	r3, r2
 8003870:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a1a      	ldr	r2, [pc, #104]	@ (80038e0 <OC1Config+0xc8>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d11e      	bne.n	80038b8 <OC1Config+0xa0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f023 0208 	bic.w	r2, r3, #8
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4313      	orrs	r3, r2
 8003888:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f023 0204 	bic.w	r2, r3, #4
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4313      	orrs	r3, r2
 8003898:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	4313      	orrs	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	4619      	mov	r1, r3
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7ff feb7 	bl	800363e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40012c00 	.word	0x40012c00

080038e4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	f023 0210 	bic.w	r2, r3, #16
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003912:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	021b      	lsls	r3, r3, #8
 8003920:	4313      	orrs	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f023 0220 	bic.w	r2, r3, #32
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	4313      	orrs	r3, r2
 8003932:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f023 0210 	bic.w	r2, r3, #16
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	4313      	orrs	r3, r2
 8003942:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a1b      	ldr	r2, [pc, #108]	@ (80039b4 <OC2Config+0xd0>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d11f      	bne.n	800398c <OC2Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	019b      	lsls	r3, r3, #6
 8003958:	4313      	orrs	r3, r2
 800395a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	019b      	lsls	r3, r3, #6
 8003968:	4313      	orrs	r3, r2
 800396a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	4313      	orrs	r3, r2
 800398a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	4619      	mov	r1, r3
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7ff fe5a 	bl	8003658 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40012c00 	.word	0x40012c00

080039b8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f023 0303 	bic.w	r3, r3, #3
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	021b      	lsls	r3, r3, #8
 8003a02:	4313      	orrs	r3, r2
 8003a04:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	021b      	lsls	r3, r3, #8
 8003a12:	4313      	orrs	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a1b      	ldr	r2, [pc, #108]	@ (8003a88 <OC3Config+0xd0>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d11f      	bne.n	8003a5e <OC3Config+0xa6>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	029b      	lsls	r3, r3, #10
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	029b      	lsls	r3, r3, #10
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	015b      	lsls	r3, r3, #5
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	4619      	mov	r1, r3
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7ff fdfe 	bl	8003672 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3718      	adds	r7, #24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	40012c00 	.word	0x40012c00

08003a8c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	021b      	lsls	r3, r3, #8
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	031b      	lsls	r3, r3, #12
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	031b      	lsls	r3, r3, #12
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a0f      	ldr	r2, [pc, #60]	@ (8003b2c <OC4Config+0xa0>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d107      	bne.n	8003b04 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	019b      	lsls	r3, r3, #6
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	4619      	mov	r1, r3
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7ff fdb8 	bl	800368c <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3718      	adds	r7, #24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40012c00 	.word	0x40012c00

08003b30 <LL_USART_IsEnabled>:
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b44:	bf0c      	ite	eq
 8003b46:	2301      	moveq	r3, #1
 8003b48:	2300      	movne	r3, #0
 8003b4a:	b2db      	uxtb	r3, r3
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	4770      	bx	lr

08003b56 <LL_USART_SetStopBitsLength>:
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	611a      	str	r2, [r3, #16]
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bc80      	pop	{r7}
 8003b78:	4770      	bx	lr

08003b7a <LL_USART_SetHWFlowCtrl>:
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
 8003b82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	615a      	str	r2, [r3, #20]
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bc80      	pop	{r7}
 8003b9c:	4770      	bx	lr
	...

08003ba0 <LL_USART_SetBaudRate>:
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	009a      	lsls	r2, r3, #2
 8003bb6:	441a      	add	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc0:	4a25      	ldr	r2, [pc, #148]	@ (8003c58 <LL_USART_SetBaudRate+0xb8>)
 8003bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc6:	095b      	lsrs	r3, r3, #5
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	b299      	uxth	r1, r3
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009a      	lsls	r2, r3, #2
 8003bd8:	441a      	add	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	fbb2 f2f3 	udiv	r2, r2, r3
 8003be2:	4b1d      	ldr	r3, [pc, #116]	@ (8003c58 <LL_USART_SetBaudRate+0xb8>)
 8003be4:	fba3 0302 	umull	r0, r3, r3, r2
 8003be8:	095b      	lsrs	r3, r3, #5
 8003bea:	2064      	movs	r0, #100	@ 0x64
 8003bec:	fb00 f303 	mul.w	r3, r0, r3
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	3332      	adds	r3, #50	@ 0x32
 8003bf6:	4a18      	ldr	r2, [pc, #96]	@ (8003c58 <LL_USART_SetBaudRate+0xb8>)
 8003bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfc:	095b      	lsrs	r3, r3, #5
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	440b      	add	r3, r1
 8003c08:	b299      	uxth	r1, r3
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	009a      	lsls	r2, r3, #2
 8003c14:	441a      	add	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8003c58 <LL_USART_SetBaudRate+0xb8>)
 8003c20:	fba3 0302 	umull	r0, r3, r3, r2
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	2064      	movs	r0, #100	@ 0x64
 8003c28:	fb00 f303 	mul.w	r3, r0, r3
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	3332      	adds	r3, #50	@ 0x32
 8003c32:	4a09      	ldr	r2, [pc, #36]	@ (8003c58 <LL_USART_SetBaudRate+0xb8>)
 8003c34:	fba2 2303 	umull	r2, r3, r2, r3
 8003c38:	095b      	lsrs	r3, r3, #5
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	f003 030f 	and.w	r3, r3, #15
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	440b      	add	r3, r1
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	461a      	mov	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	609a      	str	r2, [r3, #8]
}
 8003c4c:	bf00      	nop
 8003c4e:	3714      	adds	r7, #20
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bc80      	pop	{r7}
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	51eb851f 	.word	0x51eb851f

08003c5c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff ff5e 	bl	8003b30 <LL_USART_IsEnabled>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d153      	bne.n	8003d22 <LL_USART_Init+0xc6>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003c82:	f023 030c 	bic.w	r3, r3, #12
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	6851      	ldr	r1, [r2, #4]
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	68d2      	ldr	r2, [r2, #12]
 8003c8e:	4311      	orrs	r1, r2
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	6912      	ldr	r2, [r2, #16]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7ff ff57 	bl	8003b56 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	4619      	mov	r1, r3
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff ff63 	bl	8003b7a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003cb4:	f107 0308 	add.w	r3, r7, #8
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff fba3 	bl	8003404 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a1a      	ldr	r2, [pc, #104]	@ (8003d2c <LL_USART_Init+0xd0>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d102      	bne.n	8003ccc <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	61bb      	str	r3, [r7, #24]
 8003cca:	e01a      	b.n	8003d02 <LL_USART_Init+0xa6>
    }
    else if (USARTx == USART2)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a18      	ldr	r2, [pc, #96]	@ (8003d30 <LL_USART_Init+0xd4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d102      	bne.n	8003cda <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	61bb      	str	r3, [r7, #24]
 8003cd8:	e013      	b.n	8003d02 <LL_USART_Init+0xa6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a15      	ldr	r2, [pc, #84]	@ (8003d34 <LL_USART_Init+0xd8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d102      	bne.n	8003ce8 <LL_USART_Init+0x8c>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	61bb      	str	r3, [r7, #24]
 8003ce6:	e00c      	b.n	8003d02 <LL_USART_Init+0xa6>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a13      	ldr	r2, [pc, #76]	@ (8003d38 <LL_USART_Init+0xdc>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d102      	bne.n	8003cf6 <LL_USART_Init+0x9a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	61bb      	str	r3, [r7, #24]
 8003cf4:	e005      	b.n	8003d02 <LL_USART_Init+0xa6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a10      	ldr	r2, [pc, #64]	@ (8003d3c <LL_USART_Init+0xe0>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d101      	bne.n	8003d02 <LL_USART_Init+0xa6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00c      	beq.n	8003d22 <LL_USART_Init+0xc6>
        && (USART_InitStruct->BaudRate != 0U))
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d008      	beq.n	8003d22 <LL_USART_Init+0xc6>
    {
      status = SUCCESS;
 8003d10:	2300      	movs	r3, #0
 8003d12:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8003d18:	461a      	mov	r2, r3
 8003d1a:	69b9      	ldr	r1, [r7, #24]
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff ff3f 	bl	8003ba0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003d22:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3720      	adds	r7, #32
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40013800 	.word	0x40013800
 8003d30:	40004400 	.word	0x40004400
 8003d34:	40004800 	.word	0x40004800
 8003d38:	40004c00 	.word	0x40004c00
 8003d3c:	40005000 	.word	0x40005000

08003d40 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d52:	4a07      	ldr	r2, [pc, #28]	@ (8003d70 <LL_InitTick+0x30>)
 8003d54:	3b01      	subs	r3, #1
 8003d56:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003d58:	4b05      	ldr	r3, [pc, #20]	@ (8003d70 <LL_InitTick+0x30>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d5e:	4b04      	ldr	r3, [pc, #16]	@ (8003d70 <LL_InitTick+0x30>)
 8003d60:	2205      	movs	r2, #5
 8003d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bc80      	pop	{r7}
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	e000e010 	.word	0xe000e010

08003d74 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003d7c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff ffdd 	bl	8003d40 <LL_InitTick>
}
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
	...

08003d90 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003d98:	4b0e      	ldr	r3, [pc, #56]	@ (8003dd4 <LL_mDelay+0x44>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003d9e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da6:	d00c      	beq.n	8003dc2 <LL_mDelay+0x32>
  {
    Delay++;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3301      	adds	r3, #1
 8003dac:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003dae:	e008      	b.n	8003dc2 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003db0:	4b08      	ldr	r3, [pc, #32]	@ (8003dd4 <LL_mDelay+0x44>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <LL_mDelay+0x32>
    {
      Delay--;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1f3      	bne.n	8003db0 <LL_mDelay+0x20>
    }
  }
}
 8003dc8:	bf00      	nop
 8003dca:	bf00      	nop
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bc80      	pop	{r7}
 8003dd2:	4770      	bx	lr
 8003dd4:	e000e010 	.word	0xe000e010

08003dd8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003de0:	4a03      	ldr	r2, [pc, #12]	@ (8003df0 <LL_SetSystemCoreClock+0x18>)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6013      	str	r3, [r2, #0]
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr
 8003df0:	20000cc0 	.word	0x20000cc0

08003df4 <__sflush_r>:
 8003df4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfa:	0716      	lsls	r6, r2, #28
 8003dfc:	4605      	mov	r5, r0
 8003dfe:	460c      	mov	r4, r1
 8003e00:	d454      	bmi.n	8003eac <__sflush_r+0xb8>
 8003e02:	684b      	ldr	r3, [r1, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	dc02      	bgt.n	8003e0e <__sflush_r+0x1a>
 8003e08:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	dd48      	ble.n	8003ea0 <__sflush_r+0xac>
 8003e0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003e10:	2e00      	cmp	r6, #0
 8003e12:	d045      	beq.n	8003ea0 <__sflush_r+0xac>
 8003e14:	2300      	movs	r3, #0
 8003e16:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003e1a:	682f      	ldr	r7, [r5, #0]
 8003e1c:	6a21      	ldr	r1, [r4, #32]
 8003e1e:	602b      	str	r3, [r5, #0]
 8003e20:	d030      	beq.n	8003e84 <__sflush_r+0x90>
 8003e22:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003e24:	89a3      	ldrh	r3, [r4, #12]
 8003e26:	0759      	lsls	r1, r3, #29
 8003e28:	d505      	bpl.n	8003e36 <__sflush_r+0x42>
 8003e2a:	6863      	ldr	r3, [r4, #4]
 8003e2c:	1ad2      	subs	r2, r2, r3
 8003e2e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003e30:	b10b      	cbz	r3, 8003e36 <__sflush_r+0x42>
 8003e32:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003e34:	1ad2      	subs	r2, r2, r3
 8003e36:	2300      	movs	r3, #0
 8003e38:	4628      	mov	r0, r5
 8003e3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003e3c:	6a21      	ldr	r1, [r4, #32]
 8003e3e:	47b0      	blx	r6
 8003e40:	1c43      	adds	r3, r0, #1
 8003e42:	89a3      	ldrh	r3, [r4, #12]
 8003e44:	d106      	bne.n	8003e54 <__sflush_r+0x60>
 8003e46:	6829      	ldr	r1, [r5, #0]
 8003e48:	291d      	cmp	r1, #29
 8003e4a:	d82b      	bhi.n	8003ea4 <__sflush_r+0xb0>
 8003e4c:	4a28      	ldr	r2, [pc, #160]	@ (8003ef0 <__sflush_r+0xfc>)
 8003e4e:	410a      	asrs	r2, r1
 8003e50:	07d6      	lsls	r6, r2, #31
 8003e52:	d427      	bmi.n	8003ea4 <__sflush_r+0xb0>
 8003e54:	2200      	movs	r2, #0
 8003e56:	6062      	str	r2, [r4, #4]
 8003e58:	6922      	ldr	r2, [r4, #16]
 8003e5a:	04d9      	lsls	r1, r3, #19
 8003e5c:	6022      	str	r2, [r4, #0]
 8003e5e:	d504      	bpl.n	8003e6a <__sflush_r+0x76>
 8003e60:	1c42      	adds	r2, r0, #1
 8003e62:	d101      	bne.n	8003e68 <__sflush_r+0x74>
 8003e64:	682b      	ldr	r3, [r5, #0]
 8003e66:	b903      	cbnz	r3, 8003e6a <__sflush_r+0x76>
 8003e68:	6560      	str	r0, [r4, #84]	@ 0x54
 8003e6a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003e6c:	602f      	str	r7, [r5, #0]
 8003e6e:	b1b9      	cbz	r1, 8003ea0 <__sflush_r+0xac>
 8003e70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003e74:	4299      	cmp	r1, r3
 8003e76:	d002      	beq.n	8003e7e <__sflush_r+0x8a>
 8003e78:	4628      	mov	r0, r5
 8003e7a:	f000 fb77 	bl	800456c <_free_r>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	6363      	str	r3, [r4, #52]	@ 0x34
 8003e82:	e00d      	b.n	8003ea0 <__sflush_r+0xac>
 8003e84:	2301      	movs	r3, #1
 8003e86:	4628      	mov	r0, r5
 8003e88:	47b0      	blx	r6
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	1c50      	adds	r0, r2, #1
 8003e8e:	d1c9      	bne.n	8003e24 <__sflush_r+0x30>
 8003e90:	682b      	ldr	r3, [r5, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0c6      	beq.n	8003e24 <__sflush_r+0x30>
 8003e96:	2b1d      	cmp	r3, #29
 8003e98:	d001      	beq.n	8003e9e <__sflush_r+0xaa>
 8003e9a:	2b16      	cmp	r3, #22
 8003e9c:	d11d      	bne.n	8003eda <__sflush_r+0xe6>
 8003e9e:	602f      	str	r7, [r5, #0]
 8003ea0:	2000      	movs	r0, #0
 8003ea2:	e021      	b.n	8003ee8 <__sflush_r+0xf4>
 8003ea4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ea8:	b21b      	sxth	r3, r3
 8003eaa:	e01a      	b.n	8003ee2 <__sflush_r+0xee>
 8003eac:	690f      	ldr	r7, [r1, #16]
 8003eae:	2f00      	cmp	r7, #0
 8003eb0:	d0f6      	beq.n	8003ea0 <__sflush_r+0xac>
 8003eb2:	0793      	lsls	r3, r2, #30
 8003eb4:	bf18      	it	ne
 8003eb6:	2300      	movne	r3, #0
 8003eb8:	680e      	ldr	r6, [r1, #0]
 8003eba:	bf08      	it	eq
 8003ebc:	694b      	ldreq	r3, [r1, #20]
 8003ebe:	1bf6      	subs	r6, r6, r7
 8003ec0:	600f      	str	r7, [r1, #0]
 8003ec2:	608b      	str	r3, [r1, #8]
 8003ec4:	2e00      	cmp	r6, #0
 8003ec6:	ddeb      	ble.n	8003ea0 <__sflush_r+0xac>
 8003ec8:	4633      	mov	r3, r6
 8003eca:	463a      	mov	r2, r7
 8003ecc:	4628      	mov	r0, r5
 8003ece:	6a21      	ldr	r1, [r4, #32]
 8003ed0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003ed4:	47e0      	blx	ip
 8003ed6:	2800      	cmp	r0, #0
 8003ed8:	dc07      	bgt.n	8003eea <__sflush_r+0xf6>
 8003eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ede:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee6:	81a3      	strh	r3, [r4, #12]
 8003ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eea:	4407      	add	r7, r0
 8003eec:	1a36      	subs	r6, r6, r0
 8003eee:	e7e9      	b.n	8003ec4 <__sflush_r+0xd0>
 8003ef0:	dfbffffe 	.word	0xdfbffffe

08003ef4 <_fflush_r>:
 8003ef4:	b538      	push	{r3, r4, r5, lr}
 8003ef6:	690b      	ldr	r3, [r1, #16]
 8003ef8:	4605      	mov	r5, r0
 8003efa:	460c      	mov	r4, r1
 8003efc:	b913      	cbnz	r3, 8003f04 <_fflush_r+0x10>
 8003efe:	2500      	movs	r5, #0
 8003f00:	4628      	mov	r0, r5
 8003f02:	bd38      	pop	{r3, r4, r5, pc}
 8003f04:	b118      	cbz	r0, 8003f0e <_fflush_r+0x1a>
 8003f06:	6a03      	ldr	r3, [r0, #32]
 8003f08:	b90b      	cbnz	r3, 8003f0e <_fflush_r+0x1a>
 8003f0a:	f000 f8bb 	bl	8004084 <__sinit>
 8003f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0f3      	beq.n	8003efe <_fflush_r+0xa>
 8003f16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003f18:	07d0      	lsls	r0, r2, #31
 8003f1a:	d404      	bmi.n	8003f26 <_fflush_r+0x32>
 8003f1c:	0599      	lsls	r1, r3, #22
 8003f1e:	d402      	bmi.n	8003f26 <_fflush_r+0x32>
 8003f20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f22:	f000 fb20 	bl	8004566 <__retarget_lock_acquire_recursive>
 8003f26:	4628      	mov	r0, r5
 8003f28:	4621      	mov	r1, r4
 8003f2a:	f7ff ff63 	bl	8003df4 <__sflush_r>
 8003f2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003f30:	4605      	mov	r5, r0
 8003f32:	07da      	lsls	r2, r3, #31
 8003f34:	d4e4      	bmi.n	8003f00 <_fflush_r+0xc>
 8003f36:	89a3      	ldrh	r3, [r4, #12]
 8003f38:	059b      	lsls	r3, r3, #22
 8003f3a:	d4e1      	bmi.n	8003f00 <_fflush_r+0xc>
 8003f3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f3e:	f000 fb13 	bl	8004568 <__retarget_lock_release_recursive>
 8003f42:	e7dd      	b.n	8003f00 <_fflush_r+0xc>

08003f44 <fflush>:
 8003f44:	4601      	mov	r1, r0
 8003f46:	b920      	cbnz	r0, 8003f52 <fflush+0xe>
 8003f48:	4a04      	ldr	r2, [pc, #16]	@ (8003f5c <fflush+0x18>)
 8003f4a:	4905      	ldr	r1, [pc, #20]	@ (8003f60 <fflush+0x1c>)
 8003f4c:	4805      	ldr	r0, [pc, #20]	@ (8003f64 <fflush+0x20>)
 8003f4e:	f000 b8b1 	b.w	80040b4 <_fwalk_sglue>
 8003f52:	4b05      	ldr	r3, [pc, #20]	@ (8003f68 <fflush+0x24>)
 8003f54:	6818      	ldr	r0, [r3, #0]
 8003f56:	f7ff bfcd 	b.w	8003ef4 <_fflush_r>
 8003f5a:	bf00      	nop
 8003f5c:	20000cc4 	.word	0x20000cc4
 8003f60:	08003ef5 	.word	0x08003ef5
 8003f64:	20000cd4 	.word	0x20000cd4
 8003f68:	20000cd0 	.word	0x20000cd0

08003f6c <std>:
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	b510      	push	{r4, lr}
 8003f70:	4604      	mov	r4, r0
 8003f72:	e9c0 3300 	strd	r3, r3, [r0]
 8003f76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f7a:	6083      	str	r3, [r0, #8]
 8003f7c:	8181      	strh	r1, [r0, #12]
 8003f7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003f80:	81c2      	strh	r2, [r0, #14]
 8003f82:	6183      	str	r3, [r0, #24]
 8003f84:	4619      	mov	r1, r3
 8003f86:	2208      	movs	r2, #8
 8003f88:	305c      	adds	r0, #92	@ 0x5c
 8003f8a:	f000 fa61 	bl	8004450 <memset>
 8003f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fc4 <std+0x58>)
 8003f90:	6224      	str	r4, [r4, #32]
 8003f92:	6263      	str	r3, [r4, #36]	@ 0x24
 8003f94:	4b0c      	ldr	r3, [pc, #48]	@ (8003fc8 <std+0x5c>)
 8003f96:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003f98:	4b0c      	ldr	r3, [pc, #48]	@ (8003fcc <std+0x60>)
 8003f9a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd0 <std+0x64>)
 8003f9e:	6323      	str	r3, [r4, #48]	@ 0x30
 8003fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd4 <std+0x68>)
 8003fa2:	429c      	cmp	r4, r3
 8003fa4:	d006      	beq.n	8003fb4 <std+0x48>
 8003fa6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003faa:	4294      	cmp	r4, r2
 8003fac:	d002      	beq.n	8003fb4 <std+0x48>
 8003fae:	33d0      	adds	r3, #208	@ 0xd0
 8003fb0:	429c      	cmp	r4, r3
 8003fb2:	d105      	bne.n	8003fc0 <std+0x54>
 8003fb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fbc:	f000 bad2 	b.w	8004564 <__retarget_lock_init_recursive>
 8003fc0:	bd10      	pop	{r4, pc}
 8003fc2:	bf00      	nop
 8003fc4:	0800429d 	.word	0x0800429d
 8003fc8:	080042c3 	.word	0x080042c3
 8003fcc:	080042fb 	.word	0x080042fb
 8003fd0:	0800431f 	.word	0x0800431f
 8003fd4:	200040d4 	.word	0x200040d4

08003fd8 <stdio_exit_handler>:
 8003fd8:	4a02      	ldr	r2, [pc, #8]	@ (8003fe4 <stdio_exit_handler+0xc>)
 8003fda:	4903      	ldr	r1, [pc, #12]	@ (8003fe8 <stdio_exit_handler+0x10>)
 8003fdc:	4803      	ldr	r0, [pc, #12]	@ (8003fec <stdio_exit_handler+0x14>)
 8003fde:	f000 b869 	b.w	80040b4 <_fwalk_sglue>
 8003fe2:	bf00      	nop
 8003fe4:	20000cc4 	.word	0x20000cc4
 8003fe8:	08003ef5 	.word	0x08003ef5
 8003fec:	20000cd4 	.word	0x20000cd4

08003ff0 <cleanup_stdio>:
 8003ff0:	6841      	ldr	r1, [r0, #4]
 8003ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8004024 <cleanup_stdio+0x34>)
 8003ff4:	b510      	push	{r4, lr}
 8003ff6:	4299      	cmp	r1, r3
 8003ff8:	4604      	mov	r4, r0
 8003ffa:	d001      	beq.n	8004000 <cleanup_stdio+0x10>
 8003ffc:	f7ff ff7a 	bl	8003ef4 <_fflush_r>
 8004000:	68a1      	ldr	r1, [r4, #8]
 8004002:	4b09      	ldr	r3, [pc, #36]	@ (8004028 <cleanup_stdio+0x38>)
 8004004:	4299      	cmp	r1, r3
 8004006:	d002      	beq.n	800400e <cleanup_stdio+0x1e>
 8004008:	4620      	mov	r0, r4
 800400a:	f7ff ff73 	bl	8003ef4 <_fflush_r>
 800400e:	68e1      	ldr	r1, [r4, #12]
 8004010:	4b06      	ldr	r3, [pc, #24]	@ (800402c <cleanup_stdio+0x3c>)
 8004012:	4299      	cmp	r1, r3
 8004014:	d004      	beq.n	8004020 <cleanup_stdio+0x30>
 8004016:	4620      	mov	r0, r4
 8004018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800401c:	f7ff bf6a 	b.w	8003ef4 <_fflush_r>
 8004020:	bd10      	pop	{r4, pc}
 8004022:	bf00      	nop
 8004024:	200040d4 	.word	0x200040d4
 8004028:	2000413c 	.word	0x2000413c
 800402c:	200041a4 	.word	0x200041a4

08004030 <global_stdio_init.part.0>:
 8004030:	b510      	push	{r4, lr}
 8004032:	4b0b      	ldr	r3, [pc, #44]	@ (8004060 <global_stdio_init.part.0+0x30>)
 8004034:	4c0b      	ldr	r4, [pc, #44]	@ (8004064 <global_stdio_init.part.0+0x34>)
 8004036:	4a0c      	ldr	r2, [pc, #48]	@ (8004068 <global_stdio_init.part.0+0x38>)
 8004038:	4620      	mov	r0, r4
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	2104      	movs	r1, #4
 800403e:	2200      	movs	r2, #0
 8004040:	f7ff ff94 	bl	8003f6c <std>
 8004044:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004048:	2201      	movs	r2, #1
 800404a:	2109      	movs	r1, #9
 800404c:	f7ff ff8e 	bl	8003f6c <std>
 8004050:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004054:	2202      	movs	r2, #2
 8004056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800405a:	2112      	movs	r1, #18
 800405c:	f7ff bf86 	b.w	8003f6c <std>
 8004060:	2000420c 	.word	0x2000420c
 8004064:	200040d4 	.word	0x200040d4
 8004068:	08003fd9 	.word	0x08003fd9

0800406c <__sfp_lock_acquire>:
 800406c:	4801      	ldr	r0, [pc, #4]	@ (8004074 <__sfp_lock_acquire+0x8>)
 800406e:	f000 ba7a 	b.w	8004566 <__retarget_lock_acquire_recursive>
 8004072:	bf00      	nop
 8004074:	20004215 	.word	0x20004215

08004078 <__sfp_lock_release>:
 8004078:	4801      	ldr	r0, [pc, #4]	@ (8004080 <__sfp_lock_release+0x8>)
 800407a:	f000 ba75 	b.w	8004568 <__retarget_lock_release_recursive>
 800407e:	bf00      	nop
 8004080:	20004215 	.word	0x20004215

08004084 <__sinit>:
 8004084:	b510      	push	{r4, lr}
 8004086:	4604      	mov	r4, r0
 8004088:	f7ff fff0 	bl	800406c <__sfp_lock_acquire>
 800408c:	6a23      	ldr	r3, [r4, #32]
 800408e:	b11b      	cbz	r3, 8004098 <__sinit+0x14>
 8004090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004094:	f7ff bff0 	b.w	8004078 <__sfp_lock_release>
 8004098:	4b04      	ldr	r3, [pc, #16]	@ (80040ac <__sinit+0x28>)
 800409a:	6223      	str	r3, [r4, #32]
 800409c:	4b04      	ldr	r3, [pc, #16]	@ (80040b0 <__sinit+0x2c>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1f5      	bne.n	8004090 <__sinit+0xc>
 80040a4:	f7ff ffc4 	bl	8004030 <global_stdio_init.part.0>
 80040a8:	e7f2      	b.n	8004090 <__sinit+0xc>
 80040aa:	bf00      	nop
 80040ac:	08003ff1 	.word	0x08003ff1
 80040b0:	2000420c 	.word	0x2000420c

080040b4 <_fwalk_sglue>:
 80040b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040b8:	4607      	mov	r7, r0
 80040ba:	4688      	mov	r8, r1
 80040bc:	4614      	mov	r4, r2
 80040be:	2600      	movs	r6, #0
 80040c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80040c4:	f1b9 0901 	subs.w	r9, r9, #1
 80040c8:	d505      	bpl.n	80040d6 <_fwalk_sglue+0x22>
 80040ca:	6824      	ldr	r4, [r4, #0]
 80040cc:	2c00      	cmp	r4, #0
 80040ce:	d1f7      	bne.n	80040c0 <_fwalk_sglue+0xc>
 80040d0:	4630      	mov	r0, r6
 80040d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040d6:	89ab      	ldrh	r3, [r5, #12]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d907      	bls.n	80040ec <_fwalk_sglue+0x38>
 80040dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80040e0:	3301      	adds	r3, #1
 80040e2:	d003      	beq.n	80040ec <_fwalk_sglue+0x38>
 80040e4:	4629      	mov	r1, r5
 80040e6:	4638      	mov	r0, r7
 80040e8:	47c0      	blx	r8
 80040ea:	4306      	orrs	r6, r0
 80040ec:	3568      	adds	r5, #104	@ 0x68
 80040ee:	e7e9      	b.n	80040c4 <_fwalk_sglue+0x10>

080040f0 <iprintf>:
 80040f0:	b40f      	push	{r0, r1, r2, r3}
 80040f2:	b507      	push	{r0, r1, r2, lr}
 80040f4:	4906      	ldr	r1, [pc, #24]	@ (8004110 <iprintf+0x20>)
 80040f6:	ab04      	add	r3, sp, #16
 80040f8:	6808      	ldr	r0, [r1, #0]
 80040fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80040fe:	6881      	ldr	r1, [r0, #8]
 8004100:	9301      	str	r3, [sp, #4]
 8004102:	f000 fe73 	bl	8004dec <_vfiprintf_r>
 8004106:	b003      	add	sp, #12
 8004108:	f85d eb04 	ldr.w	lr, [sp], #4
 800410c:	b004      	add	sp, #16
 800410e:	4770      	bx	lr
 8004110:	20000cd0 	.word	0x20000cd0

08004114 <putchar>:
 8004114:	4b02      	ldr	r3, [pc, #8]	@ (8004120 <putchar+0xc>)
 8004116:	4601      	mov	r1, r0
 8004118:	6818      	ldr	r0, [r3, #0]
 800411a:	6882      	ldr	r2, [r0, #8]
 800411c:	f001 babd 	b.w	800569a <_putc_r>
 8004120:	20000cd0 	.word	0x20000cd0

08004124 <_puts_r>:
 8004124:	6a03      	ldr	r3, [r0, #32]
 8004126:	b570      	push	{r4, r5, r6, lr}
 8004128:	4605      	mov	r5, r0
 800412a:	460e      	mov	r6, r1
 800412c:	6884      	ldr	r4, [r0, #8]
 800412e:	b90b      	cbnz	r3, 8004134 <_puts_r+0x10>
 8004130:	f7ff ffa8 	bl	8004084 <__sinit>
 8004134:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004136:	07db      	lsls	r3, r3, #31
 8004138:	d405      	bmi.n	8004146 <_puts_r+0x22>
 800413a:	89a3      	ldrh	r3, [r4, #12]
 800413c:	0598      	lsls	r0, r3, #22
 800413e:	d402      	bmi.n	8004146 <_puts_r+0x22>
 8004140:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004142:	f000 fa10 	bl	8004566 <__retarget_lock_acquire_recursive>
 8004146:	89a3      	ldrh	r3, [r4, #12]
 8004148:	0719      	lsls	r1, r3, #28
 800414a:	d502      	bpl.n	8004152 <_puts_r+0x2e>
 800414c:	6923      	ldr	r3, [r4, #16]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d135      	bne.n	80041be <_puts_r+0x9a>
 8004152:	4621      	mov	r1, r4
 8004154:	4628      	mov	r0, r5
 8004156:	f000 f925 	bl	80043a4 <__swsetup_r>
 800415a:	b380      	cbz	r0, 80041be <_puts_r+0x9a>
 800415c:	f04f 35ff 	mov.w	r5, #4294967295
 8004160:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004162:	07da      	lsls	r2, r3, #31
 8004164:	d405      	bmi.n	8004172 <_puts_r+0x4e>
 8004166:	89a3      	ldrh	r3, [r4, #12]
 8004168:	059b      	lsls	r3, r3, #22
 800416a:	d402      	bmi.n	8004172 <_puts_r+0x4e>
 800416c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800416e:	f000 f9fb 	bl	8004568 <__retarget_lock_release_recursive>
 8004172:	4628      	mov	r0, r5
 8004174:	bd70      	pop	{r4, r5, r6, pc}
 8004176:	2b00      	cmp	r3, #0
 8004178:	da04      	bge.n	8004184 <_puts_r+0x60>
 800417a:	69a2      	ldr	r2, [r4, #24]
 800417c:	429a      	cmp	r2, r3
 800417e:	dc17      	bgt.n	80041b0 <_puts_r+0x8c>
 8004180:	290a      	cmp	r1, #10
 8004182:	d015      	beq.n	80041b0 <_puts_r+0x8c>
 8004184:	6823      	ldr	r3, [r4, #0]
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	6022      	str	r2, [r4, #0]
 800418a:	7019      	strb	r1, [r3, #0]
 800418c:	68a3      	ldr	r3, [r4, #8]
 800418e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004192:	3b01      	subs	r3, #1
 8004194:	60a3      	str	r3, [r4, #8]
 8004196:	2900      	cmp	r1, #0
 8004198:	d1ed      	bne.n	8004176 <_puts_r+0x52>
 800419a:	2b00      	cmp	r3, #0
 800419c:	da11      	bge.n	80041c2 <_puts_r+0x9e>
 800419e:	4622      	mov	r2, r4
 80041a0:	210a      	movs	r1, #10
 80041a2:	4628      	mov	r0, r5
 80041a4:	f000 f8bf 	bl	8004326 <__swbuf_r>
 80041a8:	3001      	adds	r0, #1
 80041aa:	d0d7      	beq.n	800415c <_puts_r+0x38>
 80041ac:	250a      	movs	r5, #10
 80041ae:	e7d7      	b.n	8004160 <_puts_r+0x3c>
 80041b0:	4622      	mov	r2, r4
 80041b2:	4628      	mov	r0, r5
 80041b4:	f000 f8b7 	bl	8004326 <__swbuf_r>
 80041b8:	3001      	adds	r0, #1
 80041ba:	d1e7      	bne.n	800418c <_puts_r+0x68>
 80041bc:	e7ce      	b.n	800415c <_puts_r+0x38>
 80041be:	3e01      	subs	r6, #1
 80041c0:	e7e4      	b.n	800418c <_puts_r+0x68>
 80041c2:	6823      	ldr	r3, [r4, #0]
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	6022      	str	r2, [r4, #0]
 80041c8:	220a      	movs	r2, #10
 80041ca:	701a      	strb	r2, [r3, #0]
 80041cc:	e7ee      	b.n	80041ac <_puts_r+0x88>
	...

080041d0 <puts>:
 80041d0:	4b02      	ldr	r3, [pc, #8]	@ (80041dc <puts+0xc>)
 80041d2:	4601      	mov	r1, r0
 80041d4:	6818      	ldr	r0, [r3, #0]
 80041d6:	f7ff bfa5 	b.w	8004124 <_puts_r>
 80041da:	bf00      	nop
 80041dc:	20000cd0 	.word	0x20000cd0

080041e0 <sniprintf>:
 80041e0:	b40c      	push	{r2, r3}
 80041e2:	b530      	push	{r4, r5, lr}
 80041e4:	4b17      	ldr	r3, [pc, #92]	@ (8004244 <sniprintf+0x64>)
 80041e6:	1e0c      	subs	r4, r1, #0
 80041e8:	681d      	ldr	r5, [r3, #0]
 80041ea:	b09d      	sub	sp, #116	@ 0x74
 80041ec:	da08      	bge.n	8004200 <sniprintf+0x20>
 80041ee:	238b      	movs	r3, #139	@ 0x8b
 80041f0:	f04f 30ff 	mov.w	r0, #4294967295
 80041f4:	602b      	str	r3, [r5, #0]
 80041f6:	b01d      	add	sp, #116	@ 0x74
 80041f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041fc:	b002      	add	sp, #8
 80041fe:	4770      	bx	lr
 8004200:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004204:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004208:	bf0c      	ite	eq
 800420a:	4623      	moveq	r3, r4
 800420c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004210:	9304      	str	r3, [sp, #16]
 8004212:	9307      	str	r3, [sp, #28]
 8004214:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004218:	9002      	str	r0, [sp, #8]
 800421a:	9006      	str	r0, [sp, #24]
 800421c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004220:	4628      	mov	r0, r5
 8004222:	ab21      	add	r3, sp, #132	@ 0x84
 8004224:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004226:	a902      	add	r1, sp, #8
 8004228:	9301      	str	r3, [sp, #4]
 800422a:	f000 faf1 	bl	8004810 <_svfiprintf_r>
 800422e:	1c43      	adds	r3, r0, #1
 8004230:	bfbc      	itt	lt
 8004232:	238b      	movlt	r3, #139	@ 0x8b
 8004234:	602b      	strlt	r3, [r5, #0]
 8004236:	2c00      	cmp	r4, #0
 8004238:	d0dd      	beq.n	80041f6 <sniprintf+0x16>
 800423a:	2200      	movs	r2, #0
 800423c:	9b02      	ldr	r3, [sp, #8]
 800423e:	701a      	strb	r2, [r3, #0]
 8004240:	e7d9      	b.n	80041f6 <sniprintf+0x16>
 8004242:	bf00      	nop
 8004244:	20000cd0 	.word	0x20000cd0

08004248 <siscanf>:
 8004248:	b40e      	push	{r1, r2, r3}
 800424a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800424e:	b530      	push	{r4, r5, lr}
 8004250:	b09c      	sub	sp, #112	@ 0x70
 8004252:	ac1f      	add	r4, sp, #124	@ 0x7c
 8004254:	f854 5b04 	ldr.w	r5, [r4], #4
 8004258:	f8ad 2014 	strh.w	r2, [sp, #20]
 800425c:	9002      	str	r0, [sp, #8]
 800425e:	9006      	str	r0, [sp, #24]
 8004260:	f7fb ffea 	bl	8000238 <strlen>
 8004264:	4b0b      	ldr	r3, [pc, #44]	@ (8004294 <siscanf+0x4c>)
 8004266:	9003      	str	r0, [sp, #12]
 8004268:	930b      	str	r3, [sp, #44]	@ 0x2c
 800426a:	2300      	movs	r3, #0
 800426c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800426e:	9314      	str	r3, [sp, #80]	@ 0x50
 8004270:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004274:	9007      	str	r0, [sp, #28]
 8004276:	4808      	ldr	r0, [pc, #32]	@ (8004298 <siscanf+0x50>)
 8004278:	f8ad 3016 	strh.w	r3, [sp, #22]
 800427c:	462a      	mov	r2, r5
 800427e:	4623      	mov	r3, r4
 8004280:	a902      	add	r1, sp, #8
 8004282:	6800      	ldr	r0, [r0, #0]
 8004284:	9401      	str	r4, [sp, #4]
 8004286:	f000 fc17 	bl	8004ab8 <__ssvfiscanf_r>
 800428a:	b01c      	add	sp, #112	@ 0x70
 800428c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004290:	b003      	add	sp, #12
 8004292:	4770      	bx	lr
 8004294:	080042bf 	.word	0x080042bf
 8004298:	20000cd0 	.word	0x20000cd0

0800429c <__sread>:
 800429c:	b510      	push	{r4, lr}
 800429e:	460c      	mov	r4, r1
 80042a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042a4:	f000 f910 	bl	80044c8 <_read_r>
 80042a8:	2800      	cmp	r0, #0
 80042aa:	bfab      	itete	ge
 80042ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80042ae:	89a3      	ldrhlt	r3, [r4, #12]
 80042b0:	181b      	addge	r3, r3, r0
 80042b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80042b6:	bfac      	ite	ge
 80042b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80042ba:	81a3      	strhlt	r3, [r4, #12]
 80042bc:	bd10      	pop	{r4, pc}

080042be <__seofread>:
 80042be:	2000      	movs	r0, #0
 80042c0:	4770      	bx	lr

080042c2 <__swrite>:
 80042c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042c6:	461f      	mov	r7, r3
 80042c8:	898b      	ldrh	r3, [r1, #12]
 80042ca:	4605      	mov	r5, r0
 80042cc:	05db      	lsls	r3, r3, #23
 80042ce:	460c      	mov	r4, r1
 80042d0:	4616      	mov	r6, r2
 80042d2:	d505      	bpl.n	80042e0 <__swrite+0x1e>
 80042d4:	2302      	movs	r3, #2
 80042d6:	2200      	movs	r2, #0
 80042d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042dc:	f000 f8e2 	bl	80044a4 <_lseek_r>
 80042e0:	89a3      	ldrh	r3, [r4, #12]
 80042e2:	4632      	mov	r2, r6
 80042e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80042e8:	81a3      	strh	r3, [r4, #12]
 80042ea:	4628      	mov	r0, r5
 80042ec:	463b      	mov	r3, r7
 80042ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042f6:	f000 b8f9 	b.w	80044ec <_write_r>

080042fa <__sseek>:
 80042fa:	b510      	push	{r4, lr}
 80042fc:	460c      	mov	r4, r1
 80042fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004302:	f000 f8cf 	bl	80044a4 <_lseek_r>
 8004306:	1c43      	adds	r3, r0, #1
 8004308:	89a3      	ldrh	r3, [r4, #12]
 800430a:	bf15      	itete	ne
 800430c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800430e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004312:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004316:	81a3      	strheq	r3, [r4, #12]
 8004318:	bf18      	it	ne
 800431a:	81a3      	strhne	r3, [r4, #12]
 800431c:	bd10      	pop	{r4, pc}

0800431e <__sclose>:
 800431e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004322:	f000 b8af 	b.w	8004484 <_close_r>

08004326 <__swbuf_r>:
 8004326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004328:	460e      	mov	r6, r1
 800432a:	4614      	mov	r4, r2
 800432c:	4605      	mov	r5, r0
 800432e:	b118      	cbz	r0, 8004338 <__swbuf_r+0x12>
 8004330:	6a03      	ldr	r3, [r0, #32]
 8004332:	b90b      	cbnz	r3, 8004338 <__swbuf_r+0x12>
 8004334:	f7ff fea6 	bl	8004084 <__sinit>
 8004338:	69a3      	ldr	r3, [r4, #24]
 800433a:	60a3      	str	r3, [r4, #8]
 800433c:	89a3      	ldrh	r3, [r4, #12]
 800433e:	071a      	lsls	r2, r3, #28
 8004340:	d501      	bpl.n	8004346 <__swbuf_r+0x20>
 8004342:	6923      	ldr	r3, [r4, #16]
 8004344:	b943      	cbnz	r3, 8004358 <__swbuf_r+0x32>
 8004346:	4621      	mov	r1, r4
 8004348:	4628      	mov	r0, r5
 800434a:	f000 f82b 	bl	80043a4 <__swsetup_r>
 800434e:	b118      	cbz	r0, 8004358 <__swbuf_r+0x32>
 8004350:	f04f 37ff 	mov.w	r7, #4294967295
 8004354:	4638      	mov	r0, r7
 8004356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	6922      	ldr	r2, [r4, #16]
 800435c:	b2f6      	uxtb	r6, r6
 800435e:	1a98      	subs	r0, r3, r2
 8004360:	6963      	ldr	r3, [r4, #20]
 8004362:	4637      	mov	r7, r6
 8004364:	4283      	cmp	r3, r0
 8004366:	dc05      	bgt.n	8004374 <__swbuf_r+0x4e>
 8004368:	4621      	mov	r1, r4
 800436a:	4628      	mov	r0, r5
 800436c:	f7ff fdc2 	bl	8003ef4 <_fflush_r>
 8004370:	2800      	cmp	r0, #0
 8004372:	d1ed      	bne.n	8004350 <__swbuf_r+0x2a>
 8004374:	68a3      	ldr	r3, [r4, #8]
 8004376:	3b01      	subs	r3, #1
 8004378:	60a3      	str	r3, [r4, #8]
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	6022      	str	r2, [r4, #0]
 8004380:	701e      	strb	r6, [r3, #0]
 8004382:	6962      	ldr	r2, [r4, #20]
 8004384:	1c43      	adds	r3, r0, #1
 8004386:	429a      	cmp	r2, r3
 8004388:	d004      	beq.n	8004394 <__swbuf_r+0x6e>
 800438a:	89a3      	ldrh	r3, [r4, #12]
 800438c:	07db      	lsls	r3, r3, #31
 800438e:	d5e1      	bpl.n	8004354 <__swbuf_r+0x2e>
 8004390:	2e0a      	cmp	r6, #10
 8004392:	d1df      	bne.n	8004354 <__swbuf_r+0x2e>
 8004394:	4621      	mov	r1, r4
 8004396:	4628      	mov	r0, r5
 8004398:	f7ff fdac 	bl	8003ef4 <_fflush_r>
 800439c:	2800      	cmp	r0, #0
 800439e:	d0d9      	beq.n	8004354 <__swbuf_r+0x2e>
 80043a0:	e7d6      	b.n	8004350 <__swbuf_r+0x2a>
	...

080043a4 <__swsetup_r>:
 80043a4:	b538      	push	{r3, r4, r5, lr}
 80043a6:	4b29      	ldr	r3, [pc, #164]	@ (800444c <__swsetup_r+0xa8>)
 80043a8:	4605      	mov	r5, r0
 80043aa:	6818      	ldr	r0, [r3, #0]
 80043ac:	460c      	mov	r4, r1
 80043ae:	b118      	cbz	r0, 80043b8 <__swsetup_r+0x14>
 80043b0:	6a03      	ldr	r3, [r0, #32]
 80043b2:	b90b      	cbnz	r3, 80043b8 <__swsetup_r+0x14>
 80043b4:	f7ff fe66 	bl	8004084 <__sinit>
 80043b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043bc:	0719      	lsls	r1, r3, #28
 80043be:	d422      	bmi.n	8004406 <__swsetup_r+0x62>
 80043c0:	06da      	lsls	r2, r3, #27
 80043c2:	d407      	bmi.n	80043d4 <__swsetup_r+0x30>
 80043c4:	2209      	movs	r2, #9
 80043c6:	602a      	str	r2, [r5, #0]
 80043c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043cc:	f04f 30ff 	mov.w	r0, #4294967295
 80043d0:	81a3      	strh	r3, [r4, #12]
 80043d2:	e033      	b.n	800443c <__swsetup_r+0x98>
 80043d4:	0758      	lsls	r0, r3, #29
 80043d6:	d512      	bpl.n	80043fe <__swsetup_r+0x5a>
 80043d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80043da:	b141      	cbz	r1, 80043ee <__swsetup_r+0x4a>
 80043dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80043e0:	4299      	cmp	r1, r3
 80043e2:	d002      	beq.n	80043ea <__swsetup_r+0x46>
 80043e4:	4628      	mov	r0, r5
 80043e6:	f000 f8c1 	bl	800456c <_free_r>
 80043ea:	2300      	movs	r3, #0
 80043ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80043ee:	89a3      	ldrh	r3, [r4, #12]
 80043f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80043f4:	81a3      	strh	r3, [r4, #12]
 80043f6:	2300      	movs	r3, #0
 80043f8:	6063      	str	r3, [r4, #4]
 80043fa:	6923      	ldr	r3, [r4, #16]
 80043fc:	6023      	str	r3, [r4, #0]
 80043fe:	89a3      	ldrh	r3, [r4, #12]
 8004400:	f043 0308 	orr.w	r3, r3, #8
 8004404:	81a3      	strh	r3, [r4, #12]
 8004406:	6923      	ldr	r3, [r4, #16]
 8004408:	b94b      	cbnz	r3, 800441e <__swsetup_r+0x7a>
 800440a:	89a3      	ldrh	r3, [r4, #12]
 800440c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004414:	d003      	beq.n	800441e <__swsetup_r+0x7a>
 8004416:	4621      	mov	r1, r4
 8004418:	4628      	mov	r0, r5
 800441a:	f001 f902 	bl	8005622 <__smakebuf_r>
 800441e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004422:	f013 0201 	ands.w	r2, r3, #1
 8004426:	d00a      	beq.n	800443e <__swsetup_r+0x9a>
 8004428:	2200      	movs	r2, #0
 800442a:	60a2      	str	r2, [r4, #8]
 800442c:	6962      	ldr	r2, [r4, #20]
 800442e:	4252      	negs	r2, r2
 8004430:	61a2      	str	r2, [r4, #24]
 8004432:	6922      	ldr	r2, [r4, #16]
 8004434:	b942      	cbnz	r2, 8004448 <__swsetup_r+0xa4>
 8004436:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800443a:	d1c5      	bne.n	80043c8 <__swsetup_r+0x24>
 800443c:	bd38      	pop	{r3, r4, r5, pc}
 800443e:	0799      	lsls	r1, r3, #30
 8004440:	bf58      	it	pl
 8004442:	6962      	ldrpl	r2, [r4, #20]
 8004444:	60a2      	str	r2, [r4, #8]
 8004446:	e7f4      	b.n	8004432 <__swsetup_r+0x8e>
 8004448:	2000      	movs	r0, #0
 800444a:	e7f7      	b.n	800443c <__swsetup_r+0x98>
 800444c:	20000cd0 	.word	0x20000cd0

08004450 <memset>:
 8004450:	4603      	mov	r3, r0
 8004452:	4402      	add	r2, r0
 8004454:	4293      	cmp	r3, r2
 8004456:	d100      	bne.n	800445a <memset+0xa>
 8004458:	4770      	bx	lr
 800445a:	f803 1b01 	strb.w	r1, [r3], #1
 800445e:	e7f9      	b.n	8004454 <memset+0x4>

08004460 <strncmp>:
 8004460:	b510      	push	{r4, lr}
 8004462:	b16a      	cbz	r2, 8004480 <strncmp+0x20>
 8004464:	3901      	subs	r1, #1
 8004466:	1884      	adds	r4, r0, r2
 8004468:	f810 2b01 	ldrb.w	r2, [r0], #1
 800446c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004470:	429a      	cmp	r2, r3
 8004472:	d103      	bne.n	800447c <strncmp+0x1c>
 8004474:	42a0      	cmp	r0, r4
 8004476:	d001      	beq.n	800447c <strncmp+0x1c>
 8004478:	2a00      	cmp	r2, #0
 800447a:	d1f5      	bne.n	8004468 <strncmp+0x8>
 800447c:	1ad0      	subs	r0, r2, r3
 800447e:	bd10      	pop	{r4, pc}
 8004480:	4610      	mov	r0, r2
 8004482:	e7fc      	b.n	800447e <strncmp+0x1e>

08004484 <_close_r>:
 8004484:	b538      	push	{r3, r4, r5, lr}
 8004486:	2300      	movs	r3, #0
 8004488:	4d05      	ldr	r5, [pc, #20]	@ (80044a0 <_close_r+0x1c>)
 800448a:	4604      	mov	r4, r0
 800448c:	4608      	mov	r0, r1
 800448e:	602b      	str	r3, [r5, #0]
 8004490:	f7fe fbbb 	bl	8002c0a <_close>
 8004494:	1c43      	adds	r3, r0, #1
 8004496:	d102      	bne.n	800449e <_close_r+0x1a>
 8004498:	682b      	ldr	r3, [r5, #0]
 800449a:	b103      	cbz	r3, 800449e <_close_r+0x1a>
 800449c:	6023      	str	r3, [r4, #0]
 800449e:	bd38      	pop	{r3, r4, r5, pc}
 80044a0:	20004210 	.word	0x20004210

080044a4 <_lseek_r>:
 80044a4:	b538      	push	{r3, r4, r5, lr}
 80044a6:	4604      	mov	r4, r0
 80044a8:	4608      	mov	r0, r1
 80044aa:	4611      	mov	r1, r2
 80044ac:	2200      	movs	r2, #0
 80044ae:	4d05      	ldr	r5, [pc, #20]	@ (80044c4 <_lseek_r+0x20>)
 80044b0:	602a      	str	r2, [r5, #0]
 80044b2:	461a      	mov	r2, r3
 80044b4:	f7fe fbcd 	bl	8002c52 <_lseek>
 80044b8:	1c43      	adds	r3, r0, #1
 80044ba:	d102      	bne.n	80044c2 <_lseek_r+0x1e>
 80044bc:	682b      	ldr	r3, [r5, #0]
 80044be:	b103      	cbz	r3, 80044c2 <_lseek_r+0x1e>
 80044c0:	6023      	str	r3, [r4, #0]
 80044c2:	bd38      	pop	{r3, r4, r5, pc}
 80044c4:	20004210 	.word	0x20004210

080044c8 <_read_r>:
 80044c8:	b538      	push	{r3, r4, r5, lr}
 80044ca:	4604      	mov	r4, r0
 80044cc:	4608      	mov	r0, r1
 80044ce:	4611      	mov	r1, r2
 80044d0:	2200      	movs	r2, #0
 80044d2:	4d05      	ldr	r5, [pc, #20]	@ (80044e8 <_read_r+0x20>)
 80044d4:	602a      	str	r2, [r5, #0]
 80044d6:	461a      	mov	r2, r3
 80044d8:	f7fe fb7a 	bl	8002bd0 <_read>
 80044dc:	1c43      	adds	r3, r0, #1
 80044de:	d102      	bne.n	80044e6 <_read_r+0x1e>
 80044e0:	682b      	ldr	r3, [r5, #0]
 80044e2:	b103      	cbz	r3, 80044e6 <_read_r+0x1e>
 80044e4:	6023      	str	r3, [r4, #0]
 80044e6:	bd38      	pop	{r3, r4, r5, pc}
 80044e8:	20004210 	.word	0x20004210

080044ec <_write_r>:
 80044ec:	b538      	push	{r3, r4, r5, lr}
 80044ee:	4604      	mov	r4, r0
 80044f0:	4608      	mov	r0, r1
 80044f2:	4611      	mov	r1, r2
 80044f4:	2200      	movs	r2, #0
 80044f6:	4d05      	ldr	r5, [pc, #20]	@ (800450c <_write_r+0x20>)
 80044f8:	602a      	str	r2, [r5, #0]
 80044fa:	461a      	mov	r2, r3
 80044fc:	f7fc ff30 	bl	8001360 <_write>
 8004500:	1c43      	adds	r3, r0, #1
 8004502:	d102      	bne.n	800450a <_write_r+0x1e>
 8004504:	682b      	ldr	r3, [r5, #0]
 8004506:	b103      	cbz	r3, 800450a <_write_r+0x1e>
 8004508:	6023      	str	r3, [r4, #0]
 800450a:	bd38      	pop	{r3, r4, r5, pc}
 800450c:	20004210 	.word	0x20004210

08004510 <__errno>:
 8004510:	4b01      	ldr	r3, [pc, #4]	@ (8004518 <__errno+0x8>)
 8004512:	6818      	ldr	r0, [r3, #0]
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	20000cd0 	.word	0x20000cd0

0800451c <__libc_init_array>:
 800451c:	b570      	push	{r4, r5, r6, lr}
 800451e:	2600      	movs	r6, #0
 8004520:	4d0c      	ldr	r5, [pc, #48]	@ (8004554 <__libc_init_array+0x38>)
 8004522:	4c0d      	ldr	r4, [pc, #52]	@ (8004558 <__libc_init_array+0x3c>)
 8004524:	1b64      	subs	r4, r4, r5
 8004526:	10a4      	asrs	r4, r4, #2
 8004528:	42a6      	cmp	r6, r4
 800452a:	d109      	bne.n	8004540 <__libc_init_array+0x24>
 800452c:	f001 fae4 	bl	8005af8 <_init>
 8004530:	2600      	movs	r6, #0
 8004532:	4d0a      	ldr	r5, [pc, #40]	@ (800455c <__libc_init_array+0x40>)
 8004534:	4c0a      	ldr	r4, [pc, #40]	@ (8004560 <__libc_init_array+0x44>)
 8004536:	1b64      	subs	r4, r4, r5
 8004538:	10a4      	asrs	r4, r4, #2
 800453a:	42a6      	cmp	r6, r4
 800453c:	d105      	bne.n	800454a <__libc_init_array+0x2e>
 800453e:	bd70      	pop	{r4, r5, r6, pc}
 8004540:	f855 3b04 	ldr.w	r3, [r5], #4
 8004544:	4798      	blx	r3
 8004546:	3601      	adds	r6, #1
 8004548:	e7ee      	b.n	8004528 <__libc_init_array+0xc>
 800454a:	f855 3b04 	ldr.w	r3, [r5], #4
 800454e:	4798      	blx	r3
 8004550:	3601      	adds	r6, #1
 8004552:	e7f2      	b.n	800453a <__libc_init_array+0x1e>
 8004554:	08006a18 	.word	0x08006a18
 8004558:	08006a18 	.word	0x08006a18
 800455c:	08006a18 	.word	0x08006a18
 8004560:	08006a1c 	.word	0x08006a1c

08004564 <__retarget_lock_init_recursive>:
 8004564:	4770      	bx	lr

08004566 <__retarget_lock_acquire_recursive>:
 8004566:	4770      	bx	lr

08004568 <__retarget_lock_release_recursive>:
 8004568:	4770      	bx	lr
	...

0800456c <_free_r>:
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	4605      	mov	r5, r0
 8004570:	2900      	cmp	r1, #0
 8004572:	d040      	beq.n	80045f6 <_free_r+0x8a>
 8004574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004578:	1f0c      	subs	r4, r1, #4
 800457a:	2b00      	cmp	r3, #0
 800457c:	bfb8      	it	lt
 800457e:	18e4      	addlt	r4, r4, r3
 8004580:	f000 f8de 	bl	8004740 <__malloc_lock>
 8004584:	4a1c      	ldr	r2, [pc, #112]	@ (80045f8 <_free_r+0x8c>)
 8004586:	6813      	ldr	r3, [r2, #0]
 8004588:	b933      	cbnz	r3, 8004598 <_free_r+0x2c>
 800458a:	6063      	str	r3, [r4, #4]
 800458c:	6014      	str	r4, [r2, #0]
 800458e:	4628      	mov	r0, r5
 8004590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004594:	f000 b8da 	b.w	800474c <__malloc_unlock>
 8004598:	42a3      	cmp	r3, r4
 800459a:	d908      	bls.n	80045ae <_free_r+0x42>
 800459c:	6820      	ldr	r0, [r4, #0]
 800459e:	1821      	adds	r1, r4, r0
 80045a0:	428b      	cmp	r3, r1
 80045a2:	bf01      	itttt	eq
 80045a4:	6819      	ldreq	r1, [r3, #0]
 80045a6:	685b      	ldreq	r3, [r3, #4]
 80045a8:	1809      	addeq	r1, r1, r0
 80045aa:	6021      	streq	r1, [r4, #0]
 80045ac:	e7ed      	b.n	800458a <_free_r+0x1e>
 80045ae:	461a      	mov	r2, r3
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	b10b      	cbz	r3, 80045b8 <_free_r+0x4c>
 80045b4:	42a3      	cmp	r3, r4
 80045b6:	d9fa      	bls.n	80045ae <_free_r+0x42>
 80045b8:	6811      	ldr	r1, [r2, #0]
 80045ba:	1850      	adds	r0, r2, r1
 80045bc:	42a0      	cmp	r0, r4
 80045be:	d10b      	bne.n	80045d8 <_free_r+0x6c>
 80045c0:	6820      	ldr	r0, [r4, #0]
 80045c2:	4401      	add	r1, r0
 80045c4:	1850      	adds	r0, r2, r1
 80045c6:	4283      	cmp	r3, r0
 80045c8:	6011      	str	r1, [r2, #0]
 80045ca:	d1e0      	bne.n	800458e <_free_r+0x22>
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	4408      	add	r0, r1
 80045d2:	6010      	str	r0, [r2, #0]
 80045d4:	6053      	str	r3, [r2, #4]
 80045d6:	e7da      	b.n	800458e <_free_r+0x22>
 80045d8:	d902      	bls.n	80045e0 <_free_r+0x74>
 80045da:	230c      	movs	r3, #12
 80045dc:	602b      	str	r3, [r5, #0]
 80045de:	e7d6      	b.n	800458e <_free_r+0x22>
 80045e0:	6820      	ldr	r0, [r4, #0]
 80045e2:	1821      	adds	r1, r4, r0
 80045e4:	428b      	cmp	r3, r1
 80045e6:	bf01      	itttt	eq
 80045e8:	6819      	ldreq	r1, [r3, #0]
 80045ea:	685b      	ldreq	r3, [r3, #4]
 80045ec:	1809      	addeq	r1, r1, r0
 80045ee:	6021      	streq	r1, [r4, #0]
 80045f0:	6063      	str	r3, [r4, #4]
 80045f2:	6054      	str	r4, [r2, #4]
 80045f4:	e7cb      	b.n	800458e <_free_r+0x22>
 80045f6:	bd38      	pop	{r3, r4, r5, pc}
 80045f8:	2000421c 	.word	0x2000421c

080045fc <sbrk_aligned>:
 80045fc:	b570      	push	{r4, r5, r6, lr}
 80045fe:	4e0f      	ldr	r6, [pc, #60]	@ (800463c <sbrk_aligned+0x40>)
 8004600:	460c      	mov	r4, r1
 8004602:	6831      	ldr	r1, [r6, #0]
 8004604:	4605      	mov	r5, r0
 8004606:	b911      	cbnz	r1, 800460e <sbrk_aligned+0x12>
 8004608:	f001 f928 	bl	800585c <_sbrk_r>
 800460c:	6030      	str	r0, [r6, #0]
 800460e:	4621      	mov	r1, r4
 8004610:	4628      	mov	r0, r5
 8004612:	f001 f923 	bl	800585c <_sbrk_r>
 8004616:	1c43      	adds	r3, r0, #1
 8004618:	d103      	bne.n	8004622 <sbrk_aligned+0x26>
 800461a:	f04f 34ff 	mov.w	r4, #4294967295
 800461e:	4620      	mov	r0, r4
 8004620:	bd70      	pop	{r4, r5, r6, pc}
 8004622:	1cc4      	adds	r4, r0, #3
 8004624:	f024 0403 	bic.w	r4, r4, #3
 8004628:	42a0      	cmp	r0, r4
 800462a:	d0f8      	beq.n	800461e <sbrk_aligned+0x22>
 800462c:	1a21      	subs	r1, r4, r0
 800462e:	4628      	mov	r0, r5
 8004630:	f001 f914 	bl	800585c <_sbrk_r>
 8004634:	3001      	adds	r0, #1
 8004636:	d1f2      	bne.n	800461e <sbrk_aligned+0x22>
 8004638:	e7ef      	b.n	800461a <sbrk_aligned+0x1e>
 800463a:	bf00      	nop
 800463c:	20004218 	.word	0x20004218

08004640 <_malloc_r>:
 8004640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004644:	1ccd      	adds	r5, r1, #3
 8004646:	f025 0503 	bic.w	r5, r5, #3
 800464a:	3508      	adds	r5, #8
 800464c:	2d0c      	cmp	r5, #12
 800464e:	bf38      	it	cc
 8004650:	250c      	movcc	r5, #12
 8004652:	2d00      	cmp	r5, #0
 8004654:	4606      	mov	r6, r0
 8004656:	db01      	blt.n	800465c <_malloc_r+0x1c>
 8004658:	42a9      	cmp	r1, r5
 800465a:	d904      	bls.n	8004666 <_malloc_r+0x26>
 800465c:	230c      	movs	r3, #12
 800465e:	6033      	str	r3, [r6, #0]
 8004660:	2000      	movs	r0, #0
 8004662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004666:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800473c <_malloc_r+0xfc>
 800466a:	f000 f869 	bl	8004740 <__malloc_lock>
 800466e:	f8d8 3000 	ldr.w	r3, [r8]
 8004672:	461c      	mov	r4, r3
 8004674:	bb44      	cbnz	r4, 80046c8 <_malloc_r+0x88>
 8004676:	4629      	mov	r1, r5
 8004678:	4630      	mov	r0, r6
 800467a:	f7ff ffbf 	bl	80045fc <sbrk_aligned>
 800467e:	1c43      	adds	r3, r0, #1
 8004680:	4604      	mov	r4, r0
 8004682:	d158      	bne.n	8004736 <_malloc_r+0xf6>
 8004684:	f8d8 4000 	ldr.w	r4, [r8]
 8004688:	4627      	mov	r7, r4
 800468a:	2f00      	cmp	r7, #0
 800468c:	d143      	bne.n	8004716 <_malloc_r+0xd6>
 800468e:	2c00      	cmp	r4, #0
 8004690:	d04b      	beq.n	800472a <_malloc_r+0xea>
 8004692:	6823      	ldr	r3, [r4, #0]
 8004694:	4639      	mov	r1, r7
 8004696:	4630      	mov	r0, r6
 8004698:	eb04 0903 	add.w	r9, r4, r3
 800469c:	f001 f8de 	bl	800585c <_sbrk_r>
 80046a0:	4581      	cmp	r9, r0
 80046a2:	d142      	bne.n	800472a <_malloc_r+0xea>
 80046a4:	6821      	ldr	r1, [r4, #0]
 80046a6:	4630      	mov	r0, r6
 80046a8:	1a6d      	subs	r5, r5, r1
 80046aa:	4629      	mov	r1, r5
 80046ac:	f7ff ffa6 	bl	80045fc <sbrk_aligned>
 80046b0:	3001      	adds	r0, #1
 80046b2:	d03a      	beq.n	800472a <_malloc_r+0xea>
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	442b      	add	r3, r5
 80046b8:	6023      	str	r3, [r4, #0]
 80046ba:	f8d8 3000 	ldr.w	r3, [r8]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	bb62      	cbnz	r2, 800471c <_malloc_r+0xdc>
 80046c2:	f8c8 7000 	str.w	r7, [r8]
 80046c6:	e00f      	b.n	80046e8 <_malloc_r+0xa8>
 80046c8:	6822      	ldr	r2, [r4, #0]
 80046ca:	1b52      	subs	r2, r2, r5
 80046cc:	d420      	bmi.n	8004710 <_malloc_r+0xd0>
 80046ce:	2a0b      	cmp	r2, #11
 80046d0:	d917      	bls.n	8004702 <_malloc_r+0xc2>
 80046d2:	1961      	adds	r1, r4, r5
 80046d4:	42a3      	cmp	r3, r4
 80046d6:	6025      	str	r5, [r4, #0]
 80046d8:	bf18      	it	ne
 80046da:	6059      	strne	r1, [r3, #4]
 80046dc:	6863      	ldr	r3, [r4, #4]
 80046de:	bf08      	it	eq
 80046e0:	f8c8 1000 	streq.w	r1, [r8]
 80046e4:	5162      	str	r2, [r4, r5]
 80046e6:	604b      	str	r3, [r1, #4]
 80046e8:	4630      	mov	r0, r6
 80046ea:	f000 f82f 	bl	800474c <__malloc_unlock>
 80046ee:	f104 000b 	add.w	r0, r4, #11
 80046f2:	1d23      	adds	r3, r4, #4
 80046f4:	f020 0007 	bic.w	r0, r0, #7
 80046f8:	1ac2      	subs	r2, r0, r3
 80046fa:	bf1c      	itt	ne
 80046fc:	1a1b      	subne	r3, r3, r0
 80046fe:	50a3      	strne	r3, [r4, r2]
 8004700:	e7af      	b.n	8004662 <_malloc_r+0x22>
 8004702:	6862      	ldr	r2, [r4, #4]
 8004704:	42a3      	cmp	r3, r4
 8004706:	bf0c      	ite	eq
 8004708:	f8c8 2000 	streq.w	r2, [r8]
 800470c:	605a      	strne	r2, [r3, #4]
 800470e:	e7eb      	b.n	80046e8 <_malloc_r+0xa8>
 8004710:	4623      	mov	r3, r4
 8004712:	6864      	ldr	r4, [r4, #4]
 8004714:	e7ae      	b.n	8004674 <_malloc_r+0x34>
 8004716:	463c      	mov	r4, r7
 8004718:	687f      	ldr	r7, [r7, #4]
 800471a:	e7b6      	b.n	800468a <_malloc_r+0x4a>
 800471c:	461a      	mov	r2, r3
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	42a3      	cmp	r3, r4
 8004722:	d1fb      	bne.n	800471c <_malloc_r+0xdc>
 8004724:	2300      	movs	r3, #0
 8004726:	6053      	str	r3, [r2, #4]
 8004728:	e7de      	b.n	80046e8 <_malloc_r+0xa8>
 800472a:	230c      	movs	r3, #12
 800472c:	4630      	mov	r0, r6
 800472e:	6033      	str	r3, [r6, #0]
 8004730:	f000 f80c 	bl	800474c <__malloc_unlock>
 8004734:	e794      	b.n	8004660 <_malloc_r+0x20>
 8004736:	6005      	str	r5, [r0, #0]
 8004738:	e7d6      	b.n	80046e8 <_malloc_r+0xa8>
 800473a:	bf00      	nop
 800473c:	2000421c 	.word	0x2000421c

08004740 <__malloc_lock>:
 8004740:	4801      	ldr	r0, [pc, #4]	@ (8004748 <__malloc_lock+0x8>)
 8004742:	f7ff bf10 	b.w	8004566 <__retarget_lock_acquire_recursive>
 8004746:	bf00      	nop
 8004748:	20004214 	.word	0x20004214

0800474c <__malloc_unlock>:
 800474c:	4801      	ldr	r0, [pc, #4]	@ (8004754 <__malloc_unlock+0x8>)
 800474e:	f7ff bf0b 	b.w	8004568 <__retarget_lock_release_recursive>
 8004752:	bf00      	nop
 8004754:	20004214 	.word	0x20004214

08004758 <__ssputs_r>:
 8004758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800475c:	461f      	mov	r7, r3
 800475e:	688e      	ldr	r6, [r1, #8]
 8004760:	4682      	mov	sl, r0
 8004762:	42be      	cmp	r6, r7
 8004764:	460c      	mov	r4, r1
 8004766:	4690      	mov	r8, r2
 8004768:	680b      	ldr	r3, [r1, #0]
 800476a:	d82d      	bhi.n	80047c8 <__ssputs_r+0x70>
 800476c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004770:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004774:	d026      	beq.n	80047c4 <__ssputs_r+0x6c>
 8004776:	6965      	ldr	r5, [r4, #20]
 8004778:	6909      	ldr	r1, [r1, #16]
 800477a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800477e:	eba3 0901 	sub.w	r9, r3, r1
 8004782:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004786:	1c7b      	adds	r3, r7, #1
 8004788:	444b      	add	r3, r9
 800478a:	106d      	asrs	r5, r5, #1
 800478c:	429d      	cmp	r5, r3
 800478e:	bf38      	it	cc
 8004790:	461d      	movcc	r5, r3
 8004792:	0553      	lsls	r3, r2, #21
 8004794:	d527      	bpl.n	80047e6 <__ssputs_r+0x8e>
 8004796:	4629      	mov	r1, r5
 8004798:	f7ff ff52 	bl	8004640 <_malloc_r>
 800479c:	4606      	mov	r6, r0
 800479e:	b360      	cbz	r0, 80047fa <__ssputs_r+0xa2>
 80047a0:	464a      	mov	r2, r9
 80047a2:	6921      	ldr	r1, [r4, #16]
 80047a4:	f001 f878 	bl	8005898 <memcpy>
 80047a8:	89a3      	ldrh	r3, [r4, #12]
 80047aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80047ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047b2:	81a3      	strh	r3, [r4, #12]
 80047b4:	6126      	str	r6, [r4, #16]
 80047b6:	444e      	add	r6, r9
 80047b8:	6026      	str	r6, [r4, #0]
 80047ba:	463e      	mov	r6, r7
 80047bc:	6165      	str	r5, [r4, #20]
 80047be:	eba5 0509 	sub.w	r5, r5, r9
 80047c2:	60a5      	str	r5, [r4, #8]
 80047c4:	42be      	cmp	r6, r7
 80047c6:	d900      	bls.n	80047ca <__ssputs_r+0x72>
 80047c8:	463e      	mov	r6, r7
 80047ca:	4632      	mov	r2, r6
 80047cc:	4641      	mov	r1, r8
 80047ce:	6820      	ldr	r0, [r4, #0]
 80047d0:	f001 f808 	bl	80057e4 <memmove>
 80047d4:	2000      	movs	r0, #0
 80047d6:	68a3      	ldr	r3, [r4, #8]
 80047d8:	1b9b      	subs	r3, r3, r6
 80047da:	60a3      	str	r3, [r4, #8]
 80047dc:	6823      	ldr	r3, [r4, #0]
 80047de:	4433      	add	r3, r6
 80047e0:	6023      	str	r3, [r4, #0]
 80047e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e6:	462a      	mov	r2, r5
 80047e8:	f001 f864 	bl	80058b4 <_realloc_r>
 80047ec:	4606      	mov	r6, r0
 80047ee:	2800      	cmp	r0, #0
 80047f0:	d1e0      	bne.n	80047b4 <__ssputs_r+0x5c>
 80047f2:	4650      	mov	r0, sl
 80047f4:	6921      	ldr	r1, [r4, #16]
 80047f6:	f7ff feb9 	bl	800456c <_free_r>
 80047fa:	230c      	movs	r3, #12
 80047fc:	f8ca 3000 	str.w	r3, [sl]
 8004800:	89a3      	ldrh	r3, [r4, #12]
 8004802:	f04f 30ff 	mov.w	r0, #4294967295
 8004806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800480a:	81a3      	strh	r3, [r4, #12]
 800480c:	e7e9      	b.n	80047e2 <__ssputs_r+0x8a>
	...

08004810 <_svfiprintf_r>:
 8004810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004814:	4698      	mov	r8, r3
 8004816:	898b      	ldrh	r3, [r1, #12]
 8004818:	4607      	mov	r7, r0
 800481a:	061b      	lsls	r3, r3, #24
 800481c:	460d      	mov	r5, r1
 800481e:	4614      	mov	r4, r2
 8004820:	b09d      	sub	sp, #116	@ 0x74
 8004822:	d510      	bpl.n	8004846 <_svfiprintf_r+0x36>
 8004824:	690b      	ldr	r3, [r1, #16]
 8004826:	b973      	cbnz	r3, 8004846 <_svfiprintf_r+0x36>
 8004828:	2140      	movs	r1, #64	@ 0x40
 800482a:	f7ff ff09 	bl	8004640 <_malloc_r>
 800482e:	6028      	str	r0, [r5, #0]
 8004830:	6128      	str	r0, [r5, #16]
 8004832:	b930      	cbnz	r0, 8004842 <_svfiprintf_r+0x32>
 8004834:	230c      	movs	r3, #12
 8004836:	603b      	str	r3, [r7, #0]
 8004838:	f04f 30ff 	mov.w	r0, #4294967295
 800483c:	b01d      	add	sp, #116	@ 0x74
 800483e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004842:	2340      	movs	r3, #64	@ 0x40
 8004844:	616b      	str	r3, [r5, #20]
 8004846:	2300      	movs	r3, #0
 8004848:	9309      	str	r3, [sp, #36]	@ 0x24
 800484a:	2320      	movs	r3, #32
 800484c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004850:	2330      	movs	r3, #48	@ 0x30
 8004852:	f04f 0901 	mov.w	r9, #1
 8004856:	f8cd 800c 	str.w	r8, [sp, #12]
 800485a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80049f4 <_svfiprintf_r+0x1e4>
 800485e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004862:	4623      	mov	r3, r4
 8004864:	469a      	mov	sl, r3
 8004866:	f813 2b01 	ldrb.w	r2, [r3], #1
 800486a:	b10a      	cbz	r2, 8004870 <_svfiprintf_r+0x60>
 800486c:	2a25      	cmp	r2, #37	@ 0x25
 800486e:	d1f9      	bne.n	8004864 <_svfiprintf_r+0x54>
 8004870:	ebba 0b04 	subs.w	fp, sl, r4
 8004874:	d00b      	beq.n	800488e <_svfiprintf_r+0x7e>
 8004876:	465b      	mov	r3, fp
 8004878:	4622      	mov	r2, r4
 800487a:	4629      	mov	r1, r5
 800487c:	4638      	mov	r0, r7
 800487e:	f7ff ff6b 	bl	8004758 <__ssputs_r>
 8004882:	3001      	adds	r0, #1
 8004884:	f000 80a7 	beq.w	80049d6 <_svfiprintf_r+0x1c6>
 8004888:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800488a:	445a      	add	r2, fp
 800488c:	9209      	str	r2, [sp, #36]	@ 0x24
 800488e:	f89a 3000 	ldrb.w	r3, [sl]
 8004892:	2b00      	cmp	r3, #0
 8004894:	f000 809f 	beq.w	80049d6 <_svfiprintf_r+0x1c6>
 8004898:	2300      	movs	r3, #0
 800489a:	f04f 32ff 	mov.w	r2, #4294967295
 800489e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048a2:	f10a 0a01 	add.w	sl, sl, #1
 80048a6:	9304      	str	r3, [sp, #16]
 80048a8:	9307      	str	r3, [sp, #28]
 80048aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80048ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80048b0:	4654      	mov	r4, sl
 80048b2:	2205      	movs	r2, #5
 80048b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048b8:	484e      	ldr	r0, [pc, #312]	@ (80049f4 <_svfiprintf_r+0x1e4>)
 80048ba:	f000 ffdf 	bl	800587c <memchr>
 80048be:	9a04      	ldr	r2, [sp, #16]
 80048c0:	b9d8      	cbnz	r0, 80048fa <_svfiprintf_r+0xea>
 80048c2:	06d0      	lsls	r0, r2, #27
 80048c4:	bf44      	itt	mi
 80048c6:	2320      	movmi	r3, #32
 80048c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048cc:	0711      	lsls	r1, r2, #28
 80048ce:	bf44      	itt	mi
 80048d0:	232b      	movmi	r3, #43	@ 0x2b
 80048d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048d6:	f89a 3000 	ldrb.w	r3, [sl]
 80048da:	2b2a      	cmp	r3, #42	@ 0x2a
 80048dc:	d015      	beq.n	800490a <_svfiprintf_r+0xfa>
 80048de:	4654      	mov	r4, sl
 80048e0:	2000      	movs	r0, #0
 80048e2:	f04f 0c0a 	mov.w	ip, #10
 80048e6:	9a07      	ldr	r2, [sp, #28]
 80048e8:	4621      	mov	r1, r4
 80048ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048ee:	3b30      	subs	r3, #48	@ 0x30
 80048f0:	2b09      	cmp	r3, #9
 80048f2:	d94b      	bls.n	800498c <_svfiprintf_r+0x17c>
 80048f4:	b1b0      	cbz	r0, 8004924 <_svfiprintf_r+0x114>
 80048f6:	9207      	str	r2, [sp, #28]
 80048f8:	e014      	b.n	8004924 <_svfiprintf_r+0x114>
 80048fa:	eba0 0308 	sub.w	r3, r0, r8
 80048fe:	fa09 f303 	lsl.w	r3, r9, r3
 8004902:	4313      	orrs	r3, r2
 8004904:	46a2      	mov	sl, r4
 8004906:	9304      	str	r3, [sp, #16]
 8004908:	e7d2      	b.n	80048b0 <_svfiprintf_r+0xa0>
 800490a:	9b03      	ldr	r3, [sp, #12]
 800490c:	1d19      	adds	r1, r3, #4
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	9103      	str	r1, [sp, #12]
 8004912:	2b00      	cmp	r3, #0
 8004914:	bfbb      	ittet	lt
 8004916:	425b      	neglt	r3, r3
 8004918:	f042 0202 	orrlt.w	r2, r2, #2
 800491c:	9307      	strge	r3, [sp, #28]
 800491e:	9307      	strlt	r3, [sp, #28]
 8004920:	bfb8      	it	lt
 8004922:	9204      	strlt	r2, [sp, #16]
 8004924:	7823      	ldrb	r3, [r4, #0]
 8004926:	2b2e      	cmp	r3, #46	@ 0x2e
 8004928:	d10a      	bne.n	8004940 <_svfiprintf_r+0x130>
 800492a:	7863      	ldrb	r3, [r4, #1]
 800492c:	2b2a      	cmp	r3, #42	@ 0x2a
 800492e:	d132      	bne.n	8004996 <_svfiprintf_r+0x186>
 8004930:	9b03      	ldr	r3, [sp, #12]
 8004932:	3402      	adds	r4, #2
 8004934:	1d1a      	adds	r2, r3, #4
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	9203      	str	r2, [sp, #12]
 800493a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800493e:	9305      	str	r3, [sp, #20]
 8004940:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80049f8 <_svfiprintf_r+0x1e8>
 8004944:	2203      	movs	r2, #3
 8004946:	4650      	mov	r0, sl
 8004948:	7821      	ldrb	r1, [r4, #0]
 800494a:	f000 ff97 	bl	800587c <memchr>
 800494e:	b138      	cbz	r0, 8004960 <_svfiprintf_r+0x150>
 8004950:	2240      	movs	r2, #64	@ 0x40
 8004952:	9b04      	ldr	r3, [sp, #16]
 8004954:	eba0 000a 	sub.w	r0, r0, sl
 8004958:	4082      	lsls	r2, r0
 800495a:	4313      	orrs	r3, r2
 800495c:	3401      	adds	r4, #1
 800495e:	9304      	str	r3, [sp, #16]
 8004960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004964:	2206      	movs	r2, #6
 8004966:	4825      	ldr	r0, [pc, #148]	@ (80049fc <_svfiprintf_r+0x1ec>)
 8004968:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800496c:	f000 ff86 	bl	800587c <memchr>
 8004970:	2800      	cmp	r0, #0
 8004972:	d036      	beq.n	80049e2 <_svfiprintf_r+0x1d2>
 8004974:	4b22      	ldr	r3, [pc, #136]	@ (8004a00 <_svfiprintf_r+0x1f0>)
 8004976:	bb1b      	cbnz	r3, 80049c0 <_svfiprintf_r+0x1b0>
 8004978:	9b03      	ldr	r3, [sp, #12]
 800497a:	3307      	adds	r3, #7
 800497c:	f023 0307 	bic.w	r3, r3, #7
 8004980:	3308      	adds	r3, #8
 8004982:	9303      	str	r3, [sp, #12]
 8004984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004986:	4433      	add	r3, r6
 8004988:	9309      	str	r3, [sp, #36]	@ 0x24
 800498a:	e76a      	b.n	8004862 <_svfiprintf_r+0x52>
 800498c:	460c      	mov	r4, r1
 800498e:	2001      	movs	r0, #1
 8004990:	fb0c 3202 	mla	r2, ip, r2, r3
 8004994:	e7a8      	b.n	80048e8 <_svfiprintf_r+0xd8>
 8004996:	2300      	movs	r3, #0
 8004998:	f04f 0c0a 	mov.w	ip, #10
 800499c:	4619      	mov	r1, r3
 800499e:	3401      	adds	r4, #1
 80049a0:	9305      	str	r3, [sp, #20]
 80049a2:	4620      	mov	r0, r4
 80049a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049a8:	3a30      	subs	r2, #48	@ 0x30
 80049aa:	2a09      	cmp	r2, #9
 80049ac:	d903      	bls.n	80049b6 <_svfiprintf_r+0x1a6>
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0c6      	beq.n	8004940 <_svfiprintf_r+0x130>
 80049b2:	9105      	str	r1, [sp, #20]
 80049b4:	e7c4      	b.n	8004940 <_svfiprintf_r+0x130>
 80049b6:	4604      	mov	r4, r0
 80049b8:	2301      	movs	r3, #1
 80049ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80049be:	e7f0      	b.n	80049a2 <_svfiprintf_r+0x192>
 80049c0:	ab03      	add	r3, sp, #12
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	462a      	mov	r2, r5
 80049c6:	4638      	mov	r0, r7
 80049c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004a04 <_svfiprintf_r+0x1f4>)
 80049ca:	a904      	add	r1, sp, #16
 80049cc:	f3af 8000 	nop.w
 80049d0:	1c42      	adds	r2, r0, #1
 80049d2:	4606      	mov	r6, r0
 80049d4:	d1d6      	bne.n	8004984 <_svfiprintf_r+0x174>
 80049d6:	89ab      	ldrh	r3, [r5, #12]
 80049d8:	065b      	lsls	r3, r3, #25
 80049da:	f53f af2d 	bmi.w	8004838 <_svfiprintf_r+0x28>
 80049de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80049e0:	e72c      	b.n	800483c <_svfiprintf_r+0x2c>
 80049e2:	ab03      	add	r3, sp, #12
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	462a      	mov	r2, r5
 80049e8:	4638      	mov	r0, r7
 80049ea:	4b06      	ldr	r3, [pc, #24]	@ (8004a04 <_svfiprintf_r+0x1f4>)
 80049ec:	a904      	add	r1, sp, #16
 80049ee:	f000 fb87 	bl	8005100 <_printf_i>
 80049f2:	e7ed      	b.n	80049d0 <_svfiprintf_r+0x1c0>
 80049f4:	080068c0 	.word	0x080068c0
 80049f8:	080068c6 	.word	0x080068c6
 80049fc:	080068ca 	.word	0x080068ca
 8004a00:	00000000 	.word	0x00000000
 8004a04:	08004759 	.word	0x08004759

08004a08 <_sungetc_r>:
 8004a08:	b538      	push	{r3, r4, r5, lr}
 8004a0a:	1c4b      	adds	r3, r1, #1
 8004a0c:	4614      	mov	r4, r2
 8004a0e:	d103      	bne.n	8004a18 <_sungetc_r+0x10>
 8004a10:	f04f 35ff 	mov.w	r5, #4294967295
 8004a14:	4628      	mov	r0, r5
 8004a16:	bd38      	pop	{r3, r4, r5, pc}
 8004a18:	8993      	ldrh	r3, [r2, #12]
 8004a1a:	b2cd      	uxtb	r5, r1
 8004a1c:	f023 0320 	bic.w	r3, r3, #32
 8004a20:	8193      	strh	r3, [r2, #12]
 8004a22:	6853      	ldr	r3, [r2, #4]
 8004a24:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a26:	b18a      	cbz	r2, 8004a4c <_sungetc_r+0x44>
 8004a28:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	dd08      	ble.n	8004a40 <_sungetc_r+0x38>
 8004a2e:	6823      	ldr	r3, [r4, #0]
 8004a30:	1e5a      	subs	r2, r3, #1
 8004a32:	6022      	str	r2, [r4, #0]
 8004a34:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004a38:	6863      	ldr	r3, [r4, #4]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	6063      	str	r3, [r4, #4]
 8004a3e:	e7e9      	b.n	8004a14 <_sungetc_r+0xc>
 8004a40:	4621      	mov	r1, r4
 8004a42:	f000 fe97 	bl	8005774 <__submore>
 8004a46:	2800      	cmp	r0, #0
 8004a48:	d0f1      	beq.n	8004a2e <_sungetc_r+0x26>
 8004a4a:	e7e1      	b.n	8004a10 <_sungetc_r+0x8>
 8004a4c:	6921      	ldr	r1, [r4, #16]
 8004a4e:	6822      	ldr	r2, [r4, #0]
 8004a50:	b141      	cbz	r1, 8004a64 <_sungetc_r+0x5c>
 8004a52:	4291      	cmp	r1, r2
 8004a54:	d206      	bcs.n	8004a64 <_sungetc_r+0x5c>
 8004a56:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8004a5a:	42a9      	cmp	r1, r5
 8004a5c:	d102      	bne.n	8004a64 <_sungetc_r+0x5c>
 8004a5e:	3a01      	subs	r2, #1
 8004a60:	6022      	str	r2, [r4, #0]
 8004a62:	e7ea      	b.n	8004a3a <_sungetc_r+0x32>
 8004a64:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8004a68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a6e:	2303      	movs	r3, #3
 8004a70:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004a72:	4623      	mov	r3, r4
 8004a74:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004a78:	6023      	str	r3, [r4, #0]
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e7de      	b.n	8004a3c <_sungetc_r+0x34>

08004a7e <__ssrefill_r>:
 8004a7e:	b510      	push	{r4, lr}
 8004a80:	460c      	mov	r4, r1
 8004a82:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8004a84:	b169      	cbz	r1, 8004aa2 <__ssrefill_r+0x24>
 8004a86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a8a:	4299      	cmp	r1, r3
 8004a8c:	d001      	beq.n	8004a92 <__ssrefill_r+0x14>
 8004a8e:	f7ff fd6d 	bl	800456c <_free_r>
 8004a92:	2000      	movs	r0, #0
 8004a94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a96:	6360      	str	r0, [r4, #52]	@ 0x34
 8004a98:	6063      	str	r3, [r4, #4]
 8004a9a:	b113      	cbz	r3, 8004aa2 <__ssrefill_r+0x24>
 8004a9c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004a9e:	6023      	str	r3, [r4, #0]
 8004aa0:	bd10      	pop	{r4, pc}
 8004aa2:	6923      	ldr	r3, [r4, #16]
 8004aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa8:	6023      	str	r3, [r4, #0]
 8004aaa:	2300      	movs	r3, #0
 8004aac:	6063      	str	r3, [r4, #4]
 8004aae:	89a3      	ldrh	r3, [r4, #12]
 8004ab0:	f043 0320 	orr.w	r3, r3, #32
 8004ab4:	81a3      	strh	r3, [r4, #12]
 8004ab6:	e7f3      	b.n	8004aa0 <__ssrefill_r+0x22>

08004ab8 <__ssvfiscanf_r>:
 8004ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004abc:	460c      	mov	r4, r1
 8004abe:	2100      	movs	r1, #0
 8004ac0:	4606      	mov	r6, r0
 8004ac2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8004ac6:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8004aca:	49aa      	ldr	r1, [pc, #680]	@ (8004d74 <__ssvfiscanf_r+0x2bc>)
 8004acc:	f10d 0804 	add.w	r8, sp, #4
 8004ad0:	91a0      	str	r1, [sp, #640]	@ 0x280
 8004ad2:	49a9      	ldr	r1, [pc, #676]	@ (8004d78 <__ssvfiscanf_r+0x2c0>)
 8004ad4:	4fa9      	ldr	r7, [pc, #676]	@ (8004d7c <__ssvfiscanf_r+0x2c4>)
 8004ad6:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8004ada:	91a1      	str	r1, [sp, #644]	@ 0x284
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	7813      	ldrb	r3, [r2, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 8159 	beq.w	8004d98 <__ssvfiscanf_r+0x2e0>
 8004ae6:	5cf9      	ldrb	r1, [r7, r3]
 8004ae8:	1c55      	adds	r5, r2, #1
 8004aea:	f011 0108 	ands.w	r1, r1, #8
 8004aee:	d019      	beq.n	8004b24 <__ssvfiscanf_r+0x6c>
 8004af0:	6863      	ldr	r3, [r4, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	dd0f      	ble.n	8004b16 <__ssvfiscanf_r+0x5e>
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	781a      	ldrb	r2, [r3, #0]
 8004afa:	5cba      	ldrb	r2, [r7, r2]
 8004afc:	0712      	lsls	r2, r2, #28
 8004afe:	d401      	bmi.n	8004b04 <__ssvfiscanf_r+0x4c>
 8004b00:	462a      	mov	r2, r5
 8004b02:	e7ec      	b.n	8004ade <__ssvfiscanf_r+0x26>
 8004b04:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004b06:	3301      	adds	r3, #1
 8004b08:	3201      	adds	r2, #1
 8004b0a:	9245      	str	r2, [sp, #276]	@ 0x114
 8004b0c:	6862      	ldr	r2, [r4, #4]
 8004b0e:	6023      	str	r3, [r4, #0]
 8004b10:	3a01      	subs	r2, #1
 8004b12:	6062      	str	r2, [r4, #4]
 8004b14:	e7ec      	b.n	8004af0 <__ssvfiscanf_r+0x38>
 8004b16:	4621      	mov	r1, r4
 8004b18:	4630      	mov	r0, r6
 8004b1a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004b1c:	4798      	blx	r3
 8004b1e:	2800      	cmp	r0, #0
 8004b20:	d0e9      	beq.n	8004af6 <__ssvfiscanf_r+0x3e>
 8004b22:	e7ed      	b.n	8004b00 <__ssvfiscanf_r+0x48>
 8004b24:	2b25      	cmp	r3, #37	@ 0x25
 8004b26:	d012      	beq.n	8004b4e <__ssvfiscanf_r+0x96>
 8004b28:	4699      	mov	r9, r3
 8004b2a:	6863      	ldr	r3, [r4, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f340 8094 	ble.w	8004c5a <__ssvfiscanf_r+0x1a2>
 8004b32:	6822      	ldr	r2, [r4, #0]
 8004b34:	7813      	ldrb	r3, [r2, #0]
 8004b36:	454b      	cmp	r3, r9
 8004b38:	f040 812e 	bne.w	8004d98 <__ssvfiscanf_r+0x2e0>
 8004b3c:	6863      	ldr	r3, [r4, #4]
 8004b3e:	3201      	adds	r2, #1
 8004b40:	3b01      	subs	r3, #1
 8004b42:	6063      	str	r3, [r4, #4]
 8004b44:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8004b46:	6022      	str	r2, [r4, #0]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	9345      	str	r3, [sp, #276]	@ 0x114
 8004b4c:	e7d8      	b.n	8004b00 <__ssvfiscanf_r+0x48>
 8004b4e:	9141      	str	r1, [sp, #260]	@ 0x104
 8004b50:	9143      	str	r1, [sp, #268]	@ 0x10c
 8004b52:	7853      	ldrb	r3, [r2, #1]
 8004b54:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b56:	bf04      	itt	eq
 8004b58:	2310      	moveq	r3, #16
 8004b5a:	1c95      	addeq	r5, r2, #2
 8004b5c:	f04f 020a 	mov.w	r2, #10
 8004b60:	bf08      	it	eq
 8004b62:	9341      	streq	r3, [sp, #260]	@ 0x104
 8004b64:	46a9      	mov	r9, r5
 8004b66:	f819 1b01 	ldrb.w	r1, [r9], #1
 8004b6a:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8004b6e:	2b09      	cmp	r3, #9
 8004b70:	d91e      	bls.n	8004bb0 <__ssvfiscanf_r+0xf8>
 8004b72:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 8004d80 <__ssvfiscanf_r+0x2c8>
 8004b76:	2203      	movs	r2, #3
 8004b78:	4650      	mov	r0, sl
 8004b7a:	f000 fe7f 	bl	800587c <memchr>
 8004b7e:	b138      	cbz	r0, 8004b90 <__ssvfiscanf_r+0xd8>
 8004b80:	2301      	movs	r3, #1
 8004b82:	464d      	mov	r5, r9
 8004b84:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004b86:	eba0 000a 	sub.w	r0, r0, sl
 8004b8a:	4083      	lsls	r3, r0
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	9341      	str	r3, [sp, #260]	@ 0x104
 8004b90:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004b94:	2b78      	cmp	r3, #120	@ 0x78
 8004b96:	d806      	bhi.n	8004ba6 <__ssvfiscanf_r+0xee>
 8004b98:	2b57      	cmp	r3, #87	@ 0x57
 8004b9a:	d810      	bhi.n	8004bbe <__ssvfiscanf_r+0x106>
 8004b9c:	2b25      	cmp	r3, #37	@ 0x25
 8004b9e:	d0c3      	beq.n	8004b28 <__ssvfiscanf_r+0x70>
 8004ba0:	d856      	bhi.n	8004c50 <__ssvfiscanf_r+0x198>
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d064      	beq.n	8004c70 <__ssvfiscanf_r+0x1b8>
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004baa:	230a      	movs	r3, #10
 8004bac:	9342      	str	r3, [sp, #264]	@ 0x108
 8004bae:	e077      	b.n	8004ca0 <__ssvfiscanf_r+0x1e8>
 8004bb0:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8004bb2:	464d      	mov	r5, r9
 8004bb4:	fb02 1103 	mla	r1, r2, r3, r1
 8004bb8:	3930      	subs	r1, #48	@ 0x30
 8004bba:	9143      	str	r1, [sp, #268]	@ 0x10c
 8004bbc:	e7d2      	b.n	8004b64 <__ssvfiscanf_r+0xac>
 8004bbe:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8004bc2:	2a20      	cmp	r2, #32
 8004bc4:	d8ef      	bhi.n	8004ba6 <__ssvfiscanf_r+0xee>
 8004bc6:	a101      	add	r1, pc, #4	@ (adr r1, 8004bcc <__ssvfiscanf_r+0x114>)
 8004bc8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004bcc:	08004c7f 	.word	0x08004c7f
 8004bd0:	08004ba7 	.word	0x08004ba7
 8004bd4:	08004ba7 	.word	0x08004ba7
 8004bd8:	08004cd9 	.word	0x08004cd9
 8004bdc:	08004ba7 	.word	0x08004ba7
 8004be0:	08004ba7 	.word	0x08004ba7
 8004be4:	08004ba7 	.word	0x08004ba7
 8004be8:	08004ba7 	.word	0x08004ba7
 8004bec:	08004ba7 	.word	0x08004ba7
 8004bf0:	08004ba7 	.word	0x08004ba7
 8004bf4:	08004ba7 	.word	0x08004ba7
 8004bf8:	08004cef 	.word	0x08004cef
 8004bfc:	08004cd5 	.word	0x08004cd5
 8004c00:	08004c57 	.word	0x08004c57
 8004c04:	08004c57 	.word	0x08004c57
 8004c08:	08004c57 	.word	0x08004c57
 8004c0c:	08004ba7 	.word	0x08004ba7
 8004c10:	08004c91 	.word	0x08004c91
 8004c14:	08004ba7 	.word	0x08004ba7
 8004c18:	08004ba7 	.word	0x08004ba7
 8004c1c:	08004ba7 	.word	0x08004ba7
 8004c20:	08004ba7 	.word	0x08004ba7
 8004c24:	08004cff 	.word	0x08004cff
 8004c28:	08004c99 	.word	0x08004c99
 8004c2c:	08004c77 	.word	0x08004c77
 8004c30:	08004ba7 	.word	0x08004ba7
 8004c34:	08004ba7 	.word	0x08004ba7
 8004c38:	08004cfb 	.word	0x08004cfb
 8004c3c:	08004ba7 	.word	0x08004ba7
 8004c40:	08004cd5 	.word	0x08004cd5
 8004c44:	08004ba7 	.word	0x08004ba7
 8004c48:	08004ba7 	.word	0x08004ba7
 8004c4c:	08004c7f 	.word	0x08004c7f
 8004c50:	3b45      	subs	r3, #69	@ 0x45
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d8a7      	bhi.n	8004ba6 <__ssvfiscanf_r+0xee>
 8004c56:	2305      	movs	r3, #5
 8004c58:	e021      	b.n	8004c9e <__ssvfiscanf_r+0x1e6>
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	4630      	mov	r0, r6
 8004c5e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004c60:	4798      	blx	r3
 8004c62:	2800      	cmp	r0, #0
 8004c64:	f43f af65 	beq.w	8004b32 <__ssvfiscanf_r+0x7a>
 8004c68:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004c6a:	2800      	cmp	r0, #0
 8004c6c:	f040 808c 	bne.w	8004d88 <__ssvfiscanf_r+0x2d0>
 8004c70:	f04f 30ff 	mov.w	r0, #4294967295
 8004c74:	e08c      	b.n	8004d90 <__ssvfiscanf_r+0x2d8>
 8004c76:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004c78:	f042 0220 	orr.w	r2, r2, #32
 8004c7c:	9241      	str	r2, [sp, #260]	@ 0x104
 8004c7e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004c80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c84:	9241      	str	r2, [sp, #260]	@ 0x104
 8004c86:	2210      	movs	r2, #16
 8004c88:	2b6e      	cmp	r3, #110	@ 0x6e
 8004c8a:	9242      	str	r2, [sp, #264]	@ 0x108
 8004c8c:	d902      	bls.n	8004c94 <__ssvfiscanf_r+0x1dc>
 8004c8e:	e005      	b.n	8004c9c <__ssvfiscanf_r+0x1e4>
 8004c90:	2300      	movs	r3, #0
 8004c92:	9342      	str	r3, [sp, #264]	@ 0x108
 8004c94:	2303      	movs	r3, #3
 8004c96:	e002      	b.n	8004c9e <__ssvfiscanf_r+0x1e6>
 8004c98:	2308      	movs	r3, #8
 8004c9a:	9342      	str	r3, [sp, #264]	@ 0x108
 8004c9c:	2304      	movs	r3, #4
 8004c9e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004ca0:	6863      	ldr	r3, [r4, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	dd39      	ble.n	8004d1a <__ssvfiscanf_r+0x262>
 8004ca6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004ca8:	0659      	lsls	r1, r3, #25
 8004caa:	d404      	bmi.n	8004cb6 <__ssvfiscanf_r+0x1fe>
 8004cac:	6823      	ldr	r3, [r4, #0]
 8004cae:	781a      	ldrb	r2, [r3, #0]
 8004cb0:	5cba      	ldrb	r2, [r7, r2]
 8004cb2:	0712      	lsls	r2, r2, #28
 8004cb4:	d438      	bmi.n	8004d28 <__ssvfiscanf_r+0x270>
 8004cb6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	dc47      	bgt.n	8004d4c <__ssvfiscanf_r+0x294>
 8004cbc:	466b      	mov	r3, sp
 8004cbe:	4622      	mov	r2, r4
 8004cc0:	4630      	mov	r0, r6
 8004cc2:	a941      	add	r1, sp, #260	@ 0x104
 8004cc4:	f000 fb3c 	bl	8005340 <_scanf_chars>
 8004cc8:	2801      	cmp	r0, #1
 8004cca:	d065      	beq.n	8004d98 <__ssvfiscanf_r+0x2e0>
 8004ccc:	2802      	cmp	r0, #2
 8004cce:	f47f af17 	bne.w	8004b00 <__ssvfiscanf_r+0x48>
 8004cd2:	e7c9      	b.n	8004c68 <__ssvfiscanf_r+0x1b0>
 8004cd4:	220a      	movs	r2, #10
 8004cd6:	e7d7      	b.n	8004c88 <__ssvfiscanf_r+0x1d0>
 8004cd8:	4629      	mov	r1, r5
 8004cda:	4640      	mov	r0, r8
 8004cdc:	f000 fd11 	bl	8005702 <__sccl>
 8004ce0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004ce2:	4605      	mov	r5, r0
 8004ce4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ce8:	9341      	str	r3, [sp, #260]	@ 0x104
 8004cea:	2301      	movs	r3, #1
 8004cec:	e7d7      	b.n	8004c9e <__ssvfiscanf_r+0x1e6>
 8004cee:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004cf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cf4:	9341      	str	r3, [sp, #260]	@ 0x104
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	e7d1      	b.n	8004c9e <__ssvfiscanf_r+0x1e6>
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	e7cf      	b.n	8004c9e <__ssvfiscanf_r+0x1e6>
 8004cfe:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8004d00:	06c3      	lsls	r3, r0, #27
 8004d02:	f53f aefd 	bmi.w	8004b00 <__ssvfiscanf_r+0x48>
 8004d06:	9b00      	ldr	r3, [sp, #0]
 8004d08:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004d0a:	1d19      	adds	r1, r3, #4
 8004d0c:	9100      	str	r1, [sp, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	07c0      	lsls	r0, r0, #31
 8004d12:	bf4c      	ite	mi
 8004d14:	801a      	strhmi	r2, [r3, #0]
 8004d16:	601a      	strpl	r2, [r3, #0]
 8004d18:	e6f2      	b.n	8004b00 <__ssvfiscanf_r+0x48>
 8004d1a:	4621      	mov	r1, r4
 8004d1c:	4630      	mov	r0, r6
 8004d1e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004d20:	4798      	blx	r3
 8004d22:	2800      	cmp	r0, #0
 8004d24:	d0bf      	beq.n	8004ca6 <__ssvfiscanf_r+0x1ee>
 8004d26:	e79f      	b.n	8004c68 <__ssvfiscanf_r+0x1b0>
 8004d28:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004d2a:	3201      	adds	r2, #1
 8004d2c:	9245      	str	r2, [sp, #276]	@ 0x114
 8004d2e:	6862      	ldr	r2, [r4, #4]
 8004d30:	3a01      	subs	r2, #1
 8004d32:	2a00      	cmp	r2, #0
 8004d34:	6062      	str	r2, [r4, #4]
 8004d36:	dd02      	ble.n	8004d3e <__ssvfiscanf_r+0x286>
 8004d38:	3301      	adds	r3, #1
 8004d3a:	6023      	str	r3, [r4, #0]
 8004d3c:	e7b6      	b.n	8004cac <__ssvfiscanf_r+0x1f4>
 8004d3e:	4621      	mov	r1, r4
 8004d40:	4630      	mov	r0, r6
 8004d42:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004d44:	4798      	blx	r3
 8004d46:	2800      	cmp	r0, #0
 8004d48:	d0b0      	beq.n	8004cac <__ssvfiscanf_r+0x1f4>
 8004d4a:	e78d      	b.n	8004c68 <__ssvfiscanf_r+0x1b0>
 8004d4c:	2b04      	cmp	r3, #4
 8004d4e:	dc06      	bgt.n	8004d5e <__ssvfiscanf_r+0x2a6>
 8004d50:	466b      	mov	r3, sp
 8004d52:	4622      	mov	r2, r4
 8004d54:	4630      	mov	r0, r6
 8004d56:	a941      	add	r1, sp, #260	@ 0x104
 8004d58:	f000 fb4c 	bl	80053f4 <_scanf_i>
 8004d5c:	e7b4      	b.n	8004cc8 <__ssvfiscanf_r+0x210>
 8004d5e:	4b09      	ldr	r3, [pc, #36]	@ (8004d84 <__ssvfiscanf_r+0x2cc>)
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f43f aecd 	beq.w	8004b00 <__ssvfiscanf_r+0x48>
 8004d66:	466b      	mov	r3, sp
 8004d68:	4622      	mov	r2, r4
 8004d6a:	4630      	mov	r0, r6
 8004d6c:	a941      	add	r1, sp, #260	@ 0x104
 8004d6e:	f3af 8000 	nop.w
 8004d72:	e7a9      	b.n	8004cc8 <__ssvfiscanf_r+0x210>
 8004d74:	08004a09 	.word	0x08004a09
 8004d78:	08004a7f 	.word	0x08004a7f
 8004d7c:	0800690f 	.word	0x0800690f
 8004d80:	080068c6 	.word	0x080068c6
 8004d84:	00000000 	.word	0x00000000
 8004d88:	89a3      	ldrh	r3, [r4, #12]
 8004d8a:	065b      	lsls	r3, r3, #25
 8004d8c:	f53f af70 	bmi.w	8004c70 <__ssvfiscanf_r+0x1b8>
 8004d90:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8004d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d98:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004d9a:	e7f9      	b.n	8004d90 <__ssvfiscanf_r+0x2d8>

08004d9c <__sfputc_r>:
 8004d9c:	6893      	ldr	r3, [r2, #8]
 8004d9e:	b410      	push	{r4}
 8004da0:	3b01      	subs	r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	6093      	str	r3, [r2, #8]
 8004da6:	da07      	bge.n	8004db8 <__sfputc_r+0x1c>
 8004da8:	6994      	ldr	r4, [r2, #24]
 8004daa:	42a3      	cmp	r3, r4
 8004dac:	db01      	blt.n	8004db2 <__sfputc_r+0x16>
 8004dae:	290a      	cmp	r1, #10
 8004db0:	d102      	bne.n	8004db8 <__sfputc_r+0x1c>
 8004db2:	bc10      	pop	{r4}
 8004db4:	f7ff bab7 	b.w	8004326 <__swbuf_r>
 8004db8:	6813      	ldr	r3, [r2, #0]
 8004dba:	1c58      	adds	r0, r3, #1
 8004dbc:	6010      	str	r0, [r2, #0]
 8004dbe:	7019      	strb	r1, [r3, #0]
 8004dc0:	4608      	mov	r0, r1
 8004dc2:	bc10      	pop	{r4}
 8004dc4:	4770      	bx	lr

08004dc6 <__sfputs_r>:
 8004dc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc8:	4606      	mov	r6, r0
 8004dca:	460f      	mov	r7, r1
 8004dcc:	4614      	mov	r4, r2
 8004dce:	18d5      	adds	r5, r2, r3
 8004dd0:	42ac      	cmp	r4, r5
 8004dd2:	d101      	bne.n	8004dd8 <__sfputs_r+0x12>
 8004dd4:	2000      	movs	r0, #0
 8004dd6:	e007      	b.n	8004de8 <__sfputs_r+0x22>
 8004dd8:	463a      	mov	r2, r7
 8004dda:	4630      	mov	r0, r6
 8004ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004de0:	f7ff ffdc 	bl	8004d9c <__sfputc_r>
 8004de4:	1c43      	adds	r3, r0, #1
 8004de6:	d1f3      	bne.n	8004dd0 <__sfputs_r+0xa>
 8004de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004dec <_vfiprintf_r>:
 8004dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df0:	460d      	mov	r5, r1
 8004df2:	4614      	mov	r4, r2
 8004df4:	4698      	mov	r8, r3
 8004df6:	4606      	mov	r6, r0
 8004df8:	b09d      	sub	sp, #116	@ 0x74
 8004dfa:	b118      	cbz	r0, 8004e04 <_vfiprintf_r+0x18>
 8004dfc:	6a03      	ldr	r3, [r0, #32]
 8004dfe:	b90b      	cbnz	r3, 8004e04 <_vfiprintf_r+0x18>
 8004e00:	f7ff f940 	bl	8004084 <__sinit>
 8004e04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e06:	07d9      	lsls	r1, r3, #31
 8004e08:	d405      	bmi.n	8004e16 <_vfiprintf_r+0x2a>
 8004e0a:	89ab      	ldrh	r3, [r5, #12]
 8004e0c:	059a      	lsls	r2, r3, #22
 8004e0e:	d402      	bmi.n	8004e16 <_vfiprintf_r+0x2a>
 8004e10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e12:	f7ff fba8 	bl	8004566 <__retarget_lock_acquire_recursive>
 8004e16:	89ab      	ldrh	r3, [r5, #12]
 8004e18:	071b      	lsls	r3, r3, #28
 8004e1a:	d501      	bpl.n	8004e20 <_vfiprintf_r+0x34>
 8004e1c:	692b      	ldr	r3, [r5, #16]
 8004e1e:	b99b      	cbnz	r3, 8004e48 <_vfiprintf_r+0x5c>
 8004e20:	4629      	mov	r1, r5
 8004e22:	4630      	mov	r0, r6
 8004e24:	f7ff fabe 	bl	80043a4 <__swsetup_r>
 8004e28:	b170      	cbz	r0, 8004e48 <_vfiprintf_r+0x5c>
 8004e2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e2c:	07dc      	lsls	r4, r3, #31
 8004e2e:	d504      	bpl.n	8004e3a <_vfiprintf_r+0x4e>
 8004e30:	f04f 30ff 	mov.w	r0, #4294967295
 8004e34:	b01d      	add	sp, #116	@ 0x74
 8004e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e3a:	89ab      	ldrh	r3, [r5, #12]
 8004e3c:	0598      	lsls	r0, r3, #22
 8004e3e:	d4f7      	bmi.n	8004e30 <_vfiprintf_r+0x44>
 8004e40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e42:	f7ff fb91 	bl	8004568 <__retarget_lock_release_recursive>
 8004e46:	e7f3      	b.n	8004e30 <_vfiprintf_r+0x44>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e4c:	2320      	movs	r3, #32
 8004e4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e52:	2330      	movs	r3, #48	@ 0x30
 8004e54:	f04f 0901 	mov.w	r9, #1
 8004e58:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e5c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005008 <_vfiprintf_r+0x21c>
 8004e60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e64:	4623      	mov	r3, r4
 8004e66:	469a      	mov	sl, r3
 8004e68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e6c:	b10a      	cbz	r2, 8004e72 <_vfiprintf_r+0x86>
 8004e6e:	2a25      	cmp	r2, #37	@ 0x25
 8004e70:	d1f9      	bne.n	8004e66 <_vfiprintf_r+0x7a>
 8004e72:	ebba 0b04 	subs.w	fp, sl, r4
 8004e76:	d00b      	beq.n	8004e90 <_vfiprintf_r+0xa4>
 8004e78:	465b      	mov	r3, fp
 8004e7a:	4622      	mov	r2, r4
 8004e7c:	4629      	mov	r1, r5
 8004e7e:	4630      	mov	r0, r6
 8004e80:	f7ff ffa1 	bl	8004dc6 <__sfputs_r>
 8004e84:	3001      	adds	r0, #1
 8004e86:	f000 80a7 	beq.w	8004fd8 <_vfiprintf_r+0x1ec>
 8004e8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e8c:	445a      	add	r2, fp
 8004e8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e90:	f89a 3000 	ldrb.w	r3, [sl]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 809f 	beq.w	8004fd8 <_vfiprintf_r+0x1ec>
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004ea0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ea4:	f10a 0a01 	add.w	sl, sl, #1
 8004ea8:	9304      	str	r3, [sp, #16]
 8004eaa:	9307      	str	r3, [sp, #28]
 8004eac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004eb0:	931a      	str	r3, [sp, #104]	@ 0x68
 8004eb2:	4654      	mov	r4, sl
 8004eb4:	2205      	movs	r2, #5
 8004eb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eba:	4853      	ldr	r0, [pc, #332]	@ (8005008 <_vfiprintf_r+0x21c>)
 8004ebc:	f000 fcde 	bl	800587c <memchr>
 8004ec0:	9a04      	ldr	r2, [sp, #16]
 8004ec2:	b9d8      	cbnz	r0, 8004efc <_vfiprintf_r+0x110>
 8004ec4:	06d1      	lsls	r1, r2, #27
 8004ec6:	bf44      	itt	mi
 8004ec8:	2320      	movmi	r3, #32
 8004eca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ece:	0713      	lsls	r3, r2, #28
 8004ed0:	bf44      	itt	mi
 8004ed2:	232b      	movmi	r3, #43	@ 0x2b
 8004ed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ed8:	f89a 3000 	ldrb.w	r3, [sl]
 8004edc:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ede:	d015      	beq.n	8004f0c <_vfiprintf_r+0x120>
 8004ee0:	4654      	mov	r4, sl
 8004ee2:	2000      	movs	r0, #0
 8004ee4:	f04f 0c0a 	mov.w	ip, #10
 8004ee8:	9a07      	ldr	r2, [sp, #28]
 8004eea:	4621      	mov	r1, r4
 8004eec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ef0:	3b30      	subs	r3, #48	@ 0x30
 8004ef2:	2b09      	cmp	r3, #9
 8004ef4:	d94b      	bls.n	8004f8e <_vfiprintf_r+0x1a2>
 8004ef6:	b1b0      	cbz	r0, 8004f26 <_vfiprintf_r+0x13a>
 8004ef8:	9207      	str	r2, [sp, #28]
 8004efa:	e014      	b.n	8004f26 <_vfiprintf_r+0x13a>
 8004efc:	eba0 0308 	sub.w	r3, r0, r8
 8004f00:	fa09 f303 	lsl.w	r3, r9, r3
 8004f04:	4313      	orrs	r3, r2
 8004f06:	46a2      	mov	sl, r4
 8004f08:	9304      	str	r3, [sp, #16]
 8004f0a:	e7d2      	b.n	8004eb2 <_vfiprintf_r+0xc6>
 8004f0c:	9b03      	ldr	r3, [sp, #12]
 8004f0e:	1d19      	adds	r1, r3, #4
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	9103      	str	r1, [sp, #12]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	bfbb      	ittet	lt
 8004f18:	425b      	neglt	r3, r3
 8004f1a:	f042 0202 	orrlt.w	r2, r2, #2
 8004f1e:	9307      	strge	r3, [sp, #28]
 8004f20:	9307      	strlt	r3, [sp, #28]
 8004f22:	bfb8      	it	lt
 8004f24:	9204      	strlt	r2, [sp, #16]
 8004f26:	7823      	ldrb	r3, [r4, #0]
 8004f28:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f2a:	d10a      	bne.n	8004f42 <_vfiprintf_r+0x156>
 8004f2c:	7863      	ldrb	r3, [r4, #1]
 8004f2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f30:	d132      	bne.n	8004f98 <_vfiprintf_r+0x1ac>
 8004f32:	9b03      	ldr	r3, [sp, #12]
 8004f34:	3402      	adds	r4, #2
 8004f36:	1d1a      	adds	r2, r3, #4
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	9203      	str	r2, [sp, #12]
 8004f3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f40:	9305      	str	r3, [sp, #20]
 8004f42:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800500c <_vfiprintf_r+0x220>
 8004f46:	2203      	movs	r2, #3
 8004f48:	4650      	mov	r0, sl
 8004f4a:	7821      	ldrb	r1, [r4, #0]
 8004f4c:	f000 fc96 	bl	800587c <memchr>
 8004f50:	b138      	cbz	r0, 8004f62 <_vfiprintf_r+0x176>
 8004f52:	2240      	movs	r2, #64	@ 0x40
 8004f54:	9b04      	ldr	r3, [sp, #16]
 8004f56:	eba0 000a 	sub.w	r0, r0, sl
 8004f5a:	4082      	lsls	r2, r0
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	3401      	adds	r4, #1
 8004f60:	9304      	str	r3, [sp, #16]
 8004f62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f66:	2206      	movs	r2, #6
 8004f68:	4829      	ldr	r0, [pc, #164]	@ (8005010 <_vfiprintf_r+0x224>)
 8004f6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f6e:	f000 fc85 	bl	800587c <memchr>
 8004f72:	2800      	cmp	r0, #0
 8004f74:	d03f      	beq.n	8004ff6 <_vfiprintf_r+0x20a>
 8004f76:	4b27      	ldr	r3, [pc, #156]	@ (8005014 <_vfiprintf_r+0x228>)
 8004f78:	bb1b      	cbnz	r3, 8004fc2 <_vfiprintf_r+0x1d6>
 8004f7a:	9b03      	ldr	r3, [sp, #12]
 8004f7c:	3307      	adds	r3, #7
 8004f7e:	f023 0307 	bic.w	r3, r3, #7
 8004f82:	3308      	adds	r3, #8
 8004f84:	9303      	str	r3, [sp, #12]
 8004f86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f88:	443b      	add	r3, r7
 8004f8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f8c:	e76a      	b.n	8004e64 <_vfiprintf_r+0x78>
 8004f8e:	460c      	mov	r4, r1
 8004f90:	2001      	movs	r0, #1
 8004f92:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f96:	e7a8      	b.n	8004eea <_vfiprintf_r+0xfe>
 8004f98:	2300      	movs	r3, #0
 8004f9a:	f04f 0c0a 	mov.w	ip, #10
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	3401      	adds	r4, #1
 8004fa2:	9305      	str	r3, [sp, #20]
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004faa:	3a30      	subs	r2, #48	@ 0x30
 8004fac:	2a09      	cmp	r2, #9
 8004fae:	d903      	bls.n	8004fb8 <_vfiprintf_r+0x1cc>
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0c6      	beq.n	8004f42 <_vfiprintf_r+0x156>
 8004fb4:	9105      	str	r1, [sp, #20]
 8004fb6:	e7c4      	b.n	8004f42 <_vfiprintf_r+0x156>
 8004fb8:	4604      	mov	r4, r0
 8004fba:	2301      	movs	r3, #1
 8004fbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fc0:	e7f0      	b.n	8004fa4 <_vfiprintf_r+0x1b8>
 8004fc2:	ab03      	add	r3, sp, #12
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	462a      	mov	r2, r5
 8004fc8:	4630      	mov	r0, r6
 8004fca:	4b13      	ldr	r3, [pc, #76]	@ (8005018 <_vfiprintf_r+0x22c>)
 8004fcc:	a904      	add	r1, sp, #16
 8004fce:	f3af 8000 	nop.w
 8004fd2:	4607      	mov	r7, r0
 8004fd4:	1c78      	adds	r0, r7, #1
 8004fd6:	d1d6      	bne.n	8004f86 <_vfiprintf_r+0x19a>
 8004fd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004fda:	07d9      	lsls	r1, r3, #31
 8004fdc:	d405      	bmi.n	8004fea <_vfiprintf_r+0x1fe>
 8004fde:	89ab      	ldrh	r3, [r5, #12]
 8004fe0:	059a      	lsls	r2, r3, #22
 8004fe2:	d402      	bmi.n	8004fea <_vfiprintf_r+0x1fe>
 8004fe4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004fe6:	f7ff fabf 	bl	8004568 <__retarget_lock_release_recursive>
 8004fea:	89ab      	ldrh	r3, [r5, #12]
 8004fec:	065b      	lsls	r3, r3, #25
 8004fee:	f53f af1f 	bmi.w	8004e30 <_vfiprintf_r+0x44>
 8004ff2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ff4:	e71e      	b.n	8004e34 <_vfiprintf_r+0x48>
 8004ff6:	ab03      	add	r3, sp, #12
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	462a      	mov	r2, r5
 8004ffc:	4630      	mov	r0, r6
 8004ffe:	4b06      	ldr	r3, [pc, #24]	@ (8005018 <_vfiprintf_r+0x22c>)
 8005000:	a904      	add	r1, sp, #16
 8005002:	f000 f87d 	bl	8005100 <_printf_i>
 8005006:	e7e4      	b.n	8004fd2 <_vfiprintf_r+0x1e6>
 8005008:	080068c0 	.word	0x080068c0
 800500c:	080068c6 	.word	0x080068c6
 8005010:	080068ca 	.word	0x080068ca
 8005014:	00000000 	.word	0x00000000
 8005018:	08004dc7 	.word	0x08004dc7

0800501c <_printf_common>:
 800501c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005020:	4616      	mov	r6, r2
 8005022:	4698      	mov	r8, r3
 8005024:	688a      	ldr	r2, [r1, #8]
 8005026:	690b      	ldr	r3, [r1, #16]
 8005028:	4607      	mov	r7, r0
 800502a:	4293      	cmp	r3, r2
 800502c:	bfb8      	it	lt
 800502e:	4613      	movlt	r3, r2
 8005030:	6033      	str	r3, [r6, #0]
 8005032:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005036:	460c      	mov	r4, r1
 8005038:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800503c:	b10a      	cbz	r2, 8005042 <_printf_common+0x26>
 800503e:	3301      	adds	r3, #1
 8005040:	6033      	str	r3, [r6, #0]
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	0699      	lsls	r1, r3, #26
 8005046:	bf42      	ittt	mi
 8005048:	6833      	ldrmi	r3, [r6, #0]
 800504a:	3302      	addmi	r3, #2
 800504c:	6033      	strmi	r3, [r6, #0]
 800504e:	6825      	ldr	r5, [r4, #0]
 8005050:	f015 0506 	ands.w	r5, r5, #6
 8005054:	d106      	bne.n	8005064 <_printf_common+0x48>
 8005056:	f104 0a19 	add.w	sl, r4, #25
 800505a:	68e3      	ldr	r3, [r4, #12]
 800505c:	6832      	ldr	r2, [r6, #0]
 800505e:	1a9b      	subs	r3, r3, r2
 8005060:	42ab      	cmp	r3, r5
 8005062:	dc2b      	bgt.n	80050bc <_printf_common+0xa0>
 8005064:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005068:	6822      	ldr	r2, [r4, #0]
 800506a:	3b00      	subs	r3, #0
 800506c:	bf18      	it	ne
 800506e:	2301      	movne	r3, #1
 8005070:	0692      	lsls	r2, r2, #26
 8005072:	d430      	bmi.n	80050d6 <_printf_common+0xba>
 8005074:	4641      	mov	r1, r8
 8005076:	4638      	mov	r0, r7
 8005078:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800507c:	47c8      	blx	r9
 800507e:	3001      	adds	r0, #1
 8005080:	d023      	beq.n	80050ca <_printf_common+0xae>
 8005082:	6823      	ldr	r3, [r4, #0]
 8005084:	6922      	ldr	r2, [r4, #16]
 8005086:	f003 0306 	and.w	r3, r3, #6
 800508a:	2b04      	cmp	r3, #4
 800508c:	bf14      	ite	ne
 800508e:	2500      	movne	r5, #0
 8005090:	6833      	ldreq	r3, [r6, #0]
 8005092:	f04f 0600 	mov.w	r6, #0
 8005096:	bf08      	it	eq
 8005098:	68e5      	ldreq	r5, [r4, #12]
 800509a:	f104 041a 	add.w	r4, r4, #26
 800509e:	bf08      	it	eq
 80050a0:	1aed      	subeq	r5, r5, r3
 80050a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80050a6:	bf08      	it	eq
 80050a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050ac:	4293      	cmp	r3, r2
 80050ae:	bfc4      	itt	gt
 80050b0:	1a9b      	subgt	r3, r3, r2
 80050b2:	18ed      	addgt	r5, r5, r3
 80050b4:	42b5      	cmp	r5, r6
 80050b6:	d11a      	bne.n	80050ee <_printf_common+0xd2>
 80050b8:	2000      	movs	r0, #0
 80050ba:	e008      	b.n	80050ce <_printf_common+0xb2>
 80050bc:	2301      	movs	r3, #1
 80050be:	4652      	mov	r2, sl
 80050c0:	4641      	mov	r1, r8
 80050c2:	4638      	mov	r0, r7
 80050c4:	47c8      	blx	r9
 80050c6:	3001      	adds	r0, #1
 80050c8:	d103      	bne.n	80050d2 <_printf_common+0xb6>
 80050ca:	f04f 30ff 	mov.w	r0, #4294967295
 80050ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050d2:	3501      	adds	r5, #1
 80050d4:	e7c1      	b.n	800505a <_printf_common+0x3e>
 80050d6:	2030      	movs	r0, #48	@ 0x30
 80050d8:	18e1      	adds	r1, r4, r3
 80050da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80050e4:	4422      	add	r2, r4
 80050e6:	3302      	adds	r3, #2
 80050e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80050ec:	e7c2      	b.n	8005074 <_printf_common+0x58>
 80050ee:	2301      	movs	r3, #1
 80050f0:	4622      	mov	r2, r4
 80050f2:	4641      	mov	r1, r8
 80050f4:	4638      	mov	r0, r7
 80050f6:	47c8      	blx	r9
 80050f8:	3001      	adds	r0, #1
 80050fa:	d0e6      	beq.n	80050ca <_printf_common+0xae>
 80050fc:	3601      	adds	r6, #1
 80050fe:	e7d9      	b.n	80050b4 <_printf_common+0x98>

08005100 <_printf_i>:
 8005100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005104:	7e0f      	ldrb	r7, [r1, #24]
 8005106:	4691      	mov	r9, r2
 8005108:	2f78      	cmp	r7, #120	@ 0x78
 800510a:	4680      	mov	r8, r0
 800510c:	460c      	mov	r4, r1
 800510e:	469a      	mov	sl, r3
 8005110:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005112:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005116:	d807      	bhi.n	8005128 <_printf_i+0x28>
 8005118:	2f62      	cmp	r7, #98	@ 0x62
 800511a:	d80a      	bhi.n	8005132 <_printf_i+0x32>
 800511c:	2f00      	cmp	r7, #0
 800511e:	f000 80d3 	beq.w	80052c8 <_printf_i+0x1c8>
 8005122:	2f58      	cmp	r7, #88	@ 0x58
 8005124:	f000 80ba 	beq.w	800529c <_printf_i+0x19c>
 8005128:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800512c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005130:	e03a      	b.n	80051a8 <_printf_i+0xa8>
 8005132:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005136:	2b15      	cmp	r3, #21
 8005138:	d8f6      	bhi.n	8005128 <_printf_i+0x28>
 800513a:	a101      	add	r1, pc, #4	@ (adr r1, 8005140 <_printf_i+0x40>)
 800513c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005140:	08005199 	.word	0x08005199
 8005144:	080051ad 	.word	0x080051ad
 8005148:	08005129 	.word	0x08005129
 800514c:	08005129 	.word	0x08005129
 8005150:	08005129 	.word	0x08005129
 8005154:	08005129 	.word	0x08005129
 8005158:	080051ad 	.word	0x080051ad
 800515c:	08005129 	.word	0x08005129
 8005160:	08005129 	.word	0x08005129
 8005164:	08005129 	.word	0x08005129
 8005168:	08005129 	.word	0x08005129
 800516c:	080052af 	.word	0x080052af
 8005170:	080051d7 	.word	0x080051d7
 8005174:	08005269 	.word	0x08005269
 8005178:	08005129 	.word	0x08005129
 800517c:	08005129 	.word	0x08005129
 8005180:	080052d1 	.word	0x080052d1
 8005184:	08005129 	.word	0x08005129
 8005188:	080051d7 	.word	0x080051d7
 800518c:	08005129 	.word	0x08005129
 8005190:	08005129 	.word	0x08005129
 8005194:	08005271 	.word	0x08005271
 8005198:	6833      	ldr	r3, [r6, #0]
 800519a:	1d1a      	adds	r2, r3, #4
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6032      	str	r2, [r6, #0]
 80051a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051a8:	2301      	movs	r3, #1
 80051aa:	e09e      	b.n	80052ea <_printf_i+0x1ea>
 80051ac:	6833      	ldr	r3, [r6, #0]
 80051ae:	6820      	ldr	r0, [r4, #0]
 80051b0:	1d19      	adds	r1, r3, #4
 80051b2:	6031      	str	r1, [r6, #0]
 80051b4:	0606      	lsls	r6, r0, #24
 80051b6:	d501      	bpl.n	80051bc <_printf_i+0xbc>
 80051b8:	681d      	ldr	r5, [r3, #0]
 80051ba:	e003      	b.n	80051c4 <_printf_i+0xc4>
 80051bc:	0645      	lsls	r5, r0, #25
 80051be:	d5fb      	bpl.n	80051b8 <_printf_i+0xb8>
 80051c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80051c4:	2d00      	cmp	r5, #0
 80051c6:	da03      	bge.n	80051d0 <_printf_i+0xd0>
 80051c8:	232d      	movs	r3, #45	@ 0x2d
 80051ca:	426d      	negs	r5, r5
 80051cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051d0:	230a      	movs	r3, #10
 80051d2:	4859      	ldr	r0, [pc, #356]	@ (8005338 <_printf_i+0x238>)
 80051d4:	e011      	b.n	80051fa <_printf_i+0xfa>
 80051d6:	6821      	ldr	r1, [r4, #0]
 80051d8:	6833      	ldr	r3, [r6, #0]
 80051da:	0608      	lsls	r0, r1, #24
 80051dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80051e0:	d402      	bmi.n	80051e8 <_printf_i+0xe8>
 80051e2:	0649      	lsls	r1, r1, #25
 80051e4:	bf48      	it	mi
 80051e6:	b2ad      	uxthmi	r5, r5
 80051e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80051ea:	6033      	str	r3, [r6, #0]
 80051ec:	bf14      	ite	ne
 80051ee:	230a      	movne	r3, #10
 80051f0:	2308      	moveq	r3, #8
 80051f2:	4851      	ldr	r0, [pc, #324]	@ (8005338 <_printf_i+0x238>)
 80051f4:	2100      	movs	r1, #0
 80051f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80051fa:	6866      	ldr	r6, [r4, #4]
 80051fc:	2e00      	cmp	r6, #0
 80051fe:	bfa8      	it	ge
 8005200:	6821      	ldrge	r1, [r4, #0]
 8005202:	60a6      	str	r6, [r4, #8]
 8005204:	bfa4      	itt	ge
 8005206:	f021 0104 	bicge.w	r1, r1, #4
 800520a:	6021      	strge	r1, [r4, #0]
 800520c:	b90d      	cbnz	r5, 8005212 <_printf_i+0x112>
 800520e:	2e00      	cmp	r6, #0
 8005210:	d04b      	beq.n	80052aa <_printf_i+0x1aa>
 8005212:	4616      	mov	r6, r2
 8005214:	fbb5 f1f3 	udiv	r1, r5, r3
 8005218:	fb03 5711 	mls	r7, r3, r1, r5
 800521c:	5dc7      	ldrb	r7, [r0, r7]
 800521e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005222:	462f      	mov	r7, r5
 8005224:	42bb      	cmp	r3, r7
 8005226:	460d      	mov	r5, r1
 8005228:	d9f4      	bls.n	8005214 <_printf_i+0x114>
 800522a:	2b08      	cmp	r3, #8
 800522c:	d10b      	bne.n	8005246 <_printf_i+0x146>
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	07df      	lsls	r7, r3, #31
 8005232:	d508      	bpl.n	8005246 <_printf_i+0x146>
 8005234:	6923      	ldr	r3, [r4, #16]
 8005236:	6861      	ldr	r1, [r4, #4]
 8005238:	4299      	cmp	r1, r3
 800523a:	bfde      	ittt	le
 800523c:	2330      	movle	r3, #48	@ 0x30
 800523e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005242:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005246:	1b92      	subs	r2, r2, r6
 8005248:	6122      	str	r2, [r4, #16]
 800524a:	464b      	mov	r3, r9
 800524c:	4621      	mov	r1, r4
 800524e:	4640      	mov	r0, r8
 8005250:	f8cd a000 	str.w	sl, [sp]
 8005254:	aa03      	add	r2, sp, #12
 8005256:	f7ff fee1 	bl	800501c <_printf_common>
 800525a:	3001      	adds	r0, #1
 800525c:	d14a      	bne.n	80052f4 <_printf_i+0x1f4>
 800525e:	f04f 30ff 	mov.w	r0, #4294967295
 8005262:	b004      	add	sp, #16
 8005264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005268:	6823      	ldr	r3, [r4, #0]
 800526a:	f043 0320 	orr.w	r3, r3, #32
 800526e:	6023      	str	r3, [r4, #0]
 8005270:	2778      	movs	r7, #120	@ 0x78
 8005272:	4832      	ldr	r0, [pc, #200]	@ (800533c <_printf_i+0x23c>)
 8005274:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	6831      	ldr	r1, [r6, #0]
 800527c:	061f      	lsls	r7, r3, #24
 800527e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005282:	d402      	bmi.n	800528a <_printf_i+0x18a>
 8005284:	065f      	lsls	r7, r3, #25
 8005286:	bf48      	it	mi
 8005288:	b2ad      	uxthmi	r5, r5
 800528a:	6031      	str	r1, [r6, #0]
 800528c:	07d9      	lsls	r1, r3, #31
 800528e:	bf44      	itt	mi
 8005290:	f043 0320 	orrmi.w	r3, r3, #32
 8005294:	6023      	strmi	r3, [r4, #0]
 8005296:	b11d      	cbz	r5, 80052a0 <_printf_i+0x1a0>
 8005298:	2310      	movs	r3, #16
 800529a:	e7ab      	b.n	80051f4 <_printf_i+0xf4>
 800529c:	4826      	ldr	r0, [pc, #152]	@ (8005338 <_printf_i+0x238>)
 800529e:	e7e9      	b.n	8005274 <_printf_i+0x174>
 80052a0:	6823      	ldr	r3, [r4, #0]
 80052a2:	f023 0320 	bic.w	r3, r3, #32
 80052a6:	6023      	str	r3, [r4, #0]
 80052a8:	e7f6      	b.n	8005298 <_printf_i+0x198>
 80052aa:	4616      	mov	r6, r2
 80052ac:	e7bd      	b.n	800522a <_printf_i+0x12a>
 80052ae:	6833      	ldr	r3, [r6, #0]
 80052b0:	6825      	ldr	r5, [r4, #0]
 80052b2:	1d18      	adds	r0, r3, #4
 80052b4:	6961      	ldr	r1, [r4, #20]
 80052b6:	6030      	str	r0, [r6, #0]
 80052b8:	062e      	lsls	r6, r5, #24
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	d501      	bpl.n	80052c2 <_printf_i+0x1c2>
 80052be:	6019      	str	r1, [r3, #0]
 80052c0:	e002      	b.n	80052c8 <_printf_i+0x1c8>
 80052c2:	0668      	lsls	r0, r5, #25
 80052c4:	d5fb      	bpl.n	80052be <_printf_i+0x1be>
 80052c6:	8019      	strh	r1, [r3, #0]
 80052c8:	2300      	movs	r3, #0
 80052ca:	4616      	mov	r6, r2
 80052cc:	6123      	str	r3, [r4, #16]
 80052ce:	e7bc      	b.n	800524a <_printf_i+0x14a>
 80052d0:	6833      	ldr	r3, [r6, #0]
 80052d2:	2100      	movs	r1, #0
 80052d4:	1d1a      	adds	r2, r3, #4
 80052d6:	6032      	str	r2, [r6, #0]
 80052d8:	681e      	ldr	r6, [r3, #0]
 80052da:	6862      	ldr	r2, [r4, #4]
 80052dc:	4630      	mov	r0, r6
 80052de:	f000 facd 	bl	800587c <memchr>
 80052e2:	b108      	cbz	r0, 80052e8 <_printf_i+0x1e8>
 80052e4:	1b80      	subs	r0, r0, r6
 80052e6:	6060      	str	r0, [r4, #4]
 80052e8:	6863      	ldr	r3, [r4, #4]
 80052ea:	6123      	str	r3, [r4, #16]
 80052ec:	2300      	movs	r3, #0
 80052ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052f2:	e7aa      	b.n	800524a <_printf_i+0x14a>
 80052f4:	4632      	mov	r2, r6
 80052f6:	4649      	mov	r1, r9
 80052f8:	4640      	mov	r0, r8
 80052fa:	6923      	ldr	r3, [r4, #16]
 80052fc:	47d0      	blx	sl
 80052fe:	3001      	adds	r0, #1
 8005300:	d0ad      	beq.n	800525e <_printf_i+0x15e>
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	079b      	lsls	r3, r3, #30
 8005306:	d413      	bmi.n	8005330 <_printf_i+0x230>
 8005308:	68e0      	ldr	r0, [r4, #12]
 800530a:	9b03      	ldr	r3, [sp, #12]
 800530c:	4298      	cmp	r0, r3
 800530e:	bfb8      	it	lt
 8005310:	4618      	movlt	r0, r3
 8005312:	e7a6      	b.n	8005262 <_printf_i+0x162>
 8005314:	2301      	movs	r3, #1
 8005316:	4632      	mov	r2, r6
 8005318:	4649      	mov	r1, r9
 800531a:	4640      	mov	r0, r8
 800531c:	47d0      	blx	sl
 800531e:	3001      	adds	r0, #1
 8005320:	d09d      	beq.n	800525e <_printf_i+0x15e>
 8005322:	3501      	adds	r5, #1
 8005324:	68e3      	ldr	r3, [r4, #12]
 8005326:	9903      	ldr	r1, [sp, #12]
 8005328:	1a5b      	subs	r3, r3, r1
 800532a:	42ab      	cmp	r3, r5
 800532c:	dcf2      	bgt.n	8005314 <_printf_i+0x214>
 800532e:	e7eb      	b.n	8005308 <_printf_i+0x208>
 8005330:	2500      	movs	r5, #0
 8005332:	f104 0619 	add.w	r6, r4, #25
 8005336:	e7f5      	b.n	8005324 <_printf_i+0x224>
 8005338:	080068d1 	.word	0x080068d1
 800533c:	080068e2 	.word	0x080068e2

08005340 <_scanf_chars>:
 8005340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005344:	4615      	mov	r5, r2
 8005346:	688a      	ldr	r2, [r1, #8]
 8005348:	4680      	mov	r8, r0
 800534a:	460c      	mov	r4, r1
 800534c:	b932      	cbnz	r2, 800535c <_scanf_chars+0x1c>
 800534e:	698a      	ldr	r2, [r1, #24]
 8005350:	2a00      	cmp	r2, #0
 8005352:	bf14      	ite	ne
 8005354:	f04f 32ff 	movne.w	r2, #4294967295
 8005358:	2201      	moveq	r2, #1
 800535a:	608a      	str	r2, [r1, #8]
 800535c:	2700      	movs	r7, #0
 800535e:	6822      	ldr	r2, [r4, #0]
 8005360:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 80053f0 <_scanf_chars+0xb0>
 8005364:	06d1      	lsls	r1, r2, #27
 8005366:	bf5f      	itttt	pl
 8005368:	681a      	ldrpl	r2, [r3, #0]
 800536a:	1d11      	addpl	r1, r2, #4
 800536c:	6019      	strpl	r1, [r3, #0]
 800536e:	6816      	ldrpl	r6, [r2, #0]
 8005370:	69a0      	ldr	r0, [r4, #24]
 8005372:	b188      	cbz	r0, 8005398 <_scanf_chars+0x58>
 8005374:	2801      	cmp	r0, #1
 8005376:	d107      	bne.n	8005388 <_scanf_chars+0x48>
 8005378:	682b      	ldr	r3, [r5, #0]
 800537a:	781a      	ldrb	r2, [r3, #0]
 800537c:	6963      	ldr	r3, [r4, #20]
 800537e:	5c9b      	ldrb	r3, [r3, r2]
 8005380:	b953      	cbnz	r3, 8005398 <_scanf_chars+0x58>
 8005382:	2f00      	cmp	r7, #0
 8005384:	d031      	beq.n	80053ea <_scanf_chars+0xaa>
 8005386:	e022      	b.n	80053ce <_scanf_chars+0x8e>
 8005388:	2802      	cmp	r0, #2
 800538a:	d120      	bne.n	80053ce <_scanf_chars+0x8e>
 800538c:	682b      	ldr	r3, [r5, #0]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	f819 3003 	ldrb.w	r3, [r9, r3]
 8005394:	071b      	lsls	r3, r3, #28
 8005396:	d41a      	bmi.n	80053ce <_scanf_chars+0x8e>
 8005398:	6823      	ldr	r3, [r4, #0]
 800539a:	3701      	adds	r7, #1
 800539c:	06da      	lsls	r2, r3, #27
 800539e:	bf5e      	ittt	pl
 80053a0:	682b      	ldrpl	r3, [r5, #0]
 80053a2:	781b      	ldrbpl	r3, [r3, #0]
 80053a4:	f806 3b01 	strbpl.w	r3, [r6], #1
 80053a8:	682a      	ldr	r2, [r5, #0]
 80053aa:	686b      	ldr	r3, [r5, #4]
 80053ac:	3201      	adds	r2, #1
 80053ae:	602a      	str	r2, [r5, #0]
 80053b0:	68a2      	ldr	r2, [r4, #8]
 80053b2:	3b01      	subs	r3, #1
 80053b4:	3a01      	subs	r2, #1
 80053b6:	606b      	str	r3, [r5, #4]
 80053b8:	60a2      	str	r2, [r4, #8]
 80053ba:	b142      	cbz	r2, 80053ce <_scanf_chars+0x8e>
 80053bc:	2b00      	cmp	r3, #0
 80053be:	dcd7      	bgt.n	8005370 <_scanf_chars+0x30>
 80053c0:	4629      	mov	r1, r5
 80053c2:	4640      	mov	r0, r8
 80053c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80053c8:	4798      	blx	r3
 80053ca:	2800      	cmp	r0, #0
 80053cc:	d0d0      	beq.n	8005370 <_scanf_chars+0x30>
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	f013 0310 	ands.w	r3, r3, #16
 80053d4:	d105      	bne.n	80053e2 <_scanf_chars+0xa2>
 80053d6:	68e2      	ldr	r2, [r4, #12]
 80053d8:	3201      	adds	r2, #1
 80053da:	60e2      	str	r2, [r4, #12]
 80053dc:	69a2      	ldr	r2, [r4, #24]
 80053de:	b102      	cbz	r2, 80053e2 <_scanf_chars+0xa2>
 80053e0:	7033      	strb	r3, [r6, #0]
 80053e2:	2000      	movs	r0, #0
 80053e4:	6923      	ldr	r3, [r4, #16]
 80053e6:	443b      	add	r3, r7
 80053e8:	6123      	str	r3, [r4, #16]
 80053ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053ee:	bf00      	nop
 80053f0:	0800690f 	.word	0x0800690f

080053f4 <_scanf_i>:
 80053f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f8:	460c      	mov	r4, r1
 80053fa:	4698      	mov	r8, r3
 80053fc:	4b72      	ldr	r3, [pc, #456]	@ (80055c8 <_scanf_i+0x1d4>)
 80053fe:	b087      	sub	sp, #28
 8005400:	4682      	mov	sl, r0
 8005402:	4616      	mov	r6, r2
 8005404:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005408:	ab03      	add	r3, sp, #12
 800540a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800540e:	4b6f      	ldr	r3, [pc, #444]	@ (80055cc <_scanf_i+0x1d8>)
 8005410:	69a1      	ldr	r1, [r4, #24]
 8005412:	4a6f      	ldr	r2, [pc, #444]	@ (80055d0 <_scanf_i+0x1dc>)
 8005414:	4627      	mov	r7, r4
 8005416:	2903      	cmp	r1, #3
 8005418:	bf08      	it	eq
 800541a:	461a      	moveq	r2, r3
 800541c:	68a3      	ldr	r3, [r4, #8]
 800541e:	9201      	str	r2, [sp, #4]
 8005420:	1e5a      	subs	r2, r3, #1
 8005422:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005426:	bf81      	itttt	hi
 8005428:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800542c:	eb03 0905 	addhi.w	r9, r3, r5
 8005430:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005434:	60a3      	strhi	r3, [r4, #8]
 8005436:	f857 3b1c 	ldr.w	r3, [r7], #28
 800543a:	bf98      	it	ls
 800543c:	f04f 0900 	movls.w	r9, #0
 8005440:	463d      	mov	r5, r7
 8005442:	f04f 0b00 	mov.w	fp, #0
 8005446:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800544a:	6023      	str	r3, [r4, #0]
 800544c:	6831      	ldr	r1, [r6, #0]
 800544e:	ab03      	add	r3, sp, #12
 8005450:	2202      	movs	r2, #2
 8005452:	7809      	ldrb	r1, [r1, #0]
 8005454:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005458:	f000 fa10 	bl	800587c <memchr>
 800545c:	b328      	cbz	r0, 80054aa <_scanf_i+0xb6>
 800545e:	f1bb 0f01 	cmp.w	fp, #1
 8005462:	d159      	bne.n	8005518 <_scanf_i+0x124>
 8005464:	6862      	ldr	r2, [r4, #4]
 8005466:	b92a      	cbnz	r2, 8005474 <_scanf_i+0x80>
 8005468:	2108      	movs	r1, #8
 800546a:	6822      	ldr	r2, [r4, #0]
 800546c:	6061      	str	r1, [r4, #4]
 800546e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005472:	6022      	str	r2, [r4, #0]
 8005474:	6822      	ldr	r2, [r4, #0]
 8005476:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800547a:	6022      	str	r2, [r4, #0]
 800547c:	68a2      	ldr	r2, [r4, #8]
 800547e:	1e51      	subs	r1, r2, #1
 8005480:	60a1      	str	r1, [r4, #8]
 8005482:	b192      	cbz	r2, 80054aa <_scanf_i+0xb6>
 8005484:	6832      	ldr	r2, [r6, #0]
 8005486:	1c51      	adds	r1, r2, #1
 8005488:	6031      	str	r1, [r6, #0]
 800548a:	7812      	ldrb	r2, [r2, #0]
 800548c:	f805 2b01 	strb.w	r2, [r5], #1
 8005490:	6872      	ldr	r2, [r6, #4]
 8005492:	3a01      	subs	r2, #1
 8005494:	2a00      	cmp	r2, #0
 8005496:	6072      	str	r2, [r6, #4]
 8005498:	dc07      	bgt.n	80054aa <_scanf_i+0xb6>
 800549a:	4631      	mov	r1, r6
 800549c:	4650      	mov	r0, sl
 800549e:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80054a2:	4790      	blx	r2
 80054a4:	2800      	cmp	r0, #0
 80054a6:	f040 8085 	bne.w	80055b4 <_scanf_i+0x1c0>
 80054aa:	f10b 0b01 	add.w	fp, fp, #1
 80054ae:	f1bb 0f03 	cmp.w	fp, #3
 80054b2:	d1cb      	bne.n	800544c <_scanf_i+0x58>
 80054b4:	6863      	ldr	r3, [r4, #4]
 80054b6:	b90b      	cbnz	r3, 80054bc <_scanf_i+0xc8>
 80054b8:	230a      	movs	r3, #10
 80054ba:	6063      	str	r3, [r4, #4]
 80054bc:	6863      	ldr	r3, [r4, #4]
 80054be:	4945      	ldr	r1, [pc, #276]	@ (80055d4 <_scanf_i+0x1e0>)
 80054c0:	6960      	ldr	r0, [r4, #20]
 80054c2:	1ac9      	subs	r1, r1, r3
 80054c4:	f000 f91d 	bl	8005702 <__sccl>
 80054c8:	f04f 0b00 	mov.w	fp, #0
 80054cc:	68a3      	ldr	r3, [r4, #8]
 80054ce:	6822      	ldr	r2, [r4, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d03d      	beq.n	8005550 <_scanf_i+0x15c>
 80054d4:	6831      	ldr	r1, [r6, #0]
 80054d6:	6960      	ldr	r0, [r4, #20]
 80054d8:	f891 c000 	ldrb.w	ip, [r1]
 80054dc:	f810 000c 	ldrb.w	r0, [r0, ip]
 80054e0:	2800      	cmp	r0, #0
 80054e2:	d035      	beq.n	8005550 <_scanf_i+0x15c>
 80054e4:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80054e8:	d124      	bne.n	8005534 <_scanf_i+0x140>
 80054ea:	0510      	lsls	r0, r2, #20
 80054ec:	d522      	bpl.n	8005534 <_scanf_i+0x140>
 80054ee:	f10b 0b01 	add.w	fp, fp, #1
 80054f2:	f1b9 0f00 	cmp.w	r9, #0
 80054f6:	d003      	beq.n	8005500 <_scanf_i+0x10c>
 80054f8:	3301      	adds	r3, #1
 80054fa:	f109 39ff 	add.w	r9, r9, #4294967295
 80054fe:	60a3      	str	r3, [r4, #8]
 8005500:	6873      	ldr	r3, [r6, #4]
 8005502:	3b01      	subs	r3, #1
 8005504:	2b00      	cmp	r3, #0
 8005506:	6073      	str	r3, [r6, #4]
 8005508:	dd1b      	ble.n	8005542 <_scanf_i+0x14e>
 800550a:	6833      	ldr	r3, [r6, #0]
 800550c:	3301      	adds	r3, #1
 800550e:	6033      	str	r3, [r6, #0]
 8005510:	68a3      	ldr	r3, [r4, #8]
 8005512:	3b01      	subs	r3, #1
 8005514:	60a3      	str	r3, [r4, #8]
 8005516:	e7d9      	b.n	80054cc <_scanf_i+0xd8>
 8005518:	f1bb 0f02 	cmp.w	fp, #2
 800551c:	d1ae      	bne.n	800547c <_scanf_i+0x88>
 800551e:	6822      	ldr	r2, [r4, #0]
 8005520:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8005524:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8005528:	d1bf      	bne.n	80054aa <_scanf_i+0xb6>
 800552a:	2110      	movs	r1, #16
 800552c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005530:	6061      	str	r1, [r4, #4]
 8005532:	e7a2      	b.n	800547a <_scanf_i+0x86>
 8005534:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8005538:	6022      	str	r2, [r4, #0]
 800553a:	780b      	ldrb	r3, [r1, #0]
 800553c:	f805 3b01 	strb.w	r3, [r5], #1
 8005540:	e7de      	b.n	8005500 <_scanf_i+0x10c>
 8005542:	4631      	mov	r1, r6
 8005544:	4650      	mov	r0, sl
 8005546:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800554a:	4798      	blx	r3
 800554c:	2800      	cmp	r0, #0
 800554e:	d0df      	beq.n	8005510 <_scanf_i+0x11c>
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	05d9      	lsls	r1, r3, #23
 8005554:	d50d      	bpl.n	8005572 <_scanf_i+0x17e>
 8005556:	42bd      	cmp	r5, r7
 8005558:	d909      	bls.n	800556e <_scanf_i+0x17a>
 800555a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800555e:	4632      	mov	r2, r6
 8005560:	4650      	mov	r0, sl
 8005562:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005566:	f105 39ff 	add.w	r9, r5, #4294967295
 800556a:	4798      	blx	r3
 800556c:	464d      	mov	r5, r9
 800556e:	42bd      	cmp	r5, r7
 8005570:	d028      	beq.n	80055c4 <_scanf_i+0x1d0>
 8005572:	6822      	ldr	r2, [r4, #0]
 8005574:	f012 0210 	ands.w	r2, r2, #16
 8005578:	d113      	bne.n	80055a2 <_scanf_i+0x1ae>
 800557a:	702a      	strb	r2, [r5, #0]
 800557c:	4639      	mov	r1, r7
 800557e:	6863      	ldr	r3, [r4, #4]
 8005580:	4650      	mov	r0, sl
 8005582:	9e01      	ldr	r6, [sp, #4]
 8005584:	47b0      	blx	r6
 8005586:	f8d8 3000 	ldr.w	r3, [r8]
 800558a:	6821      	ldr	r1, [r4, #0]
 800558c:	1d1a      	adds	r2, r3, #4
 800558e:	f8c8 2000 	str.w	r2, [r8]
 8005592:	f011 0f20 	tst.w	r1, #32
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	d00f      	beq.n	80055ba <_scanf_i+0x1c6>
 800559a:	6018      	str	r0, [r3, #0]
 800559c:	68e3      	ldr	r3, [r4, #12]
 800559e:	3301      	adds	r3, #1
 80055a0:	60e3      	str	r3, [r4, #12]
 80055a2:	2000      	movs	r0, #0
 80055a4:	6923      	ldr	r3, [r4, #16]
 80055a6:	1bed      	subs	r5, r5, r7
 80055a8:	445d      	add	r5, fp
 80055aa:	442b      	add	r3, r5
 80055ac:	6123      	str	r3, [r4, #16]
 80055ae:	b007      	add	sp, #28
 80055b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055b4:	f04f 0b00 	mov.w	fp, #0
 80055b8:	e7ca      	b.n	8005550 <_scanf_i+0x15c>
 80055ba:	07ca      	lsls	r2, r1, #31
 80055bc:	bf4c      	ite	mi
 80055be:	8018      	strhmi	r0, [r3, #0]
 80055c0:	6018      	strpl	r0, [r3, #0]
 80055c2:	e7eb      	b.n	800559c <_scanf_i+0x1a8>
 80055c4:	2001      	movs	r0, #1
 80055c6:	e7f2      	b.n	80055ae <_scanf_i+0x1ba>
 80055c8:	0800665c 	.word	0x0800665c
 80055cc:	08005a05 	.word	0x08005a05
 80055d0:	08005ae5 	.word	0x08005ae5
 80055d4:	08006903 	.word	0x08006903

080055d8 <__swhatbuf_r>:
 80055d8:	b570      	push	{r4, r5, r6, lr}
 80055da:	460c      	mov	r4, r1
 80055dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055e0:	4615      	mov	r5, r2
 80055e2:	2900      	cmp	r1, #0
 80055e4:	461e      	mov	r6, r3
 80055e6:	b096      	sub	sp, #88	@ 0x58
 80055e8:	da0c      	bge.n	8005604 <__swhatbuf_r+0x2c>
 80055ea:	89a3      	ldrh	r3, [r4, #12]
 80055ec:	2100      	movs	r1, #0
 80055ee:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80055f2:	bf14      	ite	ne
 80055f4:	2340      	movne	r3, #64	@ 0x40
 80055f6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80055fa:	2000      	movs	r0, #0
 80055fc:	6031      	str	r1, [r6, #0]
 80055fe:	602b      	str	r3, [r5, #0]
 8005600:	b016      	add	sp, #88	@ 0x58
 8005602:	bd70      	pop	{r4, r5, r6, pc}
 8005604:	466a      	mov	r2, sp
 8005606:	f000 f907 	bl	8005818 <_fstat_r>
 800560a:	2800      	cmp	r0, #0
 800560c:	dbed      	blt.n	80055ea <__swhatbuf_r+0x12>
 800560e:	9901      	ldr	r1, [sp, #4]
 8005610:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005614:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005618:	4259      	negs	r1, r3
 800561a:	4159      	adcs	r1, r3
 800561c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005620:	e7eb      	b.n	80055fa <__swhatbuf_r+0x22>

08005622 <__smakebuf_r>:
 8005622:	898b      	ldrh	r3, [r1, #12]
 8005624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005626:	079d      	lsls	r5, r3, #30
 8005628:	4606      	mov	r6, r0
 800562a:	460c      	mov	r4, r1
 800562c:	d507      	bpl.n	800563e <__smakebuf_r+0x1c>
 800562e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005632:	6023      	str	r3, [r4, #0]
 8005634:	6123      	str	r3, [r4, #16]
 8005636:	2301      	movs	r3, #1
 8005638:	6163      	str	r3, [r4, #20]
 800563a:	b003      	add	sp, #12
 800563c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800563e:	466a      	mov	r2, sp
 8005640:	ab01      	add	r3, sp, #4
 8005642:	f7ff ffc9 	bl	80055d8 <__swhatbuf_r>
 8005646:	9f00      	ldr	r7, [sp, #0]
 8005648:	4605      	mov	r5, r0
 800564a:	4639      	mov	r1, r7
 800564c:	4630      	mov	r0, r6
 800564e:	f7fe fff7 	bl	8004640 <_malloc_r>
 8005652:	b948      	cbnz	r0, 8005668 <__smakebuf_r+0x46>
 8005654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005658:	059a      	lsls	r2, r3, #22
 800565a:	d4ee      	bmi.n	800563a <__smakebuf_r+0x18>
 800565c:	f023 0303 	bic.w	r3, r3, #3
 8005660:	f043 0302 	orr.w	r3, r3, #2
 8005664:	81a3      	strh	r3, [r4, #12]
 8005666:	e7e2      	b.n	800562e <__smakebuf_r+0xc>
 8005668:	89a3      	ldrh	r3, [r4, #12]
 800566a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800566e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005672:	81a3      	strh	r3, [r4, #12]
 8005674:	9b01      	ldr	r3, [sp, #4]
 8005676:	6020      	str	r0, [r4, #0]
 8005678:	b15b      	cbz	r3, 8005692 <__smakebuf_r+0x70>
 800567a:	4630      	mov	r0, r6
 800567c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005680:	f000 f8dc 	bl	800583c <_isatty_r>
 8005684:	b128      	cbz	r0, 8005692 <__smakebuf_r+0x70>
 8005686:	89a3      	ldrh	r3, [r4, #12]
 8005688:	f023 0303 	bic.w	r3, r3, #3
 800568c:	f043 0301 	orr.w	r3, r3, #1
 8005690:	81a3      	strh	r3, [r4, #12]
 8005692:	89a3      	ldrh	r3, [r4, #12]
 8005694:	431d      	orrs	r5, r3
 8005696:	81a5      	strh	r5, [r4, #12]
 8005698:	e7cf      	b.n	800563a <__smakebuf_r+0x18>

0800569a <_putc_r>:
 800569a:	b570      	push	{r4, r5, r6, lr}
 800569c:	460d      	mov	r5, r1
 800569e:	4614      	mov	r4, r2
 80056a0:	4606      	mov	r6, r0
 80056a2:	b118      	cbz	r0, 80056ac <_putc_r+0x12>
 80056a4:	6a03      	ldr	r3, [r0, #32]
 80056a6:	b90b      	cbnz	r3, 80056ac <_putc_r+0x12>
 80056a8:	f7fe fcec 	bl	8004084 <__sinit>
 80056ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056ae:	07d8      	lsls	r0, r3, #31
 80056b0:	d405      	bmi.n	80056be <_putc_r+0x24>
 80056b2:	89a3      	ldrh	r3, [r4, #12]
 80056b4:	0599      	lsls	r1, r3, #22
 80056b6:	d402      	bmi.n	80056be <_putc_r+0x24>
 80056b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056ba:	f7fe ff54 	bl	8004566 <__retarget_lock_acquire_recursive>
 80056be:	68a3      	ldr	r3, [r4, #8]
 80056c0:	3b01      	subs	r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	60a3      	str	r3, [r4, #8]
 80056c6:	da05      	bge.n	80056d4 <_putc_r+0x3a>
 80056c8:	69a2      	ldr	r2, [r4, #24]
 80056ca:	4293      	cmp	r3, r2
 80056cc:	db12      	blt.n	80056f4 <_putc_r+0x5a>
 80056ce:	b2eb      	uxtb	r3, r5
 80056d0:	2b0a      	cmp	r3, #10
 80056d2:	d00f      	beq.n	80056f4 <_putc_r+0x5a>
 80056d4:	6823      	ldr	r3, [r4, #0]
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	6022      	str	r2, [r4, #0]
 80056da:	701d      	strb	r5, [r3, #0]
 80056dc:	b2ed      	uxtb	r5, r5
 80056de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056e0:	07da      	lsls	r2, r3, #31
 80056e2:	d405      	bmi.n	80056f0 <_putc_r+0x56>
 80056e4:	89a3      	ldrh	r3, [r4, #12]
 80056e6:	059b      	lsls	r3, r3, #22
 80056e8:	d402      	bmi.n	80056f0 <_putc_r+0x56>
 80056ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056ec:	f7fe ff3c 	bl	8004568 <__retarget_lock_release_recursive>
 80056f0:	4628      	mov	r0, r5
 80056f2:	bd70      	pop	{r4, r5, r6, pc}
 80056f4:	4629      	mov	r1, r5
 80056f6:	4622      	mov	r2, r4
 80056f8:	4630      	mov	r0, r6
 80056fa:	f7fe fe14 	bl	8004326 <__swbuf_r>
 80056fe:	4605      	mov	r5, r0
 8005700:	e7ed      	b.n	80056de <_putc_r+0x44>

08005702 <__sccl>:
 8005702:	b570      	push	{r4, r5, r6, lr}
 8005704:	780b      	ldrb	r3, [r1, #0]
 8005706:	4604      	mov	r4, r0
 8005708:	2b5e      	cmp	r3, #94	@ 0x5e
 800570a:	bf0b      	itete	eq
 800570c:	784b      	ldrbeq	r3, [r1, #1]
 800570e:	1c4a      	addne	r2, r1, #1
 8005710:	1c8a      	addeq	r2, r1, #2
 8005712:	2100      	movne	r1, #0
 8005714:	bf08      	it	eq
 8005716:	2101      	moveq	r1, #1
 8005718:	3801      	subs	r0, #1
 800571a:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800571e:	f800 1f01 	strb.w	r1, [r0, #1]!
 8005722:	42a8      	cmp	r0, r5
 8005724:	d1fb      	bne.n	800571e <__sccl+0x1c>
 8005726:	b90b      	cbnz	r3, 800572c <__sccl+0x2a>
 8005728:	1e50      	subs	r0, r2, #1
 800572a:	bd70      	pop	{r4, r5, r6, pc}
 800572c:	f081 0101 	eor.w	r1, r1, #1
 8005730:	4610      	mov	r0, r2
 8005732:	54e1      	strb	r1, [r4, r3]
 8005734:	4602      	mov	r2, r0
 8005736:	f812 5b01 	ldrb.w	r5, [r2], #1
 800573a:	2d2d      	cmp	r5, #45	@ 0x2d
 800573c:	d005      	beq.n	800574a <__sccl+0x48>
 800573e:	2d5d      	cmp	r5, #93	@ 0x5d
 8005740:	d016      	beq.n	8005770 <__sccl+0x6e>
 8005742:	2d00      	cmp	r5, #0
 8005744:	d0f1      	beq.n	800572a <__sccl+0x28>
 8005746:	462b      	mov	r3, r5
 8005748:	e7f2      	b.n	8005730 <__sccl+0x2e>
 800574a:	7846      	ldrb	r6, [r0, #1]
 800574c:	2e5d      	cmp	r6, #93	@ 0x5d
 800574e:	d0fa      	beq.n	8005746 <__sccl+0x44>
 8005750:	42b3      	cmp	r3, r6
 8005752:	dcf8      	bgt.n	8005746 <__sccl+0x44>
 8005754:	461a      	mov	r2, r3
 8005756:	3002      	adds	r0, #2
 8005758:	3201      	adds	r2, #1
 800575a:	4296      	cmp	r6, r2
 800575c:	54a1      	strb	r1, [r4, r2]
 800575e:	dcfb      	bgt.n	8005758 <__sccl+0x56>
 8005760:	1af2      	subs	r2, r6, r3
 8005762:	3a01      	subs	r2, #1
 8005764:	42b3      	cmp	r3, r6
 8005766:	bfa8      	it	ge
 8005768:	2200      	movge	r2, #0
 800576a:	1c5d      	adds	r5, r3, #1
 800576c:	18ab      	adds	r3, r5, r2
 800576e:	e7e1      	b.n	8005734 <__sccl+0x32>
 8005770:	4610      	mov	r0, r2
 8005772:	e7da      	b.n	800572a <__sccl+0x28>

08005774 <__submore>:
 8005774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005778:	460c      	mov	r4, r1
 800577a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800577c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005780:	4299      	cmp	r1, r3
 8005782:	d11b      	bne.n	80057bc <__submore+0x48>
 8005784:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005788:	f7fe ff5a 	bl	8004640 <_malloc_r>
 800578c:	b918      	cbnz	r0, 8005796 <__submore+0x22>
 800578e:	f04f 30ff 	mov.w	r0, #4294967295
 8005792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005796:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800579a:	63a3      	str	r3, [r4, #56]	@ 0x38
 800579c:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80057a0:	6360      	str	r0, [r4, #52]	@ 0x34
 80057a2:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80057a6:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80057aa:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80057ae:	7043      	strb	r3, [r0, #1]
 80057b0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80057b4:	7003      	strb	r3, [r0, #0]
 80057b6:	6020      	str	r0, [r4, #0]
 80057b8:	2000      	movs	r0, #0
 80057ba:	e7ea      	b.n	8005792 <__submore+0x1e>
 80057bc:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80057be:	0077      	lsls	r7, r6, #1
 80057c0:	463a      	mov	r2, r7
 80057c2:	f000 f877 	bl	80058b4 <_realloc_r>
 80057c6:	4605      	mov	r5, r0
 80057c8:	2800      	cmp	r0, #0
 80057ca:	d0e0      	beq.n	800578e <__submore+0x1a>
 80057cc:	eb00 0806 	add.w	r8, r0, r6
 80057d0:	4601      	mov	r1, r0
 80057d2:	4632      	mov	r2, r6
 80057d4:	4640      	mov	r0, r8
 80057d6:	f000 f85f 	bl	8005898 <memcpy>
 80057da:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80057de:	f8c4 8000 	str.w	r8, [r4]
 80057e2:	e7e9      	b.n	80057b8 <__submore+0x44>

080057e4 <memmove>:
 80057e4:	4288      	cmp	r0, r1
 80057e6:	b510      	push	{r4, lr}
 80057e8:	eb01 0402 	add.w	r4, r1, r2
 80057ec:	d902      	bls.n	80057f4 <memmove+0x10>
 80057ee:	4284      	cmp	r4, r0
 80057f0:	4623      	mov	r3, r4
 80057f2:	d807      	bhi.n	8005804 <memmove+0x20>
 80057f4:	1e43      	subs	r3, r0, #1
 80057f6:	42a1      	cmp	r1, r4
 80057f8:	d008      	beq.n	800580c <memmove+0x28>
 80057fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005802:	e7f8      	b.n	80057f6 <memmove+0x12>
 8005804:	4601      	mov	r1, r0
 8005806:	4402      	add	r2, r0
 8005808:	428a      	cmp	r2, r1
 800580a:	d100      	bne.n	800580e <memmove+0x2a>
 800580c:	bd10      	pop	{r4, pc}
 800580e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005812:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005816:	e7f7      	b.n	8005808 <memmove+0x24>

08005818 <_fstat_r>:
 8005818:	b538      	push	{r3, r4, r5, lr}
 800581a:	2300      	movs	r3, #0
 800581c:	4d06      	ldr	r5, [pc, #24]	@ (8005838 <_fstat_r+0x20>)
 800581e:	4604      	mov	r4, r0
 8005820:	4608      	mov	r0, r1
 8005822:	4611      	mov	r1, r2
 8005824:	602b      	str	r3, [r5, #0]
 8005826:	f7fd f9fb 	bl	8002c20 <_fstat>
 800582a:	1c43      	adds	r3, r0, #1
 800582c:	d102      	bne.n	8005834 <_fstat_r+0x1c>
 800582e:	682b      	ldr	r3, [r5, #0]
 8005830:	b103      	cbz	r3, 8005834 <_fstat_r+0x1c>
 8005832:	6023      	str	r3, [r4, #0]
 8005834:	bd38      	pop	{r3, r4, r5, pc}
 8005836:	bf00      	nop
 8005838:	20004210 	.word	0x20004210

0800583c <_isatty_r>:
 800583c:	b538      	push	{r3, r4, r5, lr}
 800583e:	2300      	movs	r3, #0
 8005840:	4d05      	ldr	r5, [pc, #20]	@ (8005858 <_isatty_r+0x1c>)
 8005842:	4604      	mov	r4, r0
 8005844:	4608      	mov	r0, r1
 8005846:	602b      	str	r3, [r5, #0]
 8005848:	f7fd f9f9 	bl	8002c3e <_isatty>
 800584c:	1c43      	adds	r3, r0, #1
 800584e:	d102      	bne.n	8005856 <_isatty_r+0x1a>
 8005850:	682b      	ldr	r3, [r5, #0]
 8005852:	b103      	cbz	r3, 8005856 <_isatty_r+0x1a>
 8005854:	6023      	str	r3, [r4, #0]
 8005856:	bd38      	pop	{r3, r4, r5, pc}
 8005858:	20004210 	.word	0x20004210

0800585c <_sbrk_r>:
 800585c:	b538      	push	{r3, r4, r5, lr}
 800585e:	2300      	movs	r3, #0
 8005860:	4d05      	ldr	r5, [pc, #20]	@ (8005878 <_sbrk_r+0x1c>)
 8005862:	4604      	mov	r4, r0
 8005864:	4608      	mov	r0, r1
 8005866:	602b      	str	r3, [r5, #0]
 8005868:	f7fd fa00 	bl	8002c6c <_sbrk>
 800586c:	1c43      	adds	r3, r0, #1
 800586e:	d102      	bne.n	8005876 <_sbrk_r+0x1a>
 8005870:	682b      	ldr	r3, [r5, #0]
 8005872:	b103      	cbz	r3, 8005876 <_sbrk_r+0x1a>
 8005874:	6023      	str	r3, [r4, #0]
 8005876:	bd38      	pop	{r3, r4, r5, pc}
 8005878:	20004210 	.word	0x20004210

0800587c <memchr>:
 800587c:	4603      	mov	r3, r0
 800587e:	b510      	push	{r4, lr}
 8005880:	b2c9      	uxtb	r1, r1
 8005882:	4402      	add	r2, r0
 8005884:	4293      	cmp	r3, r2
 8005886:	4618      	mov	r0, r3
 8005888:	d101      	bne.n	800588e <memchr+0x12>
 800588a:	2000      	movs	r0, #0
 800588c:	e003      	b.n	8005896 <memchr+0x1a>
 800588e:	7804      	ldrb	r4, [r0, #0]
 8005890:	3301      	adds	r3, #1
 8005892:	428c      	cmp	r4, r1
 8005894:	d1f6      	bne.n	8005884 <memchr+0x8>
 8005896:	bd10      	pop	{r4, pc}

08005898 <memcpy>:
 8005898:	440a      	add	r2, r1
 800589a:	4291      	cmp	r1, r2
 800589c:	f100 33ff 	add.w	r3, r0, #4294967295
 80058a0:	d100      	bne.n	80058a4 <memcpy+0xc>
 80058a2:	4770      	bx	lr
 80058a4:	b510      	push	{r4, lr}
 80058a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058aa:	4291      	cmp	r1, r2
 80058ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058b0:	d1f9      	bne.n	80058a6 <memcpy+0xe>
 80058b2:	bd10      	pop	{r4, pc}

080058b4 <_realloc_r>:
 80058b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058b8:	4680      	mov	r8, r0
 80058ba:	4615      	mov	r5, r2
 80058bc:	460c      	mov	r4, r1
 80058be:	b921      	cbnz	r1, 80058ca <_realloc_r+0x16>
 80058c0:	4611      	mov	r1, r2
 80058c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058c6:	f7fe bebb 	b.w	8004640 <_malloc_r>
 80058ca:	b92a      	cbnz	r2, 80058d8 <_realloc_r+0x24>
 80058cc:	f7fe fe4e 	bl	800456c <_free_r>
 80058d0:	2400      	movs	r4, #0
 80058d2:	4620      	mov	r0, r4
 80058d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058d8:	f000 f906 	bl	8005ae8 <_malloc_usable_size_r>
 80058dc:	4285      	cmp	r5, r0
 80058de:	4606      	mov	r6, r0
 80058e0:	d802      	bhi.n	80058e8 <_realloc_r+0x34>
 80058e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80058e6:	d8f4      	bhi.n	80058d2 <_realloc_r+0x1e>
 80058e8:	4629      	mov	r1, r5
 80058ea:	4640      	mov	r0, r8
 80058ec:	f7fe fea8 	bl	8004640 <_malloc_r>
 80058f0:	4607      	mov	r7, r0
 80058f2:	2800      	cmp	r0, #0
 80058f4:	d0ec      	beq.n	80058d0 <_realloc_r+0x1c>
 80058f6:	42b5      	cmp	r5, r6
 80058f8:	462a      	mov	r2, r5
 80058fa:	4621      	mov	r1, r4
 80058fc:	bf28      	it	cs
 80058fe:	4632      	movcs	r2, r6
 8005900:	f7ff ffca 	bl	8005898 <memcpy>
 8005904:	4621      	mov	r1, r4
 8005906:	4640      	mov	r0, r8
 8005908:	f7fe fe30 	bl	800456c <_free_r>
 800590c:	463c      	mov	r4, r7
 800590e:	e7e0      	b.n	80058d2 <_realloc_r+0x1e>

08005910 <_strtol_l.constprop.0>:
 8005910:	2b24      	cmp	r3, #36	@ 0x24
 8005912:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005916:	4686      	mov	lr, r0
 8005918:	4690      	mov	r8, r2
 800591a:	d801      	bhi.n	8005920 <_strtol_l.constprop.0+0x10>
 800591c:	2b01      	cmp	r3, #1
 800591e:	d106      	bne.n	800592e <_strtol_l.constprop.0+0x1e>
 8005920:	f7fe fdf6 	bl	8004510 <__errno>
 8005924:	2316      	movs	r3, #22
 8005926:	6003      	str	r3, [r0, #0]
 8005928:	2000      	movs	r0, #0
 800592a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800592e:	460d      	mov	r5, r1
 8005930:	4833      	ldr	r0, [pc, #204]	@ (8005a00 <_strtol_l.constprop.0+0xf0>)
 8005932:	462a      	mov	r2, r5
 8005934:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005938:	5d06      	ldrb	r6, [r0, r4]
 800593a:	f016 0608 	ands.w	r6, r6, #8
 800593e:	d1f8      	bne.n	8005932 <_strtol_l.constprop.0+0x22>
 8005940:	2c2d      	cmp	r4, #45	@ 0x2d
 8005942:	d12d      	bne.n	80059a0 <_strtol_l.constprop.0+0x90>
 8005944:	2601      	movs	r6, #1
 8005946:	782c      	ldrb	r4, [r5, #0]
 8005948:	1c95      	adds	r5, r2, #2
 800594a:	f033 0210 	bics.w	r2, r3, #16
 800594e:	d109      	bne.n	8005964 <_strtol_l.constprop.0+0x54>
 8005950:	2c30      	cmp	r4, #48	@ 0x30
 8005952:	d12a      	bne.n	80059aa <_strtol_l.constprop.0+0x9a>
 8005954:	782a      	ldrb	r2, [r5, #0]
 8005956:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800595a:	2a58      	cmp	r2, #88	@ 0x58
 800595c:	d125      	bne.n	80059aa <_strtol_l.constprop.0+0x9a>
 800595e:	2310      	movs	r3, #16
 8005960:	786c      	ldrb	r4, [r5, #1]
 8005962:	3502      	adds	r5, #2
 8005964:	2200      	movs	r2, #0
 8005966:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800596a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800596e:	fbbc f9f3 	udiv	r9, ip, r3
 8005972:	4610      	mov	r0, r2
 8005974:	fb03 ca19 	mls	sl, r3, r9, ip
 8005978:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800597c:	2f09      	cmp	r7, #9
 800597e:	d81b      	bhi.n	80059b8 <_strtol_l.constprop.0+0xa8>
 8005980:	463c      	mov	r4, r7
 8005982:	42a3      	cmp	r3, r4
 8005984:	dd27      	ble.n	80059d6 <_strtol_l.constprop.0+0xc6>
 8005986:	1c57      	adds	r7, r2, #1
 8005988:	d007      	beq.n	800599a <_strtol_l.constprop.0+0x8a>
 800598a:	4581      	cmp	r9, r0
 800598c:	d320      	bcc.n	80059d0 <_strtol_l.constprop.0+0xc0>
 800598e:	d101      	bne.n	8005994 <_strtol_l.constprop.0+0x84>
 8005990:	45a2      	cmp	sl, r4
 8005992:	db1d      	blt.n	80059d0 <_strtol_l.constprop.0+0xc0>
 8005994:	2201      	movs	r2, #1
 8005996:	fb00 4003 	mla	r0, r0, r3, r4
 800599a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800599e:	e7eb      	b.n	8005978 <_strtol_l.constprop.0+0x68>
 80059a0:	2c2b      	cmp	r4, #43	@ 0x2b
 80059a2:	bf04      	itt	eq
 80059a4:	782c      	ldrbeq	r4, [r5, #0]
 80059a6:	1c95      	addeq	r5, r2, #2
 80059a8:	e7cf      	b.n	800594a <_strtol_l.constprop.0+0x3a>
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1da      	bne.n	8005964 <_strtol_l.constprop.0+0x54>
 80059ae:	2c30      	cmp	r4, #48	@ 0x30
 80059b0:	bf0c      	ite	eq
 80059b2:	2308      	moveq	r3, #8
 80059b4:	230a      	movne	r3, #10
 80059b6:	e7d5      	b.n	8005964 <_strtol_l.constprop.0+0x54>
 80059b8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80059bc:	2f19      	cmp	r7, #25
 80059be:	d801      	bhi.n	80059c4 <_strtol_l.constprop.0+0xb4>
 80059c0:	3c37      	subs	r4, #55	@ 0x37
 80059c2:	e7de      	b.n	8005982 <_strtol_l.constprop.0+0x72>
 80059c4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80059c8:	2f19      	cmp	r7, #25
 80059ca:	d804      	bhi.n	80059d6 <_strtol_l.constprop.0+0xc6>
 80059cc:	3c57      	subs	r4, #87	@ 0x57
 80059ce:	e7d8      	b.n	8005982 <_strtol_l.constprop.0+0x72>
 80059d0:	f04f 32ff 	mov.w	r2, #4294967295
 80059d4:	e7e1      	b.n	800599a <_strtol_l.constprop.0+0x8a>
 80059d6:	1c53      	adds	r3, r2, #1
 80059d8:	d108      	bne.n	80059ec <_strtol_l.constprop.0+0xdc>
 80059da:	2322      	movs	r3, #34	@ 0x22
 80059dc:	4660      	mov	r0, ip
 80059de:	f8ce 3000 	str.w	r3, [lr]
 80059e2:	f1b8 0f00 	cmp.w	r8, #0
 80059e6:	d0a0      	beq.n	800592a <_strtol_l.constprop.0+0x1a>
 80059e8:	1e69      	subs	r1, r5, #1
 80059ea:	e006      	b.n	80059fa <_strtol_l.constprop.0+0xea>
 80059ec:	b106      	cbz	r6, 80059f0 <_strtol_l.constprop.0+0xe0>
 80059ee:	4240      	negs	r0, r0
 80059f0:	f1b8 0f00 	cmp.w	r8, #0
 80059f4:	d099      	beq.n	800592a <_strtol_l.constprop.0+0x1a>
 80059f6:	2a00      	cmp	r2, #0
 80059f8:	d1f6      	bne.n	80059e8 <_strtol_l.constprop.0+0xd8>
 80059fa:	f8c8 1000 	str.w	r1, [r8]
 80059fe:	e794      	b.n	800592a <_strtol_l.constprop.0+0x1a>
 8005a00:	0800690f 	.word	0x0800690f

08005a04 <_strtol_r>:
 8005a04:	f7ff bf84 	b.w	8005910 <_strtol_l.constprop.0>

08005a08 <_strtoul_l.constprop.0>:
 8005a08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a0c:	4686      	mov	lr, r0
 8005a0e:	460d      	mov	r5, r1
 8005a10:	4e33      	ldr	r6, [pc, #204]	@ (8005ae0 <_strtoul_l.constprop.0+0xd8>)
 8005a12:	4628      	mov	r0, r5
 8005a14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a18:	5d37      	ldrb	r7, [r6, r4]
 8005a1a:	f017 0708 	ands.w	r7, r7, #8
 8005a1e:	d1f8      	bne.n	8005a12 <_strtoul_l.constprop.0+0xa>
 8005a20:	2c2d      	cmp	r4, #45	@ 0x2d
 8005a22:	d12f      	bne.n	8005a84 <_strtoul_l.constprop.0+0x7c>
 8005a24:	2701      	movs	r7, #1
 8005a26:	782c      	ldrb	r4, [r5, #0]
 8005a28:	1c85      	adds	r5, r0, #2
 8005a2a:	f033 0010 	bics.w	r0, r3, #16
 8005a2e:	d109      	bne.n	8005a44 <_strtoul_l.constprop.0+0x3c>
 8005a30:	2c30      	cmp	r4, #48	@ 0x30
 8005a32:	d12c      	bne.n	8005a8e <_strtoul_l.constprop.0+0x86>
 8005a34:	7828      	ldrb	r0, [r5, #0]
 8005a36:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8005a3a:	2858      	cmp	r0, #88	@ 0x58
 8005a3c:	d127      	bne.n	8005a8e <_strtoul_l.constprop.0+0x86>
 8005a3e:	2310      	movs	r3, #16
 8005a40:	786c      	ldrb	r4, [r5, #1]
 8005a42:	3502      	adds	r5, #2
 8005a44:	f04f 38ff 	mov.w	r8, #4294967295
 8005a48:	fbb8 f8f3 	udiv	r8, r8, r3
 8005a4c:	2600      	movs	r6, #0
 8005a4e:	fb03 f908 	mul.w	r9, r3, r8
 8005a52:	4630      	mov	r0, r6
 8005a54:	ea6f 0909 	mvn.w	r9, r9
 8005a58:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8005a5c:	f1bc 0f09 	cmp.w	ip, #9
 8005a60:	d81c      	bhi.n	8005a9c <_strtoul_l.constprop.0+0x94>
 8005a62:	4664      	mov	r4, ip
 8005a64:	42a3      	cmp	r3, r4
 8005a66:	dd2a      	ble.n	8005abe <_strtoul_l.constprop.0+0xb6>
 8005a68:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005a6c:	d007      	beq.n	8005a7e <_strtoul_l.constprop.0+0x76>
 8005a6e:	4580      	cmp	r8, r0
 8005a70:	d322      	bcc.n	8005ab8 <_strtoul_l.constprop.0+0xb0>
 8005a72:	d101      	bne.n	8005a78 <_strtoul_l.constprop.0+0x70>
 8005a74:	45a1      	cmp	r9, r4
 8005a76:	db1f      	blt.n	8005ab8 <_strtoul_l.constprop.0+0xb0>
 8005a78:	2601      	movs	r6, #1
 8005a7a:	fb00 4003 	mla	r0, r0, r3, r4
 8005a7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a82:	e7e9      	b.n	8005a58 <_strtoul_l.constprop.0+0x50>
 8005a84:	2c2b      	cmp	r4, #43	@ 0x2b
 8005a86:	bf04      	itt	eq
 8005a88:	782c      	ldrbeq	r4, [r5, #0]
 8005a8a:	1c85      	addeq	r5, r0, #2
 8005a8c:	e7cd      	b.n	8005a2a <_strtoul_l.constprop.0+0x22>
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1d8      	bne.n	8005a44 <_strtoul_l.constprop.0+0x3c>
 8005a92:	2c30      	cmp	r4, #48	@ 0x30
 8005a94:	bf0c      	ite	eq
 8005a96:	2308      	moveq	r3, #8
 8005a98:	230a      	movne	r3, #10
 8005a9a:	e7d3      	b.n	8005a44 <_strtoul_l.constprop.0+0x3c>
 8005a9c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8005aa0:	f1bc 0f19 	cmp.w	ip, #25
 8005aa4:	d801      	bhi.n	8005aaa <_strtoul_l.constprop.0+0xa2>
 8005aa6:	3c37      	subs	r4, #55	@ 0x37
 8005aa8:	e7dc      	b.n	8005a64 <_strtoul_l.constprop.0+0x5c>
 8005aaa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8005aae:	f1bc 0f19 	cmp.w	ip, #25
 8005ab2:	d804      	bhi.n	8005abe <_strtoul_l.constprop.0+0xb6>
 8005ab4:	3c57      	subs	r4, #87	@ 0x57
 8005ab6:	e7d5      	b.n	8005a64 <_strtoul_l.constprop.0+0x5c>
 8005ab8:	f04f 36ff 	mov.w	r6, #4294967295
 8005abc:	e7df      	b.n	8005a7e <_strtoul_l.constprop.0+0x76>
 8005abe:	1c73      	adds	r3, r6, #1
 8005ac0:	d106      	bne.n	8005ad0 <_strtoul_l.constprop.0+0xc8>
 8005ac2:	2322      	movs	r3, #34	@ 0x22
 8005ac4:	4630      	mov	r0, r6
 8005ac6:	f8ce 3000 	str.w	r3, [lr]
 8005aca:	b932      	cbnz	r2, 8005ada <_strtoul_l.constprop.0+0xd2>
 8005acc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ad0:	b107      	cbz	r7, 8005ad4 <_strtoul_l.constprop.0+0xcc>
 8005ad2:	4240      	negs	r0, r0
 8005ad4:	2a00      	cmp	r2, #0
 8005ad6:	d0f9      	beq.n	8005acc <_strtoul_l.constprop.0+0xc4>
 8005ad8:	b106      	cbz	r6, 8005adc <_strtoul_l.constprop.0+0xd4>
 8005ada:	1e69      	subs	r1, r5, #1
 8005adc:	6011      	str	r1, [r2, #0]
 8005ade:	e7f5      	b.n	8005acc <_strtoul_l.constprop.0+0xc4>
 8005ae0:	0800690f 	.word	0x0800690f

08005ae4 <_strtoul_r>:
 8005ae4:	f7ff bf90 	b.w	8005a08 <_strtoul_l.constprop.0>

08005ae8 <_malloc_usable_size_r>:
 8005ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005aec:	1f18      	subs	r0, r3, #4
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	bfbc      	itt	lt
 8005af2:	580b      	ldrlt	r3, [r1, r0]
 8005af4:	18c0      	addlt	r0, r0, r3
 8005af6:	4770      	bx	lr

08005af8 <_init>:
 8005af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afa:	bf00      	nop
 8005afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005afe:	bc08      	pop	{r3}
 8005b00:	469e      	mov	lr, r3
 8005b02:	4770      	bx	lr

08005b04 <_fini>:
 8005b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b06:	bf00      	nop
 8005b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b0a:	bc08      	pop	{r3}
 8005b0c:	469e      	mov	lr, r3
 8005b0e:	4770      	bx	lr

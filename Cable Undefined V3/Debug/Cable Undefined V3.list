
Cable Undefined V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dfc  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f60  08005fe0  08005fe0  00006fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f40  08006f40  00008d20  2**0
                  CONTENTS
  4 .ARM          00000008  08006f40  08006f40  00007f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f48  08006f48  00008d20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f48  08006f48  00007f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f4c  08006f4c  00007f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000d20  20000000  08006f50  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003704  20000d20  08007c70  00008d20  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004424  08007c70  00009424  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008d20  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d5c  00000000  00000000  00008d49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023bc  00000000  00000000  00012aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  00014e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000875  00000000  00000000  000159e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dc6f  00000000  00000000  0001625d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f4e  00000000  00000000  00033ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c620  00000000  00000000  0003de1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da43a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bc8  00000000  00000000  000da480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000de048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000d20 	.word	0x20000d20
 8000200:	00000000 	.word	0x00000000
 8000204:	08005fc8 	.word	0x08005fc8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000d24 	.word	0x20000d24
 8000220:	08005fc8 	.word	0x08005fc8

08000224 <strcmp>:
 8000224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800022c:	2a01      	cmp	r2, #1
 800022e:	bf28      	it	cs
 8000230:	429a      	cmpcs	r2, r3
 8000232:	d0f7      	beq.n	8000224 <strcmp>
 8000234:	1ad0      	subs	r0, r2, r3
 8000236:	4770      	bx	lr

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	0a1b      	lsrs	r3, r3, #8
 8000256:	b29a      	uxth	r2, r3
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	611a      	str	r2, [r3, #16]
}
 800025c:	bf00      	nop
 800025e:	370c      	adds	r7, #12
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr

08000266 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000266:	b480      	push	{r7}
 8000268:	b083      	sub	sp, #12
 800026a:	af00      	add	r7, sp, #0
 800026c:	6078      	str	r0, [r7, #4]
 800026e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	0a1b      	lsrs	r3, r3, #8
 8000274:	b29a      	uxth	r2, r3
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	615a      	str	r2, [r3, #20]
}
 800027a:	bf00      	nop
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr

08000284 <FAULT_CheckAndReport>:
static char msg[20];

/**
 * @brief Check which FAULT occurred and send the appropriate message
 */
void FAULT_CheckAndReport(void) {
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
    // Only process if an interrupt was triggered and message has not been sent
	if (!fault_sent){
 8000288:	4b1b      	ldr	r3, [pc, #108]	@ (80002f8 <FAULT_CheckAndReport+0x74>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	b2db      	uxtb	r3, r3
 800028e:	2b00      	cmp	r3, #0
 8000290:	d12c      	bne.n	80002ec <FAULT_CheckAndReport+0x68>
		if (fault_3v3_triggered && fault_5v_triggered) {
 8000292:	4b1a      	ldr	r3, [pc, #104]	@ (80002fc <FAULT_CheckAndReport+0x78>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	b2db      	uxtb	r3, r3
 8000298:	2b00      	cmp	r3, #0
 800029a:	d00a      	beq.n	80002b2 <FAULT_CheckAndReport+0x2e>
 800029c:	4b18      	ldr	r3, [pc, #96]	@ (8000300 <FAULT_CheckAndReport+0x7c>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d005      	beq.n	80002b2 <FAULT_CheckAndReport+0x2e>
			snprintf(msg, sizeof(msg), "FAULT 3v3 + 5V\n");
 80002a6:	4a17      	ldr	r2, [pc, #92]	@ (8000304 <FAULT_CheckAndReport+0x80>)
 80002a8:	2114      	movs	r1, #20
 80002aa:	4817      	ldr	r0, [pc, #92]	@ (8000308 <FAULT_CheckAndReport+0x84>)
 80002ac:	f004 fa00 	bl	80046b0 <sniprintf>
 80002b0:	e014      	b.n	80002dc <FAULT_CheckAndReport+0x58>
		} else if (fault_3v3_triggered) {
 80002b2:	4b12      	ldr	r3, [pc, #72]	@ (80002fc <FAULT_CheckAndReport+0x78>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d005      	beq.n	80002c8 <FAULT_CheckAndReport+0x44>
			snprintf(msg, sizeof(msg), "FAULT 3v3\n");
 80002bc:	4a13      	ldr	r2, [pc, #76]	@ (800030c <FAULT_CheckAndReport+0x88>)
 80002be:	2114      	movs	r1, #20
 80002c0:	4811      	ldr	r0, [pc, #68]	@ (8000308 <FAULT_CheckAndReport+0x84>)
 80002c2:	f004 f9f5 	bl	80046b0 <sniprintf>
 80002c6:	e009      	b.n	80002dc <FAULT_CheckAndReport+0x58>
		} else if (fault_5v_triggered) {
 80002c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000300 <FAULT_CheckAndReport+0x7c>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d010      	beq.n	80002f4 <FAULT_CheckAndReport+0x70>
			snprintf(msg, sizeof(msg), "FAULT 5V\n");
 80002d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000310 <FAULT_CheckAndReport+0x8c>)
 80002d4:	2114      	movs	r1, #20
 80002d6:	480c      	ldr	r0, [pc, #48]	@ (8000308 <FAULT_CheckAndReport+0x84>)
 80002d8:	f004 f9ea 	bl	80046b0 <sniprintf>
			return; // No fault detected
		}


	// Send message via UART1 and UART3
	sendToUART(USART3, msg);
 80002dc:	490a      	ldr	r1, [pc, #40]	@ (8000308 <FAULT_CheckAndReport+0x84>)
 80002de:	480d      	ldr	r0, [pc, #52]	@ (8000314 <FAULT_CheckAndReport+0x90>)
 80002e0:	f002 fbd8 	bl	8002a94 <sendToUART>
	sendToUART(USART1, msg);
 80002e4:	4908      	ldr	r1, [pc, #32]	@ (8000308 <FAULT_CheckAndReport+0x84>)
 80002e6:	480c      	ldr	r0, [pc, #48]	@ (8000318 <FAULT_CheckAndReport+0x94>)
 80002e8:	f002 fbd4 	bl	8002a94 <sendToUART>
	}

	// Mark message as sent
	fault_sent = 1;
 80002ec:	4b02      	ldr	r3, [pc, #8]	@ (80002f8 <FAULT_CheckAndReport+0x74>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	701a      	strb	r2, [r3, #0]
 80002f2:	e000      	b.n	80002f6 <FAULT_CheckAndReport+0x72>
			return; // No fault detected
 80002f4:	bf00      	nop
}
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	20000d3e 	.word	0x20000d3e
 80002fc:	20000d3c 	.word	0x20000d3c
 8000300:	20000d3d 	.word	0x20000d3d
 8000304:	08005fe0 	.word	0x08005fe0
 8000308:	20000d40 	.word	0x20000d40
 800030c:	08005ff0 	.word	0x08005ff0
 8000310:	08005ffc 	.word	0x08005ffc
 8000314:	40004800 	.word	0x40004800
 8000318:	40013800 	.word	0x40013800

0800031c <FAULT_5v_HandleInterrupt>:

/**
 * @brief Handles the 5V FAULT interrupt, only sets flags
 */
void FAULT_5v_HandleInterrupt(void) {
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
    // Set trigger flag when interrupt occurs
	fault_5v_triggered = 1;
 8000320:	4b04      	ldr	r3, [pc, #16]	@ (8000334 <FAULT_5v_HandleInterrupt+0x18>)
 8000322:	2201      	movs	r2, #1
 8000324:	701a      	strb	r2, [r3, #0]
    fault_sent = 0;  // Reset message sent flag to allow new transmission
 8000326:	4b04      	ldr	r3, [pc, #16]	@ (8000338 <FAULT_5v_HandleInterrupt+0x1c>)
 8000328:	2200      	movs	r2, #0
 800032a:	701a      	strb	r2, [r3, #0]
}
 800032c:	bf00      	nop
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr
 8000334:	20000d3d 	.word	0x20000d3d
 8000338:	20000d3e 	.word	0x20000d3e

0800033c <FAULT_3v3_HandleInterrupt>:

/**
 * @brief Handles the 5V FAULT interrupt, only sets flags
 */
void FAULT_3v3_HandleInterrupt(void) {
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
    // Set trigger flag when interrupt occurs
	fault_3v3_triggered = 1;
 8000340:	4b04      	ldr	r3, [pc, #16]	@ (8000354 <FAULT_3v3_HandleInterrupt+0x18>)
 8000342:	2201      	movs	r2, #1
 8000344:	701a      	strb	r2, [r3, #0]
    fault_sent = 0;  // Reset message sent flag to allow new transmission
 8000346:	4b04      	ldr	r3, [pc, #16]	@ (8000358 <FAULT_3v3_HandleInterrupt+0x1c>)
 8000348:	2200      	movs	r2, #0
 800034a:	701a      	strb	r2, [r3, #0]
}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr
 8000354:	20000d3c 	.word	0x20000d3c
 8000358:	20000d3e 	.word	0x20000d3e

0800035c <FAULT_5v_HandleMsg>:

void FAULT_5v_HandleMsg(void){
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	printf("Reseting the protection gpio, 5V");
 8000360:	480d      	ldr	r0, [pc, #52]	@ (8000398 <FAULT_5v_HandleMsg+0x3c>)
 8000362:	f004 f92d 	bl	80045c0 <iprintf>
	fflush(stdout);
 8000366:	4b0d      	ldr	r3, [pc, #52]	@ (800039c <FAULT_5v_HandleMsg+0x40>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	4618      	mov	r0, r3
 800036e:	f004 f851 	bl	8004414 <fflush>

	fault_5v_triggered = 0;
 8000372:	4b0b      	ldr	r3, [pc, #44]	@ (80003a0 <FAULT_5v_HandleMsg+0x44>)
 8000374:	2200      	movs	r2, #0
 8000376:	701a      	strb	r2, [r3, #0]
    fault_sent = 0;
 8000378:	4b0a      	ldr	r3, [pc, #40]	@ (80003a4 <FAULT_5v_HandleMsg+0x48>)
 800037a:	2200      	movs	r2, #0
 800037c:	701a      	strb	r2, [r3, #0]

    LL_GPIO_ResetOutputPin(PROTECTION_GPIO, PROTECTION_PIN);
 800037e:	490a      	ldr	r1, [pc, #40]	@ (80003a8 <FAULT_5v_HandleMsg+0x4c>)
 8000380:	480a      	ldr	r0, [pc, #40]	@ (80003ac <FAULT_5v_HandleMsg+0x50>)
 8000382:	f7ff ff70 	bl	8000266 <LL_GPIO_ResetOutputPin>
    LL_mDelay(20);
 8000386:	2014      	movs	r0, #20
 8000388:	f003 ff6a 	bl	8004260 <LL_mDelay>
    LL_GPIO_SetOutputPin(PROTECTION_GPIO, PROTECTION_PIN);
 800038c:	4906      	ldr	r1, [pc, #24]	@ (80003a8 <FAULT_5v_HandleMsg+0x4c>)
 800038e:	4807      	ldr	r0, [pc, #28]	@ (80003ac <FAULT_5v_HandleMsg+0x50>)
 8000390:	f7ff ff5a 	bl	8000248 <LL_GPIO_SetOutputPin>
}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}
 8000398:	08006008 	.word	0x08006008
 800039c:	20000cd0 	.word	0x20000cd0
 80003a0:	20000d3d 	.word	0x20000d3d
 80003a4:	20000d3e 	.word	0x20000d3e
 80003a8:	04080008 	.word	0x04080008
 80003ac:	40011800 	.word	0x40011800

080003b0 <FAULT_3v3_HandleMsg>:

void FAULT_3v3_HandleMsg(void){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	printf("reseting the protection gpio, 3V3");
 80003b4:	480d      	ldr	r0, [pc, #52]	@ (80003ec <FAULT_3v3_HandleMsg+0x3c>)
 80003b6:	f004 f903 	bl	80045c0 <iprintf>
	fflush(stdout);
 80003ba:	4b0d      	ldr	r3, [pc, #52]	@ (80003f0 <FAULT_3v3_HandleMsg+0x40>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	689b      	ldr	r3, [r3, #8]
 80003c0:	4618      	mov	r0, r3
 80003c2:	f004 f827 	bl	8004414 <fflush>

	fault_3v3_triggered = 0;
 80003c6:	4b0b      	ldr	r3, [pc, #44]	@ (80003f4 <FAULT_3v3_HandleMsg+0x44>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	701a      	strb	r2, [r3, #0]
    fault_sent = 0;
 80003cc:	4b0a      	ldr	r3, [pc, #40]	@ (80003f8 <FAULT_3v3_HandleMsg+0x48>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	701a      	strb	r2, [r3, #0]

    LL_GPIO_ResetOutputPin(PROTECTION_GPIO, PROTECTION_PIN);
 80003d2:	490a      	ldr	r1, [pc, #40]	@ (80003fc <FAULT_3v3_HandleMsg+0x4c>)
 80003d4:	480a      	ldr	r0, [pc, #40]	@ (8000400 <FAULT_3v3_HandleMsg+0x50>)
 80003d6:	f7ff ff46 	bl	8000266 <LL_GPIO_ResetOutputPin>
    LL_mDelay(20);
 80003da:	2014      	movs	r0, #20
 80003dc:	f003 ff40 	bl	8004260 <LL_mDelay>
    LL_GPIO_SetOutputPin(PROTECTION_GPIO, PROTECTION_PIN);
 80003e0:	4906      	ldr	r1, [pc, #24]	@ (80003fc <FAULT_3v3_HandleMsg+0x4c>)
 80003e2:	4807      	ldr	r0, [pc, #28]	@ (8000400 <FAULT_3v3_HandleMsg+0x50>)
 80003e4:	f7ff ff30 	bl	8000248 <LL_GPIO_SetOutputPin>
}
 80003e8:	bf00      	nop
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	0800602c 	.word	0x0800602c
 80003f0:	20000cd0 	.word	0x20000cd0
 80003f4:	20000d3c 	.word	0x20000d3c
 80003f8:	20000d3e 	.word	0x20000d3e
 80003fc:	04080008 	.word	0x04080008
 8000400:	40011800 	.word	0x40011800

08000404 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	3b01      	subs	r3, #1
 8000412:	4a0a      	ldr	r2, [pc, #40]	@ (800043c <LL_DMA_EnableChannel+0x38>)
 8000414:	5cd3      	ldrb	r3, [r2, r3]
 8000416:	461a      	mov	r2, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4413      	add	r3, r2
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	683a      	ldr	r2, [r7, #0]
 8000420:	3a01      	subs	r2, #1
 8000422:	4906      	ldr	r1, [pc, #24]	@ (800043c <LL_DMA_EnableChannel+0x38>)
 8000424:	5c8a      	ldrb	r2, [r1, r2]
 8000426:	4611      	mov	r1, r2
 8000428:	687a      	ldr	r2, [r7, #4]
 800042a:	440a      	add	r2, r1
 800042c:	f043 0301 	orr.w	r3, r3, #1
 8000430:	6013      	str	r3, [r2, #0]
}
 8000432:	bf00      	nop
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr
 800043c:	08006b98 	.word	0x08006b98

08000440 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	3b01      	subs	r3, #1
 800044e:	4a0a      	ldr	r2, [pc, #40]	@ (8000478 <LL_DMA_DisableChannel+0x38>)
 8000450:	5cd3      	ldrb	r3, [r2, r3]
 8000452:	461a      	mov	r2, r3
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4413      	add	r3, r2
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	683a      	ldr	r2, [r7, #0]
 800045c:	3a01      	subs	r2, #1
 800045e:	4906      	ldr	r1, [pc, #24]	@ (8000478 <LL_DMA_DisableChannel+0x38>)
 8000460:	5c8a      	ldrb	r2, [r1, r2]
 8000462:	4611      	mov	r1, r2
 8000464:	687a      	ldr	r2, [r7, #4]
 8000466:	440a      	add	r2, r1
 8000468:	f023 0301 	bic.w	r3, r3, #1
 800046c:	6013      	str	r3, [r2, #0]
}
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	08006b98 	.word	0x08006b98

0800047c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	60f8      	str	r0, [r7, #12]
 8000484:	60b9      	str	r1, [r7, #8]
 8000486:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	3b01      	subs	r3, #1
 800048c:	4a0b      	ldr	r2, [pc, #44]	@ (80004bc <LL_DMA_SetDataLength+0x40>)
 800048e:	5cd3      	ldrb	r3, [r2, r3]
 8000490:	461a      	mov	r2, r3
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	4413      	add	r3, r2
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	0c1b      	lsrs	r3, r3, #16
 800049a:	041b      	lsls	r3, r3, #16
 800049c:	68ba      	ldr	r2, [r7, #8]
 800049e:	3a01      	subs	r2, #1
 80004a0:	4906      	ldr	r1, [pc, #24]	@ (80004bc <LL_DMA_SetDataLength+0x40>)
 80004a2:	5c8a      	ldrb	r2, [r1, r2]
 80004a4:	4611      	mov	r1, r2
 80004a6:	68fa      	ldr	r2, [r7, #12]
 80004a8:	440a      	add	r2, r1
 80004aa:	4611      	mov	r1, r2
 80004ac:	687a      	ldr	r2, [r7, #4]
 80004ae:	4313      	orrs	r3, r2
 80004b0:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80004b2:	bf00      	nop
 80004b4:	3714      	adds	r7, #20
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	08006b98 	.word	0x08006b98

080004c0 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
 80004cc:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80004ce:	69bb      	ldr	r3, [r7, #24]
 80004d0:	2b10      	cmp	r3, #16
 80004d2:	d114      	bne.n	80004fe <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	3b01      	subs	r3, #1
 80004d8:	4a15      	ldr	r2, [pc, #84]	@ (8000530 <LL_DMA_ConfigAddresses+0x70>)
 80004da:	5cd3      	ldrb	r3, [r2, r3]
 80004dc:	461a      	mov	r2, r3
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	4413      	add	r3, r2
 80004e2:	461a      	mov	r2, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	3b01      	subs	r3, #1
 80004ec:	4a10      	ldr	r2, [pc, #64]	@ (8000530 <LL_DMA_ConfigAddresses+0x70>)
 80004ee:	5cd3      	ldrb	r3, [r2, r3]
 80004f0:	461a      	mov	r2, r3
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	4413      	add	r3, r2
 80004f6:	461a      	mov	r2, r3
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 80004fc:	e013      	b.n	8000526 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	3b01      	subs	r3, #1
 8000502:	4a0b      	ldr	r2, [pc, #44]	@ (8000530 <LL_DMA_ConfigAddresses+0x70>)
 8000504:	5cd3      	ldrb	r3, [r2, r3]
 8000506:	461a      	mov	r2, r3
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	4413      	add	r3, r2
 800050c:	461a      	mov	r2, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	3b01      	subs	r3, #1
 8000516:	4a06      	ldr	r2, [pc, #24]	@ (8000530 <LL_DMA_ConfigAddresses+0x70>)
 8000518:	5cd3      	ldrb	r3, [r2, r3]
 800051a:	461a      	mov	r2, r3
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	4413      	add	r3, r2
 8000520:	461a      	mov	r2, r3
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	60d3      	str	r3, [r2, #12]
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	08006b98 	.word	0x08006b98

08000534 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f043 0201 	orr.w	r2, r3, #1
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	601a      	str	r2, [r3, #0]
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr

08000552 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8000552:	b480      	push	{r7}
 8000554:	b083      	sub	sp, #12
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f023 0201 	bic.w	r2, r3, #1
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	601a      	str	r2, [r3, #0]
}
 8000566:	bf00      	nop
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr

08000570 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	6a1a      	ldr	r2, [r3, #32]
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	431a      	orrs	r2, r3
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	621a      	str	r2, [r3, #32]
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6a1a      	ldr	r2, [r3, #32]
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	43db      	mvns	r3, r3
 80005a2:	401a      	ands	r2, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	621a      	str	r2, [r3, #32]
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr

080005b2 <LL_TIM_EnableDMAReq_CC1>:
  * @rmtoll DIER         CC1DE         LL_TIM_EnableDMAReq_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_CC1(TIM_TypeDef *TIMx)
{
 80005b2:	b480      	push	{r7}
 80005b4:	b083      	sub	sp, #12
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	60da      	str	r2, [r3, #12]
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <LL_TIM_DisableDMAReq_CC1>:
  * @rmtoll DIER         CC1DE         LL_TIM_DisableDMAReq_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableDMAReq_CC1(TIM_TypeDef *TIMx)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	60da      	str	r2, [r3, #12]
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr
	...

080005f0 <addToPin>:

LedEntry LedList[NUM_PIXELS];
uint8_t numActiveLeds = 0;


void addToPin(uint8_t pin, RGB_t color) {
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	6039      	str	r1, [r7, #0]
 80005fa:	71fb      	strb	r3, [r7, #7]
    if (pin == 0 || pin > NUM_PIXELS || numActiveLeds >= NUM_PIXELS) {
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d034      	beq.n	800066c <addToPin+0x7c>
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	2b78      	cmp	r3, #120	@ 0x78
 8000606:	d831      	bhi.n	800066c <addToPin+0x7c>
 8000608:	4b1b      	ldr	r3, [pc, #108]	@ (8000678 <addToPin+0x88>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b77      	cmp	r3, #119	@ 0x77
 800060e:	d82d      	bhi.n	800066c <addToPin+0x7c>
        return;
    }

    // Update if pin already exists
    for (uint8_t i = 0; i < numActiveLeds; i++) {
 8000610:	2300      	movs	r3, #0
 8000612:	73fb      	strb	r3, [r7, #15]
 8000614:	e010      	b.n	8000638 <addToPin+0x48>
        if (LedList[i].pin == pin) {
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	4a18      	ldr	r2, [pc, #96]	@ (800067c <addToPin+0x8c>)
 800061a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800061e:	79fa      	ldrb	r2, [r7, #7]
 8000620:	429a      	cmp	r2, r3
 8000622:	d106      	bne.n	8000632 <addToPin+0x42>
            LedList[i].color = color;
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	4a15      	ldr	r2, [pc, #84]	@ (800067c <addToPin+0x8c>)
 8000628:	00db      	lsls	r3, r3, #3
 800062a:	4413      	add	r3, r2
 800062c:	683a      	ldr	r2, [r7, #0]
 800062e:	605a      	str	r2, [r3, #4]
            return;
 8000630:	e01d      	b.n	800066e <addToPin+0x7e>
    for (uint8_t i = 0; i < numActiveLeds; i++) {
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	3301      	adds	r3, #1
 8000636:	73fb      	strb	r3, [r7, #15]
 8000638:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <addToPin+0x88>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	7bfa      	ldrb	r2, [r7, #15]
 800063e:	429a      	cmp	r2, r3
 8000640:	d3e9      	bcc.n	8000616 <addToPin+0x26>
        }
    }

    // Add new entry
    LedList[numActiveLeds].pin = pin;
 8000642:	4b0d      	ldr	r3, [pc, #52]	@ (8000678 <addToPin+0x88>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	4619      	mov	r1, r3
 8000648:	4a0c      	ldr	r2, [pc, #48]	@ (800067c <addToPin+0x8c>)
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	f802 3031 	strb.w	r3, [r2, r1, lsl #3]
    LedList[numActiveLeds].color = color;
 8000650:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <addToPin+0x88>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	4a09      	ldr	r2, [pc, #36]	@ (800067c <addToPin+0x8c>)
 8000656:	00db      	lsls	r3, r3, #3
 8000658:	4413      	add	r3, r2
 800065a:	683a      	ldr	r2, [r7, #0]
 800065c:	605a      	str	r2, [r3, #4]
    numActiveLeds++;
 800065e:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <addToPin+0x88>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	3301      	adds	r3, #1
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b04      	ldr	r3, [pc, #16]	@ (8000678 <addToPin+0x88>)
 8000668:	701a      	strb	r2, [r3, #0]
 800066a:	e000      	b.n	800066e <addToPin+0x7e>
        return;
 800066c:	bf00      	nop
}
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	20003ff8 	.word	0x20003ff8
 800067c:	20003c38 	.word	0x20003c38

08000680 <removeFromPin>:

void removeFromPin(uint8_t pin) {
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
//    for (uint8_t k = 0; k < numActiveLeds; k++) {
//        printf("  Index %d: Pin %d -> R:%d G:%d B:%d\n", k, LedList[k].pin,
//               LedList[k].color.color.r, LedList[k].color.color.g, LedList[k].color.color.b);
//    }

    for (uint8_t i = 0; i < numActiveLeds; i++) {
 800068a:	2300      	movs	r3, #0
 800068c:	73fb      	strb	r3, [r7, #15]
 800068e:	e034      	b.n	80006fa <removeFromPin+0x7a>
        if (LedList[i].pin == pin) {
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	4a1e      	ldr	r2, [pc, #120]	@ (800070c <removeFromPin+0x8c>)
 8000694:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000698:	79fa      	ldrb	r2, [r7, #7]
 800069a:	429a      	cmp	r2, r3
 800069c:	d12a      	bne.n	80006f4 <removeFromPin+0x74>
//            printf("Found pin %d at index %d, removing...\n", pin, i);
            for (uint8_t j = i; j < numActiveLeds - 1; j++) {
 800069e:	7bfb      	ldrb	r3, [r7, #15]
 80006a0:	73bb      	strb	r3, [r7, #14]
 80006a2:	e00f      	b.n	80006c4 <removeFromPin+0x44>
//                printf("Shifting index %d -> index %d (Pin %d)\n", j + 1, j, LedList[j + 1].pin);
                LedList[j] = LedList[j + 1];
 80006a4:	7bbb      	ldrb	r3, [r7, #14]
 80006a6:	1c5a      	adds	r2, r3, #1
 80006a8:	7bbb      	ldrb	r3, [r7, #14]
 80006aa:	4818      	ldr	r0, [pc, #96]	@ (800070c <removeFromPin+0x8c>)
 80006ac:	4917      	ldr	r1, [pc, #92]	@ (800070c <removeFromPin+0x8c>)
 80006ae:	00db      	lsls	r3, r3, #3
 80006b0:	4403      	add	r3, r0
 80006b2:	00d2      	lsls	r2, r2, #3
 80006b4:	440a      	add	r2, r1
 80006b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ba:	e883 0003 	stmia.w	r3, {r0, r1}
            for (uint8_t j = i; j < numActiveLeds - 1; j++) {
 80006be:	7bbb      	ldrb	r3, [r7, #14]
 80006c0:	3301      	adds	r3, #1
 80006c2:	73bb      	strb	r3, [r7, #14]
 80006c4:	7bba      	ldrb	r2, [r7, #14]
 80006c6:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <removeFromPin+0x90>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	3b01      	subs	r3, #1
 80006cc:	429a      	cmp	r2, r3
 80006ce:	dbe9      	blt.n	80006a4 <removeFromPin+0x24>
            }
            numActiveLeds--;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <removeFromPin+0x90>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	3b01      	subs	r3, #1
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000710 <removeFromPin+0x90>)
 80006da:	701a      	strb	r2, [r3, #0]
//            printf("LED removed. Updated LED list:\n");
            for (uint8_t k = 0; k < numActiveLeds; k++) {
 80006dc:	2300      	movs	r3, #0
 80006de:	737b      	strb	r3, [r7, #13]
 80006e0:	e002      	b.n	80006e8 <removeFromPin+0x68>
 80006e2:	7b7b      	ldrb	r3, [r7, #13]
 80006e4:	3301      	adds	r3, #1
 80006e6:	737b      	strb	r3, [r7, #13]
 80006e8:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <removeFromPin+0x90>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	7b7a      	ldrb	r2, [r7, #13]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d3f7      	bcc.n	80006e2 <removeFromPin+0x62>
//                printf("  Index %d: Pin %d -> R:%d G:%d B:%d\n", k, LedList[k].pin,
//                       LedList[k].color.color.r, LedList[k].color.color.g, LedList[k].color.color.b);
            }
//            printf("Remaining active LEDs: %d\n", numActiveLeds);
            return;
 80006f2:	e007      	b.n	8000704 <removeFromPin+0x84>
    for (uint8_t i = 0; i < numActiveLeds; i++) {
 80006f4:	7bfb      	ldrb	r3, [r7, #15]
 80006f6:	3301      	adds	r3, #1
 80006f8:	73fb      	strb	r3, [r7, #15]
 80006fa:	4b05      	ldr	r3, [pc, #20]	@ (8000710 <removeFromPin+0x90>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	7bfa      	ldrb	r2, [r7, #15]
 8000700:	429a      	cmp	r2, r3
 8000702:	d3c5      	bcc.n	8000690 <removeFromPin+0x10>
        }
    }
//    printf("Pin %d not found in active list. No changes made.\n", pin);
}
 8000704:	3714      	adds	r7, #20
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	20003c38 	.word	0x20003c38
 8000710:	20003ff8 	.word	0x20003ff8

08000714 <clearLeds>:




void clearLeds(void) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
    uint32_t *pBuff = dmaBuffer;
 800071a:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <clearLeds+0x54>)
 800071c:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < NUM_PIXELS * 24; i++) {
 800071e:	2300      	movs	r3, #0
 8000720:	603b      	str	r3, [r7, #0]
 8000722:	e007      	b.n	8000734 <clearLeds+0x20>
        *pBuff++ = NEOPIXEL_ZERO;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	1d1a      	adds	r2, r3, #4
 8000728:	607a      	str	r2, [r7, #4]
 800072a:	221d      	movs	r2, #29
 800072c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < NUM_PIXELS * 24; i++) {
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	3301      	adds	r3, #1
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	f5b3 6f34 	cmp.w	r3, #2880	@ 0xb40
 800073a:	dbf3      	blt.n	8000724 <clearLeds+0x10>
    }

    dmaBuffer[DMA_BUFF_SIZE - 1] = 0;
 800073c:	4b0a      	ldr	r3, [pc, #40]	@ (8000768 <clearLeds+0x54>)
 800073e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000742:	461a      	mov	r2, r3
 8000744:	2300      	movs	r3, #0
 8000746:	f8c2 3d00 	str.w	r3, [r2, #3328]	@ 0xd00

    PWM_Start_DMA(TIM2, LL_TIM_CHANNEL_CH1, dmaBuffer, DMA_BUFF_SIZE);
 800074a:	f640 3341 	movw	r3, #2881	@ 0xb41
 800074e:	4a06      	ldr	r2, [pc, #24]	@ (8000768 <clearLeds+0x54>)
 8000750:	2101      	movs	r1, #1
 8000752:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000756:	f000 f8b3 	bl	80008c0 <PWM_Start_DMA>
    LL_mDelay(10);
 800075a:	200a      	movs	r0, #10
 800075c:	f003 fd80 	bl	8004260 <LL_mDelay>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000f34 	.word	0x20000f34

0800076c <sendPixelData>:

void sendPixelData() {
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
    LL_mDelay(10);
 8000772:	200a      	movs	r0, #10
 8000774:	f003 fd74 	bl	8004260 <LL_mDelay>
    if (numActiveLeds == 0) {
 8000778:	4b4d      	ldr	r3, [pc, #308]	@ (80008b0 <sendPixelData+0x144>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d102      	bne.n	8000786 <sendPixelData+0x1a>
        clearLeds();
 8000780:	f7ff ffc8 	bl	8000714 <clearLeds>
        return;
 8000784:	e091      	b.n	80008aa <sendPixelData+0x13e>
    }

//     Reset pixel buffer
    for (int i = 0; i < NUM_PIXELS; i++) {
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
 800078a:	e007      	b.n	800079c <sendPixelData+0x30>
        pixel[i].data = 0;
 800078c:	4a49      	ldr	r2, [pc, #292]	@ (80008b4 <sendPixelData+0x148>)
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	2100      	movs	r1, #0
 8000792:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < NUM_PIXELS; i++) {
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	3301      	adds	r3, #1
 800079a:	61fb      	str	r3, [r7, #28]
 800079c:	69fb      	ldr	r3, [r7, #28]
 800079e:	2b77      	cmp	r3, #119	@ 0x77
 80007a0:	ddf4      	ble.n	800078c <sendPixelData+0x20>
    }

    // Copy assigned LED colors
    // Copy assigned LED colors
    for (uint8_t i = 0; i < numActiveLeds; i++) {
 80007a2:	2300      	movs	r3, #0
 80007a4:	76fb      	strb	r3, [r7, #27]
 80007a6:	e041      	b.n	800082c <sendPixelData+0xc0>
        uint8_t pin = LedList[i].pin;
 80007a8:	7efb      	ldrb	r3, [r7, #27]
 80007aa:	4a43      	ldr	r2, [pc, #268]	@ (80008b8 <sendPixelData+0x14c>)
 80007ac:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80007b0:	71fb      	strb	r3, [r7, #7]
        if (pin > 0 && pin <= NUM_PIXELS) {
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d036      	beq.n	8000826 <sendPixelData+0xba>
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	2b78      	cmp	r3, #120	@ 0x78
 80007bc:	d833      	bhi.n	8000826 <sendPixelData+0xba>
            pixel[pin - 1] = LedList[i].color;
 80007be:	7efb      	ldrb	r3, [r7, #27]
 80007c0:	79fa      	ldrb	r2, [r7, #7]
 80007c2:	3a01      	subs	r2, #1
 80007c4:	493b      	ldr	r1, [pc, #236]	@ (80008b4 <sendPixelData+0x148>)
 80007c6:	483c      	ldr	r0, [pc, #240]	@ (80008b8 <sendPixelData+0x14c>)
 80007c8:	00db      	lsls	r3, r3, #3
 80007ca:	4403      	add	r3, r0
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
            pixel[pin - 1].color.r >>= 2;
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	3b01      	subs	r3, #1
 80007d6:	4a37      	ldr	r2, [pc, #220]	@ (80008b4 <sendPixelData+0x148>)
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	4413      	add	r3, r2
 80007dc:	785a      	ldrb	r2, [r3, #1]
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	3b01      	subs	r3, #1
 80007e2:	0892      	lsrs	r2, r2, #2
 80007e4:	b2d1      	uxtb	r1, r2
 80007e6:	4a33      	ldr	r2, [pc, #204]	@ (80008b4 <sendPixelData+0x148>)
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	4413      	add	r3, r2
 80007ec:	460a      	mov	r2, r1
 80007ee:	705a      	strb	r2, [r3, #1]
            pixel[pin - 1].color.g >>= 2;
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	4a2f      	ldr	r2, [pc, #188]	@ (80008b4 <sendPixelData+0x148>)
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	4413      	add	r3, r2
 80007fa:	789a      	ldrb	r2, [r3, #2]
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	3b01      	subs	r3, #1
 8000800:	0892      	lsrs	r2, r2, #2
 8000802:	b2d1      	uxtb	r1, r2
 8000804:	4a2b      	ldr	r2, [pc, #172]	@ (80008b4 <sendPixelData+0x148>)
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	4413      	add	r3, r2
 800080a:	460a      	mov	r2, r1
 800080c:	709a      	strb	r2, [r3, #2]
            pixel[pin - 1].color.b >>= 2;
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	3b01      	subs	r3, #1
 8000812:	4a28      	ldr	r2, [pc, #160]	@ (80008b4 <sendPixelData+0x148>)
 8000814:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	3b01      	subs	r3, #1
 800081c:	0892      	lsrs	r2, r2, #2
 800081e:	b2d1      	uxtb	r1, r2
 8000820:	4a24      	ldr	r2, [pc, #144]	@ (80008b4 <sendPixelData+0x148>)
 8000822:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    for (uint8_t i = 0; i < numActiveLeds; i++) {
 8000826:	7efb      	ldrb	r3, [r7, #27]
 8000828:	3301      	adds	r3, #1
 800082a:	76fb      	strb	r3, [r7, #27]
 800082c:	4b20      	ldr	r3, [pc, #128]	@ (80008b0 <sendPixelData+0x144>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	7efa      	ldrb	r2, [r7, #27]
 8000832:	429a      	cmp	r2, r3
 8000834:	d3b8      	bcc.n	80007a8 <sendPixelData+0x3c>
    }



    // Transfer pixel data into DMA buffer
    uint32_t *pBuff = dmaBuffer;
 8000836:	4b21      	ldr	r3, [pc, #132]	@ (80008bc <sendPixelData+0x150>)
 8000838:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < NUM_PIXELS; i++) {
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	e01f      	b.n	8000880 <sendPixelData+0x114>
//				printf("%d", bit);
//			}
//			printf("\n");
//		}

        for (int j = 23; j >= 0; j--) {
 8000840:	2317      	movs	r3, #23
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	e016      	b.n	8000874 <sendPixelData+0x108>
        	uint32_t bit = (pixel[i].data >> j) & 0x01 ? NEOPIXEL_ONE : NEOPIXEL_ZERO;
 8000846:	4a1b      	ldr	r2, [pc, #108]	@ (80008b4 <sendPixelData+0x148>)
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	fa22 f303 	lsr.w	r3, r2, r3
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <sendPixelData+0xf4>
 800085c:	233a      	movs	r3, #58	@ 0x3a
 800085e:	e000      	b.n	8000862 <sendPixelData+0xf6>
 8000860:	231d      	movs	r3, #29
 8000862:	60bb      	str	r3, [r7, #8]

        	*pBuff++ = bit;
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	1d1a      	adds	r2, r3, #4
 8000868:	617a      	str	r2, [r7, #20]
 800086a:	68ba      	ldr	r2, [r7, #8]
 800086c:	601a      	str	r2, [r3, #0]
        for (int j = 23; j >= 0; j--) {
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3b01      	subs	r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2b00      	cmp	r3, #0
 8000878:	dae5      	bge.n	8000846 <sendPixelData+0xda>
    for (int i = 0; i < NUM_PIXELS; i++) {
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	3301      	adds	r3, #1
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	2b77      	cmp	r3, #119	@ 0x77
 8000884:	dddc      	ble.n	8000840 <sendPixelData+0xd4>
//        	dmaBuffer[i * 24 + j] = bit;
        }
    }

    dmaBuffer[DMA_BUFF_SIZE - 1] = 0;
 8000886:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <sendPixelData+0x150>)
 8000888:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800088c:	461a      	mov	r2, r3
 800088e:	2300      	movs	r3, #0
 8000890:	f8c2 3d00 	str.w	r3, [r2, #3328]	@ 0xd00
  	PWM_Start_DMA(TIM2, LL_TIM_CHANNEL_CH1, dmaBuffer, DMA_BUFF_SIZE);
 8000894:	f640 3341 	movw	r3, #2881	@ 0xb41
 8000898:	4a08      	ldr	r2, [pc, #32]	@ (80008bc <sendPixelData+0x150>)
 800089a:	2101      	movs	r1, #1
 800089c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80008a0:	f000 f80e 	bl	80008c0 <PWM_Start_DMA>

    LL_mDelay(10);
 80008a4:	200a      	movs	r0, #10
 80008a6:	f003 fcdb 	bl	8004260 <LL_mDelay>
}
 80008aa:	3720      	adds	r7, #32
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20003ff8 	.word	0x20003ff8
 80008b4:	20000d54 	.word	0x20000d54
 80008b8:	20003c38 	.word	0x20003c38
 80008bc:	20000f34 	.word	0x20000f34

080008c0 <PWM_Start_DMA>:




void PWM_Start_DMA(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t *buffer, uint32_t size)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af02      	add	r7, sp, #8
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
 80008cc:	603b      	str	r3, [r7, #0]
    // 1. Configure DMA source and destination
    LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_5,
 80008ce:	687a      	ldr	r2, [r7, #4]
                           (uint32_t)buffer,                      // Memory Address (source)
                           (uint32_t)&TIMx->CCR1,                 // Peripheral Address (destination)
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	3334      	adds	r3, #52	@ 0x34
    LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_5,
 80008d4:	4619      	mov	r1, r3
 80008d6:	2310      	movs	r3, #16
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	460b      	mov	r3, r1
 80008dc:	2105      	movs	r1, #5
 80008de:	480d      	ldr	r0, [pc, #52]	@ (8000914 <PWM_Start_DMA+0x54>)
 80008e0:	f7ff fdee 	bl	80004c0 <LL_DMA_ConfigAddresses>
                           LL_DMA_DIRECTION_MEMORY_TO_PERIPH);    // Memory-to-Peripheral

    // 2. Set number of data items
    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_5, size);
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	2105      	movs	r1, #5
 80008e8:	480a      	ldr	r0, [pc, #40]	@ (8000914 <PWM_Start_DMA+0x54>)
 80008ea:	f7ff fdc7 	bl	800047c <LL_DMA_SetDataLength>

    // 4. Enable DMA Stream
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_5);
 80008ee:	2105      	movs	r1, #5
 80008f0:	4808      	ldr	r0, [pc, #32]	@ (8000914 <PWM_Start_DMA+0x54>)
 80008f2:	f7ff fd87 	bl	8000404 <LL_DMA_EnableChannel>

    // 5. Enable TIM2 DMA request for CC1
    LL_TIM_EnableDMAReq_CC1(TIMx);
 80008f6:	68f8      	ldr	r0, [r7, #12]
 80008f8:	f7ff fe5b 	bl	80005b2 <LL_TIM_EnableDMAReq_CC1>

    // 6. Enable TIM2 Channel 1 (PWM mode must already be configured)
    LL_TIM_CC_EnableChannel(TIMx, Channel);
 80008fc:	68b9      	ldr	r1, [r7, #8]
 80008fe:	68f8      	ldr	r0, [r7, #12]
 8000900:	f7ff fe36 	bl	8000570 <LL_TIM_CC_EnableChannel>

    // 7. Start Timer
    LL_TIM_EnableCounter(TIMx);
 8000904:	68f8      	ldr	r0, [r7, #12]
 8000906:	f7ff fe15 	bl	8000534 <LL_TIM_EnableCounter>
}
 800090a:	bf00      	nop
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40020000 	.word	0x40020000

08000918 <LL_TIM_PWM_PulseFinishedCallback>:

void LL_TIM_PWM_PulseFinishedCallback(TIM_TypeDef *TIMx)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	LL_TIM_DisableDMAReq_CC1(TIMx);
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff fe55 	bl	80005d0 <LL_TIM_DisableDMAReq_CC1>
	LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_5);
 8000926:	2105      	movs	r1, #5
 8000928:	4806      	ldr	r0, [pc, #24]	@ (8000944 <LL_TIM_PWM_PulseFinishedCallback+0x2c>)
 800092a:	f7ff fd89 	bl	8000440 <LL_DMA_DisableChannel>

	LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH1);
 800092e:	2101      	movs	r1, #1
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff fe2d 	bl	8000590 <LL_TIM_CC_DisableChannel>
	LL_TIM_DisableCounter(TIMx);
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f7ff fe0b 	bl	8000552 <LL_TIM_DisableCounter>
}
 800093c:	bf00      	nop
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40020000 	.word	0x40020000

08000948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000958:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000964:	4013      	ands	r3, r2
 8000966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000970:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000974:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097a:	4a04      	ldr	r2, [pc, #16]	@ (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	60d3      	str	r3, [r2, #12]
}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000994:	4b04      	ldr	r3, [pc, #16]	@ (80009a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	0a1b      	lsrs	r3, r3, #8
 800099a:	f003 0307 	and.w	r3, r3, #7
}
 800099e:	4618      	mov	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	db0b      	blt.n	80009d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	f003 021f 	and.w	r2, r3, #31
 80009c4:	4906      	ldr	r1, [pc, #24]	@ (80009e0 <__NVIC_EnableIRQ+0x34>)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	095b      	lsrs	r3, r3, #5
 80009cc:	2001      	movs	r0, #1
 80009ce:	fa00 f202 	lsl.w	r2, r0, r2
 80009d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	e000e100 	.word	0xe000e100

080009e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	6039      	str	r1, [r7, #0]
 80009ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	db0a      	blt.n	8000a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	490c      	ldr	r1, [pc, #48]	@ (8000a30 <__NVIC_SetPriority+0x4c>)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	0112      	lsls	r2, r2, #4
 8000a04:	b2d2      	uxtb	r2, r2
 8000a06:	440b      	add	r3, r1
 8000a08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a0c:	e00a      	b.n	8000a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4908      	ldr	r1, [pc, #32]	@ (8000a34 <__NVIC_SetPriority+0x50>)
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	f003 030f 	and.w	r3, r3, #15
 8000a1a:	3b04      	subs	r3, #4
 8000a1c:	0112      	lsls	r2, r2, #4
 8000a1e:	b2d2      	uxtb	r2, r2
 8000a20:	440b      	add	r3, r1
 8000a22:	761a      	strb	r2, [r3, #24]
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000e100 	.word	0xe000e100
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b089      	sub	sp, #36	@ 0x24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	f1c3 0307 	rsb	r3, r3, #7
 8000a52:	2b04      	cmp	r3, #4
 8000a54:	bf28      	it	cs
 8000a56:	2304      	movcs	r3, #4
 8000a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	2b06      	cmp	r3, #6
 8000a60:	d902      	bls.n	8000a68 <NVIC_EncodePriority+0x30>
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3b03      	subs	r3, #3
 8000a66:	e000      	b.n	8000a6a <NVIC_EncodePriority+0x32>
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	43da      	mvns	r2, r3
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a80:	f04f 31ff 	mov.w	r1, #4294967295
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8a:	43d9      	mvns	r1, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a90:	4313      	orrs	r3, r2
         );
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3724      	adds	r7, #36	@ 0x24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr

08000a9c <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b089      	sub	sp, #36	@ 0x24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	332c      	adds	r3, #44	@ 0x2c
 8000aac:	4619      	mov	r1, r3
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8000ab4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000ab8:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	fa92 f2a2 	rbit	r2, r2
 8000ac0:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ac2:	697a      	ldr	r2, [r7, #20]
 8000ac4:	fab2 f282 	clz	r2, r2
 8000ac8:	b2d2      	uxtb	r2, r2
 8000aca:	40d3      	lsrs	r3, r2
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	440b      	add	r3, r1
 8000ad0:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	f003 031f 	and.w	r3, r3, #31
 8000adc:	211f      	movs	r1, #31
 8000ade:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	401a      	ands	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f003 011f 	and.w	r1, r3, #31
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	f003 031f 	and.w	r3, r3, #31
 8000af2:	fa01 f303 	lsl.w	r3, r1, r3
 8000af6:	431a      	orrs	r2, r3
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000afc:	bf00      	nop
 8000afe:	3724      	adds	r7, #36	@ 0x24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr

08000b06 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b08d      	sub	sp, #52	@ 0x34
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	60f8      	str	r0, [r7, #12]
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	330c      	adds	r3, #12
 8000b16:	4619      	mov	r1, r3
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b1e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b24:	69ba      	ldr	r2, [r7, #24]
 8000b26:	fa92 f2a2 	rbit	r2, r2
 8000b2a:	617a      	str	r2, [r7, #20]
  return result;
 8000b2c:	697a      	ldr	r2, [r7, #20]
 8000b2e:	fab2 f282 	clz	r2, r2
 8000b32:	b2d2      	uxtb	r2, r2
 8000b34:	40d3      	lsrs	r3, r2
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	440b      	add	r3, r1
 8000b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  MODIFY_REG(*preg,
 8000b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8000b46:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8000b4a:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b4c:	6a39      	ldr	r1, [r7, #32]
 8000b4e:	fa91 f1a1 	rbit	r1, r1
 8000b52:	61f9      	str	r1, [r7, #28]
  return result;
 8000b54:	69f9      	ldr	r1, [r7, #28]
 8000b56:	fab1 f181 	clz	r1, r1
 8000b5a:	b2c9      	uxtb	r1, r1
 8000b5c:	40cb      	lsrs	r3, r1
 8000b5e:	2107      	movs	r1, #7
 8000b60:	fa01 f303 	lsl.w	r3, r1, r3
 8000b64:	43db      	mvns	r3, r3
 8000b66:	401a      	ands	r2, r3
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8000b6e:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8000b72:	62b9      	str	r1, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000b76:	fa91 f1a1 	rbit	r1, r1
 8000b7a:	6279      	str	r1, [r7, #36]	@ 0x24
  return result;
 8000b7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000b7e:	fab1 f181 	clz	r1, r1
 8000b82:	b2c9      	uxtb	r1, r1
 8000b84:	40cb      	lsrs	r3, r1
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8c:	431a      	orrs	r2, r3
 8000b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b90:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8000b92:	bf00      	nop
 8000b94:	3734      	adds	r7, #52	@ 0x34
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr

08000b9c <LL_DMA_SetDataTransferDirection>:
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	4a0c      	ldr	r2, [pc, #48]	@ (8000be0 <LL_DMA_SetDataTransferDirection+0x44>)
 8000bae:	5cd3      	ldrb	r3, [r2, r3]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000bbc:	f023 0310 	bic.w	r3, r3, #16
 8000bc0:	68ba      	ldr	r2, [r7, #8]
 8000bc2:	3a01      	subs	r2, #1
 8000bc4:	4906      	ldr	r1, [pc, #24]	@ (8000be0 <LL_DMA_SetDataTransferDirection+0x44>)
 8000bc6:	5c8a      	ldrb	r2, [r1, r2]
 8000bc8:	4611      	mov	r1, r2
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	440a      	add	r2, r1
 8000bce:	4611      	mov	r1, r2
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	600b      	str	r3, [r1, #0]
}
 8000bd6:	bf00      	nop
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	08006ba0 	.word	0x08006ba0

08000be4 <LL_DMA_SetMode>:
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	4a0b      	ldr	r2, [pc, #44]	@ (8000c24 <LL_DMA_SetMode+0x40>)
 8000bf6:	5cd3      	ldrb	r3, [r2, r3]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f023 0220 	bic.w	r2, r3, #32
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	4906      	ldr	r1, [pc, #24]	@ (8000c24 <LL_DMA_SetMode+0x40>)
 8000c0a:	5ccb      	ldrb	r3, [r1, r3]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	440b      	add	r3, r1
 8000c12:	4619      	mov	r1, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	600b      	str	r3, [r1, #0]
}
 8000c1a:	bf00      	nop
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	08006ba0 	.word	0x08006ba0

08000c28 <LL_DMA_SetPeriphIncMode>:
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	4a0b      	ldr	r2, [pc, #44]	@ (8000c68 <LL_DMA_SetPeriphIncMode+0x40>)
 8000c3a:	5cd3      	ldrb	r3, [r2, r3]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	4413      	add	r3, r2
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	4906      	ldr	r1, [pc, #24]	@ (8000c68 <LL_DMA_SetPeriphIncMode+0x40>)
 8000c4e:	5ccb      	ldrb	r3, [r1, r3]
 8000c50:	4619      	mov	r1, r3
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	440b      	add	r3, r1
 8000c56:	4619      	mov	r1, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	600b      	str	r3, [r1, #0]
}
 8000c5e:	bf00      	nop
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	08006ba0 	.word	0x08006ba0

08000c6c <LL_DMA_SetMemoryIncMode>:
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	4a0b      	ldr	r2, [pc, #44]	@ (8000cac <LL_DMA_SetMemoryIncMode+0x40>)
 8000c7e:	5cd3      	ldrb	r3, [r2, r3]
 8000c80:	461a      	mov	r2, r3
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	4413      	add	r3, r2
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	4906      	ldr	r1, [pc, #24]	@ (8000cac <LL_DMA_SetMemoryIncMode+0x40>)
 8000c92:	5ccb      	ldrb	r3, [r1, r3]
 8000c94:	4619      	mov	r1, r3
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	440b      	add	r3, r1
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	600b      	str	r3, [r1, #0]
}
 8000ca2:	bf00      	nop
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr
 8000cac:	08006ba0 	.word	0x08006ba0

08000cb0 <LL_DMA_SetPeriphSize>:
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	4a0b      	ldr	r2, [pc, #44]	@ (8000cf0 <LL_DMA_SetPeriphSize+0x40>)
 8000cc2:	5cd3      	ldrb	r3, [r2, r3]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	4413      	add	r3, r2
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	4906      	ldr	r1, [pc, #24]	@ (8000cf0 <LL_DMA_SetPeriphSize+0x40>)
 8000cd6:	5ccb      	ldrb	r3, [r1, r3]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	440b      	add	r3, r1
 8000cde:	4619      	mov	r1, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	600b      	str	r3, [r1, #0]
}
 8000ce6:	bf00      	nop
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	08006ba0 	.word	0x08006ba0

08000cf4 <LL_DMA_SetMemorySize>:
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	4a0b      	ldr	r2, [pc, #44]	@ (8000d34 <LL_DMA_SetMemorySize+0x40>)
 8000d06:	5cd3      	ldrb	r3, [r2, r3]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	4906      	ldr	r1, [pc, #24]	@ (8000d34 <LL_DMA_SetMemorySize+0x40>)
 8000d1a:	5ccb      	ldrb	r3, [r1, r3]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	440b      	add	r3, r1
 8000d22:	4619      	mov	r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	600b      	str	r3, [r1, #0]
}
 8000d2a:	bf00      	nop
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr
 8000d34:	08006ba0 	.word	0x08006ba0

08000d38 <LL_DMA_SetChannelPriorityLevel>:
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	4a0b      	ldr	r2, [pc, #44]	@ (8000d78 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000d4a:	5cd3      	ldrb	r3, [r2, r3]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	4413      	add	r3, r2
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	4906      	ldr	r1, [pc, #24]	@ (8000d78 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000d5e:	5ccb      	ldrb	r3, [r1, r3]
 8000d60:	4619      	mov	r1, r3
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	440b      	add	r3, r1
 8000d66:	4619      	mov	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	600b      	str	r3, [r1, #0]
}
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr
 8000d78:	08006ba0 	.word	0x08006ba0

08000d7c <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000db4 <LL_DMA_EnableIT_TC+0x38>)
 8000d8c:	5cd3      	ldrb	r3, [r2, r3]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4413      	add	r3, r2
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	683a      	ldr	r2, [r7, #0]
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	4906      	ldr	r1, [pc, #24]	@ (8000db4 <LL_DMA_EnableIT_TC+0x38>)
 8000d9c:	5c8a      	ldrb	r2, [r1, r2]
 8000d9e:	4611      	mov	r1, r2
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	440a      	add	r2, r1
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	6013      	str	r3, [r2, #0]
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr
 8000db4:	08006ba0 	.word	0x08006ba0

08000db8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000dbc:	4b04      	ldr	r3, [pc, #16]	@ (8000dd0 <LL_RCC_HSE_Enable+0x18>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a03      	ldr	r2, [pc, #12]	@ (8000dd0 <LL_RCC_HSE_Enable+0x18>)
 8000dc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dc6:	6013      	str	r3, [r2, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000dd8:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <LL_RCC_HSE_IsReady+0x20>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000de0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000de4:	bf0c      	ite	eq
 8000de6:	2301      	moveq	r3, #1
 8000de8:	2300      	movne	r3, #0
 8000dea:	b2db      	uxtb	r3, r3
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	40021000 	.word	0x40021000

08000df8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000e00:	4b06      	ldr	r3, [pc, #24]	@ (8000e1c <LL_RCC_SetSysClkSource+0x24>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f023 0203 	bic.w	r2, r3, #3
 8000e08:	4904      	ldr	r1, [pc, #16]	@ (8000e1c <LL_RCC_SetSysClkSource+0x24>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	604b      	str	r3, [r1, #4]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	40021000 	.word	0x40021000

08000e20 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000e24:	4b03      	ldr	r3, [pc, #12]	@ (8000e34 <LL_RCC_GetSysClkSource+0x14>)
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 030c 	and.w	r3, r3, #12
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr
 8000e34:	40021000 	.word	0x40021000

08000e38 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000e40:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <LL_RCC_SetAHBPrescaler+0x24>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e48:	4904      	ldr	r1, [pc, #16]	@ (8000e5c <LL_RCC_SetAHBPrescaler+0x24>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	604b      	str	r3, [r1, #4]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40021000 	.word	0x40021000

08000e60 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000e68:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000e70:	4904      	ldr	r1, [pc, #16]	@ (8000e84 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	604b      	str	r3, [r1, #4]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40021000 	.word	0x40021000

08000e88 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000e90:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <LL_RCC_SetAPB2Prescaler+0x24>)
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000e98:	4904      	ldr	r1, [pc, #16]	@ (8000eac <LL_RCC_SetAPB2Prescaler+0x24>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	604b      	str	r3, [r1, #4]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	40021000 	.word	0x40021000

08000eb0 <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8000eb8:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <LL_RCC_SetADCClockSource+0x24>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000ec0:	4904      	ldr	r1, [pc, #16]	@ (8000ed4 <LL_RCC_SetADCClockSource+0x24>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	604b      	str	r3, [r1, #4]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000edc:	4b04      	ldr	r3, [pc, #16]	@ (8000ef0 <LL_RCC_PLL_Enable+0x18>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a03      	ldr	r2, [pc, #12]	@ (8000ef0 <LL_RCC_PLL_Enable+0x18>)
 8000ee2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ee6:	6013      	str	r3, [r2, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000ef8:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <LL_RCC_PLL_IsReady+0x20>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000f04:	bf0c      	ite	eq
 8000f06:	2301      	moveq	r3, #1
 8000f08:	2300      	movne	r3, #0
 8000f0a:	b2db      	uxtb	r3, r3
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	40021000 	.word	0x40021000

08000f18 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8000f22:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <LL_RCC_PLL_ConfigDomain_SYS+0x50>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	430b      	orrs	r3, r1
 8000f34:	490c      	ldr	r1, [pc, #48]	@ (8000f68 <LL_RCC_PLL_ConfigDomain_SYS+0x50>)
 8000f36:	4313      	orrs	r3, r2
 8000f38:	604b      	str	r3, [r1, #4]
             (Source & (RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE)) | PLLMul);
#if defined(RCC_CFGR2_PREDIV1)
#if defined(RCC_CFGR2_PREDIV1SRC)
  MODIFY_REG(RCC->CFGR2, (RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC),
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <LL_RCC_PLL_ConfigDomain_SYS+0x50>)
 8000f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f42:	f023 030f 	bic.w	r3, r3, #15
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	f002 010f 	and.w	r1, r2, #15
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	0912      	lsrs	r2, r2, #4
 8000f50:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8000f54:	430a      	orrs	r2, r1
 8000f56:	4904      	ldr	r1, [pc, #16]	@ (8000f68 <LL_RCC_PLL_ConfigDomain_SYS+0x50>)
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	62cb      	str	r3, [r1, #44]	@ 0x2c
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40021000 	.word	0x40021000

08000f6c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000f74:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f76:	695a      	ldr	r2, [r3, #20]
 8000f78:	4907      	ldr	r1, [pc, #28]	@ (8000f98 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000f80:	4b05      	ldr	r3, [pc, #20]	@ (8000f98 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f82:	695a      	ldr	r2, [r3, #20]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4013      	ands	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000

08000f9c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000fa4:	4b08      	ldr	r3, [pc, #32]	@ (8000fc8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fa6:	69da      	ldr	r2, [r3, #28]
 8000fa8:	4907      	ldr	r1, [pc, #28]	@ (8000fc8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000fb0:	4b05      	ldr	r3, [pc, #20]	@ (8000fc8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fb2:	69da      	ldr	r2, [r3, #28]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fba:	68fb      	ldr	r3, [r7, #12]
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40021000 	.word	0x40021000

08000fcc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000fd4:	4b08      	ldr	r3, [pc, #32]	@ (8000ff8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000fd6:	699a      	ldr	r2, [r3, #24]
 8000fd8:	4907      	ldr	r1, [pc, #28]	@ (8000ff8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000fe0:	4b05      	ldr	r3, [pc, #20]	@ (8000ff8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000fe2:	699a      	ldr	r2, [r3, #24]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fea:	68fb      	ldr	r3, [r7, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000

08000ffc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001004:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <LL_FLASH_SetLatency+0x24>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f023 0207 	bic.w	r2, r3, #7
 800100c:	4904      	ldr	r1, [pc, #16]	@ (8001020 <LL_FLASH_SetLatency+0x24>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4313      	orrs	r3, r2
 8001012:	600b      	str	r3, [r1, #0]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	40022000 	.word	0x40022000

08001024 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001028:	4b03      	ldr	r3, [pc, #12]	@ (8001038 <LL_FLASH_GetLatency+0x14>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 0307 	and.w	r3, r3, #7
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	40022000 	.word	0x40022000

0800103c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001044:	4b05      	ldr	r3, [pc, #20]	@ (800105c <LL_EXTI_EnableIT_0_31+0x20>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4904      	ldr	r1, [pc, #16]	@ (800105c <LL_EXTI_EnableIT_0_31+0x20>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4313      	orrs	r3, r2
 800104e:	600b      	str	r3, [r1, #0]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40010400 	.word	0x40010400

08001060 <LL_TIM_DisableARRPreload>:
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	601a      	str	r2, [r3, #0]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr
	...

08001080 <LL_TIM_OC_DisableFast>:
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d01c      	beq.n	80010ca <LL_TIM_OC_DisableFast+0x4a>
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	2b04      	cmp	r3, #4
 8001094:	d017      	beq.n	80010c6 <LL_TIM_OC_DisableFast+0x46>
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	2b10      	cmp	r3, #16
 800109a:	d012      	beq.n	80010c2 <LL_TIM_OC_DisableFast+0x42>
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	2b40      	cmp	r3, #64	@ 0x40
 80010a0:	d00d      	beq.n	80010be <LL_TIM_OC_DisableFast+0x3e>
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010a8:	d007      	beq.n	80010ba <LL_TIM_OC_DisableFast+0x3a>
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010b0:	d101      	bne.n	80010b6 <LL_TIM_OC_DisableFast+0x36>
 80010b2:	2305      	movs	r3, #5
 80010b4:	e00a      	b.n	80010cc <LL_TIM_OC_DisableFast+0x4c>
 80010b6:	2306      	movs	r3, #6
 80010b8:	e008      	b.n	80010cc <LL_TIM_OC_DisableFast+0x4c>
 80010ba:	2304      	movs	r3, #4
 80010bc:	e006      	b.n	80010cc <LL_TIM_OC_DisableFast+0x4c>
 80010be:	2303      	movs	r3, #3
 80010c0:	e004      	b.n	80010cc <LL_TIM_OC_DisableFast+0x4c>
 80010c2:	2302      	movs	r3, #2
 80010c4:	e002      	b.n	80010cc <LL_TIM_OC_DisableFast+0x4c>
 80010c6:	2301      	movs	r3, #1
 80010c8:	e000      	b.n	80010cc <LL_TIM_OC_DisableFast+0x4c>
 80010ca:	2300      	movs	r3, #0
 80010cc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3318      	adds	r3, #24
 80010d2:	4619      	mov	r1, r3
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001100 <LL_TIM_OC_DisableFast+0x80>)
 80010d8:	5cd3      	ldrb	r3, [r2, r3]
 80010da:	440b      	add	r3, r1
 80010dc:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	4907      	ldr	r1, [pc, #28]	@ (8001104 <LL_TIM_OC_DisableFast+0x84>)
 80010e6:	5ccb      	ldrb	r3, [r1, r3]
 80010e8:	4619      	mov	r1, r3
 80010ea:	2304      	movs	r3, #4
 80010ec:	408b      	lsls	r3, r1
 80010ee:	43db      	mvns	r3, r3
 80010f0:	401a      	ands	r2, r3
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	601a      	str	r2, [r3, #0]
}
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	08006ba8 	.word	0x08006ba8
 8001104:	08006bb0 	.word	0x08006bb0

08001108 <LL_TIM_OC_EnablePreload>:
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d01c      	beq.n	8001152 <LL_TIM_OC_EnablePreload+0x4a>
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	2b04      	cmp	r3, #4
 800111c:	d017      	beq.n	800114e <LL_TIM_OC_EnablePreload+0x46>
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	2b10      	cmp	r3, #16
 8001122:	d012      	beq.n	800114a <LL_TIM_OC_EnablePreload+0x42>
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	2b40      	cmp	r3, #64	@ 0x40
 8001128:	d00d      	beq.n	8001146 <LL_TIM_OC_EnablePreload+0x3e>
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001130:	d007      	beq.n	8001142 <LL_TIM_OC_EnablePreload+0x3a>
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001138:	d101      	bne.n	800113e <LL_TIM_OC_EnablePreload+0x36>
 800113a:	2305      	movs	r3, #5
 800113c:	e00a      	b.n	8001154 <LL_TIM_OC_EnablePreload+0x4c>
 800113e:	2306      	movs	r3, #6
 8001140:	e008      	b.n	8001154 <LL_TIM_OC_EnablePreload+0x4c>
 8001142:	2304      	movs	r3, #4
 8001144:	e006      	b.n	8001154 <LL_TIM_OC_EnablePreload+0x4c>
 8001146:	2303      	movs	r3, #3
 8001148:	e004      	b.n	8001154 <LL_TIM_OC_EnablePreload+0x4c>
 800114a:	2302      	movs	r3, #2
 800114c:	e002      	b.n	8001154 <LL_TIM_OC_EnablePreload+0x4c>
 800114e:	2301      	movs	r3, #1
 8001150:	e000      	b.n	8001154 <LL_TIM_OC_EnablePreload+0x4c>
 8001152:	2300      	movs	r3, #0
 8001154:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3318      	adds	r3, #24
 800115a:	4619      	mov	r1, r3
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	4a0a      	ldr	r2, [pc, #40]	@ (8001188 <LL_TIM_OC_EnablePreload+0x80>)
 8001160:	5cd3      	ldrb	r3, [r2, r3]
 8001162:	440b      	add	r3, r1
 8001164:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	4907      	ldr	r1, [pc, #28]	@ (800118c <LL_TIM_OC_EnablePreload+0x84>)
 800116e:	5ccb      	ldrb	r3, [r1, r3]
 8001170:	4619      	mov	r1, r3
 8001172:	2308      	movs	r3, #8
 8001174:	408b      	lsls	r3, r1
 8001176:	431a      	orrs	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	601a      	str	r2, [r3, #0]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	08006ba8 	.word	0x08006ba8
 800118c:	08006bb0 	.word	0x08006bb0

08001190 <LL_TIM_SetClockSource>:
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80011a2:	f023 0307 	bic.w	r3, r3, #7
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	431a      	orrs	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	609a      	str	r2, [r3, #8]
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr

080011b8 <LL_TIM_SetTriggerOutput>:
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	431a      	orrs	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	605a      	str	r2, [r3, #4]
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr

080011dc <LL_TIM_DisableMasterSlaveMode>:
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	609a      	str	r2, [r3, #8]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr

080011fa <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	60da      	str	r2, [r3, #12]
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr

08001218 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	615a      	str	r2, [r3, #20]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr

08001242 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001252:	2b40      	cmp	r3, #64	@ 0x40
 8001254:	bf0c      	ite	eq
 8001256:	2301      	moveq	r3, #1
 8001258:	2300      	movne	r3, #0
 800125a:	b2db      	uxtb	r3, r3
}
 800125c:	4618      	mov	r0, r3
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr

08001266 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001276:	2b80      	cmp	r3, #128	@ 0x80
 8001278:	bf0c      	ite	eq
 800127a:	2301      	moveq	r3, #1
 800127c:	2300      	movne	r3, #0
 800127e:	b2db      	uxtb	r3, r3
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr

0800128a <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800128a:	b480      	push	{r7}
 800128c:	b089      	sub	sp, #36	@ 0x24
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	330c      	adds	r3, #12
 8001296:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	e853 3f00 	ldrex	r3, [r3]
 800129e:	60bb      	str	r3, [r7, #8]
   return(result);
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	f043 0320 	orr.w	r3, r3, #32
 80012a6:	61fb      	str	r3, [r7, #28]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	330c      	adds	r3, #12
 80012ac:	69fa      	ldr	r2, [r7, #28]
 80012ae:	61ba      	str	r2, [r7, #24]
 80012b0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80012b2:	6979      	ldr	r1, [r7, #20]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	e841 2300 	strex	r3, r2, [r1]
 80012ba:	613b      	str	r3, [r7, #16]
   return(result);
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1e7      	bne.n	8001292 <LL_USART_EnableIT_RXNE+0x8>
}
 80012c2:	bf00      	nop
 80012c4:	bf00      	nop
 80012c6:	3724      	adds	r7, #36	@ 0x24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr

080012ce <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	460b      	mov	r3, r1
 80012d8:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80012da:	78fa      	ldrb	r2, [r7, #3]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	605a      	str	r2, [r3, #4]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr

080012ea <LL_GPIO_SetPinMode>:
{
 80012ea:	b490      	push	{r4, r7}
 80012ec:	b088      	sub	sp, #32
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	60f8      	str	r0, [r7, #12]
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	461a      	mov	r2, r3
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	0e1b      	lsrs	r3, r3, #24
 80012fe:	4413      	add	r3, r2
 8001300:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001302:	6822      	ldr	r2, [r4, #0]
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	fa93 f3a3 	rbit	r3, r3
 800130e:	613b      	str	r3, [r7, #16]
  return result;
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	fab3 f383 	clz	r3, r3
 8001316:	b2db      	uxtb	r3, r3
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	210f      	movs	r1, #15
 800131c:	fa01 f303 	lsl.w	r3, r1, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	401a      	ands	r2, r3
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	fa93 f3a3 	rbit	r3, r3
 800132e:	61bb      	str	r3, [r7, #24]
  return result;
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	fab3 f383 	clz	r3, r3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	fa01 f303 	lsl.w	r3, r1, r3
 8001340:	4313      	orrs	r3, r2
 8001342:	6023      	str	r3, [r4, #0]
}
 8001344:	bf00      	nop
 8001346:	3720      	adds	r7, #32
 8001348:	46bd      	mov	sp, r7
 800134a:	bc90      	pop	{r4, r7}
 800134c:	4770      	bx	lr

0800134e <LL_GPIO_SetOutputPin>:
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	0a1b      	lsrs	r3, r3, #8
 800135c:	b29a      	uxth	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	611a      	str	r2, [r3, #16]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <LL_GPIO_ResetOutputPin>:
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	b29a      	uxth	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	615a      	str	r2, [r3, #20]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
	...

0800138c <LL_GPIO_AF_EnableRemap_USART2>:
  * @rmtoll MAPR          USART2_REMAP           LL_GPIO_AF_EnableRemap_USART2
  * @note  ENABLE: Remap     (CTS/PD3, RTS/PD4, TX/PD5, RX/PD6, CK/PD7)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_USART2(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_USART2_REMAP | AFIO_MAPR_SWJ_CFG);
 8001390:	4b05      	ldr	r3, [pc, #20]	@ (80013a8 <LL_GPIO_AF_EnableRemap_USART2+0x1c>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	4a04      	ldr	r2, [pc, #16]	@ (80013a8 <LL_GPIO_AF_EnableRemap_USART2+0x1c>)
 8001396:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800139a:	f043 0308 	orr.w	r3, r3, #8
 800139e:	6053      	str	r3, [r2, #4]
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	40010000 	.word	0x40010000

080013ac <LL_GPIO_AF_RemapPartial1_TIM2>:
  * @rmtoll MAPR          TIM2_REMAP           LL_GPIO_AF_RemapPartial1_TIM2
  * @note  PARTIAL_1: Partial remap (CH1/ETR/PA15, CH2/PB3, CH3/PA2,  CH4/PA3)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_RemapPartial1_TIM2(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM2_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1 | AFIO_MAPR_SWJ_CFG));
 80013b0:	4b07      	ldr	r3, [pc, #28]	@ (80013d0 <LL_GPIO_AF_RemapPartial1_TIM2+0x24>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80013bc:	4a04      	ldr	r2, [pc, #16]	@ (80013d0 <LL_GPIO_AF_RemapPartial1_TIM2+0x24>)
 80013be:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80013c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013c6:	6053      	str	r3, [r2, #4]
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	40010000 	.word	0x40010000

080013d4 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 80013d8:	4b05      	ldr	r3, [pc, #20]	@ (80013f0 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013e0:	4a03      	ldr	r2, [pc, #12]	@ (80013f0 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 80013e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013e6:	6053      	str	r3, [r2, #4]
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	40010000 	.word	0x40010000

080013f4 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80013fe:	4a13      	ldr	r2, [pc, #76]	@ (800144c <LL_GPIO_AF_SetEXTISource+0x58>)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	b2db      	uxtb	r3, r3
 8001404:	3302      	adds	r3, #2
 8001406:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	0c1b      	lsrs	r3, r3, #16
 800140e:	43db      	mvns	r3, r3
 8001410:	ea02 0103 	and.w	r1, r2, r3
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	0c1b      	lsrs	r3, r3, #16
 8001418:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	fa93 f3a3 	rbit	r3, r3
 8001420:	60bb      	str	r3, [r7, #8]
  return result;
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	fab3 f383 	clz	r3, r3
 8001428:	b2db      	uxtb	r3, r3
 800142a:	461a      	mov	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	fa03 f202 	lsl.w	r2, r3, r2
 8001432:	4806      	ldr	r0, [pc, #24]	@ (800144c <LL_GPIO_AF_SetEXTISource+0x58>)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	b2db      	uxtb	r3, r3
 8001438:	430a      	orrs	r2, r1
 800143a:	3302      	adds	r3, #2
 800143c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40010000 	.word	0x40010000

08001450 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Погледни чата с г-н Стефанов, _write e блокираща функция

int _write(int file, char *ptr, int len) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	e011      	b.n	8001486 <_write+0x36>
        while (!LL_USART_IsActiveFlag_TXE(USART2));  // Wait until TX buffer is empty
 8001462:	bf00      	nop
 8001464:	4810      	ldr	r0, [pc, #64]	@ (80014a8 <_write+0x58>)
 8001466:	f7ff fefe 	bl	8001266 <LL_USART_IsActiveFlag_TXE>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0f9      	beq.n	8001464 <_write+0x14>
        LL_USART_TransmitData8(USART2, ptr[i]);      // Send byte
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	4413      	add	r3, r2
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4619      	mov	r1, r3
 800147a:	480b      	ldr	r0, [pc, #44]	@ (80014a8 <_write+0x58>)
 800147c:	f7ff ff27 	bl	80012ce <LL_USART_TransmitData8>
    for (int i = 0; i < len; i++) {
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	3301      	adds	r3, #1
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	429a      	cmp	r2, r3
 800148c:	dbe9      	blt.n	8001462 <_write+0x12>
    }

    while (!LL_USART_IsActiveFlag_TC(USART2));  // Wait for last transmission to complete
 800148e:	bf00      	nop
 8001490:	4805      	ldr	r0, [pc, #20]	@ (80014a8 <_write+0x58>)
 8001492:	f7ff fed6 	bl	8001242 <LL_USART_IsActiveFlag_TC>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0f9      	beq.n	8001490 <_write+0x40>
    return len;
 800149c:	687b      	ldr	r3, [r7, #4]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40004400 	.word	0x40004400

080014ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 80014b0:	2001      	movs	r0, #1
 80014b2:	f7ff fd8b 	bl	8000fcc <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80014b6:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80014ba:	f7ff fd6f 	bl	8000f9c <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014be:	2003      	movs	r0, #3
 80014c0:	f7ff fa42 	bl	8000948 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80014c4:	f7ff fa64 	bl	8000990 <__NVIC_GetPriorityGrouping>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2200      	movs	r2, #0
 80014cc:	210f      	movs	r1, #15
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fab2 	bl	8000a38 <NVIC_EncodePriority>
 80014d4:	4603      	mov	r3, r0
 80014d6:	4619      	mov	r1, r3
 80014d8:	f04f 30ff 	mov.w	r0, #4294967295
 80014dc:	f7ff fa82 	bl	80009e4 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 80014e0:	f7ff ff78 	bl	80013d4 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e4:	f000 f84a 	bl	800157c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014e8:	f000 faf2 	bl	8001ad0 <MX_GPIO_Init>
  MX_DMA_Init();
 80014ec:	f000 fad8 	bl	8001aa0 <MX_DMA_Init>
  MX_ADC1_Init();
 80014f0:	f000 f886 	bl	8001600 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80014f4:	f000 f9ac 	bl	8001850 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80014f8:	f000 fa12 	bl	8001920 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80014fc:	f000 fa68 	bl	80019d0 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8001500:	f000 f97c 	bl	80017fc <MX_TIM6_Init>
  MX_TIM2_Init();
 8001504:	f000 f8de 	bl	80016c4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Enable UART Interupts
  LL_USART_EnableIT_RXNE(USART1);
 8001508:	4815      	ldr	r0, [pc, #84]	@ (8001560 <main+0xb4>)
 800150a:	f7ff febe 	bl	800128a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART3);
 800150e:	4815      	ldr	r0, [pc, #84]	@ (8001564 <main+0xb8>)
 8001510:	f7ff febb 	bl	800128a <LL_USART_EnableIT_RXNE>

  // Enable EXTI Fault GPIO Interrupts
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_12);
 8001514:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001518:	f7ff fd90 	bl	800103c <LL_EXTI_EnableIT_0_31>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_13);
 800151c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001520:	f7ff fd8c 	bl	800103c <LL_EXTI_EnableIT_0_31>

  // Enable DMA Interrupt
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_5);
 8001524:	2105      	movs	r1, #5
 8001526:	4810      	ldr	r0, [pc, #64]	@ (8001568 <main+0xbc>)
 8001528:	f7ff fc28 	bl	8000d7c <LL_DMA_EnableIT_TC>


  SignalAnalyzer_Init();
 800152c:	f001 fbfa 	bl	8002d24 <SignalAnalyzer_Init>

  // Reset all Muxes
  LL_GPIO_SetOutputPin(RST_GPIO, RST_PIN);
 8001530:	490e      	ldr	r1, [pc, #56]	@ (800156c <main+0xc0>)
 8001532:	480f      	ldr	r0, [pc, #60]	@ (8001570 <main+0xc4>)
 8001534:	f7ff ff0b 	bl	800134e <LL_GPIO_SetOutputPin>
  LL_mDelay(20);
 8001538:	2014      	movs	r0, #20
 800153a:	f002 fe91 	bl	8004260 <LL_mDelay>
  LL_GPIO_ResetOutputPin(RST_GPIO, RST_PIN);
 800153e:	490b      	ldr	r1, [pc, #44]	@ (800156c <main+0xc0>)
 8001540:	480b      	ldr	r0, [pc, #44]	@ (8001570 <main+0xc4>)
 8001542:	f7ff ff13 	bl	800136c <LL_GPIO_ResetOutputPin>
  LL_mDelay(20);
 8001546:	2014      	movs	r0, #20
 8001548:	f002 fe8a 	bl	8004260 <LL_mDelay>

  // Enable Protection
  LL_GPIO_SetOutputPin(PROTECTION_GPIO, PROTECTION_PIN);
 800154c:	4909      	ldr	r1, [pc, #36]	@ (8001574 <main+0xc8>)
 800154e:	480a      	ldr	r0, [pc, #40]	@ (8001578 <main+0xcc>)
 8001550:	f7ff fefd 	bl	800134e <LL_GPIO_SetOutputPin>
	  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		  sendADCData();
 8001554:	f001 fc46 	bl	8002de4 <sendADCData>
		  FAULT_CheckAndReport();  // Only sends UART if a fault was detected
 8001558:	f7fe fe94 	bl	8000284 <FAULT_CheckAndReport>
		  sendADCData();
 800155c:	bf00      	nop
 800155e:	e7f9      	b.n	8001554 <main+0xa8>
 8001560:	40013800 	.word	0x40013800
 8001564:	40004800 	.word	0x40004800
 8001568:	40020000 	.word	0x40020000
 800156c:	04020002 	.word	0x04020002
 8001570:	40010c00 	.word	0x40010c00
 8001574:	04080008 	.word	0x04080008
 8001578:	40011800 	.word	0x40011800

0800157c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8001580:	2002      	movs	r0, #2
 8001582:	f7ff fd3b 	bl	8000ffc <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8001586:	bf00      	nop
 8001588:	f7ff fd4c 	bl	8001024 <LL_FLASH_GetLatency>
 800158c:	4603      	mov	r3, r0
 800158e:	2b02      	cmp	r3, #2
 8001590:	d1fa      	bne.n	8001588 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 8001592:	f7ff fc11 	bl	8000db8 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8001596:	bf00      	nop
 8001598:	f7ff fc1c 	bl	8000dd4 <LL_RCC_HSE_IsReady>
 800159c:	4603      	mov	r3, r0
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d1fa      	bne.n	8001598 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 80015a2:	f44f 11e0 	mov.w	r1, #1835008	@ 0x1c0000
 80015a6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80015aa:	f7ff fcb5 	bl	8000f18 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80015ae:	f7ff fc93 	bl	8000ed8 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80015b2:	bf00      	nop
 80015b4:	f7ff fc9e 	bl	8000ef4 <LL_RCC_PLL_IsReady>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d1fa      	bne.n	80015b4 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80015be:	2000      	movs	r0, #0
 80015c0:	f7ff fc3a 	bl	8000e38 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80015c4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80015c8:	f7ff fc4a 	bl	8000e60 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80015cc:	2000      	movs	r0, #0
 80015ce:	f7ff fc5b 	bl	8000e88 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80015d2:	2002      	movs	r0, #2
 80015d4:	f7ff fc10 	bl	8000df8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80015d8:	bf00      	nop
 80015da:	f7ff fc21 	bl	8000e20 <LL_RCC_GetSysClkSource>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	d1fa      	bne.n	80015da <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(72000000);
 80015e4:	4805      	ldr	r0, [pc, #20]	@ (80015fc <SystemClock_Config+0x80>)
 80015e6:	f002 fe2d 	bl	8004244 <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 80015ea:	4804      	ldr	r0, [pc, #16]	@ (80015fc <SystemClock_Config+0x80>)
 80015ec:	f002 fe5c 	bl	80042a8 <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_6);
 80015f0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80015f4:	f7ff fc5c 	bl	8000eb0 <LL_RCC_SetADCClockSource>
}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	044aa200 	.word	0x044aa200

08001600 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08e      	sub	sp, #56	@ 0x38
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001606:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001610:	2300      	movs	r3, #0
 8001612:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001614:	f107 0318 	add.w	r3, r7, #24
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001632:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001636:	f7ff fcc9 	bl	8000fcc <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800163a:	2004      	movs	r0, #4
 800163c:	f7ff fcc6 	bl	8000fcc <LL_APB2_GRP1_EnableClock>
  PA4   ------> ADC1_IN4
  PA5   ------> ADC1_IN5
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8001640:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001644:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	4619      	mov	r1, r3
 800164e:	481a      	ldr	r0, [pc, #104]	@ (80016b8 <MX_ADC1_Init+0xb8>)
 8001650:	f002 f861 	bl	8003716 <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001654:	2300      	movs	r3, #0
 8001656:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800165c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001660:	4619      	mov	r1, r3
 8001662:	4816      	ldr	r0, [pc, #88]	@ (80016bc <MX_ADC1_Init+0xbc>)
 8001664:	f001 fe22 	bl	80032ac <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8001668:	2300      	movs	r3, #0
 800166a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 800166c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001670:	4619      	mov	r1, r3
 8001672:	4812      	ldr	r0, [pc, #72]	@ (80016bc <MX_ADC1_Init+0xbc>)
 8001674:	f001 fde8 	bl	8003248 <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001678:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
 800167c:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8001686:	2302      	movs	r3, #2
 8001688:	627b      	str	r3, [r7, #36]	@ 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 800168a:	2300      	movs	r3, #0
 800168c:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800168e:	f107 0318 	add.w	r3, r7, #24
 8001692:	4619      	mov	r1, r3
 8001694:	4809      	ldr	r0, [pc, #36]	@ (80016bc <MX_ADC1_Init+0xbc>)
 8001696:	f001 fe30 	bl	80032fa <LL_ADC_REG_Init>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 800169a:	4a09      	ldr	r2, [pc, #36]	@ (80016c0 <MX_ADC1_Init+0xc0>)
 800169c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016a0:	4806      	ldr	r0, [pc, #24]	@ (80016bc <MX_ADC1_Init+0xbc>)
 80016a2:	f7ff f9fb 	bl	8000a9c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80016a6:	2200      	movs	r2, #0
 80016a8:	4905      	ldr	r1, [pc, #20]	@ (80016c0 <MX_ADC1_Init+0xc0>)
 80016aa:	4804      	ldr	r0, [pc, #16]	@ (80016bc <MX_ADC1_Init+0xbc>)
 80016ac:	f7ff fa2b 	bl	8000b06 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016b0:	bf00      	nop
 80016b2:	3738      	adds	r7, #56	@ 0x38
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40010800 	.word	0x40010800
 80016bc:	40012400 	.word	0x40012400
 80016c0:	02300001 	.word	0x02300001

080016c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b092      	sub	sp, #72	@ 0x48
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80016ca:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
 80016d8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	2220      	movs	r2, #32
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 f91c 	bl	8004920 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	463b      	mov	r3, r7
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
 80016f4:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80016f6:	2001      	movs	r0, #1
 80016f8:	f7ff fc50 	bl	8000f9c <LL_APB1_GRP1_EnableClock>

  /* TIM2 DMA Init */

  /* TIM2_CH1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_5, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80016fc:	2210      	movs	r2, #16
 80016fe:	2105      	movs	r1, #5
 8001700:	483b      	ldr	r0, [pc, #236]	@ (80017f0 <MX_TIM2_Init+0x12c>)
 8001702:	f7ff fa4b 	bl	8000b9c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PRIORITY_VERYHIGH);
 8001706:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800170a:	2105      	movs	r1, #5
 800170c:	4838      	ldr	r0, [pc, #224]	@ (80017f0 <MX_TIM2_Init+0x12c>)
 800170e:	f7ff fb13 	bl	8000d38 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MODE_NORMAL);
 8001712:	2200      	movs	r2, #0
 8001714:	2105      	movs	r1, #5
 8001716:	4836      	ldr	r0, [pc, #216]	@ (80017f0 <MX_TIM2_Init+0x12c>)
 8001718:	f7ff fa64 	bl	8000be4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PERIPH_NOINCREMENT);
 800171c:	2200      	movs	r2, #0
 800171e:	2105      	movs	r1, #5
 8001720:	4833      	ldr	r0, [pc, #204]	@ (80017f0 <MX_TIM2_Init+0x12c>)
 8001722:	f7ff fa81 	bl	8000c28 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MEMORY_INCREMENT);
 8001726:	2280      	movs	r2, #128	@ 0x80
 8001728:	2105      	movs	r1, #5
 800172a:	4831      	ldr	r0, [pc, #196]	@ (80017f0 <MX_TIM2_Init+0x12c>)
 800172c:	f7ff fa9e 	bl	8000c6c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PDATAALIGN_WORD);
 8001730:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001734:	2105      	movs	r1, #5
 8001736:	482e      	ldr	r0, [pc, #184]	@ (80017f0 <MX_TIM2_Init+0x12c>)
 8001738:	f7ff faba 	bl	8000cb0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MDATAALIGN_WORD);
 800173c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001740:	2105      	movs	r1, #5
 8001742:	482b      	ldr	r0, [pc, #172]	@ (80017f0 <MX_TIM2_Init+0x12c>)
 8001744:	f7ff fad6 	bl	8000cf4 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	86bb      	strh	r3, [r7, #52]	@ 0x34
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800174c:	2300      	movs	r3, #0
 800174e:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_InitStruct.Autoreload = 89;
 8001750:	2359      	movs	r3, #89	@ 0x59
 8001752:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001754:	2300      	movs	r3, #0
 8001756:	643b      	str	r3, [r7, #64]	@ 0x40
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001758:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800175c:	4619      	mov	r1, r3
 800175e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001762:	f002 fa17 	bl	8003b94 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001766:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800176a:	f7ff fc79 	bl	8001060 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 800176e:	2100      	movs	r1, #0
 8001770:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001774:	f7ff fd0c 	bl	8001190 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8001778:	2101      	movs	r1, #1
 800177a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800177e:	f7ff fcc3 	bl	8001108 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001782:	2360      	movs	r3, #96	@ 0x60
 8001784:	617b      	str	r3, [r7, #20]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.CompareValue = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001792:	2300      	movs	r3, #0
 8001794:	627b      	str	r3, [r7, #36]	@ 0x24
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	461a      	mov	r2, r3
 800179c:	2101      	movs	r1, #1
 800179e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80017a2:	f002 fa5f 	bl	8003c64 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 80017a6:	2101      	movs	r1, #1
 80017a8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80017ac:	f7ff fc68 	bl	8001080 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80017b0:	2100      	movs	r1, #0
 80017b2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80017b6:	f7ff fcff 	bl	80011b8 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80017ba:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80017be:	f7ff fd0d 	bl	80011dc <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80017c2:	2004      	movs	r0, #4
 80017c4:	f7ff fc02 	bl	8000fcc <LL_APB2_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA15   ------> TIM2_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80017c8:	4b0a      	ldr	r3, [pc, #40]	@ (80017f4 <MX_TIM2_Init+0x130>)
 80017ca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017cc:	2309      	movs	r3, #9
 80017ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80017d0:	2302      	movs	r3, #2
 80017d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d8:	463b      	mov	r3, r7
 80017da:	4619      	mov	r1, r3
 80017dc:	4806      	ldr	r0, [pc, #24]	@ (80017f8 <MX_TIM2_Init+0x134>)
 80017de:	f001 ff9a 	bl	8003716 <LL_GPIO_Init>

  LL_GPIO_AF_RemapPartial1_TIM2();
 80017e2:	f7ff fde3 	bl	80013ac <LL_GPIO_AF_RemapPartial1_TIM2>

}
 80017e6:	bf00      	nop
 80017e8:	3748      	adds	r7, #72	@ 0x48
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40020000 	.word	0x40020000
 80017f4:	04800080 	.word	0x04800080
 80017f8:	40010800 	.word	0x40010800

080017fc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8001810:	2010      	movs	r0, #16
 8001812:	f7ff fbc3 	bl	8000f9c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 800181e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001822:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	4619      	mov	r1, r3
 8001828:	4808      	ldr	r0, [pc, #32]	@ (800184c <MX_TIM6_Init+0x50>)
 800182a:	f002 f9b3 	bl	8003b94 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 800182e:	4807      	ldr	r0, [pc, #28]	@ (800184c <MX_TIM6_Init+0x50>)
 8001830:	f7ff fc16 	bl	8001060 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8001834:	2100      	movs	r1, #0
 8001836:	4805      	ldr	r0, [pc, #20]	@ (800184c <MX_TIM6_Init+0x50>)
 8001838:	f7ff fcbe 	bl	80011b8 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 800183c:	4803      	ldr	r0, [pc, #12]	@ (800184c <MX_TIM6_Init+0x50>)
 800183e:	f7ff fccd 	bl	80011dc <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001842:	bf00      	nop
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40001000 	.word	0x40001000

08001850 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08c      	sub	sp, #48	@ 0x30
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
 8001864:	611a      	str	r2, [r3, #16]
 8001866:	615a      	str	r2, [r3, #20]
 8001868:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186a:	463b      	mov	r3, r7
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001878:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800187c:	f7ff fba6 	bl	8000fcc <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001880:	2004      	movs	r0, #4
 8001882:	f7ff fba3 	bl	8000fcc <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001886:	4b22      	ldr	r3, [pc, #136]	@ (8001910 <MX_USART1_UART_Init+0xc0>)
 8001888:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800188a:	2309      	movs	r3, #9
 800188c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800188e:	2303      	movs	r3, #3
 8001890:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	463b      	mov	r3, r7
 8001898:	4619      	mov	r1, r3
 800189a:	481e      	ldr	r0, [pc, #120]	@ (8001914 <MX_USART1_UART_Init+0xc4>)
 800189c:	f001 ff3b 	bl	8003716 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80018a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001918 <MX_USART1_UART_Init+0xc8>)
 80018a2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80018a4:	2304      	movs	r3, #4
 80018a6:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a8:	463b      	mov	r3, r7
 80018aa:	4619      	mov	r1, r3
 80018ac:	4819      	ldr	r0, [pc, #100]	@ (8001914 <MX_USART1_UART_Init+0xc4>)
 80018ae:	f001 ff32 	bl	8003716 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80018b2:	f7ff f86d 	bl	8000990 <__NVIC_GetPriorityGrouping>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2200      	movs	r2, #0
 80018ba:	2100      	movs	r1, #0
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff f8bb 	bl	8000a38 <NVIC_EncodePriority>
 80018c2:	4603      	mov	r3, r0
 80018c4:	4619      	mov	r1, r3
 80018c6:	2025      	movs	r0, #37	@ 0x25
 80018c8:	f7ff f88c 	bl	80009e4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80018cc:	2025      	movs	r0, #37	@ 0x25
 80018ce:	f7ff f86d 	bl	80009ac <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80018d2:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80018d6:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80018d8:	2300      	movs	r3, #0
 80018da:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80018e4:	230c      	movs	r3, #12
 80018e6:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80018ec:	2300      	movs	r3, #0
 80018ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	4619      	mov	r1, r3
 80018f6:	4809      	ldr	r0, [pc, #36]	@ (800191c <MX_USART1_UART_Init+0xcc>)
 80018f8:	f002 fc18 	bl	800412c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80018fc:	4807      	ldr	r0, [pc, #28]	@ (800191c <MX_USART1_UART_Init+0xcc>)
 80018fe:	f7ff fc8b 	bl	8001218 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001902:	4806      	ldr	r0, [pc, #24]	@ (800191c <MX_USART1_UART_Init+0xcc>)
 8001904:	f7ff fc79 	bl	80011fa <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	3730      	adds	r7, #48	@ 0x30
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	04020002 	.word	0x04020002
 8001914:	40010800 	.word	0x40010800
 8001918:	04040004 	.word	0x04040004
 800191c:	40013800 	.word	0x40013800

08001920 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08c      	sub	sp, #48	@ 0x30
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
 8001934:	611a      	str	r2, [r3, #16]
 8001936:	615a      	str	r2, [r3, #20]
 8001938:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193a:	463b      	mov	r3, r7
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001948:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800194c:	f7ff fb26 	bl	8000f9c <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8001950:	2020      	movs	r0, #32
 8001952:	f7ff fb3b 	bl	8000fcc <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PD5   ------> USART2_TX
  PD6   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001956:	f242 0320 	movw	r3, #8224	@ 0x2020
 800195a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800195c:	2309      	movs	r3, #9
 800195e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001960:	2303      	movs	r3, #3
 8001962:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001968:	463b      	mov	r3, r7
 800196a:	4619      	mov	r1, r3
 800196c:	4816      	ldr	r0, [pc, #88]	@ (80019c8 <MX_USART2_UART_Init+0xa8>)
 800196e:	f001 fed2 	bl	8003716 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001972:	f244 0340 	movw	r3, #16448	@ 0x4040
 8001976:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001978:	2304      	movs	r3, #4
 800197a:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800197c:	463b      	mov	r3, r7
 800197e:	4619      	mov	r1, r3
 8001980:	4811      	ldr	r0, [pc, #68]	@ (80019c8 <MX_USART2_UART_Init+0xa8>)
 8001982:	f001 fec8 	bl	8003716 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_USART2();
 8001986:	f7ff fd01 	bl	800138c <LL_GPIO_AF_EnableRemap_USART2>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800198a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800198e:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001990:	2300      	movs	r3, #0
 8001992:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001998:	2300      	movs	r3, #0
 800199a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800199c:	230c      	movs	r3, #12
 800199e:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80019a4:	2300      	movs	r3, #0
 80019a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	4619      	mov	r1, r3
 80019ae:	4807      	ldr	r0, [pc, #28]	@ (80019cc <MX_USART2_UART_Init+0xac>)
 80019b0:	f002 fbbc 	bl	800412c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80019b4:	4805      	ldr	r0, [pc, #20]	@ (80019cc <MX_USART2_UART_Init+0xac>)
 80019b6:	f7ff fc2f 	bl	8001218 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80019ba:	4804      	ldr	r0, [pc, #16]	@ (80019cc <MX_USART2_UART_Init+0xac>)
 80019bc:	f7ff fc1d 	bl	80011fa <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019c0:	bf00      	nop
 80019c2:	3730      	adds	r7, #48	@ 0x30
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40011400 	.word	0x40011400
 80019cc:	40004400 	.word	0x40004400

080019d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08c      	sub	sp, #48	@ 0x30
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
 80019e4:	611a      	str	r2, [r3, #16]
 80019e6:	615a      	str	r2, [r3, #20]
 80019e8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ea:	463b      	mov	r3, r7
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80019f8:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80019fc:	f7ff face 	bl	8000f9c <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001a00:	2008      	movs	r0, #8
 8001a02:	f7ff fae3 	bl	8000fcc <LL_APB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001a06:	4b22      	ldr	r3, [pc, #136]	@ (8001a90 <MX_USART3_UART_Init+0xc0>)
 8001a08:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a0a:	2309      	movs	r3, #9
 8001a0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a16:	463b      	mov	r3, r7
 8001a18:	4619      	mov	r1, r3
 8001a1a:	481e      	ldr	r0, [pc, #120]	@ (8001a94 <MX_USART3_UART_Init+0xc4>)
 8001a1c:	f001 fe7b 	bl	8003716 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8001a20:	4b1d      	ldr	r3, [pc, #116]	@ (8001a98 <MX_USART3_UART_Init+0xc8>)
 8001a22:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001a24:	2304      	movs	r3, #4
 8001a26:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a28:	463b      	mov	r3, r7
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4819      	ldr	r0, [pc, #100]	@ (8001a94 <MX_USART3_UART_Init+0xc4>)
 8001a2e:	f001 fe72 	bl	8003716 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001a32:	f7fe ffad 	bl	8000990 <__NVIC_GetPriorityGrouping>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fffb 	bl	8000a38 <NVIC_EncodePriority>
 8001a42:	4603      	mov	r3, r0
 8001a44:	4619      	mov	r1, r3
 8001a46:	2027      	movs	r0, #39	@ 0x27
 8001a48:	f7fe ffcc 	bl	80009e4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8001a4c:	2027      	movs	r0, #39	@ 0x27
 8001a4e:	f7fe ffad 	bl	80009ac <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001a52:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001a56:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001a64:	230c      	movs	r3, #12
 8001a66:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART3, &USART_InitStruct);
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	4619      	mov	r1, r3
 8001a76:	4809      	ldr	r0, [pc, #36]	@ (8001a9c <MX_USART3_UART_Init+0xcc>)
 8001a78:	f002 fb58 	bl	800412c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8001a7c:	4807      	ldr	r0, [pc, #28]	@ (8001a9c <MX_USART3_UART_Init+0xcc>)
 8001a7e:	f7ff fbcb 	bl	8001218 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8001a82:	4806      	ldr	r0, [pc, #24]	@ (8001a9c <MX_USART3_UART_Init+0xcc>)
 8001a84:	f7ff fbb9 	bl	80011fa <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a88:	bf00      	nop
 8001a8a:	3730      	adds	r7, #48	@ 0x30
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	04040004 	.word	0x04040004
 8001a94:	40010c00 	.word	0x40010c00
 8001a98:	04080008 	.word	0x04080008
 8001a9c:	40004800 	.word	0x40004800

08001aa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	f7ff fa61 	bl	8000f6c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001aaa:	f7fe ff71 	bl	8000990 <__NVIC_GetPriorityGrouping>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe ffbf 	bl	8000a38 <NVIC_EncodePriority>
 8001aba:	4603      	mov	r3, r0
 8001abc:	4619      	mov	r1, r3
 8001abe:	200f      	movs	r0, #15
 8001ac0:	f7fe ff90 	bl	80009e4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001ac4:	200f      	movs	r0, #15
 8001ac6:	f7fe ff71 	bl	80009ac <__NVIC_EnableIRQ>

}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001ad6:	f107 0318 	add.w	r3, r7, #24
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	60da      	str	r2, [r3, #12]
 8001aec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOE);
 8001aee:	2040      	movs	r0, #64	@ 0x40
 8001af0:	f7ff fa6c 	bl	8000fcc <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8001af4:	2010      	movs	r0, #16
 8001af6:	f7ff fa69 	bl	8000fcc <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001afa:	2004      	movs	r0, #4
 8001afc:	f7ff fa66 	bl	8000fcc <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001b00:	2008      	movs	r0, #8
 8001b02:	f7ff fa63 	bl	8000fcc <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8001b06:	2020      	movs	r0, #32
 8001b08:	f7ff fa60 	bl	8000fcc <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5
 8001b0c:	494c      	ldr	r1, [pc, #304]	@ (8001c40 <MX_GPIO_Init+0x170>)
 8001b0e:	484d      	ldr	r0, [pc, #308]	@ (8001c44 <MX_GPIO_Init+0x174>)
 8001b10:	f7ff fc2c 	bl	800136c <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9
                          |LL_GPIO_PIN_11|LL_GPIO_PIN_0);

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2
 8001b14:	494c      	ldr	r1, [pc, #304]	@ (8001c48 <MX_GPIO_Init+0x178>)
 8001b16:	484d      	ldr	r0, [pc, #308]	@ (8001c4c <MX_GPIO_Init+0x17c>)
 8001b18:	f7ff fc28 	bl	800136c <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6
                          |LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_11);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_12
 8001b1c:	494c      	ldr	r1, [pc, #304]	@ (8001c50 <MX_GPIO_Init+0x180>)
 8001b1e:	484d      	ldr	r0, [pc, #308]	@ (8001c54 <MX_GPIO_Init+0x184>)
 8001b20:	f7ff fc24 	bl	800136c <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11
 8001b24:	494c      	ldr	r1, [pc, #304]	@ (8001c58 <MX_GPIO_Init+0x188>)
 8001b26:	484d      	ldr	r0, [pc, #308]	@ (8001c5c <MX_GPIO_Init+0x18c>)
 8001b28:	f7ff fc20 	bl	800136c <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
                          |LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_7);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5
 8001b2c:	4b44      	ldr	r3, [pc, #272]	@ (8001c40 <MX_GPIO_Init+0x170>)
 8001b2e:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9
                          |LL_GPIO_PIN_11|LL_GPIO_PIN_0;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b30:	2301      	movs	r3, #1
 8001b32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b34:	2302      	movs	r3, #2
 8001b36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b3c:	1d3b      	adds	r3, r7, #4
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4840      	ldr	r0, [pc, #256]	@ (8001c44 <MX_GPIO_Init+0x174>)
 8001b42:	f001 fde8 	bl	8003716 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2
 8001b46:	4b40      	ldr	r3, [pc, #256]	@ (8001c48 <MX_GPIO_Init+0x178>)
 8001b48:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6
                          |LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_11;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	4619      	mov	r1, r3
 8001b5a:	483c      	ldr	r0, [pc, #240]	@ (8001c4c <MX_GPIO_Init+0x17c>)
 8001b5c:	f001 fddb 	bl	8003716 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_12
 8001b60:	4b3b      	ldr	r3, [pc, #236]	@ (8001c50 <MX_GPIO_Init+0x180>)
 8001b62:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8
                          |LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b64:	2301      	movs	r3, #1
 8001b66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b70:	1d3b      	adds	r3, r7, #4
 8001b72:	4619      	mov	r1, r3
 8001b74:	4837      	ldr	r0, [pc, #220]	@ (8001c54 <MX_GPIO_Init+0x184>)
 8001b76:	f001 fdce 	bl	8003716 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8001b7a:	4b39      	ldr	r3, [pc, #228]	@ (8001c60 <MX_GPIO_Init+0x190>)
 8001b7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001b7e:	2304      	movs	r3, #4
 8001b80:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	4619      	mov	r1, r3
 8001b86:	482f      	ldr	r0, [pc, #188]	@ (8001c44 <MX_GPIO_Init+0x174>)
 8001b88:	f001 fdc5 	bl	8003716 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11
 8001b8c:	4b32      	ldr	r3, [pc, #200]	@ (8001c58 <MX_GPIO_Init+0x188>)
 8001b8e:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
                          |LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b90:	2301      	movs	r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b94:	2302      	movs	r3, #2
 8001b96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	482e      	ldr	r0, [pc, #184]	@ (8001c5c <MX_GPIO_Init+0x18c>)
 8001ba2:	f001 fdb8 	bl	8003716 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001ba6:	f240 2302 	movw	r3, #514	@ 0x202
 8001baa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bb0:	1d3b      	adds	r3, r7, #4
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4823      	ldr	r0, [pc, #140]	@ (8001c44 <MX_GPIO_Init+0x174>)
 8001bb6:	f001 fdae 	bl	8003716 <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTE, LL_GPIO_AF_EXTI_LINE12);
 8001bba:	492a      	ldr	r1, [pc, #168]	@ (8001c64 <MX_GPIO_Init+0x194>)
 8001bbc:	2004      	movs	r0, #4
 8001bbe:	f7ff fc19 	bl	80013f4 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTE, LL_GPIO_AF_EXTI_LINE13);
 8001bc2:	4929      	ldr	r1, [pc, #164]	@ (8001c68 <MX_GPIO_Init+0x198>)
 8001bc4:	2004      	movs	r0, #4
 8001bc6:	f7ff fc15 	bl	80013f4 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 8001bca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bce:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001bdc:	f107 0318 	add.w	r3, r7, #24
 8001be0:	4618      	mov	r0, r3
 8001be2:	f001 fc61 	bl	80034a8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001be6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bea:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001bec:	2301      	movs	r3, #1
 8001bee:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001bf8:	f107 0318 	add.w	r3, r7, #24
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f001 fc53 	bl	80034a8 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(GPIOE, LL_GPIO_PIN_12, LL_GPIO_MODE_FLOATING);
 8001c02:	2204      	movs	r2, #4
 8001c04:	4919      	ldr	r1, [pc, #100]	@ (8001c6c <MX_GPIO_Init+0x19c>)
 8001c06:	480f      	ldr	r0, [pc, #60]	@ (8001c44 <MX_GPIO_Init+0x174>)
 8001c08:	f7ff fb6f 	bl	80012ea <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOE, LL_GPIO_PIN_13, LL_GPIO_MODE_FLOATING);
 8001c0c:	2204      	movs	r2, #4
 8001c0e:	4918      	ldr	r1, [pc, #96]	@ (8001c70 <MX_GPIO_Init+0x1a0>)
 8001c10:	480c      	ldr	r0, [pc, #48]	@ (8001c44 <MX_GPIO_Init+0x174>)
 8001c12:	f7ff fb6a 	bl	80012ea <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001c16:	f7fe febb 	bl	8000990 <__NVIC_GetPriorityGrouping>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7fe ff09 	bl	8000a38 <NVIC_EncodePriority>
 8001c26:	4603      	mov	r3, r0
 8001c28:	4619      	mov	r1, r3
 8001c2a:	2028      	movs	r0, #40	@ 0x28
 8001c2c:	f7fe feda 	bl	80009e4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c30:	2028      	movs	r0, #40	@ 0x28
 8001c32:	f7fe febb 	bl	80009ac <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c36:	bf00      	nop
 8001c38:	3720      	adds	r7, #32
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	040bfdff 	.word	0x040bfdff
 8001c44:	40011800 	.word	0x40011800
 8001c48:	042bffff 	.word	0x042bffff
 8001c4c:	40011000 	.word	0x40011000
 8001c50:	04d3ffff 	.word	0x04d3ffff
 8001c54:	40010c00 	.word	0x40010c00
 8001c58:	04ff9bff 	.word	0x04ff9bff
 8001c5c:	40011400 	.word	0x40011400
 8001c60:	04c000c0 	.word	0x04c000c0
 8001c64:	000f0003 	.word	0x000f0003
 8001c68:	00f00003 	.word	0x00f00003
 8001c6c:	04100010 	.word	0x04100010
 8001c70:	04200020 	.word	0x04200020

08001c74 <LL_GPIO_SetOutputPin>:
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	0a1b      	lsrs	r3, r3, #8
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	611a      	str	r2, [r3, #16]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr

08001c92 <LL_GPIO_ResetOutputPin>:
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	0a1b      	lsrs	r3, r3, #8
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	615a      	str	r2, [r3, #20]
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <getPortName>:
    {GPIOE, LL_GPIO_PIN_7, &xPins32, &yPins32},  // CS_32 (PE7)
    {GPIOE, LL_GPIO_PIN_8, &xPins33, &yPins33},  // CS_33 (PE8)
    {GPIOE, LL_GPIO_PIN_9, &xPins34, &yPins34}   // CS_34 (PE9)
};

const char* getPortName(GPIO_TypeDef* port) {
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
    if (port == GPIOA) return "GPIOA";
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a11      	ldr	r2, [pc, #68]	@ (8001d00 <getPortName+0x50>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d101      	bne.n	8001cc4 <getPortName+0x14>
 8001cc0:	4b10      	ldr	r3, [pc, #64]	@ (8001d04 <getPortName+0x54>)
 8001cc2:	e018      	b.n	8001cf6 <getPortName+0x46>
    if (port == GPIOB) return "GPIOB";
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a10      	ldr	r2, [pc, #64]	@ (8001d08 <getPortName+0x58>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d101      	bne.n	8001cd0 <getPortName+0x20>
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8001d0c <getPortName+0x5c>)
 8001cce:	e012      	b.n	8001cf6 <getPortName+0x46>
    if (port == GPIOC) return "GPIOC";
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a0f      	ldr	r2, [pc, #60]	@ (8001d10 <getPortName+0x60>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d101      	bne.n	8001cdc <getPortName+0x2c>
 8001cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d14 <getPortName+0x64>)
 8001cda:	e00c      	b.n	8001cf6 <getPortName+0x46>
    if (port == GPIOD) return "GPIOD";
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a0e      	ldr	r2, [pc, #56]	@ (8001d18 <getPortName+0x68>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d101      	bne.n	8001ce8 <getPortName+0x38>
 8001ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8001d1c <getPortName+0x6c>)
 8001ce6:	e006      	b.n	8001cf6 <getPortName+0x46>
    if (port == GPIOE) return "GPIOE";
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a0d      	ldr	r2, [pc, #52]	@ (8001d20 <getPortName+0x70>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d101      	bne.n	8001cf4 <getPortName+0x44>
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d24 <getPortName+0x74>)
 8001cf2:	e000      	b.n	8001cf6 <getPortName+0x46>
    return "UNKNOWN";
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <getPortName+0x78>)
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	40010800 	.word	0x40010800
 8001d04:	08006540 	.word	0x08006540
 8001d08:	40010c00 	.word	0x40010c00
 8001d0c:	08006548 	.word	0x08006548
 8001d10:	40011000 	.word	0x40011000
 8001d14:	08006550 	.word	0x08006550
 8001d18:	40011400 	.word	0x40011400
 8001d1c:	08006558 	.word	0x08006558
 8001d20:	40011800 	.word	0x40011800
 8001d24:	08006560 	.word	0x08006560
 8001d28:	08006568 	.word	0x08006568

08001d2c <getPinName>:

const char* getPinName(uint32_t pin) {
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
    switch (pin) {
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a5a      	ldr	r2, [pc, #360]	@ (8001ea0 <getPinName+0x174>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	f000 80a8 	beq.w	8001e8e <getPinName+0x162>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a57      	ldr	r2, [pc, #348]	@ (8001ea0 <getPinName+0x174>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	f200 80a5 	bhi.w	8001e92 <getPinName+0x166>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a56      	ldr	r2, [pc, #344]	@ (8001ea4 <getPinName+0x178>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	f000 809c 	beq.w	8001e8a <getPinName+0x15e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a53      	ldr	r2, [pc, #332]	@ (8001ea4 <getPinName+0x178>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	f200 809b 	bhi.w	8001e92 <getPinName+0x166>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a52      	ldr	r2, [pc, #328]	@ (8001ea8 <getPinName+0x17c>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	f000 8090 	beq.w	8001e86 <getPinName+0x15a>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a4f      	ldr	r2, [pc, #316]	@ (8001ea8 <getPinName+0x17c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	f200 8091 	bhi.w	8001e92 <getPinName+0x166>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a4e      	ldr	r2, [pc, #312]	@ (8001eac <getPinName+0x180>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	f000 8084 	beq.w	8001e82 <getPinName+0x156>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a4b      	ldr	r2, [pc, #300]	@ (8001eac <getPinName+0x180>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	f200 8087 	bhi.w	8001e92 <getPinName+0x166>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a4a      	ldr	r2, [pc, #296]	@ (8001eb0 <getPinName+0x184>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d078      	beq.n	8001e7e <getPinName+0x152>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a48      	ldr	r2, [pc, #288]	@ (8001eb0 <getPinName+0x184>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d87e      	bhi.n	8001e92 <getPinName+0x166>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a47      	ldr	r2, [pc, #284]	@ (8001eb4 <getPinName+0x188>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d06e      	beq.n	8001e7a <getPinName+0x14e>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a45      	ldr	r2, [pc, #276]	@ (8001eb4 <getPinName+0x188>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d876      	bhi.n	8001e92 <getPinName+0x166>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a44      	ldr	r2, [pc, #272]	@ (8001eb8 <getPinName+0x18c>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d064      	beq.n	8001e76 <getPinName+0x14a>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a42      	ldr	r2, [pc, #264]	@ (8001eb8 <getPinName+0x18c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d86e      	bhi.n	8001e92 <getPinName+0x166>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a41      	ldr	r2, [pc, #260]	@ (8001ebc <getPinName+0x190>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d05a      	beq.n	8001e72 <getPinName+0x146>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a3f      	ldr	r2, [pc, #252]	@ (8001ebc <getPinName+0x190>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d866      	bhi.n	8001e92 <getPinName+0x166>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f248 0280 	movw	r2, #32896	@ 0x8080
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d04f      	beq.n	8001e6e <getPinName+0x142>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f248 0280 	movw	r2, #32896	@ 0x8080
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d85c      	bhi.n	8001e92 <getPinName+0x166>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f244 0240 	movw	r2, #16448	@ 0x4040
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d043      	beq.n	8001e6a <getPinName+0x13e>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f244 0240 	movw	r2, #16448	@ 0x4040
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d852      	bhi.n	8001e92 <getPinName+0x166>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f242 0220 	movw	r2, #8224	@ 0x2020
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d037      	beq.n	8001e66 <getPinName+0x13a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f242 0220 	movw	r2, #8224	@ 0x2020
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d848      	bhi.n	8001e92 <getPinName+0x166>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f241 0210 	movw	r2, #4112	@ 0x1010
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d02b      	beq.n	8001e62 <getPinName+0x136>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f241 0210 	movw	r2, #4112	@ 0x1010
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d83e      	bhi.n	8001e92 <getPinName+0x166>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f640 0208 	movw	r2, #2056	@ 0x808
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d01f      	beq.n	8001e5e <getPinName+0x132>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f640 0208 	movw	r2, #2056	@ 0x808
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d834      	bhi.n	8001e92 <getPinName+0x166>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f240 4204 	movw	r2, #1028	@ 0x404
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d013      	beq.n	8001e5a <getPinName+0x12e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f240 4204 	movw	r2, #1028	@ 0x404
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d82a      	bhi.n	8001e92 <getPinName+0x166>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f240 1201 	movw	r2, #257	@ 0x101
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d005      	beq.n	8001e52 <getPinName+0x126>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f240 2202 	movw	r2, #514	@ 0x202
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d002      	beq.n	8001e56 <getPinName+0x12a>
 8001e50:	e01f      	b.n	8001e92 <getPinName+0x166>
        case LL_GPIO_PIN_0:  return "Pin 0";
 8001e52:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec0 <getPinName+0x194>)
 8001e54:	e01e      	b.n	8001e94 <getPinName+0x168>
        case LL_GPIO_PIN_1:  return "Pin 1";
 8001e56:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec4 <getPinName+0x198>)
 8001e58:	e01c      	b.n	8001e94 <getPinName+0x168>
        case LL_GPIO_PIN_2:  return "Pin 2";
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec8 <getPinName+0x19c>)
 8001e5c:	e01a      	b.n	8001e94 <getPinName+0x168>
        case LL_GPIO_PIN_3:  return "Pin 3";
 8001e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ecc <getPinName+0x1a0>)
 8001e60:	e018      	b.n	8001e94 <getPinName+0x168>
        case LL_GPIO_PIN_4:  return "Pin 4";
 8001e62:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed0 <getPinName+0x1a4>)
 8001e64:	e016      	b.n	8001e94 <getPinName+0x168>
        case LL_GPIO_PIN_5:  return "Pin 5";
 8001e66:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed4 <getPinName+0x1a8>)
 8001e68:	e014      	b.n	8001e94 <getPinName+0x168>
        case LL_GPIO_PIN_6:  return "Pin 6";
 8001e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed8 <getPinName+0x1ac>)
 8001e6c:	e012      	b.n	8001e94 <getPinName+0x168>
        case LL_GPIO_PIN_7:  return "Pin 7";
 8001e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001edc <getPinName+0x1b0>)
 8001e70:	e010      	b.n	8001e94 <getPinName+0x168>
        case LL_GPIO_PIN_8:  return "Pin 8";
 8001e72:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee0 <getPinName+0x1b4>)
 8001e74:	e00e      	b.n	8001e94 <getPinName+0x168>
        case LL_GPIO_PIN_9:  return "Pin 9";
 8001e76:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee4 <getPinName+0x1b8>)
 8001e78:	e00c      	b.n	8001e94 <getPinName+0x168>
        case LL_GPIO_PIN_10: return "Pin 10";
 8001e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee8 <getPinName+0x1bc>)
 8001e7c:	e00a      	b.n	8001e94 <getPinName+0x168>
        case LL_GPIO_PIN_11: return "Pin 11";
 8001e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001eec <getPinName+0x1c0>)
 8001e80:	e008      	b.n	8001e94 <getPinName+0x168>
        case LL_GPIO_PIN_12: return "Pin 12";
 8001e82:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef0 <getPinName+0x1c4>)
 8001e84:	e006      	b.n	8001e94 <getPinName+0x168>
        case LL_GPIO_PIN_13: return "Pin 13";
 8001e86:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef4 <getPinName+0x1c8>)
 8001e88:	e004      	b.n	8001e94 <getPinName+0x168>
        case LL_GPIO_PIN_14: return "Pin 14";
 8001e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef8 <getPinName+0x1cc>)
 8001e8c:	e002      	b.n	8001e94 <getPinName+0x168>
        case LL_GPIO_PIN_15: return "Pin 15";
 8001e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001efc <getPinName+0x1d0>)
 8001e90:	e000      	b.n	8001e94 <getPinName+0x168>
        default: return "Unknown Pin";
 8001e92:	4b1b      	ldr	r3, [pc, #108]	@ (8001f00 <getPinName+0x1d4>)
    }
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	04800080 	.word	0x04800080
 8001ea4:	04400040 	.word	0x04400040
 8001ea8:	04200020 	.word	0x04200020
 8001eac:	04100010 	.word	0x04100010
 8001eb0:	04080008 	.word	0x04080008
 8001eb4:	04040004 	.word	0x04040004
 8001eb8:	04020002 	.word	0x04020002
 8001ebc:	04010001 	.word	0x04010001
 8001ec0:	08006570 	.word	0x08006570
 8001ec4:	08006578 	.word	0x08006578
 8001ec8:	08006580 	.word	0x08006580
 8001ecc:	08006588 	.word	0x08006588
 8001ed0:	08006590 	.word	0x08006590
 8001ed4:	08006598 	.word	0x08006598
 8001ed8:	080065a0 	.word	0x080065a0
 8001edc:	080065a8 	.word	0x080065a8
 8001ee0:	080065b0 	.word	0x080065b0
 8001ee4:	080065b8 	.word	0x080065b8
 8001ee8:	080065c0 	.word	0x080065c0
 8001eec:	080065c8 	.word	0x080065c8
 8001ef0:	080065d0 	.word	0x080065d0
 8001ef4:	080065d8 	.word	0x080065d8
 8001ef8:	080065e0 	.word	0x080065e0
 8001efc:	080065e8 	.word	0x080065e8
 8001f00:	080065f0 	.word	0x080065f0

08001f04 <setConnection>:


MainTrack mainTracks[32] = {0};
SignalAnalyzerTrack signalAnalyzerTracks[8] = {0};

void setConnection(int x, int y, MUX mux, uint8_t mode) {
 8001f04:	b082      	sub	sp, #8
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	6039      	str	r1, [r7, #0]
 8001f10:	f107 0110 	add.w	r1, r7, #16
 8001f14:	e881 000c 	stmia.w	r1, {r2, r3}
    if (x < 0 || x > 15 || y < 0 || y > 7) {
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f2c0 80bd 	blt.w	800209a <setConnection+0x196>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b0f      	cmp	r3, #15
 8001f24:	f300 80b9 	bgt.w	800209a <setConnection+0x196>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f2c0 80b5 	blt.w	800209a <setConnection+0x196>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	2b07      	cmp	r3, #7
 8001f34:	f300 80b1 	bgt.w	800209a <setConnection+0x196>
    }

//    printMUXDetails(&mux);

    // Activate multiplexer using the struct for CS
    LL_GPIO_ResetOutputPin(mux.port, mux.pin);
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	4611      	mov	r1, r2
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fea7 	bl	8001c92 <LL_GPIO_ResetOutputPin>
    LL_mDelay(20);
 8001f44:	2014      	movs	r0, #20
 8001f46:	f002 f98b 	bl	8004260 <LL_mDelay>
    LL_GPIO_SetOutputPin(mux.port, mux.pin);
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fe8f 	bl	8001c74 <LL_GPIO_SetOutputPin>
    LL_mDelay(20);
 8001f56:	2014      	movs	r0, #20
 8001f58:	f002 f982 	bl	8004260 <LL_mDelay>

    // Set X address
    // Set X address
    (x & 0x01) ? LL_GPIO_SetOutputPin(AX_GPIO, AX0_PIN) : LL_GPIO_ResetOutputPin(AX_GPIO, AX0_PIN);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d005      	beq.n	8001f72 <setConnection+0x6e>
 8001f66:	f244 0140 	movw	r1, #16448	@ 0x4040
 8001f6a:	484f      	ldr	r0, [pc, #316]	@ (80020a8 <setConnection+0x1a4>)
 8001f6c:	f7ff fe82 	bl	8001c74 <LL_GPIO_SetOutputPin>
 8001f70:	e004      	b.n	8001f7c <setConnection+0x78>
 8001f72:	f244 0140 	movw	r1, #16448	@ 0x4040
 8001f76:	484c      	ldr	r0, [pc, #304]	@ (80020a8 <setConnection+0x1a4>)
 8001f78:	f7ff fe8b 	bl	8001c92 <LL_GPIO_ResetOutputPin>
    (x & 0x02) ? LL_GPIO_SetOutputPin(AX_GPIO, AX1_PIN) : LL_GPIO_ResetOutputPin(AX_GPIO, AX1_PIN);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d005      	beq.n	8001f92 <setConnection+0x8e>
 8001f86:	f241 0110 	movw	r1, #4112	@ 0x1010
 8001f8a:	4847      	ldr	r0, [pc, #284]	@ (80020a8 <setConnection+0x1a4>)
 8001f8c:	f7ff fe72 	bl	8001c74 <LL_GPIO_SetOutputPin>
 8001f90:	e004      	b.n	8001f9c <setConnection+0x98>
 8001f92:	f241 0110 	movw	r1, #4112	@ 0x1010
 8001f96:	4844      	ldr	r0, [pc, #272]	@ (80020a8 <setConnection+0x1a4>)
 8001f98:	f7ff fe7b 	bl	8001c92 <LL_GPIO_ResetOutputPin>
    (x & 0x04) ? LL_GPIO_SetOutputPin(AX_GPIO, AX2_PIN) : LL_GPIO_ResetOutputPin(AX_GPIO, AX2_PIN);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d005      	beq.n	8001fb2 <setConnection+0xae>
 8001fa6:	f640 0108 	movw	r1, #2056	@ 0x808
 8001faa:	483f      	ldr	r0, [pc, #252]	@ (80020a8 <setConnection+0x1a4>)
 8001fac:	f7ff fe62 	bl	8001c74 <LL_GPIO_SetOutputPin>
 8001fb0:	e004      	b.n	8001fbc <setConnection+0xb8>
 8001fb2:	f640 0108 	movw	r1, #2056	@ 0x808
 8001fb6:	483c      	ldr	r0, [pc, #240]	@ (80020a8 <setConnection+0x1a4>)
 8001fb8:	f7ff fe6b 	bl	8001c92 <LL_GPIO_ResetOutputPin>
    (x & 0x08) ? LL_GPIO_SetOutputPin(AX_GPIO, AX3_PIN) : LL_GPIO_ResetOutputPin(AX_GPIO, AX3_PIN);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <setConnection+0xce>
 8001fc6:	f242 0120 	movw	r1, #8224	@ 0x2020
 8001fca:	4837      	ldr	r0, [pc, #220]	@ (80020a8 <setConnection+0x1a4>)
 8001fcc:	f7ff fe52 	bl	8001c74 <LL_GPIO_SetOutputPin>
 8001fd0:	e004      	b.n	8001fdc <setConnection+0xd8>
 8001fd2:	f242 0120 	movw	r1, #8224	@ 0x2020
 8001fd6:	4834      	ldr	r0, [pc, #208]	@ (80020a8 <setConnection+0x1a4>)
 8001fd8:	f7ff fe5b 	bl	8001c92 <LL_GPIO_ResetOutputPin>

    // Set Y address
    (y & 0x01) ? LL_GPIO_SetOutputPin(AY_GPIO, AY0_PIN) : LL_GPIO_ResetOutputPin(AY_GPIO, AY0_PIN);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d005      	beq.n	8001ff2 <setConnection+0xee>
 8001fe6:	f240 1101 	movw	r1, #257	@ 0x101
 8001fea:	482f      	ldr	r0, [pc, #188]	@ (80020a8 <setConnection+0x1a4>)
 8001fec:	f7ff fe42 	bl	8001c74 <LL_GPIO_SetOutputPin>
 8001ff0:	e004      	b.n	8001ffc <setConnection+0xf8>
 8001ff2:	f240 1101 	movw	r1, #257	@ 0x101
 8001ff6:	482c      	ldr	r0, [pc, #176]	@ (80020a8 <setConnection+0x1a4>)
 8001ff8:	f7ff fe4b 	bl	8001c92 <LL_GPIO_ResetOutputPin>
    (y & 0x02) ? LL_GPIO_SetOutputPin(AY_GPIO, AY1_PIN) : LL_GPIO_ResetOutputPin(AY_GPIO, AY1_PIN);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d005      	beq.n	8002012 <setConnection+0x10e>
 8002006:	f240 2102 	movw	r1, #514	@ 0x202
 800200a:	4827      	ldr	r0, [pc, #156]	@ (80020a8 <setConnection+0x1a4>)
 800200c:	f7ff fe32 	bl	8001c74 <LL_GPIO_SetOutputPin>
 8002010:	e004      	b.n	800201c <setConnection+0x118>
 8002012:	f240 2102 	movw	r1, #514	@ 0x202
 8002016:	4824      	ldr	r0, [pc, #144]	@ (80020a8 <setConnection+0x1a4>)
 8002018:	f7ff fe3b 	bl	8001c92 <LL_GPIO_ResetOutputPin>
    (y & 0x04) ? LL_GPIO_SetOutputPin(AY_GPIO, AY2_PIN) : LL_GPIO_ResetOutputPin(AY_GPIO, AY2_PIN);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b00      	cmp	r3, #0
 8002024:	d005      	beq.n	8002032 <setConnection+0x12e>
 8002026:	f240 4104 	movw	r1, #1028	@ 0x404
 800202a:	481f      	ldr	r0, [pc, #124]	@ (80020a8 <setConnection+0x1a4>)
 800202c:	f7ff fe22 	bl	8001c74 <LL_GPIO_SetOutputPin>
 8002030:	e004      	b.n	800203c <setConnection+0x138>
 8002032:	f240 4104 	movw	r1, #1028	@ 0x404
 8002036:	481c      	ldr	r0, [pc, #112]	@ (80020a8 <setConnection+0x1a4>)
 8002038:	f7ff fe2b 	bl	8001c92 <LL_GPIO_ResetOutputPin>


    // Set data pin
    mode ? LL_GPIO_SetOutputPin(DAT_GPIO, DAT_PIN) : LL_GPIO_ResetOutputPin(DAT_GPIO, DAT_PIN);
 800203c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <setConnection+0x14c>
 8002044:	f248 0180 	movw	r1, #32896	@ 0x8080
 8002048:	4817      	ldr	r0, [pc, #92]	@ (80020a8 <setConnection+0x1a4>)
 800204a:	f7ff fe13 	bl	8001c74 <LL_GPIO_SetOutputPin>
 800204e:	e004      	b.n	800205a <setConnection+0x156>
 8002050:	f248 0180 	movw	r1, #32896	@ 0x8080
 8002054:	4814      	ldr	r0, [pc, #80]	@ (80020a8 <setConnection+0x1a4>)
 8002056:	f7ff fe1c 	bl	8001c92 <LL_GPIO_ResetOutputPin>

    // Strobe signal
    LL_mDelay(20);
 800205a:	2014      	movs	r0, #20
 800205c:	f002 f900 	bl	8004260 <LL_mDelay>
	LL_GPIO_SetOutputPin(STB_GPIO, STB_PIN);
 8002060:	4912      	ldr	r1, [pc, #72]	@ (80020ac <setConnection+0x1a8>)
 8002062:	4811      	ldr	r0, [pc, #68]	@ (80020a8 <setConnection+0x1a4>)
 8002064:	f7ff fe06 	bl	8001c74 <LL_GPIO_SetOutputPin>
	LL_mDelay(20);
 8002068:	2014      	movs	r0, #20
 800206a:	f002 f8f9 	bl	8004260 <LL_mDelay>
	LL_GPIO_ResetOutputPin(STB_GPIO, STB_PIN);
 800206e:	490f      	ldr	r1, [pc, #60]	@ (80020ac <setConnection+0x1a8>)
 8002070:	480d      	ldr	r0, [pc, #52]	@ (80020a8 <setConnection+0x1a4>)
 8002072:	f7ff fe0e 	bl	8001c92 <LL_GPIO_ResetOutputPin>

	LL_mDelay(20);
 8002076:	2014      	movs	r0, #20
 8002078:	f002 f8f2 	bl	8004260 <LL_mDelay>

	LL_GPIO_ResetOutputPin(DAT_GPIO, DAT_PIN);
 800207c:	f248 0180 	movw	r1, #32896	@ 0x8080
 8002080:	4809      	ldr	r0, [pc, #36]	@ (80020a8 <setConnection+0x1a4>)
 8002082:	f7ff fe06 	bl	8001c92 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(mux.port, mux.pin);
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	4611      	mov	r1, r2
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fe00 	bl	8001c92 <LL_GPIO_ResetOutputPin>

	LL_mDelay(20);
 8002092:	2014      	movs	r0, #20
 8002094:	f002 f8e4 	bl	8004260 <LL_mDelay>
 8002098:	e000      	b.n	800209c <setConnection+0x198>
        return;
 800209a:	bf00      	nop
}
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80020a4:	b002      	add	sp, #8
 80020a6:	4770      	bx	lr
 80020a8:	40010c00 	.word	0x40010c00
 80020ac:	04010001 	.word	0x04010001

080020b0 <routeBreadboard>:

void routeBreadboard(int breadboardPin1, int breadboardPin2, int net_id, MUX *muxes, size_t muxCount, uint8_t mode, RGB_t rgb) {
 80020b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020b2:	b0a7      	sub	sp, #156	@ 0x9c
 80020b4:	af0c      	add	r7, sp, #48	@ 0x30
 80020b6:	6278      	str	r0, [r7, #36]	@ 0x24
 80020b8:	6239      	str	r1, [r7, #32]
 80020ba:	61fa      	str	r2, [r7, #28]
 80020bc:	61bb      	str	r3, [r7, #24]

    char pin1Name[6], pin2Name[6];
    snprintf(pin1Name, sizeof(pin1Name), "B_%d", breadboardPin1);
 80020be:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80020c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c4:	4a94      	ldr	r2, [pc, #592]	@ (8002318 <routeBreadboard+0x268>)
 80020c6:	2106      	movs	r1, #6
 80020c8:	f002 faf2 	bl	80046b0 <sniprintf>
    snprintf(pin2Name, sizeof(pin2Name), "B_%d", breadboardPin2);
 80020cc:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80020d0:	6a3b      	ldr	r3, [r7, #32]
 80020d2:	4a91      	ldr	r2, [pc, #580]	@ (8002318 <routeBreadboard+0x268>)
 80020d4:	2106      	movs	r1, #6
 80020d6:	f002 faeb 	bl	80046b0 <sniprintf>

    printf("R: %d, G: %d, B: %d\n",
    		rgb.color.r, rgb.color.g, rgb.color.b);
 80020da:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
    printf("R: %d, G: %d, B: %d\n",
 80020de:	4619      	mov	r1, r3
    		rgb.color.r, rgb.color.g, rgb.color.b);
 80020e0:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
    printf("R: %d, G: %d, B: %d\n",
 80020e4:	461a      	mov	r2, r3
    		rgb.color.r, rgb.color.g, rgb.color.b);
 80020e6:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
    printf("R: %d, G: %d, B: %d\n",
 80020ea:	488c      	ldr	r0, [pc, #560]	@ (800231c <routeBreadboard+0x26c>)
 80020ec:	f002 fa68 	bl	80045c0 <iprintf>

    printf("Routing %s to %s with net ID: %d\n", pin1Name, pin2Name, net_id);
 80020f0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80020f4:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	4889      	ldr	r0, [pc, #548]	@ (8002320 <routeBreadboard+0x270>)
 80020fc:	f002 fa60 	bl	80045c0 <iprintf>
    fflush(stdout);
 8002100:	4b88      	ldr	r3, [pc, #544]	@ (8002324 <routeBreadboard+0x274>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	4618      	mov	r0, r3
 8002108:	f002 f984 	bl	8004414 <fflush>

    int xIndex1 = -1, yIndex1 = -1;
 800210c:	f04f 33ff 	mov.w	r3, #4294967295
 8002110:	667b      	str	r3, [r7, #100]	@ 0x64
 8002112:	f04f 33ff 	mov.w	r3, #4294967295
 8002116:	663b      	str	r3, [r7, #96]	@ 0x60
    int xIndex2 = -1, yIndex2 = -1;
 8002118:	f04f 33ff 	mov.w	r3, #4294967295
 800211c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800211e:	f04f 33ff 	mov.w	r3, #4294967295
 8002122:	65bb      	str	r3, [r7, #88]	@ 0x58
    MUX *mux1 = NULL;
 8002124:	2300      	movs	r3, #0
 8002126:	657b      	str	r3, [r7, #84]	@ 0x54
    MUX *mux2 = NULL;
 8002128:	2300      	movs	r3, #0
 800212a:	653b      	str	r3, [r7, #80]	@ 0x50
    MainTrack *selectedTrack = NULL;
 800212c:	2300      	movs	r3, #0
 800212e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    int muxIndex = -1;
 8002130:	f04f 33ff 	mov.w	r3, #4294967295
 8002134:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // Find an available or existing main track for the given net ID
    for (int x = 0; x < 32; ++x) {
 8002136:	2300      	movs	r3, #0
 8002138:	64bb      	str	r3, [r7, #72]	@ 0x48
 800213a:	e02c      	b.n	8002196 <routeBreadboard+0xe6>
        if (mainTracks[x].net_id == net_id) {
 800213c:	4a7a      	ldr	r2, [pc, #488]	@ (8002328 <routeBreadboard+0x278>)
 800213e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	4413      	add	r3, r2
 8002144:	3304      	adds	r3, #4
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	69fa      	ldr	r2, [r7, #28]
 800214a:	429a      	cmp	r2, r3
 800214c:	d105      	bne.n	800215a <routeBreadboard+0xaa>
            selectedTrack = &mainTracks[x];  // Reuse existing track if net ID matches
 800214e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	4a75      	ldr	r2, [pc, #468]	@ (8002328 <routeBreadboard+0x278>)
 8002154:	4413      	add	r3, r2
 8002156:	64fb      	str	r3, [r7, #76]	@ 0x4c
            break;
 8002158:	e020      	b.n	800219c <routeBreadboard+0xec>
        } else if (!mainTracks[x].is_used) {
 800215a:	4a73      	ldr	r2, [pc, #460]	@ (8002328 <routeBreadboard+0x278>)
 800215c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	4413      	add	r3, r2
 8002162:	3308      	adds	r3, #8
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d112      	bne.n	8002190 <routeBreadboard+0xe0>
            selectedTrack = &mainTracks[x];  // Assign new track if available
 800216a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	4a6e      	ldr	r2, [pc, #440]	@ (8002328 <routeBreadboard+0x278>)
 8002170:	4413      	add	r3, r2
 8002172:	64fb      	str	r3, [r7, #76]	@ 0x4c
            selectedTrack->is_used = 1;
 8002174:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002176:	2201      	movs	r2, #1
 8002178:	609a      	str	r2, [r3, #8]
            selectedTrack->net_id = net_id;
 800217a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800217c:	69fa      	ldr	r2, [r7, #28]
 800217e:	605a      	str	r2, [r3, #4]
            selectedTrack->track_id = x; // Assign track ID here
 8002180:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002182:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002184:	601a      	str	r2, [r3, #0]
            printf("Selected Track id: %d\n", x);
 8002186:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002188:	4868      	ldr	r0, [pc, #416]	@ (800232c <routeBreadboard+0x27c>)
 800218a:	f002 fa19 	bl	80045c0 <iprintf>
            break;
 800218e:	e005      	b.n	800219c <routeBreadboard+0xec>
    for (int x = 0; x < 32; ++x) {
 8002190:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002192:	3301      	adds	r3, #1
 8002194:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002196:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002198:	2b1f      	cmp	r3, #31
 800219a:	ddcf      	ble.n	800213c <routeBreadboard+0x8c>
        }
    }

    if (!selectedTrack) {
 800219c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d104      	bne.n	80021ac <routeBreadboard+0xfc>
        printf("Error: No available main track for net ID %d\n", net_id);
 80021a2:	69f9      	ldr	r1, [r7, #28]
 80021a4:	4862      	ldr	r0, [pc, #392]	@ (8002330 <routeBreadboard+0x280>)
 80021a6:	f002 fa0b 	bl	80045c0 <iprintf>
 80021aa:	e16c      	b.n	8002486 <routeBreadboard+0x3d6>
        return;
    }

    // Update connection counter based on mode
	if (mode == 1) {
 80021ac:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d10d      	bne.n	80021d0 <routeBreadboard+0x120>
		selectedTrack->current_connections++; // Increment current connections
 80021b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021bc:	60da      	str	r2, [r3, #12]
		printf("Main Track %d incremented. Current connections: %d\n", selectedTrack->track_id, selectedTrack->current_connections);
 80021be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021c0:	6819      	ldr	r1, [r3, #0]
 80021c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	461a      	mov	r2, r3
 80021c8:	485a      	ldr	r0, [pc, #360]	@ (8002334 <routeBreadboard+0x284>)
 80021ca:	f002 f9f9 	bl	80045c0 <iprintf>
 80021ce:	e025      	b.n	800221c <routeBreadboard+0x16c>
	} else if (mode == 0) {
 80021d0:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d121      	bne.n	800221c <routeBreadboard+0x16c>
		selectedTrack->current_connections--; // Decrement current connections
 80021d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	1e5a      	subs	r2, r3, #1
 80021de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021e0:	60da      	str	r2, [r3, #12]
		if (selectedTrack->current_connections <= 0) { // If counter is 0, free track
 80021e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	dc10      	bgt.n	800220c <routeBreadboard+0x15c>
			printf("Main Track %d is now free\n", selectedTrack->track_id);
 80021ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4619      	mov	r1, r3
 80021f0:	4851      	ldr	r0, [pc, #324]	@ (8002338 <routeBreadboard+0x288>)
 80021f2:	f002 f9e5 	bl	80045c0 <iprintf>
			selectedTrack->is_used = 0;
 80021f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
			selectedTrack->net_id = -1;
 80021fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002202:	605a      	str	r2, [r3, #4]
			selectedTrack->current_connections = 0;
 8002204:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002206:	2200      	movs	r2, #0
 8002208:	60da      	str	r2, [r3, #12]
 800220a:	e007      	b.n	800221c <routeBreadboard+0x16c>
		}else{
			printf("Main Track %d decremented, but still occupied. Current connections: %d\n", selectedTrack->track_id, selectedTrack->current_connections);
 800220c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800220e:	6819      	ldr	r1, [r3, #0]
 8002210:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	461a      	mov	r2, r3
 8002216:	4849      	ldr	r0, [pc, #292]	@ (800233c <routeBreadboard+0x28c>)
 8002218:	f002 f9d2 	bl	80045c0 <iprintf>

		}
	}

    muxIndex = (selectedTrack->track_id < 16) ? 0 : 1;
 800221c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b0f      	cmp	r3, #15
 8002222:	bfcc      	ite	gt
 8002224:	2301      	movgt	r3, #1
 8002226:	2300      	movle	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	63fb      	str	r3, [r7, #60]	@ 0x3c

        for (size_t i = muxIndex; i < muxCount; i += 2) {
 800222c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800222e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002230:	e05b      	b.n	80022ea <routeBreadboard+0x23a>
            for (int y = 0; y < 8; ++y) {
 8002232:	2300      	movs	r3, #0
 8002234:	643b      	str	r3, [r7, #64]	@ 0x40
 8002236:	e04c      	b.n	80022d2 <routeBreadboard+0x222>
                if (strcmp((*muxes[i].yPins)[y], pin1Name) == 0 && mux1 == NULL) {
 8002238:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4413      	add	r3, r2
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002248:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800224c:	4611      	mov	r1, r2
 800224e:	4618      	mov	r0, r3
 8002250:	f7fd ffe8 	bl	8000224 <strcmp>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d113      	bne.n	8002282 <routeBreadboard+0x1d2>
 800225a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800225c:	2b00      	cmp	r3, #0
 800225e:	d110      	bne.n	8002282 <routeBreadboard+0x1d2>
                    xIndex1 = selectedTrack->track_id % 16;
 8002260:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	425a      	negs	r2, r3
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	f002 020f 	and.w	r2, r2, #15
 800226e:	bf58      	it	pl
 8002270:	4253      	negpl	r3, r2
 8002272:	667b      	str	r3, [r7, #100]	@ 0x64
                    yIndex1 = y;
 8002274:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002276:	663b      	str	r3, [r7, #96]	@ 0x60
                    mux1 = &muxes[i];
 8002278:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800227a:	011b      	lsls	r3, r3, #4
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4413      	add	r3, r2
 8002280:	657b      	str	r3, [r7, #84]	@ 0x54
                }
                if (strcmp((*muxes[i].yPins)[y], pin2Name) == 0 && mux2 == NULL) {
 8002282:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4413      	add	r3, r2
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800228e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002292:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f7fd ffc3 	bl	8000224 <strcmp>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d113      	bne.n	80022cc <routeBreadboard+0x21c>
 80022a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d110      	bne.n	80022cc <routeBreadboard+0x21c>
                    xIndex2 = selectedTrack->track_id % 16;
 80022aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	425a      	negs	r2, r3
 80022b0:	f003 030f 	and.w	r3, r3, #15
 80022b4:	f002 020f 	and.w	r2, r2, #15
 80022b8:	bf58      	it	pl
 80022ba:	4253      	negpl	r3, r2
 80022bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    yIndex2 = y;
 80022be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022c0:	65bb      	str	r3, [r7, #88]	@ 0x58
                    mux2 = &muxes[i];
 80022c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4413      	add	r3, r2
 80022ca:	653b      	str	r3, [r7, #80]	@ 0x50
            for (int y = 0; y < 8; ++y) {
 80022cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022ce:	3301      	adds	r3, #1
 80022d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80022d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022d4:	2b07      	cmp	r3, #7
 80022d6:	ddaf      	ble.n	8002238 <routeBreadboard+0x188>
                }
            }
            if (mux1 && mux2) break;
 80022d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d002      	beq.n	80022e4 <routeBreadboard+0x234>
 80022de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d108      	bne.n	80022f6 <routeBreadboard+0x246>
        for (size_t i = muxIndex; i < muxCount; i += 2) {
 80022e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022e6:	3302      	adds	r3, #2
 80022e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80022ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80022ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d39e      	bcc.n	8002232 <routeBreadboard+0x182>
 80022f4:	e000      	b.n	80022f8 <routeBreadboard+0x248>
            if (mux1 && mux2) break;
 80022f6:	bf00      	nop
        }

        if (mux1 && mux2) {
 80022f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 80ba 	beq.w	8002474 <routeBreadboard+0x3c4>
 8002300:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 80b6 	beq.w	8002474 <routeBreadboard+0x3c4>
        	printf("%s (X:%d, Y:%d) at MUX[%d] CS: %s, Pin: %s, Main Track: %d\n"
 8002308:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800230c:	2b00      	cmp	r3, #0
 800230e:	d019      	beq.n	8002344 <routeBreadboard+0x294>
 8002310:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <routeBreadboard+0x290>)
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	e018      	b.n	8002348 <routeBreadboard+0x298>
 8002316:	bf00      	nop
 8002318:	08006674 	.word	0x08006674
 800231c:	0800667c 	.word	0x0800667c
 8002320:	08006694 	.word	0x08006694
 8002324:	20000cd0 	.word	0x20000cd0
 8002328:	20003ffc 	.word	0x20003ffc
 800232c:	080066b8 	.word	0x080066b8
 8002330:	080066d0 	.word	0x080066d0
 8002334:	08006700 	.word	0x08006700
 8002338:	08006734 	.word	0x08006734
 800233c:	08006750 	.word	0x08006750
 8002340:	08006798 	.word	0x08006798
 8002344:	4b51      	ldr	r3, [pc, #324]	@ (800248c <routeBreadboard+0x3dc>)
 8002346:	617b      	str	r3, [r7, #20]
        			"%s (X:%d, Y:%d) at MUX[%d] CS: %s, Pin: %s, Main Track: %d\n\n",
        	                mode ? "Connecting" : "Disconnecting",
        	                xIndex1, yIndex1, mux1 - muxes + 1, getPortName(mux1->port), getPinName(mux1->pin), selectedTrack->track_id,
 8002348:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	111b      	asrs	r3, r3, #4
        	printf("%s (X:%d, Y:%d) at MUX[%d] CS: %s, Pin: %s, Main Track: %d\n"
 8002350:	1c5c      	adds	r4, r3, #1
 8002352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff fcaa 	bl	8001cb0 <getPortName>
 800235c:	6138      	str	r0, [r7, #16]
 800235e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fce2 	bl	8001d2c <getPinName>
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800236c:	681d      	ldr	r5, [r3, #0]
 800236e:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <routeBreadboard+0x2ca>
 8002376:	4e46      	ldr	r6, [pc, #280]	@ (8002490 <routeBreadboard+0x3e0>)
 8002378:	e000      	b.n	800237c <routeBreadboard+0x2cc>
 800237a:	4e44      	ldr	r6, [pc, #272]	@ (800248c <routeBreadboard+0x3dc>)
							mode ? "Connecting" : "Disconnecting",
        	                xIndex2, yIndex2, mux2 - muxes + 1, getPortName(mux2->port), getPinName(mux2->pin), selectedTrack->track_id);
 800237c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	111b      	asrs	r3, r3, #4
        	printf("%s (X:%d, Y:%d) at MUX[%d] CS: %s, Pin: %s, Main Track: %d\n"
 8002384:	3301      	adds	r3, #1
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fc8f 	bl	8001cb0 <getPortName>
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff fcc7 	bl	8001d2c <getPinName>
 800239e:	4602      	mov	r2, r0
 80023a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80023a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	9208      	str	r2, [sp, #32]
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	9307      	str	r3, [sp, #28]
 80023b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023b2:	9306      	str	r3, [sp, #24]
 80023b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023b6:	9305      	str	r3, [sp, #20]
 80023b8:	9604      	str	r6, [sp, #16]
 80023ba:	9503      	str	r5, [sp, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	9302      	str	r3, [sp, #8]
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	9301      	str	r3, [sp, #4]
 80023c4:	9400      	str	r4, [sp, #0]
 80023c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023c8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80023ca:	6979      	ldr	r1, [r7, #20]
 80023cc:	4831      	ldr	r0, [pc, #196]	@ (8002494 <routeBreadboard+0x3e4>)
 80023ce:	f002 f8f7 	bl	80045c0 <iprintf>
        	        fflush(stdout);
 80023d2:	4b31      	ldr	r3, [pc, #196]	@ (8002498 <routeBreadboard+0x3e8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	4618      	mov	r0, r3
 80023da:	f002 f81b 	bl	8004414 <fflush>
			fflush(stdout);
 80023de:	4b2e      	ldr	r3, [pc, #184]	@ (8002498 <routeBreadboard+0x3e8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f002 f815 	bl	8004414 <fflush>


            setConnection(xIndex1, yIndex1, *mux1, mode);
 80023ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023ec:	f897 2084 	ldrb.w	r2, [r7, #132]	@ 0x84
 80023f0:	9202      	str	r2, [sp, #8]
 80023f2:	466c      	mov	r4, sp
 80023f4:	f103 0208 	add.w	r2, r3, #8
 80023f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023fc:	e884 0003 	stmia.w	r4, {r0, r1}
 8002400:	cb0c      	ldmia	r3, {r2, r3}
 8002402:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002404:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002406:	f7ff fd7d 	bl	8001f04 <setConnection>
            setConnection(xIndex2, yIndex2, *mux2, mode);
 800240a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800240c:	f897 2084 	ldrb.w	r2, [r7, #132]	@ 0x84
 8002410:	9202      	str	r2, [sp, #8]
 8002412:	466c      	mov	r4, sp
 8002414:	f103 0208 	add.w	r2, r3, #8
 8002418:	e892 0003 	ldmia.w	r2, {r0, r1}
 800241c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002420:	cb0c      	ldmia	r3, {r2, r3}
 8002422:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002424:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002426:	f7ff fd6d 	bl	8001f04 <setConnection>

            mode == 1 ? addToPin(breadboardPin1, rgb) : removeFromPin(breadboardPin1);
 800242a:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800242e:	2b01      	cmp	r3, #1
 8002430:	d107      	bne.n	8002442 <routeBreadboard+0x392>
 8002432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002434:	b2db      	uxtb	r3, r3
 8002436:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe f8d8 	bl	80005f0 <addToPin>
 8002440:	e004      	b.n	800244c <routeBreadboard+0x39c>
 8002442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002444:	b2db      	uxtb	r3, r3
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe f91a 	bl	8000680 <removeFromPin>
            mode == 1 ? addToPin(breadboardPin2, rgb) : removeFromPin(breadboardPin2);
 800244c:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8002450:	2b01      	cmp	r3, #1
 8002452:	d107      	bne.n	8002464 <routeBreadboard+0x3b4>
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	b2db      	uxtb	r3, r3
 8002458:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe f8c7 	bl	80005f0 <addToPin>
 8002462:	e004      	b.n	800246e <routeBreadboard+0x3be>
 8002464:	6a3b      	ldr	r3, [r7, #32]
 8002466:	b2db      	uxtb	r3, r3
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe f909 	bl	8000680 <removeFromPin>

			sendPixelData();
 800246e:	f7fe f97d 	bl	800076c <sendPixelData>
 8002472:	e008      	b.n	8002486 <routeBreadboard+0x3d6>
        } else {
            printf("Error: Unable to route pins - No available MUX found!\n");
 8002474:	4809      	ldr	r0, [pc, #36]	@ (800249c <routeBreadboard+0x3ec>)
 8002476:	f002 f913 	bl	80046a0 <puts>
            fflush(stdout);
 800247a:	4b07      	ldr	r3, [pc, #28]	@ (8002498 <routeBreadboard+0x3e8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	4618      	mov	r0, r3
 8002482:	f001 ffc7 	bl	8004414 <fflush>
        }
    }
 8002486:	376c      	adds	r7, #108	@ 0x6c
 8002488:	46bd      	mov	sp, r7
 800248a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800248c:	080067a4 	.word	0x080067a4
 8002490:	08006798 	.word	0x08006798
 8002494:	080067b4 	.word	0x080067b4
 8002498:	20000cd0 	.word	0x20000cd0
 800249c:	0800682c 	.word	0x0800682c

080024a0 <routeSignalAnalyzer>:

void routeSignalAnalyzer(int net_id, MUX *muxes, uint8_t mode) {
 80024a0:	b590      	push	{r4, r7, lr}
 80024a2:	b097      	sub	sp, #92	@ 0x5c
 80024a4:	af04      	add	r7, sp, #16
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	4613      	mov	r3, r2
 80024ac:	71fb      	strb	r3, [r7, #7]
    MainTrack *selectedTrack = NULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	647b      	str	r3, [r7, #68]	@ 0x44
    int trackIndex = -1;
 80024b2:	f04f 33ff 	mov.w	r3, #4294967295
 80024b6:	627b      	str	r3, [r7, #36]	@ 0x24
    char trackName[10];  // Buffer for formatted string
    int xIndex = -1, yIndex = -1;
 80024b8:	f04f 33ff 	mov.w	r3, #4294967295
 80024bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80024be:	f04f 33ff 	mov.w	r3, #4294967295
 80024c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    MUX *mux = NULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Step 1: Find a main track that is used and has the matching net_id
    for (int i = 0; i < 32; i++) {
 80024c8:	2300      	movs	r3, #0
 80024ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80024cc:	e02b      	b.n	8002526 <routeSignalAnalyzer+0x86>
        if (mainTracks[i].is_used && mainTracks[i].net_id == net_id) {
 80024ce:	4a8e      	ldr	r2, [pc, #568]	@ (8002708 <routeSignalAnalyzer+0x268>)
 80024d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	4413      	add	r3, r2
 80024d6:	3308      	adds	r3, #8
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d020      	beq.n	8002520 <routeSignalAnalyzer+0x80>
 80024de:	4a8a      	ldr	r2, [pc, #552]	@ (8002708 <routeSignalAnalyzer+0x268>)
 80024e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024e2:	011b      	lsls	r3, r3, #4
 80024e4:	4413      	add	r3, r2
 80024e6:	3304      	adds	r3, #4
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d117      	bne.n	8002520 <routeSignalAnalyzer+0x80>
            selectedTrack = &mainTracks[i];
 80024f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	4a84      	ldr	r2, [pc, #528]	@ (8002708 <routeSignalAnalyzer+0x268>)
 80024f6:	4413      	add	r3, r2
 80024f8:	647b      	str	r3, [r7, #68]	@ 0x44
            trackIndex = i;
 80024fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024fc:	627b      	str	r3, [r7, #36]	@ 0x24
            snprintf(trackName, sizeof(trackName), "MT_%d", trackIndex + 1); // Convert to "MT_X"
 80024fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002500:	3301      	adds	r3, #1
 8002502:	f107 0010 	add.w	r0, r7, #16
 8002506:	4a81      	ldr	r2, [pc, #516]	@ (800270c <routeSignalAnalyzer+0x26c>)
 8002508:	210a      	movs	r1, #10
 800250a:	f002 f8d1 	bl	80046b0 <sniprintf>
			printf("Found Main Track %d (Name: %s) for Net ID %d\n", selectedTrack->track_id, trackName, net_id);
 800250e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002510:	6819      	ldr	r1, [r3, #0]
 8002512:	f107 0210 	add.w	r2, r7, #16
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	487d      	ldr	r0, [pc, #500]	@ (8002710 <routeSignalAnalyzer+0x270>)
 800251a:	f002 f851 	bl	80045c0 <iprintf>
			break;
 800251e:	e005      	b.n	800252c <routeSignalAnalyzer+0x8c>
    for (int i = 0; i < 32; i++) {
 8002520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002522:	3301      	adds	r3, #1
 8002524:	637b      	str	r3, [r7, #52]	@ 0x34
 8002526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002528:	2b1f      	cmp	r3, #31
 800252a:	ddd0      	ble.n	80024ce <routeSignalAnalyzer+0x2e>
        }
    }

    if (!selectedTrack) {
 800252c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800252e:	2b00      	cmp	r3, #0
 8002530:	d104      	bne.n	800253c <routeSignalAnalyzer+0x9c>
        printf("Error: No active Main Track found for Net ID %d\n", net_id);
 8002532:	68f9      	ldr	r1, [r7, #12]
 8002534:	4877      	ldr	r0, [pc, #476]	@ (8002714 <routeSignalAnalyzer+0x274>)
 8002536:	f002 f843 	bl	80045c0 <iprintf>
        return;
 800253a:	e0e2      	b.n	8002702 <routeSignalAnalyzer+0x262>
    }

    // Step 2: Check MUX 33 and 34
    MUX *mux33 = &muxes[32]; // MUX 33 (Array index 32)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002542:	623b      	str	r3, [r7, #32]
    MUX *mux34 = &muxes[33]; // MUX 34 (Array index 33)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 800254a:	61fb      	str	r3, [r7, #28]

    // Step 3: Look for the track ID in X Pins of MUX 33 and 34

    for (int i = 0; i < 16; i++) {
 800254c:	2300      	movs	r3, #0
 800254e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002550:	e028      	b.n	80025a4 <routeSignalAnalyzer+0x104>
        if (strcmp((*mux33->xPins)[i], trackName) == 0) {
 8002552:	6a3b      	ldr	r3, [r7, #32]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800255c:	f107 0210 	add.w	r2, r7, #16
 8002560:	4611      	mov	r1, r2
 8002562:	4618      	mov	r0, r3
 8002564:	f7fd fe5e 	bl	8000224 <strcmp>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d104      	bne.n	8002578 <routeSignalAnalyzer+0xd8>
            xIndex = i;
 800256e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002570:	643b      	str	r3, [r7, #64]	@ 0x40
            mux = mux33;
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	63bb      	str	r3, [r7, #56]	@ 0x38
            break;
 8002576:	e018      	b.n	80025aa <routeSignalAnalyzer+0x10a>
        }
        if (strcmp((*mux34->xPins)[i], trackName) == 0) {
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800257e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002582:	f107 0210 	add.w	r2, r7, #16
 8002586:	4611      	mov	r1, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f7fd fe4b 	bl	8000224 <strcmp>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d104      	bne.n	800259e <routeSignalAnalyzer+0xfe>
            xIndex = i;
 8002594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002596:	643b      	str	r3, [r7, #64]	@ 0x40
            mux = mux34;
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	63bb      	str	r3, [r7, #56]	@ 0x38
            break;
 800259c:	e005      	b.n	80025aa <routeSignalAnalyzer+0x10a>
    for (int i = 0; i < 16; i++) {
 800259e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a0:	3301      	adds	r3, #1
 80025a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80025a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a6:	2b0f      	cmp	r3, #15
 80025a8:	ddd3      	ble.n	8002552 <routeSignalAnalyzer+0xb2>
        }
    }

    if (mode == 1) {  // Connecting
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d139      	bne.n	8002624 <routeSignalAnalyzer+0x184>
		for (int i = 0; i < 8; i++) {
 80025b0:	2300      	movs	r3, #0
 80025b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025b4:	e032      	b.n	800261c <routeSignalAnalyzer+0x17c>
			if (!signalAnalyzerTracks[i].is_used) {
 80025b6:	4958      	ldr	r1, [pc, #352]	@ (8002718 <routeSignalAnalyzer+0x278>)
 80025b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025ba:	4613      	mov	r3, r2
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	4413      	add	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	3308      	adds	r3, #8
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d124      	bne.n	8002616 <routeSignalAnalyzer+0x176>
				yIndex = i;
 80025cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
				signalAnalyzerTracks[i].is_used = 1;
 80025d0:	4951      	ldr	r1, [pc, #324]	@ (8002718 <routeSignalAnalyzer+0x278>)
 80025d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025d4:	4613      	mov	r3, r2
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	4413      	add	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	3308      	adds	r3, #8
 80025e0:	2201      	movs	r2, #1
 80025e2:	601a      	str	r2, [r3, #0]
				signalAnalyzerTracks[i].net_id = net_id;
 80025e4:	494c      	ldr	r1, [pc, #304]	@ (8002718 <routeSignalAnalyzer+0x278>)
 80025e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025e8:	4613      	mov	r3, r2
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	4413      	add	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	3304      	adds	r3, #4
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	601a      	str	r2, [r3, #0]
				signalAnalyzerTracks[i].track_id = xIndex;
 80025f8:	4947      	ldr	r1, [pc, #284]	@ (8002718 <routeSignalAnalyzer+0x278>)
 80025fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025fc:	4613      	mov	r3, r2
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002608:	601a      	str	r2, [r3, #0]
				printf("Assigned Y Pin %d to Net ID %d\n", yIndex, net_id);
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800260e:	4843      	ldr	r0, [pc, #268]	@ (800271c <routeSignalAnalyzer+0x27c>)
 8002610:	f001 ffd6 	bl	80045c0 <iprintf>
				break;
 8002614:	e04d      	b.n	80026b2 <routeSignalAnalyzer+0x212>
		for (int i = 0; i < 8; i++) {
 8002616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002618:	3301      	adds	r3, #1
 800261a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800261c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800261e:	2b07      	cmp	r3, #7
 8002620:	ddc9      	ble.n	80025b6 <routeSignalAnalyzer+0x116>
 8002622:	e046      	b.n	80026b2 <routeSignalAnalyzer+0x212>
			}
		}
	} else {  // Disconnecting
		for (int i = 0; i < 8; i++) {
 8002624:	2300      	movs	r3, #0
 8002626:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002628:	e040      	b.n	80026ac <routeSignalAnalyzer+0x20c>
			if (signalAnalyzerTracks[i].is_used && signalAnalyzerTracks[i].net_id == net_id) {
 800262a:	493b      	ldr	r1, [pc, #236]	@ (8002718 <routeSignalAnalyzer+0x278>)
 800262c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800262e:	4613      	mov	r3, r2
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	4413      	add	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	3308      	adds	r3, #8
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d032      	beq.n	80026a6 <routeSignalAnalyzer+0x206>
 8002640:	4935      	ldr	r1, [pc, #212]	@ (8002718 <routeSignalAnalyzer+0x278>)
 8002642:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002644:	4613      	mov	r3, r2
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	4413      	add	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	3304      	adds	r3, #4
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	429a      	cmp	r2, r3
 8002656:	d126      	bne.n	80026a6 <routeSignalAnalyzer+0x206>
				yIndex = i;
 8002658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800265a:	63fb      	str	r3, [r7, #60]	@ 0x3c
				signalAnalyzerTracks[i].is_used = 0;
 800265c:	492e      	ldr	r1, [pc, #184]	@ (8002718 <routeSignalAnalyzer+0x278>)
 800265e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002660:	4613      	mov	r3, r2
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	4413      	add	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	3308      	adds	r3, #8
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
				signalAnalyzerTracks[i].net_id = -1;
 8002670:	4929      	ldr	r1, [pc, #164]	@ (8002718 <routeSignalAnalyzer+0x278>)
 8002672:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002674:	4613      	mov	r3, r2
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	4413      	add	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	3304      	adds	r3, #4
 8002680:	f04f 32ff 	mov.w	r2, #4294967295
 8002684:	601a      	str	r2, [r3, #0]
				signalAnalyzerTracks[i].track_id = -1;
 8002686:	4924      	ldr	r1, [pc, #144]	@ (8002718 <routeSignalAnalyzer+0x278>)
 8002688:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800268a:	4613      	mov	r3, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4413      	add	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	f04f 32ff 	mov.w	r2, #4294967295
 8002698:	601a      	str	r2, [r3, #0]
				printf("Freed Y Pin %d for Net ID %d\n", yIndex, net_id);
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800269e:	4820      	ldr	r0, [pc, #128]	@ (8002720 <routeSignalAnalyzer+0x280>)
 80026a0:	f001 ff8e 	bl	80045c0 <iprintf>
				break;
 80026a4:	e005      	b.n	80026b2 <routeSignalAnalyzer+0x212>
		for (int i = 0; i < 8; i++) {
 80026a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026a8:	3301      	adds	r3, #1
 80026aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ae:	2b07      	cmp	r3, #7
 80026b0:	ddbb      	ble.n	800262a <routeSignalAnalyzer+0x18a>
			}
		}
	}

	if (yIndex == -1) {
 80026b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b8:	d103      	bne.n	80026c2 <routeSignalAnalyzer+0x222>
		printf("Error: No available Y Pin found for Signal Analyzer\n");
 80026ba:	481a      	ldr	r0, [pc, #104]	@ (8002724 <routeSignalAnalyzer+0x284>)
 80026bc:	f001 fff0 	bl	80046a0 <puts>
		return;
 80026c0:	e01f      	b.n	8002702 <routeSignalAnalyzer+0x262>
	}

	printf("Connecting Signal Analyzer to MUX %d at (X: %d, Y: %d) for Net ID %d\n",
 80026c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d101      	bne.n	80026ce <routeSignalAnalyzer+0x22e>
 80026ca:	2121      	movs	r1, #33	@ 0x21
 80026cc:	e000      	b.n	80026d0 <routeSignalAnalyzer+0x230>
 80026ce:	2122      	movs	r1, #34	@ 0x22
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80026d8:	4813      	ldr	r0, [pc, #76]	@ (8002728 <routeSignalAnalyzer+0x288>)
 80026da:	f001 ff71 	bl	80045c0 <iprintf>
		   (mux == mux33 ? 33 : 34), xIndex, yIndex, net_id);

	printf("\n");
 80026de:	200a      	movs	r0, #10
 80026e0:	f001 ff80 	bl	80045e4 <putchar>

	// Step 5: Set the connection
	setConnection(xIndex, yIndex, *mux, mode);
 80026e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026e6:	79fa      	ldrb	r2, [r7, #7]
 80026e8:	9202      	str	r2, [sp, #8]
 80026ea:	466c      	mov	r4, sp
 80026ec:	f103 0208 	add.w	r2, r3, #8
 80026f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026f4:	e884 0003 	stmia.w	r4, {r0, r1}
 80026f8:	cb0c      	ldmia	r3, {r2, r3}
 80026fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80026fc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80026fe:	f7ff fc01 	bl	8001f04 <setConnection>
}
 8002702:	374c      	adds	r7, #76	@ 0x4c
 8002704:	46bd      	mov	sp, r7
 8002706:	bd90      	pop	{r4, r7, pc}
 8002708:	20003ffc 	.word	0x20003ffc
 800270c:	08006864 	.word	0x08006864
 8002710:	0800686c 	.word	0x0800686c
 8002714:	0800689c 	.word	0x0800689c
 8002718:	200041fc 	.word	0x200041fc
 800271c:	080068d0 	.word	0x080068d0
 8002720:	080068f0 	.word	0x080068f0
 8002724:	08006910 	.word	0x08006910
 8002728:	08006944 	.word	0x08006944

0800272c <clear>:

void clear() {
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
    printf("Clearing all main tracks and signal analyzer tracks...\n");
 8002732:	4836      	ldr	r0, [pc, #216]	@ (800280c <clear+0xe0>)
 8002734:	f001 ffb4 	bl	80046a0 <puts>

    // Step 1: Clear all main tracks
    for (int i = 0; i < 32; i++) {
 8002738:	2300      	movs	r3, #0
 800273a:	607b      	str	r3, [r7, #4]
 800273c:	e01f      	b.n	800277e <clear+0x52>
        mainTracks[i].is_used = 0;
 800273e:	4a34      	ldr	r2, [pc, #208]	@ (8002810 <clear+0xe4>)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	4413      	add	r3, r2
 8002746:	3308      	adds	r3, #8
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
        mainTracks[i].net_id = -1;
 800274c:	4a30      	ldr	r2, [pc, #192]	@ (8002810 <clear+0xe4>)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	4413      	add	r3, r2
 8002754:	3304      	adds	r3, #4
 8002756:	f04f 32ff 	mov.w	r2, #4294967295
 800275a:	601a      	str	r2, [r3, #0]
        mainTracks[i].current_connections = 0;
 800275c:	4a2c      	ldr	r2, [pc, #176]	@ (8002810 <clear+0xe4>)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	4413      	add	r3, r2
 8002764:	330c      	adds	r3, #12
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
        mainTracks[i].track_id = -1;
 800276a:	4a29      	ldr	r2, [pc, #164]	@ (8002810 <clear+0xe4>)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	4413      	add	r3, r2
 8002772:	f04f 32ff 	mov.w	r2, #4294967295
 8002776:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 32; i++) {
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3301      	adds	r3, #1
 800277c:	607b      	str	r3, [r7, #4]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b1f      	cmp	r3, #31
 8002782:	dddc      	ble.n	800273e <clear+0x12>
    }

    printf("All main tracks cleared.\n");
 8002784:	4823      	ldr	r0, [pc, #140]	@ (8002814 <clear+0xe8>)
 8002786:	f001 ff8b 	bl	80046a0 <puts>

    // Step 2: Clear all signal analyzer tracks
    for (int i = 0; i < 8; i++) {
 800278a:	2300      	movs	r3, #0
 800278c:	603b      	str	r3, [r7, #0]
 800278e:	e021      	b.n	80027d4 <clear+0xa8>
        signalAnalyzerTracks[i].is_used = 0;
 8002790:	4921      	ldr	r1, [pc, #132]	@ (8002818 <clear+0xec>)
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	4613      	mov	r3, r2
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	4413      	add	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	3308      	adds	r3, #8
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
        signalAnalyzerTracks[i].net_id = -1;
 80027a4:	491c      	ldr	r1, [pc, #112]	@ (8002818 <clear+0xec>)
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	4613      	mov	r3, r2
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	4413      	add	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	3304      	adds	r3, #4
 80027b4:	f04f 32ff 	mov.w	r2, #4294967295
 80027b8:	601a      	str	r2, [r3, #0]
        signalAnalyzerTracks[i].track_id = -1;
 80027ba:	4917      	ldr	r1, [pc, #92]	@ (8002818 <clear+0xec>)
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	4613      	mov	r3, r2
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	4413      	add	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	440b      	add	r3, r1
 80027c8:	f04f 32ff 	mov.w	r2, #4294967295
 80027cc:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	3301      	adds	r3, #1
 80027d2:	603b      	str	r3, [r7, #0]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	2b07      	cmp	r3, #7
 80027d8:	ddda      	ble.n	8002790 <clear+0x64>
    }

    printf("All signal analyzer tracks cleared.\n");
 80027da:	4810      	ldr	r0, [pc, #64]	@ (800281c <clear+0xf0>)
 80027dc:	f001 ff60 	bl	80046a0 <puts>
//    }
//
//    printf("All multiplexer connections cleared.\n");

    // Step 4: Perform hardware reset using RST_GPIO
    LL_GPIO_SetOutputPin(RST_GPIO, RST_PIN);
 80027e0:	490f      	ldr	r1, [pc, #60]	@ (8002820 <clear+0xf4>)
 80027e2:	4810      	ldr	r0, [pc, #64]	@ (8002824 <clear+0xf8>)
 80027e4:	f7ff fa46 	bl	8001c74 <LL_GPIO_SetOutputPin>
    LL_mDelay(20);
 80027e8:	2014      	movs	r0, #20
 80027ea:	f001 fd39 	bl	8004260 <LL_mDelay>
    LL_GPIO_ResetOutputPin(RST_GPIO, RST_PIN);
 80027ee:	490c      	ldr	r1, [pc, #48]	@ (8002820 <clear+0xf4>)
 80027f0:	480c      	ldr	r0, [pc, #48]	@ (8002824 <clear+0xf8>)
 80027f2:	f7ff fa4e 	bl	8001c92 <LL_GPIO_ResetOutputPin>
    LL_mDelay(20);
 80027f6:	2014      	movs	r0, #20
 80027f8:	f001 fd32 	bl	8004260 <LL_mDelay>

    printf("RST complete.\n\n");
 80027fc:	480a      	ldr	r0, [pc, #40]	@ (8002828 <clear+0xfc>)
 80027fe:	f001 ff4f 	bl	80046a0 <puts>
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	0800698c 	.word	0x0800698c
 8002810:	20003ffc 	.word	0x20003ffc
 8002814:	080069c4 	.word	0x080069c4
 8002818:	200041fc 	.word	0x200041fc
 800281c:	080069e0 	.word	0x080069e0
 8002820:	04020002 	.word	0x04020002
 8002824:	40010c00 	.word	0x40010c00
 8002828:	08006a04 	.word	0x08006a04

0800282c <processCommand>:

void processCommand(char *command) {
 800282c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800282e:	b095      	sub	sp, #84	@ 0x54
 8002830:	af06      	add	r7, sp, #24
 8002832:	6078      	str	r0, [r7, #4]
	if (!fault_3v3_triggered || !fault_5v_triggered){ // test tmr
 8002834:	4b5e      	ldr	r3, [pc, #376]	@ (80029b0 <processCommand+0x184>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d004      	beq.n	8002848 <processCommand+0x1c>
 800283e:	4b5d      	ldr	r3, [pc, #372]	@ (80029b4 <processCommand+0x188>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d15d      	bne.n	8002904 <processCommand+0xd8>

		if (strncmp(command, "RB", 2) == 0) {  // Check if it's a "ROUTE" command
 8002848:	2202      	movs	r2, #2
 800284a:	495b      	ldr	r1, [pc, #364]	@ (80029b8 <processCommand+0x18c>)
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f002 f86f 	bl	8004930 <strncmp>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d155      	bne.n	8002904 <processCommand+0xd8>
				int pin1, pin2, net_id, mode, r, g, b;
				int parsed = sscanf(command, "RB %d %d %d %d %d %d %d",
 8002858:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800285c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002860:	f107 0314 	add.w	r3, r7, #20
 8002864:	9304      	str	r3, [sp, #16]
 8002866:	f107 0318 	add.w	r3, r7, #24
 800286a:	9303      	str	r3, [sp, #12]
 800286c:	f107 031c 	add.w	r3, r7, #28
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	f107 0320 	add.w	r3, r7, #32
 8002876:	9301      	str	r3, [sp, #4]
 8002878:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	460b      	mov	r3, r1
 8002880:	494e      	ldr	r1, [pc, #312]	@ (80029bc <processCommand+0x190>)
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f001 ff48 	bl	8004718 <siscanf>
 8002888:	6378      	str	r0, [r7, #52]	@ 0x34
									&pin1, &pin2, &net_id, &mode, &r, &g, &b);
				if (parsed == 7) {  // Ensure all arguments were parsed
 800288a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800288c:	2b07      	cmp	r3, #7
 800288e:	d130      	bne.n	80028f2 <processCommand+0xc6>
					RGB_t color = {b, r, g}; // This is brg, because of the Union, the union is brg, cuz the leds take brg
 8002890:	2300      	movs	r3, #0
 8002892:	613b      	str	r3, [r7, #16]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	b2db      	uxtb	r3, r3
 8002898:	743b      	strb	r3, [r7, #16]
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	b2db      	uxtb	r3, r3
 800289e:	747b      	strb	r3, [r7, #17]
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	74bb      	strb	r3, [r7, #18]
					printf("Calling routeBreadboard with: Pin1=%d, Pin2=%d, NetID=%d, Mode=%d, RGB(%d,%d,%d)\n",
 80028a6:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 80028a8:	6abd      	ldr	r5, [r7, #40]	@ 0x28
 80028aa:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	69fa      	ldr	r2, [r7, #28]
 80028b0:	69b9      	ldr	r1, [r7, #24]
 80028b2:	6978      	ldr	r0, [r7, #20]
 80028b4:	9003      	str	r0, [sp, #12]
 80028b6:	9102      	str	r1, [sp, #8]
 80028b8:	9201      	str	r2, [sp, #4]
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	4633      	mov	r3, r6
 80028be:	462a      	mov	r2, r5
 80028c0:	4621      	mov	r1, r4
 80028c2:	483f      	ldr	r0, [pc, #252]	@ (80029c0 <processCommand+0x194>)
 80028c4:	f001 fe7c 	bl	80045c0 <iprintf>
						   pin1, pin2, net_id, mode, r, g, b);
					fflush(stdout);
 80028c8:	4b3e      	ldr	r3, [pc, #248]	@ (80029c4 <processCommand+0x198>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f001 fda0 	bl	8004414 <fflush>

					routeBreadboard(pin1, pin2, net_id, muxes, sizeof(muxes) / sizeof(muxes[0]), mode, color);
 80028d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80028d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028d8:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	9202      	str	r2, [sp, #8]
 80028e2:	9301      	str	r3, [sp, #4]
 80028e4:	2322      	movs	r3, #34	@ 0x22
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	4b37      	ldr	r3, [pc, #220]	@ (80029c8 <processCommand+0x19c>)
 80028ea:	4622      	mov	r2, r4
 80028ec:	f7ff fbe0 	bl	80020b0 <routeBreadboard>
 80028f0:	e008      	b.n	8002904 <processCommand+0xd8>
				} else {
					printf("Error: Invalid RB command format!\n");
 80028f2:	4836      	ldr	r0, [pc, #216]	@ (80029cc <processCommand+0x1a0>)
 80028f4:	f001 fed4 	bl	80046a0 <puts>
					fflush(stdout);
 80028f8:	4b32      	ldr	r3, [pc, #200]	@ (80029c4 <processCommand+0x198>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	4618      	mov	r0, r3
 8002900:	f001 fd88 	bl	8004414 <fflush>
				}
			}
		}
		if (strncmp(command, "RS", 2) == 0) {
 8002904:	2202      	movs	r2, #2
 8002906:	4932      	ldr	r1, [pc, #200]	@ (80029d0 <processCommand+0x1a4>)
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f002 f811 	bl	8004930 <strncmp>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d128      	bne.n	8002966 <processCommand+0x13a>
			int net_id, mode;
			int parsed = sscanf(command, "RS %d %d",
 8002914:	f107 0308 	add.w	r3, r7, #8
 8002918:	f107 020c 	add.w	r2, r7, #12
 800291c:	492d      	ldr	r1, [pc, #180]	@ (80029d4 <processCommand+0x1a8>)
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f001 fefa 	bl	8004718 <siscanf>
 8002924:	6338      	str	r0, [r7, #48]	@ 0x30
								&net_id, &mode);
			if (parsed == 2) {  // Ensure all arguments were parsed
 8002926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002928:	2b02      	cmp	r3, #2
 800292a:	d113      	bne.n	8002954 <processCommand+0x128>
				printf("Calling routeSignalAnalyzer with: NetID=%d, Mode=%d\n",
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	4619      	mov	r1, r3
 8002932:	4829      	ldr	r0, [pc, #164]	@ (80029d8 <processCommand+0x1ac>)
 8002934:	f001 fe44 	bl	80045c0 <iprintf>
					   net_id, mode);
				fflush(stdout);
 8002938:	4b22      	ldr	r3, [pc, #136]	@ (80029c4 <processCommand+0x198>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	4618      	mov	r0, r3
 8002940:	f001 fd68 	bl	8004414 <fflush>

				routeSignalAnalyzer(net_id, muxes, mode);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	491f      	ldr	r1, [pc, #124]	@ (80029c8 <processCommand+0x19c>)
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff fda7 	bl	80024a0 <routeSignalAnalyzer>
 8002952:	e008      	b.n	8002966 <processCommand+0x13a>
			} else {
				printf("Error: Invalid RS command format!\n");
 8002954:	4821      	ldr	r0, [pc, #132]	@ (80029dc <processCommand+0x1b0>)
 8002956:	f001 fea3 	bl	80046a0 <puts>
				fflush(stdout);
 800295a:	4b1a      	ldr	r3, [pc, #104]	@ (80029c4 <processCommand+0x198>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	4618      	mov	r0, r3
 8002962:	f001 fd57 	bl	8004414 <fflush>
		}

	}

    if (strncmp(command, "CLR", 3) == 0) {
 8002966:	2203      	movs	r2, #3
 8002968:	491d      	ldr	r1, [pc, #116]	@ (80029e0 <processCommand+0x1b4>)
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f001 ffe0 	bl	8004930 <strncmp>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d103      	bne.n	800297e <processCommand+0x152>
		clear();
 8002976:	f7ff fed9 	bl	800272c <clear>
		clearLeds();
 800297a:	f7fd fecb 	bl	8000714 <clearLeds>
	}

    if (strncmp(command, "EN 5V", 5) == 0) {
 800297e:	2205      	movs	r2, #5
 8002980:	4918      	ldr	r1, [pc, #96]	@ (80029e4 <processCommand+0x1b8>)
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f001 ffd4 	bl	8004930 <strncmp>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <processCommand+0x166>
    	FAULT_5v_HandleMsg();
 800298e:	f7fd fce5 	bl	800035c <FAULT_5v_HandleMsg>
	}

    if (strncmp(command, "EN 3V3", 6) == 0) {
 8002992:	2206      	movs	r2, #6
 8002994:	4914      	ldr	r1, [pc, #80]	@ (80029e8 <processCommand+0x1bc>)
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f001 ffca 	bl	8004930 <strncmp>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <processCommand+0x17a>
    	FAULT_3v3_HandleMsg();
 80029a2:	f7fd fd05 	bl	80003b0 <FAULT_3v3_HandleMsg>
	}
}
 80029a6:	bf00      	nop
 80029a8:	373c      	adds	r7, #60	@ 0x3c
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000d3c 	.word	0x20000d3c
 80029b4:	20000d3d 	.word	0x20000d3d
 80029b8:	08006a14 	.word	0x08006a14
 80029bc:	08006a18 	.word	0x08006a18
 80029c0:	08006a30 	.word	0x08006a30
 80029c4:	20000cd0 	.word	0x20000cd0
 80029c8:	08006bb8 	.word	0x08006bb8
 80029cc:	08006a84 	.word	0x08006a84
 80029d0:	08006aa8 	.word	0x08006aa8
 80029d4:	08006aac 	.word	0x08006aac
 80029d8:	08006ab8 	.word	0x08006ab8
 80029dc:	08006af0 	.word	0x08006af0
 80029e0:	08006b14 	.word	0x08006b14
 80029e4:	08006b18 	.word	0x08006b18
 80029e8:	08006b20 	.word	0x08006b20

080029ec <LL_USART_Enable>:
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	60da      	str	r2, [r3, #12]
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr

08002a0a <LL_USART_IsEnabled>:
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a1e:	bf0c      	ite	eq
 8002a20:	2301      	moveq	r3, #1
 8002a22:	2300      	movne	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <LL_USART_IsActiveFlag_TC>:
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a40:	2b40      	cmp	r3, #64	@ 0x40
 8002a42:	bf0c      	ite	eq
 8002a44:	2301      	moveq	r3, #1
 8002a46:	2300      	movne	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr

08002a54 <LL_USART_IsActiveFlag_TXE>:
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a64:	2b80      	cmp	r3, #128	@ 0x80
 8002a66:	bf0c      	ite	eq
 8002a68:	2301      	moveq	r3, #1
 8002a6a:	2300      	movne	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <LL_USART_TransmitData8>:
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002a84:	78fa      	ldrb	r2, [r7, #3]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	605a      	str	r2, [r3, #4]
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr

08002a94 <sendToUART>:

/**
  * @brief  Sends a string over UART.
  */
void sendToUART(USART_TypeDef *UARTx, const char *message)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
    uint16_t i = 0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	81fb      	strh	r3, [r7, #14]

    if (!LL_USART_IsEnabled(UARTx))
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7ff ffb1 	bl	8002a0a <LL_USART_IsEnabled>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d115      	bne.n	8002ada <sendToUART+0x46>
        LL_USART_Enable(UARTx);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7ff ff9c 	bl	80029ec <LL_USART_Enable>

    while (message[i] != '\0')
 8002ab4:	e011      	b.n	8002ada <sendToUART+0x46>
    {
        while (!LL_USART_IsActiveFlag_TXE(UARTx));  // Wait for TX buffer empty
 8002ab6:	bf00      	nop
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7ff ffcb 	bl	8002a54 <LL_USART_IsActiveFlag_TXE>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0f9      	beq.n	8002ab8 <sendToUART+0x24>
        LL_USART_TransmitData8(UARTx, (uint8_t)message[i]);
 8002ac4:	89fb      	ldrh	r3, [r7, #14]
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	4413      	add	r3, r2
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	4619      	mov	r1, r3
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7ff ffd2 	bl	8002a78 <LL_USART_TransmitData8>
        i++;
 8002ad4:	89fb      	ldrh	r3, [r7, #14]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	81fb      	strh	r3, [r7, #14]
    while (message[i] != '\0')
 8002ada:	89fb      	ldrh	r3, [r7, #14]
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	4413      	add	r3, r2
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1e7      	bne.n	8002ab6 <sendToUART+0x22>
    }

    while (!LL_USART_IsActiveFlag_TC(UARTx));  // Wait for transmission complete
 8002ae6:	bf00      	nop
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7ff ffa1 	bl	8002a30 <LL_USART_IsActiveFlag_TC>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0f9      	beq.n	8002ae8 <sendToUART+0x54>


}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <UART_ProcessReceivedByte>:



void UART_ProcessReceivedByte(uint8_t byte, uint8_t uartNumber)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	460a      	mov	r2, r1
 8002b0a:	71fb      	strb	r3, [r7, #7]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	71bb      	strb	r3, [r7, #6]
    static uint8_t rxBuffer[RX_BUFFER_SIZE];
    static uint8_t rxIndex = 0;

    if (rxIndex < (RX_BUFFER_SIZE - 1))
 8002b10:	4b1a      	ldr	r3, [pc, #104]	@ (8002b7c <UART_ProcessReceivedByte+0x7c>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b62      	cmp	r3, #98	@ 0x62
 8002b16:	d809      	bhi.n	8002b2c <UART_ProcessReceivedByte+0x2c>
    {
        rxBuffer[rxIndex++] = byte;
 8002b18:	4b18      	ldr	r3, [pc, #96]	@ (8002b7c <UART_ProcessReceivedByte+0x7c>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	b2d1      	uxtb	r1, r2
 8002b20:	4a16      	ldr	r2, [pc, #88]	@ (8002b7c <UART_ProcessReceivedByte+0x7c>)
 8002b22:	7011      	strb	r1, [r2, #0]
 8002b24:	4619      	mov	r1, r3
 8002b26:	4a16      	ldr	r2, [pc, #88]	@ (8002b80 <UART_ProcessReceivedByte+0x80>)
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	5453      	strb	r3, [r2, r1]
    }

    if (byte == '\n' || byte == '\r')
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	2b0a      	cmp	r3, #10
 8002b30:	d002      	beq.n	8002b38 <UART_ProcessReceivedByte+0x38>
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	2b0d      	cmp	r3, #13
 8002b36:	d11c      	bne.n	8002b72 <UART_ProcessReceivedByte+0x72>
    {
        rxBuffer[rxIndex] = '\0';  // Null-terminate
 8002b38:	4b10      	ldr	r3, [pc, #64]	@ (8002b7c <UART_ProcessReceivedByte+0x7c>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4b10      	ldr	r3, [pc, #64]	@ (8002b80 <UART_ProcessReceivedByte+0x80>)
 8002b40:	2100      	movs	r1, #0
 8002b42:	5499      	strb	r1, [r3, r2]
        printf("Received from UART%d: %s\n", uartNumber, rxBuffer);
 8002b44:	79bb      	ldrb	r3, [r7, #6]
 8002b46:	4a0e      	ldr	r2, [pc, #56]	@ (8002b80 <UART_ProcessReceivedByte+0x80>)
 8002b48:	4619      	mov	r1, r3
 8002b4a:	480e      	ldr	r0, [pc, #56]	@ (8002b84 <UART_ProcessReceivedByte+0x84>)
 8002b4c:	f001 fd38 	bl	80045c0 <iprintf>
		fflush(stdout);
 8002b50:	4b0d      	ldr	r3, [pc, #52]	@ (8002b88 <UART_ProcessReceivedByte+0x88>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f001 fc5c 	bl	8004414 <fflush>
        processCommand((char *)rxBuffer);  // Pass to processing function
 8002b5c:	4808      	ldr	r0, [pc, #32]	@ (8002b80 <UART_ProcessReceivedByte+0x80>)
 8002b5e:	f7ff fe65 	bl	800282c <processCommand>

        memset(rxBuffer, 0, RX_BUFFER_SIZE);
 8002b62:	2264      	movs	r2, #100	@ 0x64
 8002b64:	2100      	movs	r1, #0
 8002b66:	4806      	ldr	r0, [pc, #24]	@ (8002b80 <UART_ProcessReceivedByte+0x80>)
 8002b68:	f001 feda 	bl	8004920 <memset>
        rxIndex = 0;
 8002b6c:	4b03      	ldr	r3, [pc, #12]	@ (8002b7c <UART_ProcessReceivedByte+0x7c>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	701a      	strb	r2, [r3, #0]
    }
}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	2000425c 	.word	0x2000425c
 8002b80:	20004260 	.word	0x20004260
 8002b84:	08006b28 	.word	0x08006b28
 8002b88:	20000cd0 	.word	0x20000cd0

08002b8c <LL_ADC_REG_SetSequencerRanks>:
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b089      	sub	sp, #36	@ 0x24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	332c      	adds	r3, #44	@ 0x2c
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ba4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002ba8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	fa92 f2a2 	rbit	r2, r2
 8002bb0:	617a      	str	r2, [r7, #20]
  return result;
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	fab2 f282 	clz	r2, r2
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	40d3      	lsrs	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f003 031f 	and.w	r3, r3, #31
 8002bcc:	211f      	movs	r1, #31
 8002bce:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	401a      	ands	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f003 011f 	and.w	r1, r3, #31
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	f003 031f 	and.w	r3, r3, #31
 8002be2:	fa01 f303 	lsl.w	r3, r1, r3
 8002be6:	431a      	orrs	r2, r3
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	601a      	str	r2, [r3, #0]
}
 8002bec:	bf00      	nop
 8002bee:	3724      	adds	r7, #36	@ 0x24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr

08002bf6 <LL_ADC_REG_SetContinuousMode>:
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_CONT, Continuous);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f023 0202 	bic.w	r2, r3, #2
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f043 0201 	orr.w	r2, r3, #1
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	609a      	str	r2, [r3, #8]
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f043 0204 	orr.w	r2, r3, #4
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr

08002c56 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR2      CAL            LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	bf0c      	ite	eq
 8002c6a:	2301      	moveq	r3, #1
 8002c6c:	2300      	movne	r3, #0
 8002c6e:	b2db      	uxtb	r3, r3
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr

08002c7a <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f443 02a0 	orr.w	r2, r3, #5242880	@ 0x500000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	609a      	str	r2, [r3, #8]
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr

08002c98 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ca4:	b29b      	uxth	r3, r3
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr

08002cb0 <LL_ADC_IsActiveFlag_EOS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOS(ADC_TypeDef *ADCx)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 series, there is no flag ADC group regular           */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "EOC" is corresponding to flag "EOS"                 */
  /*       in other STM32 families).                                          */
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	bf0c      	ite	eq
 8002cc4:	2301      	moveq	r3, #1
 8002cc6:	2300      	movne	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <LL_ADC_ClearFlag_EOS>:
  * @rmtoll SR       EOC            LL_ADC_ClearFlag_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOS(ADC_TypeDef *ADCx)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 series, there is no flag ADC group regular           */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "EOC" is corresponding to flag "EOS"                 */
  /*       in other STM32 families).                                          */
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOS);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f06f 0202 	mvn.w	r2, #2
 8002ce2:	601a      	str	r2, [r3, #0]
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr

08002cee <LL_TIM_EnableCounter>:
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f043 0201 	orr.w	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	601a      	str	r2, [r3, #0]
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <LL_TIM_GetCounter>:
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr
	...

08002d24 <SignalAnalyzer_Init>:

/**
  * @brief  Initializes the ADC and TIM6.
  */
void SignalAnalyzer_Init(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
    // Enable ADC
    LL_ADC_Enable(ADC1);
 8002d28:	480d      	ldr	r0, [pc, #52]	@ (8002d60 <SignalAnalyzer_Init+0x3c>)
 8002d2a:	f7ff ff76 	bl	8002c1a <LL_ADC_Enable>
    LL_mDelay(1);
 8002d2e:	2001      	movs	r0, #1
 8002d30:	f001 fa96 	bl	8004260 <LL_mDelay>

    // Calibrate ADC before use (optional but recommended)
    LL_ADC_StartCalibration(ADC1);
 8002d34:	480a      	ldr	r0, [pc, #40]	@ (8002d60 <SignalAnalyzer_Init+0x3c>)
 8002d36:	f7ff ff7f 	bl	8002c38 <LL_ADC_StartCalibration>
    while (LL_ADC_IsCalibrationOnGoing(ADC1));
 8002d3a:	bf00      	nop
 8002d3c:	4808      	ldr	r0, [pc, #32]	@ (8002d60 <SignalAnalyzer_Init+0x3c>)
 8002d3e:	f7ff ff8a 	bl	8002c56 <LL_ADC_IsCalibrationOnGoing>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1f9      	bne.n	8002d3c <SignalAnalyzer_Init+0x18>

    // Ensure ADC is set in continuous mode (if not set in CubeMX)
    LL_ADC_REG_SetContinuousMode(ADC1, LL_ADC_REG_CONV_CONTINUOUS);
 8002d48:	2102      	movs	r1, #2
 8002d4a:	4805      	ldr	r0, [pc, #20]	@ (8002d60 <SignalAnalyzer_Init+0x3c>)
 8002d4c:	f7ff ff53 	bl	8002bf6 <LL_ADC_REG_SetContinuousMode>

    // Start ADC conversion
    LL_ADC_REG_StartConversionSWStart(ADC1);
 8002d50:	4803      	ldr	r0, [pc, #12]	@ (8002d60 <SignalAnalyzer_Init+0x3c>)
 8002d52:	f7ff ff92 	bl	8002c7a <LL_ADC_REG_StartConversionSWStart>

    // Enable TIM6 for timestamping
    LL_TIM_EnableCounter(TIM6);
 8002d56:	4803      	ldr	r0, [pc, #12]	@ (8002d64 <SignalAnalyzer_Init+0x40>)
 8002d58:	f7ff ffc9 	bl	8002cee <LL_TIM_EnableCounter>
}
 8002d5c:	bf00      	nop
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40012400 	.word	0x40012400
 8002d64:	40001000 	.word	0x40001000

08002d68 <readADC>:

/**
  * @brief  Reads ADC values from channels 0-7.
  */
void readADC(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
    for (int i = 0; i < 8; i++)
 8002d6e:	2300      	movs	r3, #0
 8002d70:	607b      	str	r3, [r7, #4]
 8002d72:	e021      	b.n	8002db8 <readADC+0x50>
    {
        // Set the channel manually (if not in scan mode)
        LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0 + i);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002d80:	4811      	ldr	r0, [pc, #68]	@ (8002dc8 <readADC+0x60>)
 8002d82:	f7ff ff03 	bl	8002b8c <LL_ADC_REG_SetSequencerRanks>

        // Start ADC conversion manually (if continuous mode is not enabled)
        LL_ADC_REG_StartConversionSWStart(ADC1);
 8002d86:	4810      	ldr	r0, [pc, #64]	@ (8002dc8 <readADC+0x60>)
 8002d88:	f7ff ff77 	bl	8002c7a <LL_ADC_REG_StartConversionSWStart>

        // Wait until conversion is complete
        while (!LL_ADC_IsActiveFlag_EOS(ADC1));
 8002d8c:	bf00      	nop
 8002d8e:	480e      	ldr	r0, [pc, #56]	@ (8002dc8 <readADC+0x60>)
 8002d90:	f7ff ff8e 	bl	8002cb0 <LL_ADC_IsActiveFlag_EOS>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0f9      	beq.n	8002d8e <readADC+0x26>

        // Read ADC value
        adcValues[i] = LL_ADC_REG_ReadConversionData12(ADC1);
 8002d9a:	480b      	ldr	r0, [pc, #44]	@ (8002dc8 <readADC+0x60>)
 8002d9c:	f7ff ff7c 	bl	8002c98 <LL_ADC_REG_ReadConversionData12>
 8002da0:	4603      	mov	r3, r0
 8002da2:	4619      	mov	r1, r3
 8002da4:	4a09      	ldr	r2, [pc, #36]	@ (8002dcc <readADC+0x64>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//        printf("ADCVal[%d]: %d\n", i+1, adcValues[i]);

        // Clear the End of Conversion flag
        LL_ADC_ClearFlag_EOS(ADC1);
 8002dac:	4806      	ldr	r0, [pc, #24]	@ (8002dc8 <readADC+0x60>)
 8002dae:	f7ff ff91 	bl	8002cd4 <LL_ADC_ClearFlag_EOS>
    for (int i = 0; i < 8; i++)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	3301      	adds	r3, #1
 8002db6:	607b      	str	r3, [r7, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b07      	cmp	r3, #7
 8002dbc:	ddda      	ble.n	8002d74 <readADC+0xc>
    }
//    printf("\n\n");

}
 8002dbe:	bf00      	nop
 8002dc0:	bf00      	nop
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40012400 	.word	0x40012400
 8002dcc:	200042c4 	.word	0x200042c4

08002dd0 <getTimestamp>:

/**
  * @brief  Gets current timestamp from TIM6.
//  */
uint32_t getTimestamp(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
    return LL_TIM_GetCounter(TIM6);
 8002dd4:	4802      	ldr	r0, [pc, #8]	@ (8002de0 <getTimestamp+0x10>)
 8002dd6:	f7ff ff99 	bl	8002d0c <LL_TIM_GetCounter>
 8002dda:	4603      	mov	r3, r0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40001000 	.word	0x40001000

08002de4 <sendADCData>:

/**
  * @brief  Sends ADC data via UART.
  */
void sendADCData(void)
{
 8002de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002de6:	b0a5      	sub	sp, #148	@ 0x94
 8002de8:	af08      	add	r7, sp, #32
    readADC();
 8002dea:	f7ff ffbd 	bl	8002d68 <readADC>
    uint32_t timestamp = getTimestamp();
 8002dee:	f7ff ffef 	bl	8002dd0 <getTimestamp>
 8002df2:	66f8      	str	r0, [r7, #108]	@ 0x6c
    char buffer[100];

    snprintf(buffer, sizeof(buffer), "T:%lu ADC0:%u ADC1:%u ADC2:%u ADC3:%u ADC4:%u ADC5:%u ADC6:%u ADC7:%u\n",
             timestamp, adcValues[0], adcValues[1], adcValues[2], adcValues[3],
 8002df4:	4b1c      	ldr	r3, [pc, #112]	@ (8002e68 <sendADCData+0x84>)
 8002df6:	881b      	ldrh	r3, [r3, #0]
    snprintf(buffer, sizeof(buffer), "T:%lu ADC0:%u ADC1:%u ADC2:%u ADC3:%u ADC4:%u ADC5:%u ADC6:%u ADC7:%u\n",
 8002df8:	461a      	mov	r2, r3
             timestamp, adcValues[0], adcValues[1], adcValues[2], adcValues[3],
 8002dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8002e68 <sendADCData+0x84>)
 8002dfc:	885b      	ldrh	r3, [r3, #2]
    snprintf(buffer, sizeof(buffer), "T:%lu ADC0:%u ADC1:%u ADC2:%u ADC3:%u ADC4:%u ADC5:%u ADC6:%u ADC7:%u\n",
 8002dfe:	4619      	mov	r1, r3
             timestamp, adcValues[0], adcValues[1], adcValues[2], adcValues[3],
 8002e00:	4b19      	ldr	r3, [pc, #100]	@ (8002e68 <sendADCData+0x84>)
 8002e02:	889b      	ldrh	r3, [r3, #4]
    snprintf(buffer, sizeof(buffer), "T:%lu ADC0:%u ADC1:%u ADC2:%u ADC3:%u ADC4:%u ADC5:%u ADC6:%u ADC7:%u\n",
 8002e04:	461c      	mov	r4, r3
             timestamp, adcValues[0], adcValues[1], adcValues[2], adcValues[3],
 8002e06:	4b18      	ldr	r3, [pc, #96]	@ (8002e68 <sendADCData+0x84>)
 8002e08:	88db      	ldrh	r3, [r3, #6]
    snprintf(buffer, sizeof(buffer), "T:%lu ADC0:%u ADC1:%u ADC2:%u ADC3:%u ADC4:%u ADC5:%u ADC6:%u ADC7:%u\n",
 8002e0a:	461d      	mov	r5, r3
             adcValues[4], adcValues[5], adcValues[6], adcValues[7]);
 8002e0c:	4b16      	ldr	r3, [pc, #88]	@ (8002e68 <sendADCData+0x84>)
 8002e0e:	891b      	ldrh	r3, [r3, #8]
    snprintf(buffer, sizeof(buffer), "T:%lu ADC0:%u ADC1:%u ADC2:%u ADC3:%u ADC4:%u ADC5:%u ADC6:%u ADC7:%u\n",
 8002e10:	461e      	mov	r6, r3
             adcValues[4], adcValues[5], adcValues[6], adcValues[7]);
 8002e12:	4b15      	ldr	r3, [pc, #84]	@ (8002e68 <sendADCData+0x84>)
 8002e14:	895b      	ldrh	r3, [r3, #10]
    snprintf(buffer, sizeof(buffer), "T:%lu ADC0:%u ADC1:%u ADC2:%u ADC3:%u ADC4:%u ADC5:%u ADC6:%u ADC7:%u\n",
 8002e16:	607b      	str	r3, [r7, #4]
             adcValues[4], adcValues[5], adcValues[6], adcValues[7]);
 8002e18:	4b13      	ldr	r3, [pc, #76]	@ (8002e68 <sendADCData+0x84>)
 8002e1a:	899b      	ldrh	r3, [r3, #12]
    snprintf(buffer, sizeof(buffer), "T:%lu ADC0:%u ADC1:%u ADC2:%u ADC3:%u ADC4:%u ADC5:%u ADC6:%u ADC7:%u\n",
 8002e1c:	603b      	str	r3, [r7, #0]
             adcValues[4], adcValues[5], adcValues[6], adcValues[7]);
 8002e1e:	4b12      	ldr	r3, [pc, #72]	@ (8002e68 <sendADCData+0x84>)
 8002e20:	89db      	ldrh	r3, [r3, #14]
    snprintf(buffer, sizeof(buffer), "T:%lu ADC0:%u ADC1:%u ADC2:%u ADC3:%u ADC4:%u ADC5:%u ADC6:%u ADC7:%u\n",
 8002e22:	f107 0008 	add.w	r0, r7, #8
 8002e26:	9307      	str	r3, [sp, #28]
 8002e28:	f8d7 c000 	ldr.w	ip, [r7]
 8002e2c:	f8cd c018 	str.w	ip, [sp, #24]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	9305      	str	r3, [sp, #20]
 8002e34:	9604      	str	r6, [sp, #16]
 8002e36:	9503      	str	r5, [sp, #12]
 8002e38:	9402      	str	r4, [sp, #8]
 8002e3a:	9101      	str	r1, [sp, #4]
 8002e3c:	9200      	str	r2, [sp, #0]
 8002e3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e40:	4a0a      	ldr	r2, [pc, #40]	@ (8002e6c <sendADCData+0x88>)
 8002e42:	2164      	movs	r1, #100	@ 0x64
 8002e44:	f001 fc34 	bl	80046b0 <sniprintf>

//    printf("T:%lu ADC0:%u ADC1:%u ADC2:%u ADC3:%u ADC4:%u ADC5:%u ADC6:%u ADC7:%u\n",
//                 timestamp, adcValues[0], adcValues[1], adcValues[2], adcValues[3],
//                 adcValues[4], adcValues[5], adcValues[6], adcValues[7]);

    sendToUART(USART3, buffer); // Send to PC
 8002e48:	f107 0308 	add.w	r3, r7, #8
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4808      	ldr	r0, [pc, #32]	@ (8002e70 <sendADCData+0x8c>)
 8002e50:	f7ff fe20 	bl	8002a94 <sendToUART>
    sendToUART(USART1, buffer); // Send to ESP32
 8002e54:	f107 0308 	add.w	r3, r7, #8
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4806      	ldr	r0, [pc, #24]	@ (8002e74 <sendADCData+0x90>)
 8002e5c:	f7ff fe1a 	bl	8002a94 <sendToUART>

}
 8002e60:	bf00      	nop
 8002e62:	3774      	adds	r7, #116	@ 0x74
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e68:	200042c4 	.word	0x200042c4
 8002e6c:	08006b44 	.word	0x08006b44
 8002e70:	40004800 	.word	0x40004800
 8002e74:	40013800 	.word	0x40013800

08002e78 <LL_DMA_IsActiveFlag_TC5>:
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e8c:	bf0c      	ite	eq
 8002e8e:	2301      	moveq	r3, #1
 8002e90:	2300      	movne	r3, #0
 8002e92:	b2db      	uxtb	r3, r3
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr

08002e9e <LL_DMA_ClearFlag_TC5>:
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002eac:	605a      	str	r2, [r3, #4]
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr

08002eb8 <LL_DMA_ClearFlag_HT5>:
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF5);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002ec6:	605a      	str	r2, [r3, #4]
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr

08002ed2 <LL_DMA_ClearFlag_TE5>:
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF5);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002ee0:	605a      	str	r2, [r3, #4]
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr

08002eec <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8002ef4:	4b07      	ldr	r3, [pc, #28]	@ (8002f14 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8002ef6:	695a      	ldr	r2, [r3, #20]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4013      	ands	r3, r2
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	bf0c      	ite	eq
 8002f02:	2301      	moveq	r3, #1
 8002f04:	2300      	movne	r3, #0
 8002f06:	b2db      	uxtb	r3, r3
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40010400 	.word	0x40010400

08002f18 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8002f20:	4a03      	ldr	r2, [pc, #12]	@ (8002f30 <LL_EXTI_ClearFlag_0_31+0x18>)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6153      	str	r3, [r2, #20]
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr
 8002f30:	40010400 	.word	0x40010400

08002f34 <LL_USART_IsActiveFlag_RXNE>:
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0320 	and.w	r3, r3, #32
 8002f44:	2b20      	cmp	r3, #32
 8002f46:	bf0c      	ite	eq
 8002f48:	2301      	moveq	r3, #1
 8002f4a:	2300      	movne	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr

08002f58 <LL_USART_ReceiveData8>:
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	b2db      	uxtb	r3, r3
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr

08002f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f74:	bf00      	nop
 8002f76:	e7fd      	b.n	8002f74 <NMI_Handler+0x4>

08002f78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f7c:	bf00      	nop
 8002f7e:	e7fd      	b.n	8002f7c <HardFault_Handler+0x4>

08002f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f84:	bf00      	nop
 8002f86:	e7fd      	b.n	8002f84 <MemManage_Handler+0x4>

08002f88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f8c:	bf00      	nop
 8002f8e:	e7fd      	b.n	8002f8c <BusFault_Handler+0x4>

08002f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f94:	bf00      	nop
 8002f96:	e7fd      	b.n	8002f94 <UsageFault_Handler+0x4>

08002f98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr

08002fa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr

08002fb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fb4:	bf00      	nop
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr

08002fbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fc0:	bf00      	nop
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr

08002fc8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

	if (LL_DMA_IsActiveFlag_TC5(DMA1)) {
 8002fcc:	480a      	ldr	r0, [pc, #40]	@ (8002ff8 <DMA1_Channel5_IRQHandler+0x30>)
 8002fce:	f7ff ff53 	bl	8002e78 <LL_DMA_IsActiveFlag_TC5>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00c      	beq.n	8002ff2 <DMA1_Channel5_IRQHandler+0x2a>
//		LL_DMA_ClearFlag_GI5(DMA1);
		LL_DMA_ClearFlag_TC5(DMA1);  // Clear transfer complete flag
 8002fd8:	4807      	ldr	r0, [pc, #28]	@ (8002ff8 <DMA1_Channel5_IRQHandler+0x30>)
 8002fda:	f7ff ff60 	bl	8002e9e <LL_DMA_ClearFlag_TC5>
		LL_DMA_ClearFlag_HT5(DMA1);  // Clear half transfer flag
 8002fde:	4806      	ldr	r0, [pc, #24]	@ (8002ff8 <DMA1_Channel5_IRQHandler+0x30>)
 8002fe0:	f7ff ff6a 	bl	8002eb8 <LL_DMA_ClearFlag_HT5>
		LL_DMA_ClearFlag_TE5(DMA1);  // Clear transfer error flag
 8002fe4:	4804      	ldr	r0, [pc, #16]	@ (8002ff8 <DMA1_Channel5_IRQHandler+0x30>)
 8002fe6:	f7ff ff74 	bl	8002ed2 <LL_DMA_ClearFlag_TE5>

		// Trigger callback when transfer is complete
		LL_TIM_PWM_PulseFinishedCallback(TIM2);
 8002fea:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002fee:	f7fd fc93 	bl	8000918 <LL_TIM_PWM_PulseFinishedCallback>
	}

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40020000 	.word	0x40020000

08002ffc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
	if (LL_USART_IsActiveFlag_RXNE(USART1))
 8003002:	480a      	ldr	r0, [pc, #40]	@ (800302c <USART1_IRQHandler+0x30>)
 8003004:	f7ff ff96 	bl	8002f34 <LL_USART_IsActiveFlag_RXNE>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d009      	beq.n	8003022 <USART1_IRQHandler+0x26>
	{
		uint8_t receivedByte = LL_USART_ReceiveData8(USART1);
 800300e:	4807      	ldr	r0, [pc, #28]	@ (800302c <USART1_IRQHandler+0x30>)
 8003010:	f7ff ffa2 	bl	8002f58 <LL_USART_ReceiveData8>
 8003014:	4603      	mov	r3, r0
 8003016:	71fb      	strb	r3, [r7, #7]
		UART_ProcessReceivedByte(receivedByte, 1);  // Process received data for UART1
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	2101      	movs	r1, #1
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff fd6f 	bl	8002b00 <UART_ProcessReceivedByte>
	}
  /* USER CODE END USART1_IRQn 1 */
}
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40013800 	.word	0x40013800

08003030 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */
	 if (LL_USART_IsActiveFlag_RXNE(USART3))
 8003036:	480a      	ldr	r0, [pc, #40]	@ (8003060 <USART3_IRQHandler+0x30>)
 8003038:	f7ff ff7c 	bl	8002f34 <LL_USART_IsActiveFlag_RXNE>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d009      	beq.n	8003056 <USART3_IRQHandler+0x26>
	{
		uint8_t receivedByte = LL_USART_ReceiveData8(USART3);
 8003042:	4807      	ldr	r0, [pc, #28]	@ (8003060 <USART3_IRQHandler+0x30>)
 8003044:	f7ff ff88 	bl	8002f58 <LL_USART_ReceiveData8>
 8003048:	4603      	mov	r3, r0
 800304a:	71fb      	strb	r3, [r7, #7]
		UART_ProcessReceivedByte(receivedByte, 3);  // Process received data for UART3
 800304c:	79fb      	ldrb	r3, [r7, #7]
 800304e:	2103      	movs	r1, #3
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff fd55 	bl	8002b00 <UART_ProcessReceivedByte>
	}
  /* USER CODE END USART3_IRQn 1 */
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40004800 	.word	0x40004800

08003064 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_12) != RESET)
 8003068:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800306c:	f7ff ff3e 	bl	8002eec <LL_EXTI_IsActiveFlag_0_31>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d005      	beq.n	8003082 <EXTI15_10_IRQHandler+0x1e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_12);
 8003076:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800307a:	f7ff ff4d 	bl	8002f18 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_12 */
    FAULT_3v3_HandleInterrupt();  // Handle FAULT 3V3
 800307e:	f7fd f95d 	bl	800033c <FAULT_3v3_HandleInterrupt>
    /* USER CODE END LL_EXTI_LINE_12 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8003082:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003086:	f7ff ff31 	bl	8002eec <LL_EXTI_IsActiveFlag_0_31>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8003090:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003094:	f7ff ff40 	bl	8002f18 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */
    FAULT_5v_HandleInterrupt();  // Handle FAULT 3V3
 8003098:	f7fd f940 	bl	800031c <FAULT_5v_HandleInterrupt>
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800309c:	bf00      	nop
 800309e:	bd80      	pop	{r7, pc}

080030a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	e00a      	b.n	80030c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80030b2:	f3af 8000 	nop.w
 80030b6:	4601      	mov	r1, r0
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	60ba      	str	r2, [r7, #8]
 80030be:	b2ca      	uxtb	r2, r1
 80030c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	3301      	adds	r3, #1
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	dbf0      	blt.n	80030b2 <_read+0x12>
  }

  return len;
 80030d0:	687b      	ldr	r3, [r7, #4]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <_close>:
  }
  return len;
}

int _close(int file)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr

080030f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003100:	605a      	str	r2, [r3, #4]
  return 0;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	bc80      	pop	{r7}
 800310c:	4770      	bx	lr

0800310e <_isatty>:

int _isatty(int file)
{
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003116:	2301      	movs	r3, #1
}
 8003118:	4618      	mov	r0, r3
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	bc80      	pop	{r7}
 8003120:	4770      	bx	lr

08003122 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003122:	b480      	push	{r7}
 8003124:	b085      	sub	sp, #20
 8003126:	af00      	add	r7, sp, #0
 8003128:	60f8      	str	r0, [r7, #12]
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr
	...

0800313c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003144:	4a14      	ldr	r2, [pc, #80]	@ (8003198 <_sbrk+0x5c>)
 8003146:	4b15      	ldr	r3, [pc, #84]	@ (800319c <_sbrk+0x60>)
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003150:	4b13      	ldr	r3, [pc, #76]	@ (80031a0 <_sbrk+0x64>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d102      	bne.n	800315e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003158:	4b11      	ldr	r3, [pc, #68]	@ (80031a0 <_sbrk+0x64>)
 800315a:	4a12      	ldr	r2, [pc, #72]	@ (80031a4 <_sbrk+0x68>)
 800315c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800315e:	4b10      	ldr	r3, [pc, #64]	@ (80031a0 <_sbrk+0x64>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4413      	add	r3, r2
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	429a      	cmp	r2, r3
 800316a:	d207      	bcs.n	800317c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800316c:	f001 fc38 	bl	80049e0 <__errno>
 8003170:	4603      	mov	r3, r0
 8003172:	220c      	movs	r2, #12
 8003174:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003176:	f04f 33ff 	mov.w	r3, #4294967295
 800317a:	e009      	b.n	8003190 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800317c:	4b08      	ldr	r3, [pc, #32]	@ (80031a0 <_sbrk+0x64>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003182:	4b07      	ldr	r3, [pc, #28]	@ (80031a0 <_sbrk+0x64>)
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4413      	add	r3, r2
 800318a:	4a05      	ldr	r2, [pc, #20]	@ (80031a0 <_sbrk+0x64>)
 800318c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800318e:	68fb      	ldr	r3, [r7, #12]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	20010000 	.word	0x20010000
 800319c:	00000400 	.word	0x00000400
 80031a0:	200042d4 	.word	0x200042d4
 80031a4:	20004428 	.word	0x20004428

080031a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031ac:	bf00      	nop
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr

080031b4 <Reset_Handler>:
 80031b4:	f7ff fff8 	bl	80031a8 <SystemInit>
 80031b8:	480b      	ldr	r0, [pc, #44]	@ (80031e8 <LoopFillZerobss+0xe>)
 80031ba:	490c      	ldr	r1, [pc, #48]	@ (80031ec <LoopFillZerobss+0x12>)
 80031bc:	4a0c      	ldr	r2, [pc, #48]	@ (80031f0 <LoopFillZerobss+0x16>)
 80031be:	2300      	movs	r3, #0
 80031c0:	e002      	b.n	80031c8 <LoopCopyDataInit>

080031c2 <CopyDataInit>:
 80031c2:	58d4      	ldr	r4, [r2, r3]
 80031c4:	50c4      	str	r4, [r0, r3]
 80031c6:	3304      	adds	r3, #4

080031c8 <LoopCopyDataInit>:
 80031c8:	18c4      	adds	r4, r0, r3
 80031ca:	428c      	cmp	r4, r1
 80031cc:	d3f9      	bcc.n	80031c2 <CopyDataInit>
 80031ce:	4a09      	ldr	r2, [pc, #36]	@ (80031f4 <LoopFillZerobss+0x1a>)
 80031d0:	4c09      	ldr	r4, [pc, #36]	@ (80031f8 <LoopFillZerobss+0x1e>)
 80031d2:	2300      	movs	r3, #0
 80031d4:	e001      	b.n	80031da <LoopFillZerobss>

080031d6 <FillZerobss>:
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	3204      	adds	r2, #4

080031da <LoopFillZerobss>:
 80031da:	42a2      	cmp	r2, r4
 80031dc:	d3fb      	bcc.n	80031d6 <FillZerobss>
 80031de:	f001 fc05 	bl	80049ec <__libc_init_array>
 80031e2:	f7fe f963 	bl	80014ac <main>
 80031e6:	4770      	bx	lr
 80031e8:	20000000 	.word	0x20000000
 80031ec:	20000d20 	.word	0x20000d20
 80031f0:	08006f50 	.word	0x08006f50
 80031f4:	20000d20 	.word	0x20000d20
 80031f8:	20004424 	.word	0x20004424

080031fc <ADC1_2_IRQHandler>:
 80031fc:	e7fe      	b.n	80031fc <ADC1_2_IRQHandler>

080031fe <LL_ADC_REG_SetSequencerLength>:
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr

08003222 <LL_ADC_IsEnabled>:
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b01      	cmp	r3, #1
 8003234:	bf0c      	ite	eq
 8003236:	2301      	moveq	r3, #1
 8003238:	2300      	movne	r3, #0
 800323a:	b2db      	uxtb	r3, r3
}
 800323c:	4618      	mov	r0, r3
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	bc80      	pop	{r7}
 8003244:	4770      	bx	lr
	...

08003248 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8003248:	b590      	push	{r4, r7, lr}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003252:	2300      	movs	r3, #0
 8003254:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8003256:	4813      	ldr	r0, [pc, #76]	@ (80032a4 <LL_ADC_CommonInit+0x5c>)
 8003258:	f7ff ffe3 	bl	8003222 <LL_ADC_IsEnabled>
 800325c:	4604      	mov	r4, r0
 800325e:	4812      	ldr	r0, [pc, #72]	@ (80032a8 <LL_ADC_CommonInit+0x60>)
 8003260:	f7ff ffdf 	bl	8003222 <LL_ADC_IsEnabled>
 8003264:	4603      	mov	r3, r0
 8003266:	4323      	orrs	r3, r4
 8003268:	2b00      	cmp	r3, #0
 800326a:	d114      	bne.n	8003296 <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d009      	beq.n	8003288 <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	431a      	orrs	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	605a      	str	r2, [r3, #4]
 8003286:	e008      	b.n	800329a <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	605a      	str	r2, [r3, #4]
 8003294:	e001      	b.n	800329a <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 800329a:	7bfb      	ldrb	r3, [r7, #15]
}
 800329c:	4618      	mov	r0, r3
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd90      	pop	{r4, r7, pc}
 80032a4:	40012400 	.word	0x40012400
 80032a8:	40012800 	.word	0x40012800

080032ac <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80032b6:	2300      	movs	r3, #0
 80032b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff ffb1 	bl	8003222 <LL_ADC_IsEnabled>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d112      	bne.n	80032ec <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	609a      	str	r2, [r3, #8]
 80032ea:	e001      	b.n	80032f0 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b084      	sub	sp, #16
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
 8003302:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003304:	2300      	movs	r3, #0
 8003306:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff ff8a 	bl	8003222 <LL_ADC_IsEnabled>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d131      	bne.n	8003378 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00c      	beq.n	8003336 <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	6859      	ldr	r1, [r3, #4]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	430b      	orrs	r3, r1
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	605a      	str	r2, [r3, #4]
 8003334:	e008      	b.n	8003348 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 8003350:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	6811      	ldr	r1, [r2, #0]
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	68d2      	ldr	r2, [r2, #12]
 800335c:	4311      	orrs	r1, r2
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	6912      	ldr	r2, [r2, #16]
 8003362:	430a      	orrs	r2, r1
 8003364:	431a      	orrs	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	4619      	mov	r1, r3
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7ff ff44 	bl	80031fe <LL_ADC_REG_SetSequencerLength>
 8003376:	e001      	b.n	800337c <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800337c:	7bfb      	ldrb	r3, [r7, #15]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
	...

08003388 <LL_EXTI_EnableIT_0_31>:
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8003390:	4b05      	ldr	r3, [pc, #20]	@ (80033a8 <LL_EXTI_EnableIT_0_31+0x20>)
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	4904      	ldr	r1, [pc, #16]	@ (80033a8 <LL_EXTI_EnableIT_0_31+0x20>)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4313      	orrs	r3, r2
 800339a:	600b      	str	r3, [r1, #0]
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc80      	pop	{r7}
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	40010400 	.word	0x40010400

080033ac <LL_EXTI_DisableIT_0_31>:
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80033b4:	4b05      	ldr	r3, [pc, #20]	@ (80033cc <LL_EXTI_DisableIT_0_31+0x20>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	43db      	mvns	r3, r3
 80033bc:	4903      	ldr	r1, [pc, #12]	@ (80033cc <LL_EXTI_DisableIT_0_31+0x20>)
 80033be:	4013      	ands	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr
 80033cc:	40010400 	.word	0x40010400

080033d0 <LL_EXTI_EnableEvent_0_31>:
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80033d8:	4b05      	ldr	r3, [pc, #20]	@ (80033f0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	4904      	ldr	r1, [pc, #16]	@ (80033f0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	604b      	str	r3, [r1, #4]
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40010400 	.word	0x40010400

080033f4 <LL_EXTI_DisableEvent_0_31>:
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80033fc:	4b05      	ldr	r3, [pc, #20]	@ (8003414 <LL_EXTI_DisableEvent_0_31+0x20>)
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	43db      	mvns	r3, r3
 8003404:	4903      	ldr	r1, [pc, #12]	@ (8003414 <LL_EXTI_DisableEvent_0_31+0x20>)
 8003406:	4013      	ands	r3, r2
 8003408:	604b      	str	r3, [r1, #4]
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr
 8003414:	40010400 	.word	0x40010400

08003418 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8003420:	4b05      	ldr	r3, [pc, #20]	@ (8003438 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	4904      	ldr	r1, [pc, #16]	@ (8003438 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4313      	orrs	r3, r2
 800342a:	608b      	str	r3, [r1, #8]
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	bc80      	pop	{r7}
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	40010400 	.word	0x40010400

0800343c <LL_EXTI_DisableRisingTrig_0_31>:
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8003444:	4b05      	ldr	r3, [pc, #20]	@ (800345c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	43db      	mvns	r3, r3
 800344c:	4903      	ldr	r1, [pc, #12]	@ (800345c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800344e:	4013      	ands	r3, r2
 8003450:	608b      	str	r3, [r1, #8]
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr
 800345c:	40010400 	.word	0x40010400

08003460 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8003468:	4b05      	ldr	r3, [pc, #20]	@ (8003480 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	4904      	ldr	r1, [pc, #16]	@ (8003480 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4313      	orrs	r3, r2
 8003472:	60cb      	str	r3, [r1, #12]
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40010400 	.word	0x40010400

08003484 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800348c:	4b05      	ldr	r3, [pc, #20]	@ (80034a4 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800348e:	68da      	ldr	r2, [r3, #12]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	43db      	mvns	r3, r3
 8003494:	4903      	ldr	r1, [pc, #12]	@ (80034a4 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8003496:	4013      	ands	r3, r2
 8003498:	60cb      	str	r3, [r1, #12]
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr
 80034a4:	40010400 	.word	0x40010400

080034a8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80034b0:	2300      	movs	r3, #0
 80034b2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	791b      	ldrb	r3, [r3, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d065      	beq.n	8003588 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d06b      	beq.n	800359c <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	795b      	ldrb	r3, [r3, #5]
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d01c      	beq.n	8003506 <LL_EXTI_Init+0x5e>
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	dc25      	bgt.n	800351c <LL_EXTI_Init+0x74>
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d002      	beq.n	80034da <LL_EXTI_Init+0x32>
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d00b      	beq.n	80034f0 <LL_EXTI_Init+0x48>
 80034d8:	e020      	b.n	800351c <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff ff88 	bl	80033f4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff ff4d 	bl	8003388 <LL_EXTI_EnableIT_0_31>
          break;
 80034ee:	e018      	b.n	8003522 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff ff59 	bl	80033ac <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff ff66 	bl	80033d0 <LL_EXTI_EnableEvent_0_31>
          break;
 8003504:	e00d      	b.n	8003522 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff ff3c 	bl	8003388 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff ff5b 	bl	80033d0 <LL_EXTI_EnableEvent_0_31>
          break;
 800351a:	e002      	b.n	8003522 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	73fb      	strb	r3, [r7, #15]
          break;
 8003520:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	799b      	ldrb	r3, [r3, #6]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d038      	beq.n	800359c <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	799b      	ldrb	r3, [r3, #6]
 800352e:	2b03      	cmp	r3, #3
 8003530:	d01c      	beq.n	800356c <LL_EXTI_Init+0xc4>
 8003532:	2b03      	cmp	r3, #3
 8003534:	dc25      	bgt.n	8003582 <LL_EXTI_Init+0xda>
 8003536:	2b01      	cmp	r3, #1
 8003538:	d002      	beq.n	8003540 <LL_EXTI_Init+0x98>
 800353a:	2b02      	cmp	r3, #2
 800353c:	d00b      	beq.n	8003556 <LL_EXTI_Init+0xae>
 800353e:	e020      	b.n	8003582 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff ff9d 	bl	8003484 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff ff62 	bl	8003418 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8003554:	e022      	b.n	800359c <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff ff6e 	bl	800343c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff ff7b 	bl	8003460 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800356a:	e017      	b.n	800359c <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff ff51 	bl	8003418 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff ff70 	bl	8003460 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003580:	e00c      	b.n	800359c <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	73fb      	strb	r3, [r7, #15]
            break;
 8003586:	e009      	b.n	800359c <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff ff0d 	bl	80033ac <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff ff2c 	bl	80033f4 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 800359c:	7bfb      	ldrb	r3, [r7, #15]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <LL_GPIO_SetPinMode>:
{
 80035a6:	b490      	push	{r4, r7}
 80035a8:	b088      	sub	sp, #32
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	60f8      	str	r0, [r7, #12]
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	461a      	mov	r2, r3
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	0e1b      	lsrs	r3, r3, #24
 80035ba:	4413      	add	r3, r2
 80035bc:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80035be:	6822      	ldr	r2, [r4, #0]
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	fa93 f3a3 	rbit	r3, r3
 80035ca:	613b      	str	r3, [r7, #16]
  return result;
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	fab3 f383 	clz	r3, r3
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	210f      	movs	r1, #15
 80035d8:	fa01 f303 	lsl.w	r3, r1, r3
 80035dc:	43db      	mvns	r3, r3
 80035de:	401a      	ands	r2, r3
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	fa93 f3a3 	rbit	r3, r3
 80035ea:	61bb      	str	r3, [r7, #24]
  return result;
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	fab3 f383 	clz	r3, r3
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	fa01 f303 	lsl.w	r3, r1, r3
 80035fc:	4313      	orrs	r3, r2
 80035fe:	6023      	str	r3, [r4, #0]
}
 8003600:	bf00      	nop
 8003602:	3720      	adds	r7, #32
 8003604:	46bd      	mov	sp, r7
 8003606:	bc90      	pop	{r4, r7}
 8003608:	4770      	bx	lr

0800360a <LL_GPIO_SetPinSpeed>:
{
 800360a:	b490      	push	{r4, r7}
 800360c:	b088      	sub	sp, #32
 800360e:	af00      	add	r7, sp, #0
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	461a      	mov	r2, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	0e1b      	lsrs	r3, r3, #24
 800361e:	4413      	add	r3, r2
 8003620:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8003622:	6822      	ldr	r2, [r4, #0]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	fa93 f3a3 	rbit	r3, r3
 800362e:	613b      	str	r3, [r7, #16]
  return result;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	fab3 f383 	clz	r3, r3
 8003636:	b2db      	uxtb	r3, r3
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	2103      	movs	r1, #3
 800363c:	fa01 f303 	lsl.w	r3, r1, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	401a      	ands	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	fa93 f3a3 	rbit	r3, r3
 800364e:	61bb      	str	r3, [r7, #24]
  return result;
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	fab3 f383 	clz	r3, r3
 8003656:	b2db      	uxtb	r3, r3
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	fa01 f303 	lsl.w	r3, r1, r3
 8003660:	4313      	orrs	r3, r2
 8003662:	6023      	str	r3, [r4, #0]
}
 8003664:	bf00      	nop
 8003666:	3720      	adds	r7, #32
 8003668:	46bd      	mov	sp, r7
 800366a:	bc90      	pop	{r4, r7}
 800366c:	4770      	bx	lr

0800366e <LL_GPIO_SetPinOutputType>:
{
 800366e:	b490      	push	{r4, r7}
 8003670:	b088      	sub	sp, #32
 8003672:	af00      	add	r7, sp, #0
 8003674:	60f8      	str	r0, [r7, #12]
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	461a      	mov	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	0e1b      	lsrs	r3, r3, #24
 8003682:	4413      	add	r3, r2
 8003684:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8003686:	6822      	ldr	r2, [r4, #0]
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	fa93 f3a3 	rbit	r3, r3
 8003692:	613b      	str	r3, [r7, #16]
  return result;
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	fab3 f383 	clz	r3, r3
 800369a:	b2db      	uxtb	r3, r3
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	2104      	movs	r1, #4
 80036a0:	fa01 f303 	lsl.w	r3, r1, r3
 80036a4:	43db      	mvns	r3, r3
 80036a6:	401a      	ands	r2, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	fa93 f3a3 	rbit	r3, r3
 80036b2:	61bb      	str	r3, [r7, #24]
  return result;
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	fab3 f383 	clz	r3, r3
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	fa01 f303 	lsl.w	r3, r1, r3
 80036c4:	4313      	orrs	r3, r2
 80036c6:	6023      	str	r3, [r4, #0]
}
 80036c8:	bf00      	nop
 80036ca:	3720      	adds	r7, #32
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bc90      	pop	{r4, r7}
 80036d0:	4770      	bx	lr

080036d2 <LL_GPIO_SetPinPull>:
{
 80036d2:	b480      	push	{r7}
 80036d4:	b087      	sub	sp, #28
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	0a1b      	lsrs	r3, r3, #8
 80036e6:	43db      	mvns	r3, r3
 80036e8:	401a      	ands	r2, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	0a1b      	lsrs	r3, r3, #8
 80036ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	fa93 f3a3 	rbit	r3, r3
 80036f6:	613b      	str	r3, [r7, #16]
  return result;
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	fab3 f383 	clz	r3, r3
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	4619      	mov	r1, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	408b      	lsls	r3, r1
 8003706:	431a      	orrs	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	60da      	str	r2, [r3, #12]
}
 800370c:	bf00      	nop
 800370e:	371c      	adds	r7, #28
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr

08003716 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b088      	sub	sp, #32
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	021b      	lsls	r3, r3, #8
 8003726:	0c1b      	lsrs	r3, r3, #16
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	fa93 f3a3 	rbit	r3, r3
 8003734:	60fb      	str	r3, [r7, #12]
  return result;
 8003736:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8003738:	fab3 f383 	clz	r3, r3
 800373c:	b2db      	uxtb	r3, r3
 800373e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8003740:	e044      	b.n	80037cc <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8003742:	2201      	movs	r2, #1
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	409a      	lsls	r2, r3
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	4013      	ands	r3, r2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d03a      	beq.n	80037c6 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	2b07      	cmp	r3, #7
 8003754:	d806      	bhi.n	8003764 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8003756:	f240 1201 	movw	r2, #257	@ 0x101
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	61bb      	str	r3, [r7, #24]
 8003762:	e008      	b.n	8003776 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	3b08      	subs	r3, #8
 8003768:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003774:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b08      	cmp	r3, #8
 800377c:	d106      	bne.n	800378c <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	461a      	mov	r2, r3
 8003784:	69b9      	ldr	r1, [r7, #24]
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7ff ffa3 	bl	80036d2 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	461a      	mov	r2, r3
 8003792:	69b9      	ldr	r1, [r7, #24]
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7ff ff06 	bl	80035a6 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d003      	beq.n	80037aa <LL_GPIO_Init+0x94>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b09      	cmp	r3, #9
 80037a8:	d10d      	bne.n	80037c6 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	461a      	mov	r2, r3
 80037b0:	69b9      	ldr	r1, [r7, #24]
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7ff ff29 	bl	800360a <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	461a      	mov	r2, r3
 80037be:	69b9      	ldr	r1, [r7, #24]
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff ff54 	bl	800366e <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	3301      	adds	r3, #1
 80037ca:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	fa22 f303 	lsr.w	r3, r2, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1b4      	bne.n	8003742 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3720      	adds	r7, #32
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <LL_RCC_HSE_GetPrediv2>:
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV2));
 80037e8:	4b03      	ldr	r3, [pc, #12]	@ (80037f8 <LL_RCC_HSE_GetPrediv2+0x14>)
 80037ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr
 80037f8:	40021000 	.word	0x40021000

080037fc <LL_RCC_GetSysClkSource>:
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003800:	4b03      	ldr	r3, [pc, #12]	@ (8003810 <LL_RCC_GetSysClkSource+0x14>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f003 030c 	and.w	r3, r3, #12
}
 8003808:	4618      	mov	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	bc80      	pop	{r7}
 800380e:	4770      	bx	lr
 8003810:	40021000 	.word	0x40021000

08003814 <LL_RCC_GetAHBPrescaler>:
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003818:	4b03      	ldr	r3, [pc, #12]	@ (8003828 <LL_RCC_GetAHBPrescaler+0x14>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003820:	4618      	mov	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr
 8003828:	40021000 	.word	0x40021000

0800382c <LL_RCC_GetAPB1Prescaler>:
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003830:	4b03      	ldr	r3, [pc, #12]	@ (8003840 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8003838:	4618      	mov	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr
 8003840:	40021000 	.word	0x40021000

08003844 <LL_RCC_GetAPB2Prescaler>:
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003848:	4b03      	ldr	r3, [pc, #12]	@ (8003858 <LL_RCC_GetAPB2Prescaler+0x14>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8003850:	4618      	mov	r0, r3
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr
 8003858:	40021000 	.word	0x40021000

0800385c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
 8003862:	4b09      	ldr	r3, [pc, #36]	@ (8003888 <LL_RCC_PLL_GetMainSource+0x2c>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800386a:	607b      	str	r3, [r7, #4]
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
 800386c:	4b06      	ldr	r3, [pc, #24]	@ (8003888 <LL_RCC_PLL_GetMainSource+0x2c>)
 800386e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003870:	011b      	lsls	r3, r3, #4
 8003872:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003876:	603b      	str	r3, [r7, #0]
  return (uint32_t)(pllsrc | predivsrc);
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	4313      	orrs	r3, r2
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 800387e:	4618      	mov	r0, r3
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr
 8003888:	40021000 	.word	0x40021000

0800388c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8003890:	4b03      	ldr	r3, [pc, #12]	@ (80038a0 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 8003898:	4618      	mov	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr
 80038a0:	40021000 	.word	0x40021000

080038a4 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
 80038a8:	4b03      	ldr	r3, [pc, #12]	@ (80038b8 <LL_RCC_PLL_GetPrediv+0x14>)
 80038aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ac:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
#endif /*RCC_CFGR2_PREDIV1*/
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bc80      	pop	{r7}
 80038b6:	4770      	bx	lr
 80038b8:	40021000 	.word	0x40021000

080038bc <LL_RCC_PLL2_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL2_MUL_14
  *         @arg @ref LL_RCC_PLL2_MUL_16
  *         @arg @ref LL_RCC_PLL2_MUL_20
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetMultiplicator(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL2MUL));
 80038c0:	4b03      	ldr	r3, [pc, #12]	@ (80038d0 <LL_RCC_PLL2_GetMultiplicator+0x14>)
 80038c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr
 80038d0:	40021000 	.word	0x40021000

080038d4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80038dc:	f000 f820 	bl	8003920 <RCC_GetSystemClockFreq>
 80038e0:	4602      	mov	r2, r0
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 f83e 	bl	800396c <RCC_GetHCLKClockFreq>
 80038f0:	4602      	mov	r2, r0
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 f84c 	bl	8003998 <RCC_GetPCLK1ClockFreq>
 8003900:	4602      	mov	r2, r0
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	4618      	mov	r0, r3
 800390c:	f000 f858 	bl	80039c0 <RCC_GetPCLK2ClockFreq>
 8003910:	4602      	mov	r2, r0
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	60da      	str	r2, [r3, #12]
}
 8003916:	bf00      	nop
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800392a:	f7ff ff67 	bl	80037fc <LL_RCC_GetSysClkSource>
 800392e:	4603      	mov	r3, r0
 8003930:	2b08      	cmp	r3, #8
 8003932:	d00c      	beq.n	800394e <RCC_GetSystemClockFreq+0x2e>
 8003934:	2b08      	cmp	r3, #8
 8003936:	d80e      	bhi.n	8003956 <RCC_GetSystemClockFreq+0x36>
 8003938:	2b00      	cmp	r3, #0
 800393a:	d002      	beq.n	8003942 <RCC_GetSystemClockFreq+0x22>
 800393c:	2b04      	cmp	r3, #4
 800393e:	d003      	beq.n	8003948 <RCC_GetSystemClockFreq+0x28>
 8003940:	e009      	b.n	8003956 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003942:	4b09      	ldr	r3, [pc, #36]	@ (8003968 <RCC_GetSystemClockFreq+0x48>)
 8003944:	607b      	str	r3, [r7, #4]
      break;
 8003946:	e009      	b.n	800395c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003948:	4b07      	ldr	r3, [pc, #28]	@ (8003968 <RCC_GetSystemClockFreq+0x48>)
 800394a:	607b      	str	r3, [r7, #4]
      break;
 800394c:	e006      	b.n	800395c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800394e:	f000 f84b 	bl	80039e8 <RCC_PLL_GetFreqDomain_SYS>
 8003952:	6078      	str	r0, [r7, #4]
      break;
 8003954:	e002      	b.n	800395c <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8003956:	4b04      	ldr	r3, [pc, #16]	@ (8003968 <RCC_GetSystemClockFreq+0x48>)
 8003958:	607b      	str	r3, [r7, #4]
      break;
 800395a:	bf00      	nop
  }

  return frequency;
 800395c:	687b      	ldr	r3, [r7, #4]
}
 800395e:	4618      	mov	r0, r3
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	007a1200 	.word	0x007a1200

0800396c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003974:	f7ff ff4e 	bl	8003814 <LL_RCC_GetAHBPrescaler>
 8003978:	4603      	mov	r3, r0
 800397a:	091b      	lsrs	r3, r3, #4
 800397c:	f003 030f 	and.w	r3, r3, #15
 8003980:	4a04      	ldr	r2, [pc, #16]	@ (8003994 <RCC_GetHCLKClockFreq+0x28>)
 8003982:	5cd3      	ldrb	r3, [r2, r3]
 8003984:	461a      	mov	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	40d3      	lsrs	r3, r2
}
 800398a:	4618      	mov	r0, r3
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	08006dd8 	.word	0x08006dd8

08003998 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80039a0:	f7ff ff44 	bl	800382c <LL_RCC_GetAPB1Prescaler>
 80039a4:	4603      	mov	r3, r0
 80039a6:	0a1b      	lsrs	r3, r3, #8
 80039a8:	4a04      	ldr	r2, [pc, #16]	@ (80039bc <RCC_GetPCLK1ClockFreq+0x24>)
 80039aa:	5cd3      	ldrb	r3, [r2, r3]
 80039ac:	461a      	mov	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	40d3      	lsrs	r3, r2
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	08006de8 	.word	0x08006de8

080039c0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80039c8:	f7ff ff3c 	bl	8003844 <LL_RCC_GetAPB2Prescaler>
 80039cc:	4603      	mov	r3, r0
 80039ce:	0adb      	lsrs	r3, r3, #11
 80039d0:	4a04      	ldr	r2, [pc, #16]	@ (80039e4 <RCC_GetPCLK2ClockFreq+0x24>)
 80039d2:	5cd3      	ldrb	r3, [r2, r3]
 80039d4:	461a      	mov	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	40d3      	lsrs	r3, r2
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	08006de8 	.word	0x08006de8

080039e8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80039e8:	b590      	push	{r4, r7, lr}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	607b      	str	r3, [r7, #4]
 80039f2:	2300      	movs	r3, #0
 80039f4:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80039f6:	f7ff ff31 	bl	800385c <LL_RCC_PLL_GetMainSource>
 80039fa:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8003a02:	d017      	beq.n	8003a34 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8003a0a:	d81e      	bhi.n	8003a4a <RCC_PLL_GetFreqDomain_SYS+0x62>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d004      	beq.n	8003a1c <RCC_PLL_GetFreqDomain_SYS+0x34>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a18:	d003      	beq.n	8003a22 <RCC_PLL_GetFreqDomain_SYS+0x3a>
 8003a1a:	e016      	b.n	8003a4a <RCC_PLL_GetFreqDomain_SYS+0x62>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8003a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8003a88 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 8003a1e:	607b      	str	r3, [r7, #4]
      break;
 8003a20:	e016      	b.n	8003a50 <RCC_PLL_GetFreqDomain_SYS+0x68>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8003a22:	f7ff ff3f 	bl	80038a4 <LL_RCC_PLL_GetPrediv>
 8003a26:	4603      	mov	r3, r0
 8003a28:	3301      	adds	r3, #1
 8003a2a:	4a18      	ldr	r2, [pc, #96]	@ (8003a8c <RCC_PLL_GetFreqDomain_SYS+0xa4>)
 8003a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a30:	607b      	str	r3, [r7, #4]
      break;
 8003a32:	e00d      	b.n	8003a50 <RCC_PLL_GetFreqDomain_SYS+0x68>

#if defined(RCC_PLL2_SUPPORT)
    case LL_RCC_PLLSOURCE_PLL2:       /* PLL2 used as PLL clock source */
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
 8003a34:	f000 f82c 	bl	8003a90 <RCC_PLL2_GetFreqClockFreq>
 8003a38:	4604      	mov	r4, r0
 8003a3a:	f7ff ff33 	bl	80038a4 <LL_RCC_PLL_GetPrediv>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	3301      	adds	r3, #1
 8003a42:	fbb4 f3f3 	udiv	r3, r4, r3
 8003a46:	607b      	str	r3, [r7, #4]
      break;
 8003a48:	e002      	b.n	8003a50 <RCC_PLL_GetFreqDomain_SYS+0x68>
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8003a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8003a88 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 8003a4c:	607b      	str	r3, [r7, #4]
      break;
 8003a4e:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8003a50:	f7ff ff1c 	bl	800388c <LL_RCC_PLL_GetMultiplicator>
 8003a54:	4603      	mov	r3, r0
 8003a56:	f5b3 1f50 	cmp.w	r3, #3407872	@ 0x340000
 8003a5a:	d00a      	beq.n	8003a72 <RCC_PLL_GetFreqDomain_SYS+0x8a>
 8003a5c:	f7ff ff16 	bl	800388c <LL_RCC_PLL_GetMultiplicator>
 8003a60:	4603      	mov	r3, r0
 8003a62:	0c9b      	lsrs	r3, r3, #18
 8003a64:	f003 030f 	and.w	r3, r3, #15
 8003a68:	3302      	adds	r3, #2
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	fb02 f303 	mul.w	r3, r2, r3
 8003a70:	e006      	b.n	8003a80 <RCC_PLL_GetFreqDomain_SYS+0x98>
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	4613      	mov	r3, r2
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	4413      	add	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	085b      	lsrs	r3, r3, #1
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd90      	pop	{r4, r7, pc}
 8003a88:	003d0900 	.word	0x003d0900
 8003a8c:	007a1200 	.word	0x007a1200

08003a90 <RCC_PLL2_GetFreqClockFreq>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL2_GetFreqClockFreq(void)
{
 8003a90:	b598      	push	{r3, r4, r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  return __LL_RCC_CALC_PLL2CLK_FREQ(HSE_VALUE, LL_RCC_PLL2_GetMultiplicator(), LL_RCC_HSE_GetPrediv2());
 8003a94:	f7ff ff12 	bl	80038bc <LL_RCC_PLL2_GetMultiplicator>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	0a1b      	lsrs	r3, r3, #8
 8003a9c:	4a07      	ldr	r2, [pc, #28]	@ (8003abc <RCC_PLL2_GetFreqClockFreq+0x2c>)
 8003a9e:	fb02 f303 	mul.w	r3, r2, r3
 8003aa2:	f503 0474 	add.w	r4, r3, #15990784	@ 0xf40000
 8003aa6:	f504 5410 	add.w	r4, r4, #9216	@ 0x2400
 8003aaa:	f7ff fe9b 	bl	80037e4 <LL_RCC_HSE_GetPrediv2>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	091b      	lsrs	r3, r3, #4
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	bd98      	pop	{r3, r4, r7, pc}
 8003abc:	007a1200 	.word	0x007a1200

08003ac0 <LL_TIM_SetPrescaler>:
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bc80      	pop	{r7}
 8003ad8:	4770      	bx	lr

08003ada <LL_TIM_SetAutoReload>:
{
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
 8003ae2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr

08003af4 <LL_TIM_SetRepetitionCounter>:
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bc80      	pop	{r7}
 8003b0c:	4770      	bx	lr

08003b0e <LL_TIM_OC_SetCompareCH1>:
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr

08003b28 <LL_TIM_OC_SetCompareCH2>:
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bc80      	pop	{r7}
 8003b40:	4770      	bx	lr

08003b42 <LL_TIM_OC_SetCompareCH3>:
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
 8003b4a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003b52:	bf00      	nop
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr

08003b5c <LL_TIM_OC_SetCompareCH4>:
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr

08003b76 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	f043 0201 	orr.w	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	615a      	str	r2, [r3, #20]
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bc80      	pop	{r7}
 8003b92:	4770      	bx	lr

08003b94 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a2b      	ldr	r2, [pc, #172]	@ (8003c54 <LL_TIM_Init+0xc0>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00f      	beq.n	8003bcc <LL_TIM_Init+0x38>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bb2:	d00b      	beq.n	8003bcc <LL_TIM_Init+0x38>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a28      	ldr	r2, [pc, #160]	@ (8003c58 <LL_TIM_Init+0xc4>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d007      	beq.n	8003bcc <LL_TIM_Init+0x38>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a27      	ldr	r2, [pc, #156]	@ (8003c5c <LL_TIM_Init+0xc8>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d003      	beq.n	8003bcc <LL_TIM_Init+0x38>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a26      	ldr	r2, [pc, #152]	@ (8003c60 <LL_TIM_Init+0xcc>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d106      	bne.n	8003bda <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8003c54 <LL_TIM_Init+0xc0>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00f      	beq.n	8003c02 <LL_TIM_Init+0x6e>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003be8:	d00b      	beq.n	8003c02 <LL_TIM_Init+0x6e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a1a      	ldr	r2, [pc, #104]	@ (8003c58 <LL_TIM_Init+0xc4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d007      	beq.n	8003c02 <LL_TIM_Init+0x6e>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a19      	ldr	r2, [pc, #100]	@ (8003c5c <LL_TIM_Init+0xc8>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d003      	beq.n	8003c02 <LL_TIM_Init+0x6e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a18      	ldr	r2, [pc, #96]	@ (8003c60 <LL_TIM_Init+0xcc>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d106      	bne.n	8003c10 <LL_TIM_Init+0x7c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7ff ff5c 	bl	8003ada <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	4619      	mov	r1, r3
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f7ff ff49 	bl	8003ac0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a08      	ldr	r2, [pc, #32]	@ (8003c54 <LL_TIM_Init+0xc0>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d105      	bne.n	8003c42 <LL_TIM_Init+0xae>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7ff ff59 	bl	8003af4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7ff ff97 	bl	8003b76 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40012c00 	.word	0x40012c00
 8003c58:	40000400 	.word	0x40000400
 8003c5c:	40000800 	.word	0x40000800
 8003c60:	40000c00 	.word	0x40000c00

08003c64 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c7a:	d027      	beq.n	8003ccc <LL_TIM_OC_Init+0x68>
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c82:	d82a      	bhi.n	8003cda <LL_TIM_OC_Init+0x76>
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c8a:	d018      	beq.n	8003cbe <LL_TIM_OC_Init+0x5a>
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c92:	d822      	bhi.n	8003cda <LL_TIM_OC_Init+0x76>
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d003      	beq.n	8003ca2 <LL_TIM_OC_Init+0x3e>
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2b10      	cmp	r3, #16
 8003c9e:	d007      	beq.n	8003cb0 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8003ca0:	e01b      	b.n	8003cda <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f000 f81f 	bl	8003ce8 <OC1Config>
 8003caa:	4603      	mov	r3, r0
 8003cac:	75fb      	strb	r3, [r7, #23]
      break;
 8003cae:	e015      	b.n	8003cdc <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 f87e 	bl	8003db4 <OC2Config>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	75fb      	strb	r3, [r7, #23]
      break;
 8003cbc:	e00e      	b.n	8003cdc <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f8e1 	bl	8003e88 <OC3Config>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	75fb      	strb	r3, [r7, #23]
      break;
 8003cca:	e007      	b.n	8003cdc <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 f944 	bl	8003f5c <OC4Config>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8003cd8:	e000      	b.n	8003cdc <LL_TIM_OC_Init+0x78>
      break;
 8003cda:	bf00      	nop
  }

  return result;
 8003cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
	...

08003ce8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	f023 0201 	bic.w	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f023 0303 	bic.w	r3, r3, #3
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f023 0202 	bic.w	r2, r3, #2
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f023 0201 	bic.w	r2, r3, #1
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a1a      	ldr	r2, [pc, #104]	@ (8003db0 <OC1Config+0xc8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d11e      	bne.n	8003d88 <OC1Config+0xa0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f023 0208 	bic.w	r2, r3, #8
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4313      	orrs	r3, r2
 8003d58:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f023 0204 	bic.w	r2, r3, #4
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4313      	orrs	r3, r2
 8003d68:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	4313      	orrs	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	4619      	mov	r1, r3
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff feb7 	bl	8003b0e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40012c00 	.word	0x40012c00

08003db4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	f023 0210 	bic.w	r2, r3, #16
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	021b      	lsls	r3, r3, #8
 8003df0:	4313      	orrs	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f023 0220 	bic.w	r2, r3, #32
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	011b      	lsls	r3, r3, #4
 8003e00:	4313      	orrs	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f023 0210 	bic.w	r2, r3, #16
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	4313      	orrs	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a1b      	ldr	r2, [pc, #108]	@ (8003e84 <OC2Config+0xd0>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d11f      	bne.n	8003e5c <OC2Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	019b      	lsls	r3, r3, #6
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	019b      	lsls	r3, r3, #6
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7ff fe5a 	bl	8003b28 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3718      	adds	r7, #24
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40012c00 	.word	0x40012c00

08003e88 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0303 	bic.w	r3, r3, #3
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	021b      	lsls	r3, r3, #8
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	021b      	lsls	r3, r3, #8
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a1b      	ldr	r2, [pc, #108]	@ (8003f58 <OC3Config+0xd0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d11f      	bne.n	8003f2e <OC3Config+0xa6>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	029b      	lsls	r3, r3, #10
 8003efa:	4313      	orrs	r3, r2
 8003efc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	029b      	lsls	r3, r3, #10
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	015b      	lsls	r3, r3, #5
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	4619      	mov	r1, r3
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7ff fdfe 	bl	8003b42 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3718      	adds	r7, #24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	40012c00 	.word	0x40012c00

08003f5c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	021b      	lsls	r3, r3, #8
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	031b      	lsls	r3, r3, #12
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	031b      	lsls	r3, r3, #12
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a0f      	ldr	r2, [pc, #60]	@ (8003ffc <OC4Config+0xa0>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d107      	bne.n	8003fd4 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	019b      	lsls	r3, r3, #6
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7ff fdb8 	bl	8003b5c <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3718      	adds	r7, #24
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40012c00 	.word	0x40012c00

08004000 <LL_USART_IsEnabled>:
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004010:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004014:	bf0c      	ite	eq
 8004016:	2301      	moveq	r3, #1
 8004018:	2300      	movne	r3, #0
 800401a:	b2db      	uxtb	r3, r3
}
 800401c:	4618      	mov	r0, r3
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	bc80      	pop	{r7}
 8004024:	4770      	bx	lr

08004026 <LL_USART_SetStopBitsLength>:
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	611a      	str	r2, [r3, #16]
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr

0800404a <LL_USART_SetHWFlowCtrl>:
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	615a      	str	r2, [r3, #20]
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	bc80      	pop	{r7}
 800406c:	4770      	bx	lr
	...

08004070 <LL_USART_SetBaudRate>:
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	4613      	mov	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	009a      	lsls	r2, r3, #2
 8004086:	441a      	add	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004090:	4a25      	ldr	r2, [pc, #148]	@ (8004128 <LL_USART_SetBaudRate+0xb8>)
 8004092:	fba2 2303 	umull	r2, r3, r2, r3
 8004096:	095b      	lsrs	r3, r3, #5
 8004098:	b29b      	uxth	r3, r3
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	b299      	uxth	r1, r3
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	4613      	mov	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	009a      	lsls	r2, r3, #2
 80040a8:	441a      	add	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80040b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004128 <LL_USART_SetBaudRate+0xb8>)
 80040b4:	fba3 0302 	umull	r0, r3, r3, r2
 80040b8:	095b      	lsrs	r3, r3, #5
 80040ba:	2064      	movs	r0, #100	@ 0x64
 80040bc:	fb00 f303 	mul.w	r3, r0, r3
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	011b      	lsls	r3, r3, #4
 80040c4:	3332      	adds	r3, #50	@ 0x32
 80040c6:	4a18      	ldr	r2, [pc, #96]	@ (8004128 <LL_USART_SetBaudRate+0xb8>)
 80040c8:	fba2 2303 	umull	r2, r3, r2, r3
 80040cc:	095b      	lsrs	r3, r3, #5
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	440b      	add	r3, r1
 80040d8:	b299      	uxth	r1, r3
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	009a      	lsls	r2, r3, #2
 80040e4:	441a      	add	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80040ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004128 <LL_USART_SetBaudRate+0xb8>)
 80040f0:	fba3 0302 	umull	r0, r3, r3, r2
 80040f4:	095b      	lsrs	r3, r3, #5
 80040f6:	2064      	movs	r0, #100	@ 0x64
 80040f8:	fb00 f303 	mul.w	r3, r0, r3
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	011b      	lsls	r3, r3, #4
 8004100:	3332      	adds	r3, #50	@ 0x32
 8004102:	4a09      	ldr	r2, [pc, #36]	@ (8004128 <LL_USART_SetBaudRate+0xb8>)
 8004104:	fba2 2303 	umull	r2, r3, r2, r3
 8004108:	095b      	lsrs	r3, r3, #5
 800410a:	b29b      	uxth	r3, r3
 800410c:	f003 030f 	and.w	r3, r3, #15
 8004110:	b29b      	uxth	r3, r3
 8004112:	440b      	add	r3, r1
 8004114:	b29b      	uxth	r3, r3
 8004116:	461a      	mov	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	609a      	str	r2, [r3, #8]
}
 800411c:	bf00      	nop
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	bc80      	pop	{r7}
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	51eb851f 	.word	0x51eb851f

0800412c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800413a:	2300      	movs	r3, #0
 800413c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7ff ff5e 	bl	8004000 <LL_USART_IsEnabled>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d153      	bne.n	80041f2 <LL_USART_Init+0xc6>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004152:	f023 030c 	bic.w	r3, r3, #12
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	6851      	ldr	r1, [r2, #4]
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	68d2      	ldr	r2, [r2, #12]
 800415e:	4311      	orrs	r1, r2
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	6912      	ldr	r2, [r2, #16]
 8004164:	430a      	orrs	r2, r1
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	4619      	mov	r1, r3
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7ff ff57 	bl	8004026 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	4619      	mov	r1, r3
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7ff ff63 	bl	800404a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004184:	f107 0308 	add.w	r3, r7, #8
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff fba3 	bl	80038d4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a1a      	ldr	r2, [pc, #104]	@ (80041fc <LL_USART_Init+0xd0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d102      	bne.n	800419c <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	61bb      	str	r3, [r7, #24]
 800419a:	e01a      	b.n	80041d2 <LL_USART_Init+0xa6>
    }
    else if (USARTx == USART2)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a18      	ldr	r2, [pc, #96]	@ (8004200 <LL_USART_Init+0xd4>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d102      	bne.n	80041aa <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	61bb      	str	r3, [r7, #24]
 80041a8:	e013      	b.n	80041d2 <LL_USART_Init+0xa6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a15      	ldr	r2, [pc, #84]	@ (8004204 <LL_USART_Init+0xd8>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d102      	bne.n	80041b8 <LL_USART_Init+0x8c>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	61bb      	str	r3, [r7, #24]
 80041b6:	e00c      	b.n	80041d2 <LL_USART_Init+0xa6>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a13      	ldr	r2, [pc, #76]	@ (8004208 <LL_USART_Init+0xdc>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d102      	bne.n	80041c6 <LL_USART_Init+0x9a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	61bb      	str	r3, [r7, #24]
 80041c4:	e005      	b.n	80041d2 <LL_USART_Init+0xa6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a10      	ldr	r2, [pc, #64]	@ (800420c <LL_USART_Init+0xe0>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d101      	bne.n	80041d2 <LL_USART_Init+0xa6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00c      	beq.n	80041f2 <LL_USART_Init+0xc6>
        && (USART_InitStruct->BaudRate != 0U))
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d008      	beq.n	80041f2 <LL_USART_Init+0xc6>
    {
      status = SUCCESS;
 80041e0:	2300      	movs	r3, #0
 80041e2:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80041e8:	461a      	mov	r2, r3
 80041ea:	69b9      	ldr	r1, [r7, #24]
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7ff ff3f 	bl	8004070 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80041f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3720      	adds	r7, #32
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40013800 	.word	0x40013800
 8004200:	40004400 	.word	0x40004400
 8004204:	40004800 	.word	0x40004800
 8004208:	40004c00 	.word	0x40004c00
 800420c:	40005000 	.word	0x40005000

08004210 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004222:	4a07      	ldr	r2, [pc, #28]	@ (8004240 <LL_InitTick+0x30>)
 8004224:	3b01      	subs	r3, #1
 8004226:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004228:	4b05      	ldr	r3, [pc, #20]	@ (8004240 <LL_InitTick+0x30>)
 800422a:	2200      	movs	r2, #0
 800422c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800422e:	4b04      	ldr	r3, [pc, #16]	@ (8004240 <LL_InitTick+0x30>)
 8004230:	2205      	movs	r2, #5
 8004232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	bc80      	pop	{r7}
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	e000e010 	.word	0xe000e010

08004244 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800424c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7ff ffdd 	bl	8004210 <LL_InitTick>
}
 8004256:	bf00      	nop
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004268:	4b0e      	ldr	r3, [pc, #56]	@ (80042a4 <LL_mDelay+0x44>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800426e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004276:	d00c      	beq.n	8004292 <LL_mDelay+0x32>
  {
    Delay++;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3301      	adds	r3, #1
 800427c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800427e:	e008      	b.n	8004292 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004280:	4b08      	ldr	r3, [pc, #32]	@ (80042a4 <LL_mDelay+0x44>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <LL_mDelay+0x32>
    {
      Delay--;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3b01      	subs	r3, #1
 8004290:	607b      	str	r3, [r7, #4]
  while (Delay)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1f3      	bne.n	8004280 <LL_mDelay+0x20>
    }
  }
}
 8004298:	bf00      	nop
 800429a:	bf00      	nop
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	bc80      	pop	{r7}
 80042a2:	4770      	bx	lr
 80042a4:	e000e010 	.word	0xe000e010

080042a8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80042b0:	4a03      	ldr	r2, [pc, #12]	@ (80042c0 <LL_SetSystemCoreClock+0x18>)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6013      	str	r3, [r2, #0]
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bc80      	pop	{r7}
 80042be:	4770      	bx	lr
 80042c0:	20000cc0 	.word	0x20000cc0

080042c4 <__sflush_r>:
 80042c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80042c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ca:	0716      	lsls	r6, r2, #28
 80042cc:	4605      	mov	r5, r0
 80042ce:	460c      	mov	r4, r1
 80042d0:	d454      	bmi.n	800437c <__sflush_r+0xb8>
 80042d2:	684b      	ldr	r3, [r1, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	dc02      	bgt.n	80042de <__sflush_r+0x1a>
 80042d8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80042da:	2b00      	cmp	r3, #0
 80042dc:	dd48      	ble.n	8004370 <__sflush_r+0xac>
 80042de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80042e0:	2e00      	cmp	r6, #0
 80042e2:	d045      	beq.n	8004370 <__sflush_r+0xac>
 80042e4:	2300      	movs	r3, #0
 80042e6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80042ea:	682f      	ldr	r7, [r5, #0]
 80042ec:	6a21      	ldr	r1, [r4, #32]
 80042ee:	602b      	str	r3, [r5, #0]
 80042f0:	d030      	beq.n	8004354 <__sflush_r+0x90>
 80042f2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80042f4:	89a3      	ldrh	r3, [r4, #12]
 80042f6:	0759      	lsls	r1, r3, #29
 80042f8:	d505      	bpl.n	8004306 <__sflush_r+0x42>
 80042fa:	6863      	ldr	r3, [r4, #4]
 80042fc:	1ad2      	subs	r2, r2, r3
 80042fe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004300:	b10b      	cbz	r3, 8004306 <__sflush_r+0x42>
 8004302:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004304:	1ad2      	subs	r2, r2, r3
 8004306:	2300      	movs	r3, #0
 8004308:	4628      	mov	r0, r5
 800430a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800430c:	6a21      	ldr	r1, [r4, #32]
 800430e:	47b0      	blx	r6
 8004310:	1c43      	adds	r3, r0, #1
 8004312:	89a3      	ldrh	r3, [r4, #12]
 8004314:	d106      	bne.n	8004324 <__sflush_r+0x60>
 8004316:	6829      	ldr	r1, [r5, #0]
 8004318:	291d      	cmp	r1, #29
 800431a:	d82b      	bhi.n	8004374 <__sflush_r+0xb0>
 800431c:	4a28      	ldr	r2, [pc, #160]	@ (80043c0 <__sflush_r+0xfc>)
 800431e:	410a      	asrs	r2, r1
 8004320:	07d6      	lsls	r6, r2, #31
 8004322:	d427      	bmi.n	8004374 <__sflush_r+0xb0>
 8004324:	2200      	movs	r2, #0
 8004326:	6062      	str	r2, [r4, #4]
 8004328:	6922      	ldr	r2, [r4, #16]
 800432a:	04d9      	lsls	r1, r3, #19
 800432c:	6022      	str	r2, [r4, #0]
 800432e:	d504      	bpl.n	800433a <__sflush_r+0x76>
 8004330:	1c42      	adds	r2, r0, #1
 8004332:	d101      	bne.n	8004338 <__sflush_r+0x74>
 8004334:	682b      	ldr	r3, [r5, #0]
 8004336:	b903      	cbnz	r3, 800433a <__sflush_r+0x76>
 8004338:	6560      	str	r0, [r4, #84]	@ 0x54
 800433a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800433c:	602f      	str	r7, [r5, #0]
 800433e:	b1b9      	cbz	r1, 8004370 <__sflush_r+0xac>
 8004340:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004344:	4299      	cmp	r1, r3
 8004346:	d002      	beq.n	800434e <__sflush_r+0x8a>
 8004348:	4628      	mov	r0, r5
 800434a:	f000 fb77 	bl	8004a3c <_free_r>
 800434e:	2300      	movs	r3, #0
 8004350:	6363      	str	r3, [r4, #52]	@ 0x34
 8004352:	e00d      	b.n	8004370 <__sflush_r+0xac>
 8004354:	2301      	movs	r3, #1
 8004356:	4628      	mov	r0, r5
 8004358:	47b0      	blx	r6
 800435a:	4602      	mov	r2, r0
 800435c:	1c50      	adds	r0, r2, #1
 800435e:	d1c9      	bne.n	80042f4 <__sflush_r+0x30>
 8004360:	682b      	ldr	r3, [r5, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0c6      	beq.n	80042f4 <__sflush_r+0x30>
 8004366:	2b1d      	cmp	r3, #29
 8004368:	d001      	beq.n	800436e <__sflush_r+0xaa>
 800436a:	2b16      	cmp	r3, #22
 800436c:	d11d      	bne.n	80043aa <__sflush_r+0xe6>
 800436e:	602f      	str	r7, [r5, #0]
 8004370:	2000      	movs	r0, #0
 8004372:	e021      	b.n	80043b8 <__sflush_r+0xf4>
 8004374:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004378:	b21b      	sxth	r3, r3
 800437a:	e01a      	b.n	80043b2 <__sflush_r+0xee>
 800437c:	690f      	ldr	r7, [r1, #16]
 800437e:	2f00      	cmp	r7, #0
 8004380:	d0f6      	beq.n	8004370 <__sflush_r+0xac>
 8004382:	0793      	lsls	r3, r2, #30
 8004384:	bf18      	it	ne
 8004386:	2300      	movne	r3, #0
 8004388:	680e      	ldr	r6, [r1, #0]
 800438a:	bf08      	it	eq
 800438c:	694b      	ldreq	r3, [r1, #20]
 800438e:	1bf6      	subs	r6, r6, r7
 8004390:	600f      	str	r7, [r1, #0]
 8004392:	608b      	str	r3, [r1, #8]
 8004394:	2e00      	cmp	r6, #0
 8004396:	ddeb      	ble.n	8004370 <__sflush_r+0xac>
 8004398:	4633      	mov	r3, r6
 800439a:	463a      	mov	r2, r7
 800439c:	4628      	mov	r0, r5
 800439e:	6a21      	ldr	r1, [r4, #32]
 80043a0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80043a4:	47e0      	blx	ip
 80043a6:	2800      	cmp	r0, #0
 80043a8:	dc07      	bgt.n	80043ba <__sflush_r+0xf6>
 80043aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043b2:	f04f 30ff 	mov.w	r0, #4294967295
 80043b6:	81a3      	strh	r3, [r4, #12]
 80043b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043ba:	4407      	add	r7, r0
 80043bc:	1a36      	subs	r6, r6, r0
 80043be:	e7e9      	b.n	8004394 <__sflush_r+0xd0>
 80043c0:	dfbffffe 	.word	0xdfbffffe

080043c4 <_fflush_r>:
 80043c4:	b538      	push	{r3, r4, r5, lr}
 80043c6:	690b      	ldr	r3, [r1, #16]
 80043c8:	4605      	mov	r5, r0
 80043ca:	460c      	mov	r4, r1
 80043cc:	b913      	cbnz	r3, 80043d4 <_fflush_r+0x10>
 80043ce:	2500      	movs	r5, #0
 80043d0:	4628      	mov	r0, r5
 80043d2:	bd38      	pop	{r3, r4, r5, pc}
 80043d4:	b118      	cbz	r0, 80043de <_fflush_r+0x1a>
 80043d6:	6a03      	ldr	r3, [r0, #32]
 80043d8:	b90b      	cbnz	r3, 80043de <_fflush_r+0x1a>
 80043da:	f000 f8bb 	bl	8004554 <__sinit>
 80043de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0f3      	beq.n	80043ce <_fflush_r+0xa>
 80043e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80043e8:	07d0      	lsls	r0, r2, #31
 80043ea:	d404      	bmi.n	80043f6 <_fflush_r+0x32>
 80043ec:	0599      	lsls	r1, r3, #22
 80043ee:	d402      	bmi.n	80043f6 <_fflush_r+0x32>
 80043f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043f2:	f000 fb20 	bl	8004a36 <__retarget_lock_acquire_recursive>
 80043f6:	4628      	mov	r0, r5
 80043f8:	4621      	mov	r1, r4
 80043fa:	f7ff ff63 	bl	80042c4 <__sflush_r>
 80043fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004400:	4605      	mov	r5, r0
 8004402:	07da      	lsls	r2, r3, #31
 8004404:	d4e4      	bmi.n	80043d0 <_fflush_r+0xc>
 8004406:	89a3      	ldrh	r3, [r4, #12]
 8004408:	059b      	lsls	r3, r3, #22
 800440a:	d4e1      	bmi.n	80043d0 <_fflush_r+0xc>
 800440c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800440e:	f000 fb13 	bl	8004a38 <__retarget_lock_release_recursive>
 8004412:	e7dd      	b.n	80043d0 <_fflush_r+0xc>

08004414 <fflush>:
 8004414:	4601      	mov	r1, r0
 8004416:	b920      	cbnz	r0, 8004422 <fflush+0xe>
 8004418:	4a04      	ldr	r2, [pc, #16]	@ (800442c <fflush+0x18>)
 800441a:	4905      	ldr	r1, [pc, #20]	@ (8004430 <fflush+0x1c>)
 800441c:	4805      	ldr	r0, [pc, #20]	@ (8004434 <fflush+0x20>)
 800441e:	f000 b8b1 	b.w	8004584 <_fwalk_sglue>
 8004422:	4b05      	ldr	r3, [pc, #20]	@ (8004438 <fflush+0x24>)
 8004424:	6818      	ldr	r0, [r3, #0]
 8004426:	f7ff bfcd 	b.w	80043c4 <_fflush_r>
 800442a:	bf00      	nop
 800442c:	20000cc4 	.word	0x20000cc4
 8004430:	080043c5 	.word	0x080043c5
 8004434:	20000cd4 	.word	0x20000cd4
 8004438:	20000cd0 	.word	0x20000cd0

0800443c <std>:
 800443c:	2300      	movs	r3, #0
 800443e:	b510      	push	{r4, lr}
 8004440:	4604      	mov	r4, r0
 8004442:	e9c0 3300 	strd	r3, r3, [r0]
 8004446:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800444a:	6083      	str	r3, [r0, #8]
 800444c:	8181      	strh	r1, [r0, #12]
 800444e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004450:	81c2      	strh	r2, [r0, #14]
 8004452:	6183      	str	r3, [r0, #24]
 8004454:	4619      	mov	r1, r3
 8004456:	2208      	movs	r2, #8
 8004458:	305c      	adds	r0, #92	@ 0x5c
 800445a:	f000 fa61 	bl	8004920 <memset>
 800445e:	4b0d      	ldr	r3, [pc, #52]	@ (8004494 <std+0x58>)
 8004460:	6224      	str	r4, [r4, #32]
 8004462:	6263      	str	r3, [r4, #36]	@ 0x24
 8004464:	4b0c      	ldr	r3, [pc, #48]	@ (8004498 <std+0x5c>)
 8004466:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004468:	4b0c      	ldr	r3, [pc, #48]	@ (800449c <std+0x60>)
 800446a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800446c:	4b0c      	ldr	r3, [pc, #48]	@ (80044a0 <std+0x64>)
 800446e:	6323      	str	r3, [r4, #48]	@ 0x30
 8004470:	4b0c      	ldr	r3, [pc, #48]	@ (80044a4 <std+0x68>)
 8004472:	429c      	cmp	r4, r3
 8004474:	d006      	beq.n	8004484 <std+0x48>
 8004476:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800447a:	4294      	cmp	r4, r2
 800447c:	d002      	beq.n	8004484 <std+0x48>
 800447e:	33d0      	adds	r3, #208	@ 0xd0
 8004480:	429c      	cmp	r4, r3
 8004482:	d105      	bne.n	8004490 <std+0x54>
 8004484:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800448c:	f000 bad2 	b.w	8004a34 <__retarget_lock_init_recursive>
 8004490:	bd10      	pop	{r4, pc}
 8004492:	bf00      	nop
 8004494:	0800476d 	.word	0x0800476d
 8004498:	08004793 	.word	0x08004793
 800449c:	080047cb 	.word	0x080047cb
 80044a0:	080047ef 	.word	0x080047ef
 80044a4:	200042d8 	.word	0x200042d8

080044a8 <stdio_exit_handler>:
 80044a8:	4a02      	ldr	r2, [pc, #8]	@ (80044b4 <stdio_exit_handler+0xc>)
 80044aa:	4903      	ldr	r1, [pc, #12]	@ (80044b8 <stdio_exit_handler+0x10>)
 80044ac:	4803      	ldr	r0, [pc, #12]	@ (80044bc <stdio_exit_handler+0x14>)
 80044ae:	f000 b869 	b.w	8004584 <_fwalk_sglue>
 80044b2:	bf00      	nop
 80044b4:	20000cc4 	.word	0x20000cc4
 80044b8:	080043c5 	.word	0x080043c5
 80044bc:	20000cd4 	.word	0x20000cd4

080044c0 <cleanup_stdio>:
 80044c0:	6841      	ldr	r1, [r0, #4]
 80044c2:	4b0c      	ldr	r3, [pc, #48]	@ (80044f4 <cleanup_stdio+0x34>)
 80044c4:	b510      	push	{r4, lr}
 80044c6:	4299      	cmp	r1, r3
 80044c8:	4604      	mov	r4, r0
 80044ca:	d001      	beq.n	80044d0 <cleanup_stdio+0x10>
 80044cc:	f7ff ff7a 	bl	80043c4 <_fflush_r>
 80044d0:	68a1      	ldr	r1, [r4, #8]
 80044d2:	4b09      	ldr	r3, [pc, #36]	@ (80044f8 <cleanup_stdio+0x38>)
 80044d4:	4299      	cmp	r1, r3
 80044d6:	d002      	beq.n	80044de <cleanup_stdio+0x1e>
 80044d8:	4620      	mov	r0, r4
 80044da:	f7ff ff73 	bl	80043c4 <_fflush_r>
 80044de:	68e1      	ldr	r1, [r4, #12]
 80044e0:	4b06      	ldr	r3, [pc, #24]	@ (80044fc <cleanup_stdio+0x3c>)
 80044e2:	4299      	cmp	r1, r3
 80044e4:	d004      	beq.n	80044f0 <cleanup_stdio+0x30>
 80044e6:	4620      	mov	r0, r4
 80044e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044ec:	f7ff bf6a 	b.w	80043c4 <_fflush_r>
 80044f0:	bd10      	pop	{r4, pc}
 80044f2:	bf00      	nop
 80044f4:	200042d8 	.word	0x200042d8
 80044f8:	20004340 	.word	0x20004340
 80044fc:	200043a8 	.word	0x200043a8

08004500 <global_stdio_init.part.0>:
 8004500:	b510      	push	{r4, lr}
 8004502:	4b0b      	ldr	r3, [pc, #44]	@ (8004530 <global_stdio_init.part.0+0x30>)
 8004504:	4c0b      	ldr	r4, [pc, #44]	@ (8004534 <global_stdio_init.part.0+0x34>)
 8004506:	4a0c      	ldr	r2, [pc, #48]	@ (8004538 <global_stdio_init.part.0+0x38>)
 8004508:	4620      	mov	r0, r4
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	2104      	movs	r1, #4
 800450e:	2200      	movs	r2, #0
 8004510:	f7ff ff94 	bl	800443c <std>
 8004514:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004518:	2201      	movs	r2, #1
 800451a:	2109      	movs	r1, #9
 800451c:	f7ff ff8e 	bl	800443c <std>
 8004520:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004524:	2202      	movs	r2, #2
 8004526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800452a:	2112      	movs	r1, #18
 800452c:	f7ff bf86 	b.w	800443c <std>
 8004530:	20004410 	.word	0x20004410
 8004534:	200042d8 	.word	0x200042d8
 8004538:	080044a9 	.word	0x080044a9

0800453c <__sfp_lock_acquire>:
 800453c:	4801      	ldr	r0, [pc, #4]	@ (8004544 <__sfp_lock_acquire+0x8>)
 800453e:	f000 ba7a 	b.w	8004a36 <__retarget_lock_acquire_recursive>
 8004542:	bf00      	nop
 8004544:	20004419 	.word	0x20004419

08004548 <__sfp_lock_release>:
 8004548:	4801      	ldr	r0, [pc, #4]	@ (8004550 <__sfp_lock_release+0x8>)
 800454a:	f000 ba75 	b.w	8004a38 <__retarget_lock_release_recursive>
 800454e:	bf00      	nop
 8004550:	20004419 	.word	0x20004419

08004554 <__sinit>:
 8004554:	b510      	push	{r4, lr}
 8004556:	4604      	mov	r4, r0
 8004558:	f7ff fff0 	bl	800453c <__sfp_lock_acquire>
 800455c:	6a23      	ldr	r3, [r4, #32]
 800455e:	b11b      	cbz	r3, 8004568 <__sinit+0x14>
 8004560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004564:	f7ff bff0 	b.w	8004548 <__sfp_lock_release>
 8004568:	4b04      	ldr	r3, [pc, #16]	@ (800457c <__sinit+0x28>)
 800456a:	6223      	str	r3, [r4, #32]
 800456c:	4b04      	ldr	r3, [pc, #16]	@ (8004580 <__sinit+0x2c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1f5      	bne.n	8004560 <__sinit+0xc>
 8004574:	f7ff ffc4 	bl	8004500 <global_stdio_init.part.0>
 8004578:	e7f2      	b.n	8004560 <__sinit+0xc>
 800457a:	bf00      	nop
 800457c:	080044c1 	.word	0x080044c1
 8004580:	20004410 	.word	0x20004410

08004584 <_fwalk_sglue>:
 8004584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004588:	4607      	mov	r7, r0
 800458a:	4688      	mov	r8, r1
 800458c:	4614      	mov	r4, r2
 800458e:	2600      	movs	r6, #0
 8004590:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004594:	f1b9 0901 	subs.w	r9, r9, #1
 8004598:	d505      	bpl.n	80045a6 <_fwalk_sglue+0x22>
 800459a:	6824      	ldr	r4, [r4, #0]
 800459c:	2c00      	cmp	r4, #0
 800459e:	d1f7      	bne.n	8004590 <_fwalk_sglue+0xc>
 80045a0:	4630      	mov	r0, r6
 80045a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045a6:	89ab      	ldrh	r3, [r5, #12]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d907      	bls.n	80045bc <_fwalk_sglue+0x38>
 80045ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045b0:	3301      	adds	r3, #1
 80045b2:	d003      	beq.n	80045bc <_fwalk_sglue+0x38>
 80045b4:	4629      	mov	r1, r5
 80045b6:	4638      	mov	r0, r7
 80045b8:	47c0      	blx	r8
 80045ba:	4306      	orrs	r6, r0
 80045bc:	3568      	adds	r5, #104	@ 0x68
 80045be:	e7e9      	b.n	8004594 <_fwalk_sglue+0x10>

080045c0 <iprintf>:
 80045c0:	b40f      	push	{r0, r1, r2, r3}
 80045c2:	b507      	push	{r0, r1, r2, lr}
 80045c4:	4906      	ldr	r1, [pc, #24]	@ (80045e0 <iprintf+0x20>)
 80045c6:	ab04      	add	r3, sp, #16
 80045c8:	6808      	ldr	r0, [r1, #0]
 80045ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80045ce:	6881      	ldr	r1, [r0, #8]
 80045d0:	9301      	str	r3, [sp, #4]
 80045d2:	f000 fe73 	bl	80052bc <_vfiprintf_r>
 80045d6:	b003      	add	sp, #12
 80045d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80045dc:	b004      	add	sp, #16
 80045de:	4770      	bx	lr
 80045e0:	20000cd0 	.word	0x20000cd0

080045e4 <putchar>:
 80045e4:	4b02      	ldr	r3, [pc, #8]	@ (80045f0 <putchar+0xc>)
 80045e6:	4601      	mov	r1, r0
 80045e8:	6818      	ldr	r0, [r3, #0]
 80045ea:	6882      	ldr	r2, [r0, #8]
 80045ec:	f001 babd 	b.w	8005b6a <_putc_r>
 80045f0:	20000cd0 	.word	0x20000cd0

080045f4 <_puts_r>:
 80045f4:	6a03      	ldr	r3, [r0, #32]
 80045f6:	b570      	push	{r4, r5, r6, lr}
 80045f8:	4605      	mov	r5, r0
 80045fa:	460e      	mov	r6, r1
 80045fc:	6884      	ldr	r4, [r0, #8]
 80045fe:	b90b      	cbnz	r3, 8004604 <_puts_r+0x10>
 8004600:	f7ff ffa8 	bl	8004554 <__sinit>
 8004604:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004606:	07db      	lsls	r3, r3, #31
 8004608:	d405      	bmi.n	8004616 <_puts_r+0x22>
 800460a:	89a3      	ldrh	r3, [r4, #12]
 800460c:	0598      	lsls	r0, r3, #22
 800460e:	d402      	bmi.n	8004616 <_puts_r+0x22>
 8004610:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004612:	f000 fa10 	bl	8004a36 <__retarget_lock_acquire_recursive>
 8004616:	89a3      	ldrh	r3, [r4, #12]
 8004618:	0719      	lsls	r1, r3, #28
 800461a:	d502      	bpl.n	8004622 <_puts_r+0x2e>
 800461c:	6923      	ldr	r3, [r4, #16]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d135      	bne.n	800468e <_puts_r+0x9a>
 8004622:	4621      	mov	r1, r4
 8004624:	4628      	mov	r0, r5
 8004626:	f000 f925 	bl	8004874 <__swsetup_r>
 800462a:	b380      	cbz	r0, 800468e <_puts_r+0x9a>
 800462c:	f04f 35ff 	mov.w	r5, #4294967295
 8004630:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004632:	07da      	lsls	r2, r3, #31
 8004634:	d405      	bmi.n	8004642 <_puts_r+0x4e>
 8004636:	89a3      	ldrh	r3, [r4, #12]
 8004638:	059b      	lsls	r3, r3, #22
 800463a:	d402      	bmi.n	8004642 <_puts_r+0x4e>
 800463c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800463e:	f000 f9fb 	bl	8004a38 <__retarget_lock_release_recursive>
 8004642:	4628      	mov	r0, r5
 8004644:	bd70      	pop	{r4, r5, r6, pc}
 8004646:	2b00      	cmp	r3, #0
 8004648:	da04      	bge.n	8004654 <_puts_r+0x60>
 800464a:	69a2      	ldr	r2, [r4, #24]
 800464c:	429a      	cmp	r2, r3
 800464e:	dc17      	bgt.n	8004680 <_puts_r+0x8c>
 8004650:	290a      	cmp	r1, #10
 8004652:	d015      	beq.n	8004680 <_puts_r+0x8c>
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	6022      	str	r2, [r4, #0]
 800465a:	7019      	strb	r1, [r3, #0]
 800465c:	68a3      	ldr	r3, [r4, #8]
 800465e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004662:	3b01      	subs	r3, #1
 8004664:	60a3      	str	r3, [r4, #8]
 8004666:	2900      	cmp	r1, #0
 8004668:	d1ed      	bne.n	8004646 <_puts_r+0x52>
 800466a:	2b00      	cmp	r3, #0
 800466c:	da11      	bge.n	8004692 <_puts_r+0x9e>
 800466e:	4622      	mov	r2, r4
 8004670:	210a      	movs	r1, #10
 8004672:	4628      	mov	r0, r5
 8004674:	f000 f8bf 	bl	80047f6 <__swbuf_r>
 8004678:	3001      	adds	r0, #1
 800467a:	d0d7      	beq.n	800462c <_puts_r+0x38>
 800467c:	250a      	movs	r5, #10
 800467e:	e7d7      	b.n	8004630 <_puts_r+0x3c>
 8004680:	4622      	mov	r2, r4
 8004682:	4628      	mov	r0, r5
 8004684:	f000 f8b7 	bl	80047f6 <__swbuf_r>
 8004688:	3001      	adds	r0, #1
 800468a:	d1e7      	bne.n	800465c <_puts_r+0x68>
 800468c:	e7ce      	b.n	800462c <_puts_r+0x38>
 800468e:	3e01      	subs	r6, #1
 8004690:	e7e4      	b.n	800465c <_puts_r+0x68>
 8004692:	6823      	ldr	r3, [r4, #0]
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	6022      	str	r2, [r4, #0]
 8004698:	220a      	movs	r2, #10
 800469a:	701a      	strb	r2, [r3, #0]
 800469c:	e7ee      	b.n	800467c <_puts_r+0x88>
	...

080046a0 <puts>:
 80046a0:	4b02      	ldr	r3, [pc, #8]	@ (80046ac <puts+0xc>)
 80046a2:	4601      	mov	r1, r0
 80046a4:	6818      	ldr	r0, [r3, #0]
 80046a6:	f7ff bfa5 	b.w	80045f4 <_puts_r>
 80046aa:	bf00      	nop
 80046ac:	20000cd0 	.word	0x20000cd0

080046b0 <sniprintf>:
 80046b0:	b40c      	push	{r2, r3}
 80046b2:	b530      	push	{r4, r5, lr}
 80046b4:	4b17      	ldr	r3, [pc, #92]	@ (8004714 <sniprintf+0x64>)
 80046b6:	1e0c      	subs	r4, r1, #0
 80046b8:	681d      	ldr	r5, [r3, #0]
 80046ba:	b09d      	sub	sp, #116	@ 0x74
 80046bc:	da08      	bge.n	80046d0 <sniprintf+0x20>
 80046be:	238b      	movs	r3, #139	@ 0x8b
 80046c0:	f04f 30ff 	mov.w	r0, #4294967295
 80046c4:	602b      	str	r3, [r5, #0]
 80046c6:	b01d      	add	sp, #116	@ 0x74
 80046c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046cc:	b002      	add	sp, #8
 80046ce:	4770      	bx	lr
 80046d0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80046d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80046d8:	bf0c      	ite	eq
 80046da:	4623      	moveq	r3, r4
 80046dc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80046e0:	9304      	str	r3, [sp, #16]
 80046e2:	9307      	str	r3, [sp, #28]
 80046e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80046e8:	9002      	str	r0, [sp, #8]
 80046ea:	9006      	str	r0, [sp, #24]
 80046ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 80046f0:	4628      	mov	r0, r5
 80046f2:	ab21      	add	r3, sp, #132	@ 0x84
 80046f4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80046f6:	a902      	add	r1, sp, #8
 80046f8:	9301      	str	r3, [sp, #4]
 80046fa:	f000 faf1 	bl	8004ce0 <_svfiprintf_r>
 80046fe:	1c43      	adds	r3, r0, #1
 8004700:	bfbc      	itt	lt
 8004702:	238b      	movlt	r3, #139	@ 0x8b
 8004704:	602b      	strlt	r3, [r5, #0]
 8004706:	2c00      	cmp	r4, #0
 8004708:	d0dd      	beq.n	80046c6 <sniprintf+0x16>
 800470a:	2200      	movs	r2, #0
 800470c:	9b02      	ldr	r3, [sp, #8]
 800470e:	701a      	strb	r2, [r3, #0]
 8004710:	e7d9      	b.n	80046c6 <sniprintf+0x16>
 8004712:	bf00      	nop
 8004714:	20000cd0 	.word	0x20000cd0

08004718 <siscanf>:
 8004718:	b40e      	push	{r1, r2, r3}
 800471a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800471e:	b530      	push	{r4, r5, lr}
 8004720:	b09c      	sub	sp, #112	@ 0x70
 8004722:	ac1f      	add	r4, sp, #124	@ 0x7c
 8004724:	f854 5b04 	ldr.w	r5, [r4], #4
 8004728:	f8ad 2014 	strh.w	r2, [sp, #20]
 800472c:	9002      	str	r0, [sp, #8]
 800472e:	9006      	str	r0, [sp, #24]
 8004730:	f7fb fd82 	bl	8000238 <strlen>
 8004734:	4b0b      	ldr	r3, [pc, #44]	@ (8004764 <siscanf+0x4c>)
 8004736:	9003      	str	r0, [sp, #12]
 8004738:	930b      	str	r3, [sp, #44]	@ 0x2c
 800473a:	2300      	movs	r3, #0
 800473c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800473e:	9314      	str	r3, [sp, #80]	@ 0x50
 8004740:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004744:	9007      	str	r0, [sp, #28]
 8004746:	4808      	ldr	r0, [pc, #32]	@ (8004768 <siscanf+0x50>)
 8004748:	f8ad 3016 	strh.w	r3, [sp, #22]
 800474c:	462a      	mov	r2, r5
 800474e:	4623      	mov	r3, r4
 8004750:	a902      	add	r1, sp, #8
 8004752:	6800      	ldr	r0, [r0, #0]
 8004754:	9401      	str	r4, [sp, #4]
 8004756:	f000 fc17 	bl	8004f88 <__ssvfiscanf_r>
 800475a:	b01c      	add	sp, #112	@ 0x70
 800475c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004760:	b003      	add	sp, #12
 8004762:	4770      	bx	lr
 8004764:	0800478f 	.word	0x0800478f
 8004768:	20000cd0 	.word	0x20000cd0

0800476c <__sread>:
 800476c:	b510      	push	{r4, lr}
 800476e:	460c      	mov	r4, r1
 8004770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004774:	f000 f910 	bl	8004998 <_read_r>
 8004778:	2800      	cmp	r0, #0
 800477a:	bfab      	itete	ge
 800477c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800477e:	89a3      	ldrhlt	r3, [r4, #12]
 8004780:	181b      	addge	r3, r3, r0
 8004782:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004786:	bfac      	ite	ge
 8004788:	6563      	strge	r3, [r4, #84]	@ 0x54
 800478a:	81a3      	strhlt	r3, [r4, #12]
 800478c:	bd10      	pop	{r4, pc}

0800478e <__seofread>:
 800478e:	2000      	movs	r0, #0
 8004790:	4770      	bx	lr

08004792 <__swrite>:
 8004792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004796:	461f      	mov	r7, r3
 8004798:	898b      	ldrh	r3, [r1, #12]
 800479a:	4605      	mov	r5, r0
 800479c:	05db      	lsls	r3, r3, #23
 800479e:	460c      	mov	r4, r1
 80047a0:	4616      	mov	r6, r2
 80047a2:	d505      	bpl.n	80047b0 <__swrite+0x1e>
 80047a4:	2302      	movs	r3, #2
 80047a6:	2200      	movs	r2, #0
 80047a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047ac:	f000 f8e2 	bl	8004974 <_lseek_r>
 80047b0:	89a3      	ldrh	r3, [r4, #12]
 80047b2:	4632      	mov	r2, r6
 80047b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047b8:	81a3      	strh	r3, [r4, #12]
 80047ba:	4628      	mov	r0, r5
 80047bc:	463b      	mov	r3, r7
 80047be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047c6:	f000 b8f9 	b.w	80049bc <_write_r>

080047ca <__sseek>:
 80047ca:	b510      	push	{r4, lr}
 80047cc:	460c      	mov	r4, r1
 80047ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047d2:	f000 f8cf 	bl	8004974 <_lseek_r>
 80047d6:	1c43      	adds	r3, r0, #1
 80047d8:	89a3      	ldrh	r3, [r4, #12]
 80047da:	bf15      	itete	ne
 80047dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80047de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80047e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80047e6:	81a3      	strheq	r3, [r4, #12]
 80047e8:	bf18      	it	ne
 80047ea:	81a3      	strhne	r3, [r4, #12]
 80047ec:	bd10      	pop	{r4, pc}

080047ee <__sclose>:
 80047ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047f2:	f000 b8af 	b.w	8004954 <_close_r>

080047f6 <__swbuf_r>:
 80047f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f8:	460e      	mov	r6, r1
 80047fa:	4614      	mov	r4, r2
 80047fc:	4605      	mov	r5, r0
 80047fe:	b118      	cbz	r0, 8004808 <__swbuf_r+0x12>
 8004800:	6a03      	ldr	r3, [r0, #32]
 8004802:	b90b      	cbnz	r3, 8004808 <__swbuf_r+0x12>
 8004804:	f7ff fea6 	bl	8004554 <__sinit>
 8004808:	69a3      	ldr	r3, [r4, #24]
 800480a:	60a3      	str	r3, [r4, #8]
 800480c:	89a3      	ldrh	r3, [r4, #12]
 800480e:	071a      	lsls	r2, r3, #28
 8004810:	d501      	bpl.n	8004816 <__swbuf_r+0x20>
 8004812:	6923      	ldr	r3, [r4, #16]
 8004814:	b943      	cbnz	r3, 8004828 <__swbuf_r+0x32>
 8004816:	4621      	mov	r1, r4
 8004818:	4628      	mov	r0, r5
 800481a:	f000 f82b 	bl	8004874 <__swsetup_r>
 800481e:	b118      	cbz	r0, 8004828 <__swbuf_r+0x32>
 8004820:	f04f 37ff 	mov.w	r7, #4294967295
 8004824:	4638      	mov	r0, r7
 8004826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	6922      	ldr	r2, [r4, #16]
 800482c:	b2f6      	uxtb	r6, r6
 800482e:	1a98      	subs	r0, r3, r2
 8004830:	6963      	ldr	r3, [r4, #20]
 8004832:	4637      	mov	r7, r6
 8004834:	4283      	cmp	r3, r0
 8004836:	dc05      	bgt.n	8004844 <__swbuf_r+0x4e>
 8004838:	4621      	mov	r1, r4
 800483a:	4628      	mov	r0, r5
 800483c:	f7ff fdc2 	bl	80043c4 <_fflush_r>
 8004840:	2800      	cmp	r0, #0
 8004842:	d1ed      	bne.n	8004820 <__swbuf_r+0x2a>
 8004844:	68a3      	ldr	r3, [r4, #8]
 8004846:	3b01      	subs	r3, #1
 8004848:	60a3      	str	r3, [r4, #8]
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	1c5a      	adds	r2, r3, #1
 800484e:	6022      	str	r2, [r4, #0]
 8004850:	701e      	strb	r6, [r3, #0]
 8004852:	6962      	ldr	r2, [r4, #20]
 8004854:	1c43      	adds	r3, r0, #1
 8004856:	429a      	cmp	r2, r3
 8004858:	d004      	beq.n	8004864 <__swbuf_r+0x6e>
 800485a:	89a3      	ldrh	r3, [r4, #12]
 800485c:	07db      	lsls	r3, r3, #31
 800485e:	d5e1      	bpl.n	8004824 <__swbuf_r+0x2e>
 8004860:	2e0a      	cmp	r6, #10
 8004862:	d1df      	bne.n	8004824 <__swbuf_r+0x2e>
 8004864:	4621      	mov	r1, r4
 8004866:	4628      	mov	r0, r5
 8004868:	f7ff fdac 	bl	80043c4 <_fflush_r>
 800486c:	2800      	cmp	r0, #0
 800486e:	d0d9      	beq.n	8004824 <__swbuf_r+0x2e>
 8004870:	e7d6      	b.n	8004820 <__swbuf_r+0x2a>
	...

08004874 <__swsetup_r>:
 8004874:	b538      	push	{r3, r4, r5, lr}
 8004876:	4b29      	ldr	r3, [pc, #164]	@ (800491c <__swsetup_r+0xa8>)
 8004878:	4605      	mov	r5, r0
 800487a:	6818      	ldr	r0, [r3, #0]
 800487c:	460c      	mov	r4, r1
 800487e:	b118      	cbz	r0, 8004888 <__swsetup_r+0x14>
 8004880:	6a03      	ldr	r3, [r0, #32]
 8004882:	b90b      	cbnz	r3, 8004888 <__swsetup_r+0x14>
 8004884:	f7ff fe66 	bl	8004554 <__sinit>
 8004888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800488c:	0719      	lsls	r1, r3, #28
 800488e:	d422      	bmi.n	80048d6 <__swsetup_r+0x62>
 8004890:	06da      	lsls	r2, r3, #27
 8004892:	d407      	bmi.n	80048a4 <__swsetup_r+0x30>
 8004894:	2209      	movs	r2, #9
 8004896:	602a      	str	r2, [r5, #0]
 8004898:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800489c:	f04f 30ff 	mov.w	r0, #4294967295
 80048a0:	81a3      	strh	r3, [r4, #12]
 80048a2:	e033      	b.n	800490c <__swsetup_r+0x98>
 80048a4:	0758      	lsls	r0, r3, #29
 80048a6:	d512      	bpl.n	80048ce <__swsetup_r+0x5a>
 80048a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80048aa:	b141      	cbz	r1, 80048be <__swsetup_r+0x4a>
 80048ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80048b0:	4299      	cmp	r1, r3
 80048b2:	d002      	beq.n	80048ba <__swsetup_r+0x46>
 80048b4:	4628      	mov	r0, r5
 80048b6:	f000 f8c1 	bl	8004a3c <_free_r>
 80048ba:	2300      	movs	r3, #0
 80048bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80048be:	89a3      	ldrh	r3, [r4, #12]
 80048c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80048c4:	81a3      	strh	r3, [r4, #12]
 80048c6:	2300      	movs	r3, #0
 80048c8:	6063      	str	r3, [r4, #4]
 80048ca:	6923      	ldr	r3, [r4, #16]
 80048cc:	6023      	str	r3, [r4, #0]
 80048ce:	89a3      	ldrh	r3, [r4, #12]
 80048d0:	f043 0308 	orr.w	r3, r3, #8
 80048d4:	81a3      	strh	r3, [r4, #12]
 80048d6:	6923      	ldr	r3, [r4, #16]
 80048d8:	b94b      	cbnz	r3, 80048ee <__swsetup_r+0x7a>
 80048da:	89a3      	ldrh	r3, [r4, #12]
 80048dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80048e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048e4:	d003      	beq.n	80048ee <__swsetup_r+0x7a>
 80048e6:	4621      	mov	r1, r4
 80048e8:	4628      	mov	r0, r5
 80048ea:	f001 f902 	bl	8005af2 <__smakebuf_r>
 80048ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048f2:	f013 0201 	ands.w	r2, r3, #1
 80048f6:	d00a      	beq.n	800490e <__swsetup_r+0x9a>
 80048f8:	2200      	movs	r2, #0
 80048fa:	60a2      	str	r2, [r4, #8]
 80048fc:	6962      	ldr	r2, [r4, #20]
 80048fe:	4252      	negs	r2, r2
 8004900:	61a2      	str	r2, [r4, #24]
 8004902:	6922      	ldr	r2, [r4, #16]
 8004904:	b942      	cbnz	r2, 8004918 <__swsetup_r+0xa4>
 8004906:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800490a:	d1c5      	bne.n	8004898 <__swsetup_r+0x24>
 800490c:	bd38      	pop	{r3, r4, r5, pc}
 800490e:	0799      	lsls	r1, r3, #30
 8004910:	bf58      	it	pl
 8004912:	6962      	ldrpl	r2, [r4, #20]
 8004914:	60a2      	str	r2, [r4, #8]
 8004916:	e7f4      	b.n	8004902 <__swsetup_r+0x8e>
 8004918:	2000      	movs	r0, #0
 800491a:	e7f7      	b.n	800490c <__swsetup_r+0x98>
 800491c:	20000cd0 	.word	0x20000cd0

08004920 <memset>:
 8004920:	4603      	mov	r3, r0
 8004922:	4402      	add	r2, r0
 8004924:	4293      	cmp	r3, r2
 8004926:	d100      	bne.n	800492a <memset+0xa>
 8004928:	4770      	bx	lr
 800492a:	f803 1b01 	strb.w	r1, [r3], #1
 800492e:	e7f9      	b.n	8004924 <memset+0x4>

08004930 <strncmp>:
 8004930:	b510      	push	{r4, lr}
 8004932:	b16a      	cbz	r2, 8004950 <strncmp+0x20>
 8004934:	3901      	subs	r1, #1
 8004936:	1884      	adds	r4, r0, r2
 8004938:	f810 2b01 	ldrb.w	r2, [r0], #1
 800493c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004940:	429a      	cmp	r2, r3
 8004942:	d103      	bne.n	800494c <strncmp+0x1c>
 8004944:	42a0      	cmp	r0, r4
 8004946:	d001      	beq.n	800494c <strncmp+0x1c>
 8004948:	2a00      	cmp	r2, #0
 800494a:	d1f5      	bne.n	8004938 <strncmp+0x8>
 800494c:	1ad0      	subs	r0, r2, r3
 800494e:	bd10      	pop	{r4, pc}
 8004950:	4610      	mov	r0, r2
 8004952:	e7fc      	b.n	800494e <strncmp+0x1e>

08004954 <_close_r>:
 8004954:	b538      	push	{r3, r4, r5, lr}
 8004956:	2300      	movs	r3, #0
 8004958:	4d05      	ldr	r5, [pc, #20]	@ (8004970 <_close_r+0x1c>)
 800495a:	4604      	mov	r4, r0
 800495c:	4608      	mov	r0, r1
 800495e:	602b      	str	r3, [r5, #0]
 8004960:	f7fe fbbb 	bl	80030da <_close>
 8004964:	1c43      	adds	r3, r0, #1
 8004966:	d102      	bne.n	800496e <_close_r+0x1a>
 8004968:	682b      	ldr	r3, [r5, #0]
 800496a:	b103      	cbz	r3, 800496e <_close_r+0x1a>
 800496c:	6023      	str	r3, [r4, #0]
 800496e:	bd38      	pop	{r3, r4, r5, pc}
 8004970:	20004414 	.word	0x20004414

08004974 <_lseek_r>:
 8004974:	b538      	push	{r3, r4, r5, lr}
 8004976:	4604      	mov	r4, r0
 8004978:	4608      	mov	r0, r1
 800497a:	4611      	mov	r1, r2
 800497c:	2200      	movs	r2, #0
 800497e:	4d05      	ldr	r5, [pc, #20]	@ (8004994 <_lseek_r+0x20>)
 8004980:	602a      	str	r2, [r5, #0]
 8004982:	461a      	mov	r2, r3
 8004984:	f7fe fbcd 	bl	8003122 <_lseek>
 8004988:	1c43      	adds	r3, r0, #1
 800498a:	d102      	bne.n	8004992 <_lseek_r+0x1e>
 800498c:	682b      	ldr	r3, [r5, #0]
 800498e:	b103      	cbz	r3, 8004992 <_lseek_r+0x1e>
 8004990:	6023      	str	r3, [r4, #0]
 8004992:	bd38      	pop	{r3, r4, r5, pc}
 8004994:	20004414 	.word	0x20004414

08004998 <_read_r>:
 8004998:	b538      	push	{r3, r4, r5, lr}
 800499a:	4604      	mov	r4, r0
 800499c:	4608      	mov	r0, r1
 800499e:	4611      	mov	r1, r2
 80049a0:	2200      	movs	r2, #0
 80049a2:	4d05      	ldr	r5, [pc, #20]	@ (80049b8 <_read_r+0x20>)
 80049a4:	602a      	str	r2, [r5, #0]
 80049a6:	461a      	mov	r2, r3
 80049a8:	f7fe fb7a 	bl	80030a0 <_read>
 80049ac:	1c43      	adds	r3, r0, #1
 80049ae:	d102      	bne.n	80049b6 <_read_r+0x1e>
 80049b0:	682b      	ldr	r3, [r5, #0]
 80049b2:	b103      	cbz	r3, 80049b6 <_read_r+0x1e>
 80049b4:	6023      	str	r3, [r4, #0]
 80049b6:	bd38      	pop	{r3, r4, r5, pc}
 80049b8:	20004414 	.word	0x20004414

080049bc <_write_r>:
 80049bc:	b538      	push	{r3, r4, r5, lr}
 80049be:	4604      	mov	r4, r0
 80049c0:	4608      	mov	r0, r1
 80049c2:	4611      	mov	r1, r2
 80049c4:	2200      	movs	r2, #0
 80049c6:	4d05      	ldr	r5, [pc, #20]	@ (80049dc <_write_r+0x20>)
 80049c8:	602a      	str	r2, [r5, #0]
 80049ca:	461a      	mov	r2, r3
 80049cc:	f7fc fd40 	bl	8001450 <_write>
 80049d0:	1c43      	adds	r3, r0, #1
 80049d2:	d102      	bne.n	80049da <_write_r+0x1e>
 80049d4:	682b      	ldr	r3, [r5, #0]
 80049d6:	b103      	cbz	r3, 80049da <_write_r+0x1e>
 80049d8:	6023      	str	r3, [r4, #0]
 80049da:	bd38      	pop	{r3, r4, r5, pc}
 80049dc:	20004414 	.word	0x20004414

080049e0 <__errno>:
 80049e0:	4b01      	ldr	r3, [pc, #4]	@ (80049e8 <__errno+0x8>)
 80049e2:	6818      	ldr	r0, [r3, #0]
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	20000cd0 	.word	0x20000cd0

080049ec <__libc_init_array>:
 80049ec:	b570      	push	{r4, r5, r6, lr}
 80049ee:	2600      	movs	r6, #0
 80049f0:	4d0c      	ldr	r5, [pc, #48]	@ (8004a24 <__libc_init_array+0x38>)
 80049f2:	4c0d      	ldr	r4, [pc, #52]	@ (8004a28 <__libc_init_array+0x3c>)
 80049f4:	1b64      	subs	r4, r4, r5
 80049f6:	10a4      	asrs	r4, r4, #2
 80049f8:	42a6      	cmp	r6, r4
 80049fa:	d109      	bne.n	8004a10 <__libc_init_array+0x24>
 80049fc:	f001 fae4 	bl	8005fc8 <_init>
 8004a00:	2600      	movs	r6, #0
 8004a02:	4d0a      	ldr	r5, [pc, #40]	@ (8004a2c <__libc_init_array+0x40>)
 8004a04:	4c0a      	ldr	r4, [pc, #40]	@ (8004a30 <__libc_init_array+0x44>)
 8004a06:	1b64      	subs	r4, r4, r5
 8004a08:	10a4      	asrs	r4, r4, #2
 8004a0a:	42a6      	cmp	r6, r4
 8004a0c:	d105      	bne.n	8004a1a <__libc_init_array+0x2e>
 8004a0e:	bd70      	pop	{r4, r5, r6, pc}
 8004a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a14:	4798      	blx	r3
 8004a16:	3601      	adds	r6, #1
 8004a18:	e7ee      	b.n	80049f8 <__libc_init_array+0xc>
 8004a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a1e:	4798      	blx	r3
 8004a20:	3601      	adds	r6, #1
 8004a22:	e7f2      	b.n	8004a0a <__libc_init_array+0x1e>
 8004a24:	08006f48 	.word	0x08006f48
 8004a28:	08006f48 	.word	0x08006f48
 8004a2c:	08006f48 	.word	0x08006f48
 8004a30:	08006f4c 	.word	0x08006f4c

08004a34 <__retarget_lock_init_recursive>:
 8004a34:	4770      	bx	lr

08004a36 <__retarget_lock_acquire_recursive>:
 8004a36:	4770      	bx	lr

08004a38 <__retarget_lock_release_recursive>:
 8004a38:	4770      	bx	lr
	...

08004a3c <_free_r>:
 8004a3c:	b538      	push	{r3, r4, r5, lr}
 8004a3e:	4605      	mov	r5, r0
 8004a40:	2900      	cmp	r1, #0
 8004a42:	d040      	beq.n	8004ac6 <_free_r+0x8a>
 8004a44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a48:	1f0c      	subs	r4, r1, #4
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	bfb8      	it	lt
 8004a4e:	18e4      	addlt	r4, r4, r3
 8004a50:	f000 f8de 	bl	8004c10 <__malloc_lock>
 8004a54:	4a1c      	ldr	r2, [pc, #112]	@ (8004ac8 <_free_r+0x8c>)
 8004a56:	6813      	ldr	r3, [r2, #0]
 8004a58:	b933      	cbnz	r3, 8004a68 <_free_r+0x2c>
 8004a5a:	6063      	str	r3, [r4, #4]
 8004a5c:	6014      	str	r4, [r2, #0]
 8004a5e:	4628      	mov	r0, r5
 8004a60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a64:	f000 b8da 	b.w	8004c1c <__malloc_unlock>
 8004a68:	42a3      	cmp	r3, r4
 8004a6a:	d908      	bls.n	8004a7e <_free_r+0x42>
 8004a6c:	6820      	ldr	r0, [r4, #0]
 8004a6e:	1821      	adds	r1, r4, r0
 8004a70:	428b      	cmp	r3, r1
 8004a72:	bf01      	itttt	eq
 8004a74:	6819      	ldreq	r1, [r3, #0]
 8004a76:	685b      	ldreq	r3, [r3, #4]
 8004a78:	1809      	addeq	r1, r1, r0
 8004a7a:	6021      	streq	r1, [r4, #0]
 8004a7c:	e7ed      	b.n	8004a5a <_free_r+0x1e>
 8004a7e:	461a      	mov	r2, r3
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	b10b      	cbz	r3, 8004a88 <_free_r+0x4c>
 8004a84:	42a3      	cmp	r3, r4
 8004a86:	d9fa      	bls.n	8004a7e <_free_r+0x42>
 8004a88:	6811      	ldr	r1, [r2, #0]
 8004a8a:	1850      	adds	r0, r2, r1
 8004a8c:	42a0      	cmp	r0, r4
 8004a8e:	d10b      	bne.n	8004aa8 <_free_r+0x6c>
 8004a90:	6820      	ldr	r0, [r4, #0]
 8004a92:	4401      	add	r1, r0
 8004a94:	1850      	adds	r0, r2, r1
 8004a96:	4283      	cmp	r3, r0
 8004a98:	6011      	str	r1, [r2, #0]
 8004a9a:	d1e0      	bne.n	8004a5e <_free_r+0x22>
 8004a9c:	6818      	ldr	r0, [r3, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	4408      	add	r0, r1
 8004aa2:	6010      	str	r0, [r2, #0]
 8004aa4:	6053      	str	r3, [r2, #4]
 8004aa6:	e7da      	b.n	8004a5e <_free_r+0x22>
 8004aa8:	d902      	bls.n	8004ab0 <_free_r+0x74>
 8004aaa:	230c      	movs	r3, #12
 8004aac:	602b      	str	r3, [r5, #0]
 8004aae:	e7d6      	b.n	8004a5e <_free_r+0x22>
 8004ab0:	6820      	ldr	r0, [r4, #0]
 8004ab2:	1821      	adds	r1, r4, r0
 8004ab4:	428b      	cmp	r3, r1
 8004ab6:	bf01      	itttt	eq
 8004ab8:	6819      	ldreq	r1, [r3, #0]
 8004aba:	685b      	ldreq	r3, [r3, #4]
 8004abc:	1809      	addeq	r1, r1, r0
 8004abe:	6021      	streq	r1, [r4, #0]
 8004ac0:	6063      	str	r3, [r4, #4]
 8004ac2:	6054      	str	r4, [r2, #4]
 8004ac4:	e7cb      	b.n	8004a5e <_free_r+0x22>
 8004ac6:	bd38      	pop	{r3, r4, r5, pc}
 8004ac8:	20004420 	.word	0x20004420

08004acc <sbrk_aligned>:
 8004acc:	b570      	push	{r4, r5, r6, lr}
 8004ace:	4e0f      	ldr	r6, [pc, #60]	@ (8004b0c <sbrk_aligned+0x40>)
 8004ad0:	460c      	mov	r4, r1
 8004ad2:	6831      	ldr	r1, [r6, #0]
 8004ad4:	4605      	mov	r5, r0
 8004ad6:	b911      	cbnz	r1, 8004ade <sbrk_aligned+0x12>
 8004ad8:	f001 f928 	bl	8005d2c <_sbrk_r>
 8004adc:	6030      	str	r0, [r6, #0]
 8004ade:	4621      	mov	r1, r4
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	f001 f923 	bl	8005d2c <_sbrk_r>
 8004ae6:	1c43      	adds	r3, r0, #1
 8004ae8:	d103      	bne.n	8004af2 <sbrk_aligned+0x26>
 8004aea:	f04f 34ff 	mov.w	r4, #4294967295
 8004aee:	4620      	mov	r0, r4
 8004af0:	bd70      	pop	{r4, r5, r6, pc}
 8004af2:	1cc4      	adds	r4, r0, #3
 8004af4:	f024 0403 	bic.w	r4, r4, #3
 8004af8:	42a0      	cmp	r0, r4
 8004afa:	d0f8      	beq.n	8004aee <sbrk_aligned+0x22>
 8004afc:	1a21      	subs	r1, r4, r0
 8004afe:	4628      	mov	r0, r5
 8004b00:	f001 f914 	bl	8005d2c <_sbrk_r>
 8004b04:	3001      	adds	r0, #1
 8004b06:	d1f2      	bne.n	8004aee <sbrk_aligned+0x22>
 8004b08:	e7ef      	b.n	8004aea <sbrk_aligned+0x1e>
 8004b0a:	bf00      	nop
 8004b0c:	2000441c 	.word	0x2000441c

08004b10 <_malloc_r>:
 8004b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b14:	1ccd      	adds	r5, r1, #3
 8004b16:	f025 0503 	bic.w	r5, r5, #3
 8004b1a:	3508      	adds	r5, #8
 8004b1c:	2d0c      	cmp	r5, #12
 8004b1e:	bf38      	it	cc
 8004b20:	250c      	movcc	r5, #12
 8004b22:	2d00      	cmp	r5, #0
 8004b24:	4606      	mov	r6, r0
 8004b26:	db01      	blt.n	8004b2c <_malloc_r+0x1c>
 8004b28:	42a9      	cmp	r1, r5
 8004b2a:	d904      	bls.n	8004b36 <_malloc_r+0x26>
 8004b2c:	230c      	movs	r3, #12
 8004b2e:	6033      	str	r3, [r6, #0]
 8004b30:	2000      	movs	r0, #0
 8004b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c0c <_malloc_r+0xfc>
 8004b3a:	f000 f869 	bl	8004c10 <__malloc_lock>
 8004b3e:	f8d8 3000 	ldr.w	r3, [r8]
 8004b42:	461c      	mov	r4, r3
 8004b44:	bb44      	cbnz	r4, 8004b98 <_malloc_r+0x88>
 8004b46:	4629      	mov	r1, r5
 8004b48:	4630      	mov	r0, r6
 8004b4a:	f7ff ffbf 	bl	8004acc <sbrk_aligned>
 8004b4e:	1c43      	adds	r3, r0, #1
 8004b50:	4604      	mov	r4, r0
 8004b52:	d158      	bne.n	8004c06 <_malloc_r+0xf6>
 8004b54:	f8d8 4000 	ldr.w	r4, [r8]
 8004b58:	4627      	mov	r7, r4
 8004b5a:	2f00      	cmp	r7, #0
 8004b5c:	d143      	bne.n	8004be6 <_malloc_r+0xd6>
 8004b5e:	2c00      	cmp	r4, #0
 8004b60:	d04b      	beq.n	8004bfa <_malloc_r+0xea>
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	4639      	mov	r1, r7
 8004b66:	4630      	mov	r0, r6
 8004b68:	eb04 0903 	add.w	r9, r4, r3
 8004b6c:	f001 f8de 	bl	8005d2c <_sbrk_r>
 8004b70:	4581      	cmp	r9, r0
 8004b72:	d142      	bne.n	8004bfa <_malloc_r+0xea>
 8004b74:	6821      	ldr	r1, [r4, #0]
 8004b76:	4630      	mov	r0, r6
 8004b78:	1a6d      	subs	r5, r5, r1
 8004b7a:	4629      	mov	r1, r5
 8004b7c:	f7ff ffa6 	bl	8004acc <sbrk_aligned>
 8004b80:	3001      	adds	r0, #1
 8004b82:	d03a      	beq.n	8004bfa <_malloc_r+0xea>
 8004b84:	6823      	ldr	r3, [r4, #0]
 8004b86:	442b      	add	r3, r5
 8004b88:	6023      	str	r3, [r4, #0]
 8004b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	bb62      	cbnz	r2, 8004bec <_malloc_r+0xdc>
 8004b92:	f8c8 7000 	str.w	r7, [r8]
 8004b96:	e00f      	b.n	8004bb8 <_malloc_r+0xa8>
 8004b98:	6822      	ldr	r2, [r4, #0]
 8004b9a:	1b52      	subs	r2, r2, r5
 8004b9c:	d420      	bmi.n	8004be0 <_malloc_r+0xd0>
 8004b9e:	2a0b      	cmp	r2, #11
 8004ba0:	d917      	bls.n	8004bd2 <_malloc_r+0xc2>
 8004ba2:	1961      	adds	r1, r4, r5
 8004ba4:	42a3      	cmp	r3, r4
 8004ba6:	6025      	str	r5, [r4, #0]
 8004ba8:	bf18      	it	ne
 8004baa:	6059      	strne	r1, [r3, #4]
 8004bac:	6863      	ldr	r3, [r4, #4]
 8004bae:	bf08      	it	eq
 8004bb0:	f8c8 1000 	streq.w	r1, [r8]
 8004bb4:	5162      	str	r2, [r4, r5]
 8004bb6:	604b      	str	r3, [r1, #4]
 8004bb8:	4630      	mov	r0, r6
 8004bba:	f000 f82f 	bl	8004c1c <__malloc_unlock>
 8004bbe:	f104 000b 	add.w	r0, r4, #11
 8004bc2:	1d23      	adds	r3, r4, #4
 8004bc4:	f020 0007 	bic.w	r0, r0, #7
 8004bc8:	1ac2      	subs	r2, r0, r3
 8004bca:	bf1c      	itt	ne
 8004bcc:	1a1b      	subne	r3, r3, r0
 8004bce:	50a3      	strne	r3, [r4, r2]
 8004bd0:	e7af      	b.n	8004b32 <_malloc_r+0x22>
 8004bd2:	6862      	ldr	r2, [r4, #4]
 8004bd4:	42a3      	cmp	r3, r4
 8004bd6:	bf0c      	ite	eq
 8004bd8:	f8c8 2000 	streq.w	r2, [r8]
 8004bdc:	605a      	strne	r2, [r3, #4]
 8004bde:	e7eb      	b.n	8004bb8 <_malloc_r+0xa8>
 8004be0:	4623      	mov	r3, r4
 8004be2:	6864      	ldr	r4, [r4, #4]
 8004be4:	e7ae      	b.n	8004b44 <_malloc_r+0x34>
 8004be6:	463c      	mov	r4, r7
 8004be8:	687f      	ldr	r7, [r7, #4]
 8004bea:	e7b6      	b.n	8004b5a <_malloc_r+0x4a>
 8004bec:	461a      	mov	r2, r3
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	42a3      	cmp	r3, r4
 8004bf2:	d1fb      	bne.n	8004bec <_malloc_r+0xdc>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	6053      	str	r3, [r2, #4]
 8004bf8:	e7de      	b.n	8004bb8 <_malloc_r+0xa8>
 8004bfa:	230c      	movs	r3, #12
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	6033      	str	r3, [r6, #0]
 8004c00:	f000 f80c 	bl	8004c1c <__malloc_unlock>
 8004c04:	e794      	b.n	8004b30 <_malloc_r+0x20>
 8004c06:	6005      	str	r5, [r0, #0]
 8004c08:	e7d6      	b.n	8004bb8 <_malloc_r+0xa8>
 8004c0a:	bf00      	nop
 8004c0c:	20004420 	.word	0x20004420

08004c10 <__malloc_lock>:
 8004c10:	4801      	ldr	r0, [pc, #4]	@ (8004c18 <__malloc_lock+0x8>)
 8004c12:	f7ff bf10 	b.w	8004a36 <__retarget_lock_acquire_recursive>
 8004c16:	bf00      	nop
 8004c18:	20004418 	.word	0x20004418

08004c1c <__malloc_unlock>:
 8004c1c:	4801      	ldr	r0, [pc, #4]	@ (8004c24 <__malloc_unlock+0x8>)
 8004c1e:	f7ff bf0b 	b.w	8004a38 <__retarget_lock_release_recursive>
 8004c22:	bf00      	nop
 8004c24:	20004418 	.word	0x20004418

08004c28 <__ssputs_r>:
 8004c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c2c:	461f      	mov	r7, r3
 8004c2e:	688e      	ldr	r6, [r1, #8]
 8004c30:	4682      	mov	sl, r0
 8004c32:	42be      	cmp	r6, r7
 8004c34:	460c      	mov	r4, r1
 8004c36:	4690      	mov	r8, r2
 8004c38:	680b      	ldr	r3, [r1, #0]
 8004c3a:	d82d      	bhi.n	8004c98 <__ssputs_r+0x70>
 8004c3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004c44:	d026      	beq.n	8004c94 <__ssputs_r+0x6c>
 8004c46:	6965      	ldr	r5, [r4, #20]
 8004c48:	6909      	ldr	r1, [r1, #16]
 8004c4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c4e:	eba3 0901 	sub.w	r9, r3, r1
 8004c52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c56:	1c7b      	adds	r3, r7, #1
 8004c58:	444b      	add	r3, r9
 8004c5a:	106d      	asrs	r5, r5, #1
 8004c5c:	429d      	cmp	r5, r3
 8004c5e:	bf38      	it	cc
 8004c60:	461d      	movcc	r5, r3
 8004c62:	0553      	lsls	r3, r2, #21
 8004c64:	d527      	bpl.n	8004cb6 <__ssputs_r+0x8e>
 8004c66:	4629      	mov	r1, r5
 8004c68:	f7ff ff52 	bl	8004b10 <_malloc_r>
 8004c6c:	4606      	mov	r6, r0
 8004c6e:	b360      	cbz	r0, 8004cca <__ssputs_r+0xa2>
 8004c70:	464a      	mov	r2, r9
 8004c72:	6921      	ldr	r1, [r4, #16]
 8004c74:	f001 f878 	bl	8005d68 <memcpy>
 8004c78:	89a3      	ldrh	r3, [r4, #12]
 8004c7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c82:	81a3      	strh	r3, [r4, #12]
 8004c84:	6126      	str	r6, [r4, #16]
 8004c86:	444e      	add	r6, r9
 8004c88:	6026      	str	r6, [r4, #0]
 8004c8a:	463e      	mov	r6, r7
 8004c8c:	6165      	str	r5, [r4, #20]
 8004c8e:	eba5 0509 	sub.w	r5, r5, r9
 8004c92:	60a5      	str	r5, [r4, #8]
 8004c94:	42be      	cmp	r6, r7
 8004c96:	d900      	bls.n	8004c9a <__ssputs_r+0x72>
 8004c98:	463e      	mov	r6, r7
 8004c9a:	4632      	mov	r2, r6
 8004c9c:	4641      	mov	r1, r8
 8004c9e:	6820      	ldr	r0, [r4, #0]
 8004ca0:	f001 f808 	bl	8005cb4 <memmove>
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	68a3      	ldr	r3, [r4, #8]
 8004ca8:	1b9b      	subs	r3, r3, r6
 8004caa:	60a3      	str	r3, [r4, #8]
 8004cac:	6823      	ldr	r3, [r4, #0]
 8004cae:	4433      	add	r3, r6
 8004cb0:	6023      	str	r3, [r4, #0]
 8004cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cb6:	462a      	mov	r2, r5
 8004cb8:	f001 f864 	bl	8005d84 <_realloc_r>
 8004cbc:	4606      	mov	r6, r0
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	d1e0      	bne.n	8004c84 <__ssputs_r+0x5c>
 8004cc2:	4650      	mov	r0, sl
 8004cc4:	6921      	ldr	r1, [r4, #16]
 8004cc6:	f7ff feb9 	bl	8004a3c <_free_r>
 8004cca:	230c      	movs	r3, #12
 8004ccc:	f8ca 3000 	str.w	r3, [sl]
 8004cd0:	89a3      	ldrh	r3, [r4, #12]
 8004cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cda:	81a3      	strh	r3, [r4, #12]
 8004cdc:	e7e9      	b.n	8004cb2 <__ssputs_r+0x8a>
	...

08004ce0 <_svfiprintf_r>:
 8004ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce4:	4698      	mov	r8, r3
 8004ce6:	898b      	ldrh	r3, [r1, #12]
 8004ce8:	4607      	mov	r7, r0
 8004cea:	061b      	lsls	r3, r3, #24
 8004cec:	460d      	mov	r5, r1
 8004cee:	4614      	mov	r4, r2
 8004cf0:	b09d      	sub	sp, #116	@ 0x74
 8004cf2:	d510      	bpl.n	8004d16 <_svfiprintf_r+0x36>
 8004cf4:	690b      	ldr	r3, [r1, #16]
 8004cf6:	b973      	cbnz	r3, 8004d16 <_svfiprintf_r+0x36>
 8004cf8:	2140      	movs	r1, #64	@ 0x40
 8004cfa:	f7ff ff09 	bl	8004b10 <_malloc_r>
 8004cfe:	6028      	str	r0, [r5, #0]
 8004d00:	6128      	str	r0, [r5, #16]
 8004d02:	b930      	cbnz	r0, 8004d12 <_svfiprintf_r+0x32>
 8004d04:	230c      	movs	r3, #12
 8004d06:	603b      	str	r3, [r7, #0]
 8004d08:	f04f 30ff 	mov.w	r0, #4294967295
 8004d0c:	b01d      	add	sp, #116	@ 0x74
 8004d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d12:	2340      	movs	r3, #64	@ 0x40
 8004d14:	616b      	str	r3, [r5, #20]
 8004d16:	2300      	movs	r3, #0
 8004d18:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d1a:	2320      	movs	r3, #32
 8004d1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d20:	2330      	movs	r3, #48	@ 0x30
 8004d22:	f04f 0901 	mov.w	r9, #1
 8004d26:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d2a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004ec4 <_svfiprintf_r+0x1e4>
 8004d2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d32:	4623      	mov	r3, r4
 8004d34:	469a      	mov	sl, r3
 8004d36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d3a:	b10a      	cbz	r2, 8004d40 <_svfiprintf_r+0x60>
 8004d3c:	2a25      	cmp	r2, #37	@ 0x25
 8004d3e:	d1f9      	bne.n	8004d34 <_svfiprintf_r+0x54>
 8004d40:	ebba 0b04 	subs.w	fp, sl, r4
 8004d44:	d00b      	beq.n	8004d5e <_svfiprintf_r+0x7e>
 8004d46:	465b      	mov	r3, fp
 8004d48:	4622      	mov	r2, r4
 8004d4a:	4629      	mov	r1, r5
 8004d4c:	4638      	mov	r0, r7
 8004d4e:	f7ff ff6b 	bl	8004c28 <__ssputs_r>
 8004d52:	3001      	adds	r0, #1
 8004d54:	f000 80a7 	beq.w	8004ea6 <_svfiprintf_r+0x1c6>
 8004d58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d5a:	445a      	add	r2, fp
 8004d5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 809f 	beq.w	8004ea6 <_svfiprintf_r+0x1c6>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d72:	f10a 0a01 	add.w	sl, sl, #1
 8004d76:	9304      	str	r3, [sp, #16]
 8004d78:	9307      	str	r3, [sp, #28]
 8004d7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d80:	4654      	mov	r4, sl
 8004d82:	2205      	movs	r2, #5
 8004d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d88:	484e      	ldr	r0, [pc, #312]	@ (8004ec4 <_svfiprintf_r+0x1e4>)
 8004d8a:	f000 ffdf 	bl	8005d4c <memchr>
 8004d8e:	9a04      	ldr	r2, [sp, #16]
 8004d90:	b9d8      	cbnz	r0, 8004dca <_svfiprintf_r+0xea>
 8004d92:	06d0      	lsls	r0, r2, #27
 8004d94:	bf44      	itt	mi
 8004d96:	2320      	movmi	r3, #32
 8004d98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d9c:	0711      	lsls	r1, r2, #28
 8004d9e:	bf44      	itt	mi
 8004da0:	232b      	movmi	r3, #43	@ 0x2b
 8004da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004da6:	f89a 3000 	ldrb.w	r3, [sl]
 8004daa:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dac:	d015      	beq.n	8004dda <_svfiprintf_r+0xfa>
 8004dae:	4654      	mov	r4, sl
 8004db0:	2000      	movs	r0, #0
 8004db2:	f04f 0c0a 	mov.w	ip, #10
 8004db6:	9a07      	ldr	r2, [sp, #28]
 8004db8:	4621      	mov	r1, r4
 8004dba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dbe:	3b30      	subs	r3, #48	@ 0x30
 8004dc0:	2b09      	cmp	r3, #9
 8004dc2:	d94b      	bls.n	8004e5c <_svfiprintf_r+0x17c>
 8004dc4:	b1b0      	cbz	r0, 8004df4 <_svfiprintf_r+0x114>
 8004dc6:	9207      	str	r2, [sp, #28]
 8004dc8:	e014      	b.n	8004df4 <_svfiprintf_r+0x114>
 8004dca:	eba0 0308 	sub.w	r3, r0, r8
 8004dce:	fa09 f303 	lsl.w	r3, r9, r3
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	46a2      	mov	sl, r4
 8004dd6:	9304      	str	r3, [sp, #16]
 8004dd8:	e7d2      	b.n	8004d80 <_svfiprintf_r+0xa0>
 8004dda:	9b03      	ldr	r3, [sp, #12]
 8004ddc:	1d19      	adds	r1, r3, #4
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	9103      	str	r1, [sp, #12]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	bfbb      	ittet	lt
 8004de6:	425b      	neglt	r3, r3
 8004de8:	f042 0202 	orrlt.w	r2, r2, #2
 8004dec:	9307      	strge	r3, [sp, #28]
 8004dee:	9307      	strlt	r3, [sp, #28]
 8004df0:	bfb8      	it	lt
 8004df2:	9204      	strlt	r2, [sp, #16]
 8004df4:	7823      	ldrb	r3, [r4, #0]
 8004df6:	2b2e      	cmp	r3, #46	@ 0x2e
 8004df8:	d10a      	bne.n	8004e10 <_svfiprintf_r+0x130>
 8004dfa:	7863      	ldrb	r3, [r4, #1]
 8004dfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dfe:	d132      	bne.n	8004e66 <_svfiprintf_r+0x186>
 8004e00:	9b03      	ldr	r3, [sp, #12]
 8004e02:	3402      	adds	r4, #2
 8004e04:	1d1a      	adds	r2, r3, #4
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	9203      	str	r2, [sp, #12]
 8004e0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e0e:	9305      	str	r3, [sp, #20]
 8004e10:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004ec8 <_svfiprintf_r+0x1e8>
 8004e14:	2203      	movs	r2, #3
 8004e16:	4650      	mov	r0, sl
 8004e18:	7821      	ldrb	r1, [r4, #0]
 8004e1a:	f000 ff97 	bl	8005d4c <memchr>
 8004e1e:	b138      	cbz	r0, 8004e30 <_svfiprintf_r+0x150>
 8004e20:	2240      	movs	r2, #64	@ 0x40
 8004e22:	9b04      	ldr	r3, [sp, #16]
 8004e24:	eba0 000a 	sub.w	r0, r0, sl
 8004e28:	4082      	lsls	r2, r0
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	3401      	adds	r4, #1
 8004e2e:	9304      	str	r3, [sp, #16]
 8004e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e34:	2206      	movs	r2, #6
 8004e36:	4825      	ldr	r0, [pc, #148]	@ (8004ecc <_svfiprintf_r+0x1ec>)
 8004e38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e3c:	f000 ff86 	bl	8005d4c <memchr>
 8004e40:	2800      	cmp	r0, #0
 8004e42:	d036      	beq.n	8004eb2 <_svfiprintf_r+0x1d2>
 8004e44:	4b22      	ldr	r3, [pc, #136]	@ (8004ed0 <_svfiprintf_r+0x1f0>)
 8004e46:	bb1b      	cbnz	r3, 8004e90 <_svfiprintf_r+0x1b0>
 8004e48:	9b03      	ldr	r3, [sp, #12]
 8004e4a:	3307      	adds	r3, #7
 8004e4c:	f023 0307 	bic.w	r3, r3, #7
 8004e50:	3308      	adds	r3, #8
 8004e52:	9303      	str	r3, [sp, #12]
 8004e54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e56:	4433      	add	r3, r6
 8004e58:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e5a:	e76a      	b.n	8004d32 <_svfiprintf_r+0x52>
 8004e5c:	460c      	mov	r4, r1
 8004e5e:	2001      	movs	r0, #1
 8004e60:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e64:	e7a8      	b.n	8004db8 <_svfiprintf_r+0xd8>
 8004e66:	2300      	movs	r3, #0
 8004e68:	f04f 0c0a 	mov.w	ip, #10
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	3401      	adds	r4, #1
 8004e70:	9305      	str	r3, [sp, #20]
 8004e72:	4620      	mov	r0, r4
 8004e74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e78:	3a30      	subs	r2, #48	@ 0x30
 8004e7a:	2a09      	cmp	r2, #9
 8004e7c:	d903      	bls.n	8004e86 <_svfiprintf_r+0x1a6>
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d0c6      	beq.n	8004e10 <_svfiprintf_r+0x130>
 8004e82:	9105      	str	r1, [sp, #20]
 8004e84:	e7c4      	b.n	8004e10 <_svfiprintf_r+0x130>
 8004e86:	4604      	mov	r4, r0
 8004e88:	2301      	movs	r3, #1
 8004e8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e8e:	e7f0      	b.n	8004e72 <_svfiprintf_r+0x192>
 8004e90:	ab03      	add	r3, sp, #12
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	462a      	mov	r2, r5
 8004e96:	4638      	mov	r0, r7
 8004e98:	4b0e      	ldr	r3, [pc, #56]	@ (8004ed4 <_svfiprintf_r+0x1f4>)
 8004e9a:	a904      	add	r1, sp, #16
 8004e9c:	f3af 8000 	nop.w
 8004ea0:	1c42      	adds	r2, r0, #1
 8004ea2:	4606      	mov	r6, r0
 8004ea4:	d1d6      	bne.n	8004e54 <_svfiprintf_r+0x174>
 8004ea6:	89ab      	ldrh	r3, [r5, #12]
 8004ea8:	065b      	lsls	r3, r3, #25
 8004eaa:	f53f af2d 	bmi.w	8004d08 <_svfiprintf_r+0x28>
 8004eae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004eb0:	e72c      	b.n	8004d0c <_svfiprintf_r+0x2c>
 8004eb2:	ab03      	add	r3, sp, #12
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	462a      	mov	r2, r5
 8004eb8:	4638      	mov	r0, r7
 8004eba:	4b06      	ldr	r3, [pc, #24]	@ (8004ed4 <_svfiprintf_r+0x1f4>)
 8004ebc:	a904      	add	r1, sp, #16
 8004ebe:	f000 fb87 	bl	80055d0 <_printf_i>
 8004ec2:	e7ed      	b.n	8004ea0 <_svfiprintf_r+0x1c0>
 8004ec4:	08006df0 	.word	0x08006df0
 8004ec8:	08006df6 	.word	0x08006df6
 8004ecc:	08006dfa 	.word	0x08006dfa
 8004ed0:	00000000 	.word	0x00000000
 8004ed4:	08004c29 	.word	0x08004c29

08004ed8 <_sungetc_r>:
 8004ed8:	b538      	push	{r3, r4, r5, lr}
 8004eda:	1c4b      	adds	r3, r1, #1
 8004edc:	4614      	mov	r4, r2
 8004ede:	d103      	bne.n	8004ee8 <_sungetc_r+0x10>
 8004ee0:	f04f 35ff 	mov.w	r5, #4294967295
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	bd38      	pop	{r3, r4, r5, pc}
 8004ee8:	8993      	ldrh	r3, [r2, #12]
 8004eea:	b2cd      	uxtb	r5, r1
 8004eec:	f023 0320 	bic.w	r3, r3, #32
 8004ef0:	8193      	strh	r3, [r2, #12]
 8004ef2:	6853      	ldr	r3, [r2, #4]
 8004ef4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ef6:	b18a      	cbz	r2, 8004f1c <_sungetc_r+0x44>
 8004ef8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004efa:	429a      	cmp	r2, r3
 8004efc:	dd08      	ble.n	8004f10 <_sungetc_r+0x38>
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	1e5a      	subs	r2, r3, #1
 8004f02:	6022      	str	r2, [r4, #0]
 8004f04:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004f08:	6863      	ldr	r3, [r4, #4]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	6063      	str	r3, [r4, #4]
 8004f0e:	e7e9      	b.n	8004ee4 <_sungetc_r+0xc>
 8004f10:	4621      	mov	r1, r4
 8004f12:	f000 fe97 	bl	8005c44 <__submore>
 8004f16:	2800      	cmp	r0, #0
 8004f18:	d0f1      	beq.n	8004efe <_sungetc_r+0x26>
 8004f1a:	e7e1      	b.n	8004ee0 <_sungetc_r+0x8>
 8004f1c:	6921      	ldr	r1, [r4, #16]
 8004f1e:	6822      	ldr	r2, [r4, #0]
 8004f20:	b141      	cbz	r1, 8004f34 <_sungetc_r+0x5c>
 8004f22:	4291      	cmp	r1, r2
 8004f24:	d206      	bcs.n	8004f34 <_sungetc_r+0x5c>
 8004f26:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8004f2a:	42a9      	cmp	r1, r5
 8004f2c:	d102      	bne.n	8004f34 <_sungetc_r+0x5c>
 8004f2e:	3a01      	subs	r2, #1
 8004f30:	6022      	str	r2, [r4, #0]
 8004f32:	e7ea      	b.n	8004f0a <_sungetc_r+0x32>
 8004f34:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8004f38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f3e:	2303      	movs	r3, #3
 8004f40:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004f42:	4623      	mov	r3, r4
 8004f44:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004f48:	6023      	str	r3, [r4, #0]
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e7de      	b.n	8004f0c <_sungetc_r+0x34>

08004f4e <__ssrefill_r>:
 8004f4e:	b510      	push	{r4, lr}
 8004f50:	460c      	mov	r4, r1
 8004f52:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8004f54:	b169      	cbz	r1, 8004f72 <__ssrefill_r+0x24>
 8004f56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f5a:	4299      	cmp	r1, r3
 8004f5c:	d001      	beq.n	8004f62 <__ssrefill_r+0x14>
 8004f5e:	f7ff fd6d 	bl	8004a3c <_free_r>
 8004f62:	2000      	movs	r0, #0
 8004f64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f66:	6360      	str	r0, [r4, #52]	@ 0x34
 8004f68:	6063      	str	r3, [r4, #4]
 8004f6a:	b113      	cbz	r3, 8004f72 <__ssrefill_r+0x24>
 8004f6c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004f6e:	6023      	str	r3, [r4, #0]
 8004f70:	bd10      	pop	{r4, pc}
 8004f72:	6923      	ldr	r3, [r4, #16]
 8004f74:	f04f 30ff 	mov.w	r0, #4294967295
 8004f78:	6023      	str	r3, [r4, #0]
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	6063      	str	r3, [r4, #4]
 8004f7e:	89a3      	ldrh	r3, [r4, #12]
 8004f80:	f043 0320 	orr.w	r3, r3, #32
 8004f84:	81a3      	strh	r3, [r4, #12]
 8004f86:	e7f3      	b.n	8004f70 <__ssrefill_r+0x22>

08004f88 <__ssvfiscanf_r>:
 8004f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f8c:	460c      	mov	r4, r1
 8004f8e:	2100      	movs	r1, #0
 8004f90:	4606      	mov	r6, r0
 8004f92:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8004f96:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8004f9a:	49aa      	ldr	r1, [pc, #680]	@ (8005244 <__ssvfiscanf_r+0x2bc>)
 8004f9c:	f10d 0804 	add.w	r8, sp, #4
 8004fa0:	91a0      	str	r1, [sp, #640]	@ 0x280
 8004fa2:	49a9      	ldr	r1, [pc, #676]	@ (8005248 <__ssvfiscanf_r+0x2c0>)
 8004fa4:	4fa9      	ldr	r7, [pc, #676]	@ (800524c <__ssvfiscanf_r+0x2c4>)
 8004fa6:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8004faa:	91a1      	str	r1, [sp, #644]	@ 0x284
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	7813      	ldrb	r3, [r2, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 8159 	beq.w	8005268 <__ssvfiscanf_r+0x2e0>
 8004fb6:	5cf9      	ldrb	r1, [r7, r3]
 8004fb8:	1c55      	adds	r5, r2, #1
 8004fba:	f011 0108 	ands.w	r1, r1, #8
 8004fbe:	d019      	beq.n	8004ff4 <__ssvfiscanf_r+0x6c>
 8004fc0:	6863      	ldr	r3, [r4, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	dd0f      	ble.n	8004fe6 <__ssvfiscanf_r+0x5e>
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	781a      	ldrb	r2, [r3, #0]
 8004fca:	5cba      	ldrb	r2, [r7, r2]
 8004fcc:	0712      	lsls	r2, r2, #28
 8004fce:	d401      	bmi.n	8004fd4 <__ssvfiscanf_r+0x4c>
 8004fd0:	462a      	mov	r2, r5
 8004fd2:	e7ec      	b.n	8004fae <__ssvfiscanf_r+0x26>
 8004fd4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	3201      	adds	r2, #1
 8004fda:	9245      	str	r2, [sp, #276]	@ 0x114
 8004fdc:	6862      	ldr	r2, [r4, #4]
 8004fde:	6023      	str	r3, [r4, #0]
 8004fe0:	3a01      	subs	r2, #1
 8004fe2:	6062      	str	r2, [r4, #4]
 8004fe4:	e7ec      	b.n	8004fc0 <__ssvfiscanf_r+0x38>
 8004fe6:	4621      	mov	r1, r4
 8004fe8:	4630      	mov	r0, r6
 8004fea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004fec:	4798      	blx	r3
 8004fee:	2800      	cmp	r0, #0
 8004ff0:	d0e9      	beq.n	8004fc6 <__ssvfiscanf_r+0x3e>
 8004ff2:	e7ed      	b.n	8004fd0 <__ssvfiscanf_r+0x48>
 8004ff4:	2b25      	cmp	r3, #37	@ 0x25
 8004ff6:	d012      	beq.n	800501e <__ssvfiscanf_r+0x96>
 8004ff8:	4699      	mov	r9, r3
 8004ffa:	6863      	ldr	r3, [r4, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f340 8094 	ble.w	800512a <__ssvfiscanf_r+0x1a2>
 8005002:	6822      	ldr	r2, [r4, #0]
 8005004:	7813      	ldrb	r3, [r2, #0]
 8005006:	454b      	cmp	r3, r9
 8005008:	f040 812e 	bne.w	8005268 <__ssvfiscanf_r+0x2e0>
 800500c:	6863      	ldr	r3, [r4, #4]
 800500e:	3201      	adds	r2, #1
 8005010:	3b01      	subs	r3, #1
 8005012:	6063      	str	r3, [r4, #4]
 8005014:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8005016:	6022      	str	r2, [r4, #0]
 8005018:	3301      	adds	r3, #1
 800501a:	9345      	str	r3, [sp, #276]	@ 0x114
 800501c:	e7d8      	b.n	8004fd0 <__ssvfiscanf_r+0x48>
 800501e:	9141      	str	r1, [sp, #260]	@ 0x104
 8005020:	9143      	str	r1, [sp, #268]	@ 0x10c
 8005022:	7853      	ldrb	r3, [r2, #1]
 8005024:	2b2a      	cmp	r3, #42	@ 0x2a
 8005026:	bf04      	itt	eq
 8005028:	2310      	moveq	r3, #16
 800502a:	1c95      	addeq	r5, r2, #2
 800502c:	f04f 020a 	mov.w	r2, #10
 8005030:	bf08      	it	eq
 8005032:	9341      	streq	r3, [sp, #260]	@ 0x104
 8005034:	46a9      	mov	r9, r5
 8005036:	f819 1b01 	ldrb.w	r1, [r9], #1
 800503a:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800503e:	2b09      	cmp	r3, #9
 8005040:	d91e      	bls.n	8005080 <__ssvfiscanf_r+0xf8>
 8005042:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 8005250 <__ssvfiscanf_r+0x2c8>
 8005046:	2203      	movs	r2, #3
 8005048:	4650      	mov	r0, sl
 800504a:	f000 fe7f 	bl	8005d4c <memchr>
 800504e:	b138      	cbz	r0, 8005060 <__ssvfiscanf_r+0xd8>
 8005050:	2301      	movs	r3, #1
 8005052:	464d      	mov	r5, r9
 8005054:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005056:	eba0 000a 	sub.w	r0, r0, sl
 800505a:	4083      	lsls	r3, r0
 800505c:	4313      	orrs	r3, r2
 800505e:	9341      	str	r3, [sp, #260]	@ 0x104
 8005060:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005064:	2b78      	cmp	r3, #120	@ 0x78
 8005066:	d806      	bhi.n	8005076 <__ssvfiscanf_r+0xee>
 8005068:	2b57      	cmp	r3, #87	@ 0x57
 800506a:	d810      	bhi.n	800508e <__ssvfiscanf_r+0x106>
 800506c:	2b25      	cmp	r3, #37	@ 0x25
 800506e:	d0c3      	beq.n	8004ff8 <__ssvfiscanf_r+0x70>
 8005070:	d856      	bhi.n	8005120 <__ssvfiscanf_r+0x198>
 8005072:	2b00      	cmp	r3, #0
 8005074:	d064      	beq.n	8005140 <__ssvfiscanf_r+0x1b8>
 8005076:	2303      	movs	r3, #3
 8005078:	9347      	str	r3, [sp, #284]	@ 0x11c
 800507a:	230a      	movs	r3, #10
 800507c:	9342      	str	r3, [sp, #264]	@ 0x108
 800507e:	e077      	b.n	8005170 <__ssvfiscanf_r+0x1e8>
 8005080:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8005082:	464d      	mov	r5, r9
 8005084:	fb02 1103 	mla	r1, r2, r3, r1
 8005088:	3930      	subs	r1, #48	@ 0x30
 800508a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800508c:	e7d2      	b.n	8005034 <__ssvfiscanf_r+0xac>
 800508e:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8005092:	2a20      	cmp	r2, #32
 8005094:	d8ef      	bhi.n	8005076 <__ssvfiscanf_r+0xee>
 8005096:	a101      	add	r1, pc, #4	@ (adr r1, 800509c <__ssvfiscanf_r+0x114>)
 8005098:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800509c:	0800514f 	.word	0x0800514f
 80050a0:	08005077 	.word	0x08005077
 80050a4:	08005077 	.word	0x08005077
 80050a8:	080051a9 	.word	0x080051a9
 80050ac:	08005077 	.word	0x08005077
 80050b0:	08005077 	.word	0x08005077
 80050b4:	08005077 	.word	0x08005077
 80050b8:	08005077 	.word	0x08005077
 80050bc:	08005077 	.word	0x08005077
 80050c0:	08005077 	.word	0x08005077
 80050c4:	08005077 	.word	0x08005077
 80050c8:	080051bf 	.word	0x080051bf
 80050cc:	080051a5 	.word	0x080051a5
 80050d0:	08005127 	.word	0x08005127
 80050d4:	08005127 	.word	0x08005127
 80050d8:	08005127 	.word	0x08005127
 80050dc:	08005077 	.word	0x08005077
 80050e0:	08005161 	.word	0x08005161
 80050e4:	08005077 	.word	0x08005077
 80050e8:	08005077 	.word	0x08005077
 80050ec:	08005077 	.word	0x08005077
 80050f0:	08005077 	.word	0x08005077
 80050f4:	080051cf 	.word	0x080051cf
 80050f8:	08005169 	.word	0x08005169
 80050fc:	08005147 	.word	0x08005147
 8005100:	08005077 	.word	0x08005077
 8005104:	08005077 	.word	0x08005077
 8005108:	080051cb 	.word	0x080051cb
 800510c:	08005077 	.word	0x08005077
 8005110:	080051a5 	.word	0x080051a5
 8005114:	08005077 	.word	0x08005077
 8005118:	08005077 	.word	0x08005077
 800511c:	0800514f 	.word	0x0800514f
 8005120:	3b45      	subs	r3, #69	@ 0x45
 8005122:	2b02      	cmp	r3, #2
 8005124:	d8a7      	bhi.n	8005076 <__ssvfiscanf_r+0xee>
 8005126:	2305      	movs	r3, #5
 8005128:	e021      	b.n	800516e <__ssvfiscanf_r+0x1e6>
 800512a:	4621      	mov	r1, r4
 800512c:	4630      	mov	r0, r6
 800512e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005130:	4798      	blx	r3
 8005132:	2800      	cmp	r0, #0
 8005134:	f43f af65 	beq.w	8005002 <__ssvfiscanf_r+0x7a>
 8005138:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800513a:	2800      	cmp	r0, #0
 800513c:	f040 808c 	bne.w	8005258 <__ssvfiscanf_r+0x2d0>
 8005140:	f04f 30ff 	mov.w	r0, #4294967295
 8005144:	e08c      	b.n	8005260 <__ssvfiscanf_r+0x2d8>
 8005146:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005148:	f042 0220 	orr.w	r2, r2, #32
 800514c:	9241      	str	r2, [sp, #260]	@ 0x104
 800514e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005150:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005154:	9241      	str	r2, [sp, #260]	@ 0x104
 8005156:	2210      	movs	r2, #16
 8005158:	2b6e      	cmp	r3, #110	@ 0x6e
 800515a:	9242      	str	r2, [sp, #264]	@ 0x108
 800515c:	d902      	bls.n	8005164 <__ssvfiscanf_r+0x1dc>
 800515e:	e005      	b.n	800516c <__ssvfiscanf_r+0x1e4>
 8005160:	2300      	movs	r3, #0
 8005162:	9342      	str	r3, [sp, #264]	@ 0x108
 8005164:	2303      	movs	r3, #3
 8005166:	e002      	b.n	800516e <__ssvfiscanf_r+0x1e6>
 8005168:	2308      	movs	r3, #8
 800516a:	9342      	str	r3, [sp, #264]	@ 0x108
 800516c:	2304      	movs	r3, #4
 800516e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005170:	6863      	ldr	r3, [r4, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	dd39      	ble.n	80051ea <__ssvfiscanf_r+0x262>
 8005176:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005178:	0659      	lsls	r1, r3, #25
 800517a:	d404      	bmi.n	8005186 <__ssvfiscanf_r+0x1fe>
 800517c:	6823      	ldr	r3, [r4, #0]
 800517e:	781a      	ldrb	r2, [r3, #0]
 8005180:	5cba      	ldrb	r2, [r7, r2]
 8005182:	0712      	lsls	r2, r2, #28
 8005184:	d438      	bmi.n	80051f8 <__ssvfiscanf_r+0x270>
 8005186:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8005188:	2b02      	cmp	r3, #2
 800518a:	dc47      	bgt.n	800521c <__ssvfiscanf_r+0x294>
 800518c:	466b      	mov	r3, sp
 800518e:	4622      	mov	r2, r4
 8005190:	4630      	mov	r0, r6
 8005192:	a941      	add	r1, sp, #260	@ 0x104
 8005194:	f000 fb3c 	bl	8005810 <_scanf_chars>
 8005198:	2801      	cmp	r0, #1
 800519a:	d065      	beq.n	8005268 <__ssvfiscanf_r+0x2e0>
 800519c:	2802      	cmp	r0, #2
 800519e:	f47f af17 	bne.w	8004fd0 <__ssvfiscanf_r+0x48>
 80051a2:	e7c9      	b.n	8005138 <__ssvfiscanf_r+0x1b0>
 80051a4:	220a      	movs	r2, #10
 80051a6:	e7d7      	b.n	8005158 <__ssvfiscanf_r+0x1d0>
 80051a8:	4629      	mov	r1, r5
 80051aa:	4640      	mov	r0, r8
 80051ac:	f000 fd11 	bl	8005bd2 <__sccl>
 80051b0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80051b2:	4605      	mov	r5, r0
 80051b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051b8:	9341      	str	r3, [sp, #260]	@ 0x104
 80051ba:	2301      	movs	r3, #1
 80051bc:	e7d7      	b.n	800516e <__ssvfiscanf_r+0x1e6>
 80051be:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80051c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051c4:	9341      	str	r3, [sp, #260]	@ 0x104
 80051c6:	2300      	movs	r3, #0
 80051c8:	e7d1      	b.n	800516e <__ssvfiscanf_r+0x1e6>
 80051ca:	2302      	movs	r3, #2
 80051cc:	e7cf      	b.n	800516e <__ssvfiscanf_r+0x1e6>
 80051ce:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80051d0:	06c3      	lsls	r3, r0, #27
 80051d2:	f53f aefd 	bmi.w	8004fd0 <__ssvfiscanf_r+0x48>
 80051d6:	9b00      	ldr	r3, [sp, #0]
 80051d8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80051da:	1d19      	adds	r1, r3, #4
 80051dc:	9100      	str	r1, [sp, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	07c0      	lsls	r0, r0, #31
 80051e2:	bf4c      	ite	mi
 80051e4:	801a      	strhmi	r2, [r3, #0]
 80051e6:	601a      	strpl	r2, [r3, #0]
 80051e8:	e6f2      	b.n	8004fd0 <__ssvfiscanf_r+0x48>
 80051ea:	4621      	mov	r1, r4
 80051ec:	4630      	mov	r0, r6
 80051ee:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80051f0:	4798      	blx	r3
 80051f2:	2800      	cmp	r0, #0
 80051f4:	d0bf      	beq.n	8005176 <__ssvfiscanf_r+0x1ee>
 80051f6:	e79f      	b.n	8005138 <__ssvfiscanf_r+0x1b0>
 80051f8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80051fa:	3201      	adds	r2, #1
 80051fc:	9245      	str	r2, [sp, #276]	@ 0x114
 80051fe:	6862      	ldr	r2, [r4, #4]
 8005200:	3a01      	subs	r2, #1
 8005202:	2a00      	cmp	r2, #0
 8005204:	6062      	str	r2, [r4, #4]
 8005206:	dd02      	ble.n	800520e <__ssvfiscanf_r+0x286>
 8005208:	3301      	adds	r3, #1
 800520a:	6023      	str	r3, [r4, #0]
 800520c:	e7b6      	b.n	800517c <__ssvfiscanf_r+0x1f4>
 800520e:	4621      	mov	r1, r4
 8005210:	4630      	mov	r0, r6
 8005212:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005214:	4798      	blx	r3
 8005216:	2800      	cmp	r0, #0
 8005218:	d0b0      	beq.n	800517c <__ssvfiscanf_r+0x1f4>
 800521a:	e78d      	b.n	8005138 <__ssvfiscanf_r+0x1b0>
 800521c:	2b04      	cmp	r3, #4
 800521e:	dc06      	bgt.n	800522e <__ssvfiscanf_r+0x2a6>
 8005220:	466b      	mov	r3, sp
 8005222:	4622      	mov	r2, r4
 8005224:	4630      	mov	r0, r6
 8005226:	a941      	add	r1, sp, #260	@ 0x104
 8005228:	f000 fb4c 	bl	80058c4 <_scanf_i>
 800522c:	e7b4      	b.n	8005198 <__ssvfiscanf_r+0x210>
 800522e:	4b09      	ldr	r3, [pc, #36]	@ (8005254 <__ssvfiscanf_r+0x2cc>)
 8005230:	2b00      	cmp	r3, #0
 8005232:	f43f aecd 	beq.w	8004fd0 <__ssvfiscanf_r+0x48>
 8005236:	466b      	mov	r3, sp
 8005238:	4622      	mov	r2, r4
 800523a:	4630      	mov	r0, r6
 800523c:	a941      	add	r1, sp, #260	@ 0x104
 800523e:	f3af 8000 	nop.w
 8005242:	e7a9      	b.n	8005198 <__ssvfiscanf_r+0x210>
 8005244:	08004ed9 	.word	0x08004ed9
 8005248:	08004f4f 	.word	0x08004f4f
 800524c:	08006e3f 	.word	0x08006e3f
 8005250:	08006df6 	.word	0x08006df6
 8005254:	00000000 	.word	0x00000000
 8005258:	89a3      	ldrh	r3, [r4, #12]
 800525a:	065b      	lsls	r3, r3, #25
 800525c:	f53f af70 	bmi.w	8005140 <__ssvfiscanf_r+0x1b8>
 8005260:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8005264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005268:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800526a:	e7f9      	b.n	8005260 <__ssvfiscanf_r+0x2d8>

0800526c <__sfputc_r>:
 800526c:	6893      	ldr	r3, [r2, #8]
 800526e:	b410      	push	{r4}
 8005270:	3b01      	subs	r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	6093      	str	r3, [r2, #8]
 8005276:	da07      	bge.n	8005288 <__sfputc_r+0x1c>
 8005278:	6994      	ldr	r4, [r2, #24]
 800527a:	42a3      	cmp	r3, r4
 800527c:	db01      	blt.n	8005282 <__sfputc_r+0x16>
 800527e:	290a      	cmp	r1, #10
 8005280:	d102      	bne.n	8005288 <__sfputc_r+0x1c>
 8005282:	bc10      	pop	{r4}
 8005284:	f7ff bab7 	b.w	80047f6 <__swbuf_r>
 8005288:	6813      	ldr	r3, [r2, #0]
 800528a:	1c58      	adds	r0, r3, #1
 800528c:	6010      	str	r0, [r2, #0]
 800528e:	7019      	strb	r1, [r3, #0]
 8005290:	4608      	mov	r0, r1
 8005292:	bc10      	pop	{r4}
 8005294:	4770      	bx	lr

08005296 <__sfputs_r>:
 8005296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005298:	4606      	mov	r6, r0
 800529a:	460f      	mov	r7, r1
 800529c:	4614      	mov	r4, r2
 800529e:	18d5      	adds	r5, r2, r3
 80052a0:	42ac      	cmp	r4, r5
 80052a2:	d101      	bne.n	80052a8 <__sfputs_r+0x12>
 80052a4:	2000      	movs	r0, #0
 80052a6:	e007      	b.n	80052b8 <__sfputs_r+0x22>
 80052a8:	463a      	mov	r2, r7
 80052aa:	4630      	mov	r0, r6
 80052ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052b0:	f7ff ffdc 	bl	800526c <__sfputc_r>
 80052b4:	1c43      	adds	r3, r0, #1
 80052b6:	d1f3      	bne.n	80052a0 <__sfputs_r+0xa>
 80052b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080052bc <_vfiprintf_r>:
 80052bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c0:	460d      	mov	r5, r1
 80052c2:	4614      	mov	r4, r2
 80052c4:	4698      	mov	r8, r3
 80052c6:	4606      	mov	r6, r0
 80052c8:	b09d      	sub	sp, #116	@ 0x74
 80052ca:	b118      	cbz	r0, 80052d4 <_vfiprintf_r+0x18>
 80052cc:	6a03      	ldr	r3, [r0, #32]
 80052ce:	b90b      	cbnz	r3, 80052d4 <_vfiprintf_r+0x18>
 80052d0:	f7ff f940 	bl	8004554 <__sinit>
 80052d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80052d6:	07d9      	lsls	r1, r3, #31
 80052d8:	d405      	bmi.n	80052e6 <_vfiprintf_r+0x2a>
 80052da:	89ab      	ldrh	r3, [r5, #12]
 80052dc:	059a      	lsls	r2, r3, #22
 80052de:	d402      	bmi.n	80052e6 <_vfiprintf_r+0x2a>
 80052e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80052e2:	f7ff fba8 	bl	8004a36 <__retarget_lock_acquire_recursive>
 80052e6:	89ab      	ldrh	r3, [r5, #12]
 80052e8:	071b      	lsls	r3, r3, #28
 80052ea:	d501      	bpl.n	80052f0 <_vfiprintf_r+0x34>
 80052ec:	692b      	ldr	r3, [r5, #16]
 80052ee:	b99b      	cbnz	r3, 8005318 <_vfiprintf_r+0x5c>
 80052f0:	4629      	mov	r1, r5
 80052f2:	4630      	mov	r0, r6
 80052f4:	f7ff fabe 	bl	8004874 <__swsetup_r>
 80052f8:	b170      	cbz	r0, 8005318 <_vfiprintf_r+0x5c>
 80052fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80052fc:	07dc      	lsls	r4, r3, #31
 80052fe:	d504      	bpl.n	800530a <_vfiprintf_r+0x4e>
 8005300:	f04f 30ff 	mov.w	r0, #4294967295
 8005304:	b01d      	add	sp, #116	@ 0x74
 8005306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800530a:	89ab      	ldrh	r3, [r5, #12]
 800530c:	0598      	lsls	r0, r3, #22
 800530e:	d4f7      	bmi.n	8005300 <_vfiprintf_r+0x44>
 8005310:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005312:	f7ff fb91 	bl	8004a38 <__retarget_lock_release_recursive>
 8005316:	e7f3      	b.n	8005300 <_vfiprintf_r+0x44>
 8005318:	2300      	movs	r3, #0
 800531a:	9309      	str	r3, [sp, #36]	@ 0x24
 800531c:	2320      	movs	r3, #32
 800531e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005322:	2330      	movs	r3, #48	@ 0x30
 8005324:	f04f 0901 	mov.w	r9, #1
 8005328:	f8cd 800c 	str.w	r8, [sp, #12]
 800532c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80054d8 <_vfiprintf_r+0x21c>
 8005330:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005334:	4623      	mov	r3, r4
 8005336:	469a      	mov	sl, r3
 8005338:	f813 2b01 	ldrb.w	r2, [r3], #1
 800533c:	b10a      	cbz	r2, 8005342 <_vfiprintf_r+0x86>
 800533e:	2a25      	cmp	r2, #37	@ 0x25
 8005340:	d1f9      	bne.n	8005336 <_vfiprintf_r+0x7a>
 8005342:	ebba 0b04 	subs.w	fp, sl, r4
 8005346:	d00b      	beq.n	8005360 <_vfiprintf_r+0xa4>
 8005348:	465b      	mov	r3, fp
 800534a:	4622      	mov	r2, r4
 800534c:	4629      	mov	r1, r5
 800534e:	4630      	mov	r0, r6
 8005350:	f7ff ffa1 	bl	8005296 <__sfputs_r>
 8005354:	3001      	adds	r0, #1
 8005356:	f000 80a7 	beq.w	80054a8 <_vfiprintf_r+0x1ec>
 800535a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800535c:	445a      	add	r2, fp
 800535e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005360:	f89a 3000 	ldrb.w	r3, [sl]
 8005364:	2b00      	cmp	r3, #0
 8005366:	f000 809f 	beq.w	80054a8 <_vfiprintf_r+0x1ec>
 800536a:	2300      	movs	r3, #0
 800536c:	f04f 32ff 	mov.w	r2, #4294967295
 8005370:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005374:	f10a 0a01 	add.w	sl, sl, #1
 8005378:	9304      	str	r3, [sp, #16]
 800537a:	9307      	str	r3, [sp, #28]
 800537c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005380:	931a      	str	r3, [sp, #104]	@ 0x68
 8005382:	4654      	mov	r4, sl
 8005384:	2205      	movs	r2, #5
 8005386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800538a:	4853      	ldr	r0, [pc, #332]	@ (80054d8 <_vfiprintf_r+0x21c>)
 800538c:	f000 fcde 	bl	8005d4c <memchr>
 8005390:	9a04      	ldr	r2, [sp, #16]
 8005392:	b9d8      	cbnz	r0, 80053cc <_vfiprintf_r+0x110>
 8005394:	06d1      	lsls	r1, r2, #27
 8005396:	bf44      	itt	mi
 8005398:	2320      	movmi	r3, #32
 800539a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800539e:	0713      	lsls	r3, r2, #28
 80053a0:	bf44      	itt	mi
 80053a2:	232b      	movmi	r3, #43	@ 0x2b
 80053a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053a8:	f89a 3000 	ldrb.w	r3, [sl]
 80053ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80053ae:	d015      	beq.n	80053dc <_vfiprintf_r+0x120>
 80053b0:	4654      	mov	r4, sl
 80053b2:	2000      	movs	r0, #0
 80053b4:	f04f 0c0a 	mov.w	ip, #10
 80053b8:	9a07      	ldr	r2, [sp, #28]
 80053ba:	4621      	mov	r1, r4
 80053bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053c0:	3b30      	subs	r3, #48	@ 0x30
 80053c2:	2b09      	cmp	r3, #9
 80053c4:	d94b      	bls.n	800545e <_vfiprintf_r+0x1a2>
 80053c6:	b1b0      	cbz	r0, 80053f6 <_vfiprintf_r+0x13a>
 80053c8:	9207      	str	r2, [sp, #28]
 80053ca:	e014      	b.n	80053f6 <_vfiprintf_r+0x13a>
 80053cc:	eba0 0308 	sub.w	r3, r0, r8
 80053d0:	fa09 f303 	lsl.w	r3, r9, r3
 80053d4:	4313      	orrs	r3, r2
 80053d6:	46a2      	mov	sl, r4
 80053d8:	9304      	str	r3, [sp, #16]
 80053da:	e7d2      	b.n	8005382 <_vfiprintf_r+0xc6>
 80053dc:	9b03      	ldr	r3, [sp, #12]
 80053de:	1d19      	adds	r1, r3, #4
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	9103      	str	r1, [sp, #12]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	bfbb      	ittet	lt
 80053e8:	425b      	neglt	r3, r3
 80053ea:	f042 0202 	orrlt.w	r2, r2, #2
 80053ee:	9307      	strge	r3, [sp, #28]
 80053f0:	9307      	strlt	r3, [sp, #28]
 80053f2:	bfb8      	it	lt
 80053f4:	9204      	strlt	r2, [sp, #16]
 80053f6:	7823      	ldrb	r3, [r4, #0]
 80053f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80053fa:	d10a      	bne.n	8005412 <_vfiprintf_r+0x156>
 80053fc:	7863      	ldrb	r3, [r4, #1]
 80053fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8005400:	d132      	bne.n	8005468 <_vfiprintf_r+0x1ac>
 8005402:	9b03      	ldr	r3, [sp, #12]
 8005404:	3402      	adds	r4, #2
 8005406:	1d1a      	adds	r2, r3, #4
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	9203      	str	r2, [sp, #12]
 800540c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005410:	9305      	str	r3, [sp, #20]
 8005412:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80054dc <_vfiprintf_r+0x220>
 8005416:	2203      	movs	r2, #3
 8005418:	4650      	mov	r0, sl
 800541a:	7821      	ldrb	r1, [r4, #0]
 800541c:	f000 fc96 	bl	8005d4c <memchr>
 8005420:	b138      	cbz	r0, 8005432 <_vfiprintf_r+0x176>
 8005422:	2240      	movs	r2, #64	@ 0x40
 8005424:	9b04      	ldr	r3, [sp, #16]
 8005426:	eba0 000a 	sub.w	r0, r0, sl
 800542a:	4082      	lsls	r2, r0
 800542c:	4313      	orrs	r3, r2
 800542e:	3401      	adds	r4, #1
 8005430:	9304      	str	r3, [sp, #16]
 8005432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005436:	2206      	movs	r2, #6
 8005438:	4829      	ldr	r0, [pc, #164]	@ (80054e0 <_vfiprintf_r+0x224>)
 800543a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800543e:	f000 fc85 	bl	8005d4c <memchr>
 8005442:	2800      	cmp	r0, #0
 8005444:	d03f      	beq.n	80054c6 <_vfiprintf_r+0x20a>
 8005446:	4b27      	ldr	r3, [pc, #156]	@ (80054e4 <_vfiprintf_r+0x228>)
 8005448:	bb1b      	cbnz	r3, 8005492 <_vfiprintf_r+0x1d6>
 800544a:	9b03      	ldr	r3, [sp, #12]
 800544c:	3307      	adds	r3, #7
 800544e:	f023 0307 	bic.w	r3, r3, #7
 8005452:	3308      	adds	r3, #8
 8005454:	9303      	str	r3, [sp, #12]
 8005456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005458:	443b      	add	r3, r7
 800545a:	9309      	str	r3, [sp, #36]	@ 0x24
 800545c:	e76a      	b.n	8005334 <_vfiprintf_r+0x78>
 800545e:	460c      	mov	r4, r1
 8005460:	2001      	movs	r0, #1
 8005462:	fb0c 3202 	mla	r2, ip, r2, r3
 8005466:	e7a8      	b.n	80053ba <_vfiprintf_r+0xfe>
 8005468:	2300      	movs	r3, #0
 800546a:	f04f 0c0a 	mov.w	ip, #10
 800546e:	4619      	mov	r1, r3
 8005470:	3401      	adds	r4, #1
 8005472:	9305      	str	r3, [sp, #20]
 8005474:	4620      	mov	r0, r4
 8005476:	f810 2b01 	ldrb.w	r2, [r0], #1
 800547a:	3a30      	subs	r2, #48	@ 0x30
 800547c:	2a09      	cmp	r2, #9
 800547e:	d903      	bls.n	8005488 <_vfiprintf_r+0x1cc>
 8005480:	2b00      	cmp	r3, #0
 8005482:	d0c6      	beq.n	8005412 <_vfiprintf_r+0x156>
 8005484:	9105      	str	r1, [sp, #20]
 8005486:	e7c4      	b.n	8005412 <_vfiprintf_r+0x156>
 8005488:	4604      	mov	r4, r0
 800548a:	2301      	movs	r3, #1
 800548c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005490:	e7f0      	b.n	8005474 <_vfiprintf_r+0x1b8>
 8005492:	ab03      	add	r3, sp, #12
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	462a      	mov	r2, r5
 8005498:	4630      	mov	r0, r6
 800549a:	4b13      	ldr	r3, [pc, #76]	@ (80054e8 <_vfiprintf_r+0x22c>)
 800549c:	a904      	add	r1, sp, #16
 800549e:	f3af 8000 	nop.w
 80054a2:	4607      	mov	r7, r0
 80054a4:	1c78      	adds	r0, r7, #1
 80054a6:	d1d6      	bne.n	8005456 <_vfiprintf_r+0x19a>
 80054a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80054aa:	07d9      	lsls	r1, r3, #31
 80054ac:	d405      	bmi.n	80054ba <_vfiprintf_r+0x1fe>
 80054ae:	89ab      	ldrh	r3, [r5, #12]
 80054b0:	059a      	lsls	r2, r3, #22
 80054b2:	d402      	bmi.n	80054ba <_vfiprintf_r+0x1fe>
 80054b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80054b6:	f7ff fabf 	bl	8004a38 <__retarget_lock_release_recursive>
 80054ba:	89ab      	ldrh	r3, [r5, #12]
 80054bc:	065b      	lsls	r3, r3, #25
 80054be:	f53f af1f 	bmi.w	8005300 <_vfiprintf_r+0x44>
 80054c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80054c4:	e71e      	b.n	8005304 <_vfiprintf_r+0x48>
 80054c6:	ab03      	add	r3, sp, #12
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	462a      	mov	r2, r5
 80054cc:	4630      	mov	r0, r6
 80054ce:	4b06      	ldr	r3, [pc, #24]	@ (80054e8 <_vfiprintf_r+0x22c>)
 80054d0:	a904      	add	r1, sp, #16
 80054d2:	f000 f87d 	bl	80055d0 <_printf_i>
 80054d6:	e7e4      	b.n	80054a2 <_vfiprintf_r+0x1e6>
 80054d8:	08006df0 	.word	0x08006df0
 80054dc:	08006df6 	.word	0x08006df6
 80054e0:	08006dfa 	.word	0x08006dfa
 80054e4:	00000000 	.word	0x00000000
 80054e8:	08005297 	.word	0x08005297

080054ec <_printf_common>:
 80054ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054f0:	4616      	mov	r6, r2
 80054f2:	4698      	mov	r8, r3
 80054f4:	688a      	ldr	r2, [r1, #8]
 80054f6:	690b      	ldr	r3, [r1, #16]
 80054f8:	4607      	mov	r7, r0
 80054fa:	4293      	cmp	r3, r2
 80054fc:	bfb8      	it	lt
 80054fe:	4613      	movlt	r3, r2
 8005500:	6033      	str	r3, [r6, #0]
 8005502:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005506:	460c      	mov	r4, r1
 8005508:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800550c:	b10a      	cbz	r2, 8005512 <_printf_common+0x26>
 800550e:	3301      	adds	r3, #1
 8005510:	6033      	str	r3, [r6, #0]
 8005512:	6823      	ldr	r3, [r4, #0]
 8005514:	0699      	lsls	r1, r3, #26
 8005516:	bf42      	ittt	mi
 8005518:	6833      	ldrmi	r3, [r6, #0]
 800551a:	3302      	addmi	r3, #2
 800551c:	6033      	strmi	r3, [r6, #0]
 800551e:	6825      	ldr	r5, [r4, #0]
 8005520:	f015 0506 	ands.w	r5, r5, #6
 8005524:	d106      	bne.n	8005534 <_printf_common+0x48>
 8005526:	f104 0a19 	add.w	sl, r4, #25
 800552a:	68e3      	ldr	r3, [r4, #12]
 800552c:	6832      	ldr	r2, [r6, #0]
 800552e:	1a9b      	subs	r3, r3, r2
 8005530:	42ab      	cmp	r3, r5
 8005532:	dc2b      	bgt.n	800558c <_printf_common+0xa0>
 8005534:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005538:	6822      	ldr	r2, [r4, #0]
 800553a:	3b00      	subs	r3, #0
 800553c:	bf18      	it	ne
 800553e:	2301      	movne	r3, #1
 8005540:	0692      	lsls	r2, r2, #26
 8005542:	d430      	bmi.n	80055a6 <_printf_common+0xba>
 8005544:	4641      	mov	r1, r8
 8005546:	4638      	mov	r0, r7
 8005548:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800554c:	47c8      	blx	r9
 800554e:	3001      	adds	r0, #1
 8005550:	d023      	beq.n	800559a <_printf_common+0xae>
 8005552:	6823      	ldr	r3, [r4, #0]
 8005554:	6922      	ldr	r2, [r4, #16]
 8005556:	f003 0306 	and.w	r3, r3, #6
 800555a:	2b04      	cmp	r3, #4
 800555c:	bf14      	ite	ne
 800555e:	2500      	movne	r5, #0
 8005560:	6833      	ldreq	r3, [r6, #0]
 8005562:	f04f 0600 	mov.w	r6, #0
 8005566:	bf08      	it	eq
 8005568:	68e5      	ldreq	r5, [r4, #12]
 800556a:	f104 041a 	add.w	r4, r4, #26
 800556e:	bf08      	it	eq
 8005570:	1aed      	subeq	r5, r5, r3
 8005572:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005576:	bf08      	it	eq
 8005578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800557c:	4293      	cmp	r3, r2
 800557e:	bfc4      	itt	gt
 8005580:	1a9b      	subgt	r3, r3, r2
 8005582:	18ed      	addgt	r5, r5, r3
 8005584:	42b5      	cmp	r5, r6
 8005586:	d11a      	bne.n	80055be <_printf_common+0xd2>
 8005588:	2000      	movs	r0, #0
 800558a:	e008      	b.n	800559e <_printf_common+0xb2>
 800558c:	2301      	movs	r3, #1
 800558e:	4652      	mov	r2, sl
 8005590:	4641      	mov	r1, r8
 8005592:	4638      	mov	r0, r7
 8005594:	47c8      	blx	r9
 8005596:	3001      	adds	r0, #1
 8005598:	d103      	bne.n	80055a2 <_printf_common+0xb6>
 800559a:	f04f 30ff 	mov.w	r0, #4294967295
 800559e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055a2:	3501      	adds	r5, #1
 80055a4:	e7c1      	b.n	800552a <_printf_common+0x3e>
 80055a6:	2030      	movs	r0, #48	@ 0x30
 80055a8:	18e1      	adds	r1, r4, r3
 80055aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80055ae:	1c5a      	adds	r2, r3, #1
 80055b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80055b4:	4422      	add	r2, r4
 80055b6:	3302      	adds	r3, #2
 80055b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80055bc:	e7c2      	b.n	8005544 <_printf_common+0x58>
 80055be:	2301      	movs	r3, #1
 80055c0:	4622      	mov	r2, r4
 80055c2:	4641      	mov	r1, r8
 80055c4:	4638      	mov	r0, r7
 80055c6:	47c8      	blx	r9
 80055c8:	3001      	adds	r0, #1
 80055ca:	d0e6      	beq.n	800559a <_printf_common+0xae>
 80055cc:	3601      	adds	r6, #1
 80055ce:	e7d9      	b.n	8005584 <_printf_common+0x98>

080055d0 <_printf_i>:
 80055d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055d4:	7e0f      	ldrb	r7, [r1, #24]
 80055d6:	4691      	mov	r9, r2
 80055d8:	2f78      	cmp	r7, #120	@ 0x78
 80055da:	4680      	mov	r8, r0
 80055dc:	460c      	mov	r4, r1
 80055de:	469a      	mov	sl, r3
 80055e0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80055e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80055e6:	d807      	bhi.n	80055f8 <_printf_i+0x28>
 80055e8:	2f62      	cmp	r7, #98	@ 0x62
 80055ea:	d80a      	bhi.n	8005602 <_printf_i+0x32>
 80055ec:	2f00      	cmp	r7, #0
 80055ee:	f000 80d3 	beq.w	8005798 <_printf_i+0x1c8>
 80055f2:	2f58      	cmp	r7, #88	@ 0x58
 80055f4:	f000 80ba 	beq.w	800576c <_printf_i+0x19c>
 80055f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005600:	e03a      	b.n	8005678 <_printf_i+0xa8>
 8005602:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005606:	2b15      	cmp	r3, #21
 8005608:	d8f6      	bhi.n	80055f8 <_printf_i+0x28>
 800560a:	a101      	add	r1, pc, #4	@ (adr r1, 8005610 <_printf_i+0x40>)
 800560c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005610:	08005669 	.word	0x08005669
 8005614:	0800567d 	.word	0x0800567d
 8005618:	080055f9 	.word	0x080055f9
 800561c:	080055f9 	.word	0x080055f9
 8005620:	080055f9 	.word	0x080055f9
 8005624:	080055f9 	.word	0x080055f9
 8005628:	0800567d 	.word	0x0800567d
 800562c:	080055f9 	.word	0x080055f9
 8005630:	080055f9 	.word	0x080055f9
 8005634:	080055f9 	.word	0x080055f9
 8005638:	080055f9 	.word	0x080055f9
 800563c:	0800577f 	.word	0x0800577f
 8005640:	080056a7 	.word	0x080056a7
 8005644:	08005739 	.word	0x08005739
 8005648:	080055f9 	.word	0x080055f9
 800564c:	080055f9 	.word	0x080055f9
 8005650:	080057a1 	.word	0x080057a1
 8005654:	080055f9 	.word	0x080055f9
 8005658:	080056a7 	.word	0x080056a7
 800565c:	080055f9 	.word	0x080055f9
 8005660:	080055f9 	.word	0x080055f9
 8005664:	08005741 	.word	0x08005741
 8005668:	6833      	ldr	r3, [r6, #0]
 800566a:	1d1a      	adds	r2, r3, #4
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6032      	str	r2, [r6, #0]
 8005670:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005674:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005678:	2301      	movs	r3, #1
 800567a:	e09e      	b.n	80057ba <_printf_i+0x1ea>
 800567c:	6833      	ldr	r3, [r6, #0]
 800567e:	6820      	ldr	r0, [r4, #0]
 8005680:	1d19      	adds	r1, r3, #4
 8005682:	6031      	str	r1, [r6, #0]
 8005684:	0606      	lsls	r6, r0, #24
 8005686:	d501      	bpl.n	800568c <_printf_i+0xbc>
 8005688:	681d      	ldr	r5, [r3, #0]
 800568a:	e003      	b.n	8005694 <_printf_i+0xc4>
 800568c:	0645      	lsls	r5, r0, #25
 800568e:	d5fb      	bpl.n	8005688 <_printf_i+0xb8>
 8005690:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005694:	2d00      	cmp	r5, #0
 8005696:	da03      	bge.n	80056a0 <_printf_i+0xd0>
 8005698:	232d      	movs	r3, #45	@ 0x2d
 800569a:	426d      	negs	r5, r5
 800569c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056a0:	230a      	movs	r3, #10
 80056a2:	4859      	ldr	r0, [pc, #356]	@ (8005808 <_printf_i+0x238>)
 80056a4:	e011      	b.n	80056ca <_printf_i+0xfa>
 80056a6:	6821      	ldr	r1, [r4, #0]
 80056a8:	6833      	ldr	r3, [r6, #0]
 80056aa:	0608      	lsls	r0, r1, #24
 80056ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80056b0:	d402      	bmi.n	80056b8 <_printf_i+0xe8>
 80056b2:	0649      	lsls	r1, r1, #25
 80056b4:	bf48      	it	mi
 80056b6:	b2ad      	uxthmi	r5, r5
 80056b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80056ba:	6033      	str	r3, [r6, #0]
 80056bc:	bf14      	ite	ne
 80056be:	230a      	movne	r3, #10
 80056c0:	2308      	moveq	r3, #8
 80056c2:	4851      	ldr	r0, [pc, #324]	@ (8005808 <_printf_i+0x238>)
 80056c4:	2100      	movs	r1, #0
 80056c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80056ca:	6866      	ldr	r6, [r4, #4]
 80056cc:	2e00      	cmp	r6, #0
 80056ce:	bfa8      	it	ge
 80056d0:	6821      	ldrge	r1, [r4, #0]
 80056d2:	60a6      	str	r6, [r4, #8]
 80056d4:	bfa4      	itt	ge
 80056d6:	f021 0104 	bicge.w	r1, r1, #4
 80056da:	6021      	strge	r1, [r4, #0]
 80056dc:	b90d      	cbnz	r5, 80056e2 <_printf_i+0x112>
 80056de:	2e00      	cmp	r6, #0
 80056e0:	d04b      	beq.n	800577a <_printf_i+0x1aa>
 80056e2:	4616      	mov	r6, r2
 80056e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80056e8:	fb03 5711 	mls	r7, r3, r1, r5
 80056ec:	5dc7      	ldrb	r7, [r0, r7]
 80056ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056f2:	462f      	mov	r7, r5
 80056f4:	42bb      	cmp	r3, r7
 80056f6:	460d      	mov	r5, r1
 80056f8:	d9f4      	bls.n	80056e4 <_printf_i+0x114>
 80056fa:	2b08      	cmp	r3, #8
 80056fc:	d10b      	bne.n	8005716 <_printf_i+0x146>
 80056fe:	6823      	ldr	r3, [r4, #0]
 8005700:	07df      	lsls	r7, r3, #31
 8005702:	d508      	bpl.n	8005716 <_printf_i+0x146>
 8005704:	6923      	ldr	r3, [r4, #16]
 8005706:	6861      	ldr	r1, [r4, #4]
 8005708:	4299      	cmp	r1, r3
 800570a:	bfde      	ittt	le
 800570c:	2330      	movle	r3, #48	@ 0x30
 800570e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005712:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005716:	1b92      	subs	r2, r2, r6
 8005718:	6122      	str	r2, [r4, #16]
 800571a:	464b      	mov	r3, r9
 800571c:	4621      	mov	r1, r4
 800571e:	4640      	mov	r0, r8
 8005720:	f8cd a000 	str.w	sl, [sp]
 8005724:	aa03      	add	r2, sp, #12
 8005726:	f7ff fee1 	bl	80054ec <_printf_common>
 800572a:	3001      	adds	r0, #1
 800572c:	d14a      	bne.n	80057c4 <_printf_i+0x1f4>
 800572e:	f04f 30ff 	mov.w	r0, #4294967295
 8005732:	b004      	add	sp, #16
 8005734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	f043 0320 	orr.w	r3, r3, #32
 800573e:	6023      	str	r3, [r4, #0]
 8005740:	2778      	movs	r7, #120	@ 0x78
 8005742:	4832      	ldr	r0, [pc, #200]	@ (800580c <_printf_i+0x23c>)
 8005744:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005748:	6823      	ldr	r3, [r4, #0]
 800574a:	6831      	ldr	r1, [r6, #0]
 800574c:	061f      	lsls	r7, r3, #24
 800574e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005752:	d402      	bmi.n	800575a <_printf_i+0x18a>
 8005754:	065f      	lsls	r7, r3, #25
 8005756:	bf48      	it	mi
 8005758:	b2ad      	uxthmi	r5, r5
 800575a:	6031      	str	r1, [r6, #0]
 800575c:	07d9      	lsls	r1, r3, #31
 800575e:	bf44      	itt	mi
 8005760:	f043 0320 	orrmi.w	r3, r3, #32
 8005764:	6023      	strmi	r3, [r4, #0]
 8005766:	b11d      	cbz	r5, 8005770 <_printf_i+0x1a0>
 8005768:	2310      	movs	r3, #16
 800576a:	e7ab      	b.n	80056c4 <_printf_i+0xf4>
 800576c:	4826      	ldr	r0, [pc, #152]	@ (8005808 <_printf_i+0x238>)
 800576e:	e7e9      	b.n	8005744 <_printf_i+0x174>
 8005770:	6823      	ldr	r3, [r4, #0]
 8005772:	f023 0320 	bic.w	r3, r3, #32
 8005776:	6023      	str	r3, [r4, #0]
 8005778:	e7f6      	b.n	8005768 <_printf_i+0x198>
 800577a:	4616      	mov	r6, r2
 800577c:	e7bd      	b.n	80056fa <_printf_i+0x12a>
 800577e:	6833      	ldr	r3, [r6, #0]
 8005780:	6825      	ldr	r5, [r4, #0]
 8005782:	1d18      	adds	r0, r3, #4
 8005784:	6961      	ldr	r1, [r4, #20]
 8005786:	6030      	str	r0, [r6, #0]
 8005788:	062e      	lsls	r6, r5, #24
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	d501      	bpl.n	8005792 <_printf_i+0x1c2>
 800578e:	6019      	str	r1, [r3, #0]
 8005790:	e002      	b.n	8005798 <_printf_i+0x1c8>
 8005792:	0668      	lsls	r0, r5, #25
 8005794:	d5fb      	bpl.n	800578e <_printf_i+0x1be>
 8005796:	8019      	strh	r1, [r3, #0]
 8005798:	2300      	movs	r3, #0
 800579a:	4616      	mov	r6, r2
 800579c:	6123      	str	r3, [r4, #16]
 800579e:	e7bc      	b.n	800571a <_printf_i+0x14a>
 80057a0:	6833      	ldr	r3, [r6, #0]
 80057a2:	2100      	movs	r1, #0
 80057a4:	1d1a      	adds	r2, r3, #4
 80057a6:	6032      	str	r2, [r6, #0]
 80057a8:	681e      	ldr	r6, [r3, #0]
 80057aa:	6862      	ldr	r2, [r4, #4]
 80057ac:	4630      	mov	r0, r6
 80057ae:	f000 facd 	bl	8005d4c <memchr>
 80057b2:	b108      	cbz	r0, 80057b8 <_printf_i+0x1e8>
 80057b4:	1b80      	subs	r0, r0, r6
 80057b6:	6060      	str	r0, [r4, #4]
 80057b8:	6863      	ldr	r3, [r4, #4]
 80057ba:	6123      	str	r3, [r4, #16]
 80057bc:	2300      	movs	r3, #0
 80057be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057c2:	e7aa      	b.n	800571a <_printf_i+0x14a>
 80057c4:	4632      	mov	r2, r6
 80057c6:	4649      	mov	r1, r9
 80057c8:	4640      	mov	r0, r8
 80057ca:	6923      	ldr	r3, [r4, #16]
 80057cc:	47d0      	blx	sl
 80057ce:	3001      	adds	r0, #1
 80057d0:	d0ad      	beq.n	800572e <_printf_i+0x15e>
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	079b      	lsls	r3, r3, #30
 80057d6:	d413      	bmi.n	8005800 <_printf_i+0x230>
 80057d8:	68e0      	ldr	r0, [r4, #12]
 80057da:	9b03      	ldr	r3, [sp, #12]
 80057dc:	4298      	cmp	r0, r3
 80057de:	bfb8      	it	lt
 80057e0:	4618      	movlt	r0, r3
 80057e2:	e7a6      	b.n	8005732 <_printf_i+0x162>
 80057e4:	2301      	movs	r3, #1
 80057e6:	4632      	mov	r2, r6
 80057e8:	4649      	mov	r1, r9
 80057ea:	4640      	mov	r0, r8
 80057ec:	47d0      	blx	sl
 80057ee:	3001      	adds	r0, #1
 80057f0:	d09d      	beq.n	800572e <_printf_i+0x15e>
 80057f2:	3501      	adds	r5, #1
 80057f4:	68e3      	ldr	r3, [r4, #12]
 80057f6:	9903      	ldr	r1, [sp, #12]
 80057f8:	1a5b      	subs	r3, r3, r1
 80057fa:	42ab      	cmp	r3, r5
 80057fc:	dcf2      	bgt.n	80057e4 <_printf_i+0x214>
 80057fe:	e7eb      	b.n	80057d8 <_printf_i+0x208>
 8005800:	2500      	movs	r5, #0
 8005802:	f104 0619 	add.w	r6, r4, #25
 8005806:	e7f5      	b.n	80057f4 <_printf_i+0x224>
 8005808:	08006e01 	.word	0x08006e01
 800580c:	08006e12 	.word	0x08006e12

08005810 <_scanf_chars>:
 8005810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005814:	4615      	mov	r5, r2
 8005816:	688a      	ldr	r2, [r1, #8]
 8005818:	4680      	mov	r8, r0
 800581a:	460c      	mov	r4, r1
 800581c:	b932      	cbnz	r2, 800582c <_scanf_chars+0x1c>
 800581e:	698a      	ldr	r2, [r1, #24]
 8005820:	2a00      	cmp	r2, #0
 8005822:	bf14      	ite	ne
 8005824:	f04f 32ff 	movne.w	r2, #4294967295
 8005828:	2201      	moveq	r2, #1
 800582a:	608a      	str	r2, [r1, #8]
 800582c:	2700      	movs	r7, #0
 800582e:	6822      	ldr	r2, [r4, #0]
 8005830:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 80058c0 <_scanf_chars+0xb0>
 8005834:	06d1      	lsls	r1, r2, #27
 8005836:	bf5f      	itttt	pl
 8005838:	681a      	ldrpl	r2, [r3, #0]
 800583a:	1d11      	addpl	r1, r2, #4
 800583c:	6019      	strpl	r1, [r3, #0]
 800583e:	6816      	ldrpl	r6, [r2, #0]
 8005840:	69a0      	ldr	r0, [r4, #24]
 8005842:	b188      	cbz	r0, 8005868 <_scanf_chars+0x58>
 8005844:	2801      	cmp	r0, #1
 8005846:	d107      	bne.n	8005858 <_scanf_chars+0x48>
 8005848:	682b      	ldr	r3, [r5, #0]
 800584a:	781a      	ldrb	r2, [r3, #0]
 800584c:	6963      	ldr	r3, [r4, #20]
 800584e:	5c9b      	ldrb	r3, [r3, r2]
 8005850:	b953      	cbnz	r3, 8005868 <_scanf_chars+0x58>
 8005852:	2f00      	cmp	r7, #0
 8005854:	d031      	beq.n	80058ba <_scanf_chars+0xaa>
 8005856:	e022      	b.n	800589e <_scanf_chars+0x8e>
 8005858:	2802      	cmp	r0, #2
 800585a:	d120      	bne.n	800589e <_scanf_chars+0x8e>
 800585c:	682b      	ldr	r3, [r5, #0]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	f819 3003 	ldrb.w	r3, [r9, r3]
 8005864:	071b      	lsls	r3, r3, #28
 8005866:	d41a      	bmi.n	800589e <_scanf_chars+0x8e>
 8005868:	6823      	ldr	r3, [r4, #0]
 800586a:	3701      	adds	r7, #1
 800586c:	06da      	lsls	r2, r3, #27
 800586e:	bf5e      	ittt	pl
 8005870:	682b      	ldrpl	r3, [r5, #0]
 8005872:	781b      	ldrbpl	r3, [r3, #0]
 8005874:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005878:	682a      	ldr	r2, [r5, #0]
 800587a:	686b      	ldr	r3, [r5, #4]
 800587c:	3201      	adds	r2, #1
 800587e:	602a      	str	r2, [r5, #0]
 8005880:	68a2      	ldr	r2, [r4, #8]
 8005882:	3b01      	subs	r3, #1
 8005884:	3a01      	subs	r2, #1
 8005886:	606b      	str	r3, [r5, #4]
 8005888:	60a2      	str	r2, [r4, #8]
 800588a:	b142      	cbz	r2, 800589e <_scanf_chars+0x8e>
 800588c:	2b00      	cmp	r3, #0
 800588e:	dcd7      	bgt.n	8005840 <_scanf_chars+0x30>
 8005890:	4629      	mov	r1, r5
 8005892:	4640      	mov	r0, r8
 8005894:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005898:	4798      	blx	r3
 800589a:	2800      	cmp	r0, #0
 800589c:	d0d0      	beq.n	8005840 <_scanf_chars+0x30>
 800589e:	6823      	ldr	r3, [r4, #0]
 80058a0:	f013 0310 	ands.w	r3, r3, #16
 80058a4:	d105      	bne.n	80058b2 <_scanf_chars+0xa2>
 80058a6:	68e2      	ldr	r2, [r4, #12]
 80058a8:	3201      	adds	r2, #1
 80058aa:	60e2      	str	r2, [r4, #12]
 80058ac:	69a2      	ldr	r2, [r4, #24]
 80058ae:	b102      	cbz	r2, 80058b2 <_scanf_chars+0xa2>
 80058b0:	7033      	strb	r3, [r6, #0]
 80058b2:	2000      	movs	r0, #0
 80058b4:	6923      	ldr	r3, [r4, #16]
 80058b6:	443b      	add	r3, r7
 80058b8:	6123      	str	r3, [r4, #16]
 80058ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058be:	bf00      	nop
 80058c0:	08006e3f 	.word	0x08006e3f

080058c4 <_scanf_i>:
 80058c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c8:	460c      	mov	r4, r1
 80058ca:	4698      	mov	r8, r3
 80058cc:	4b72      	ldr	r3, [pc, #456]	@ (8005a98 <_scanf_i+0x1d4>)
 80058ce:	b087      	sub	sp, #28
 80058d0:	4682      	mov	sl, r0
 80058d2:	4616      	mov	r6, r2
 80058d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80058d8:	ab03      	add	r3, sp, #12
 80058da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80058de:	4b6f      	ldr	r3, [pc, #444]	@ (8005a9c <_scanf_i+0x1d8>)
 80058e0:	69a1      	ldr	r1, [r4, #24]
 80058e2:	4a6f      	ldr	r2, [pc, #444]	@ (8005aa0 <_scanf_i+0x1dc>)
 80058e4:	4627      	mov	r7, r4
 80058e6:	2903      	cmp	r1, #3
 80058e8:	bf08      	it	eq
 80058ea:	461a      	moveq	r2, r3
 80058ec:	68a3      	ldr	r3, [r4, #8]
 80058ee:	9201      	str	r2, [sp, #4]
 80058f0:	1e5a      	subs	r2, r3, #1
 80058f2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80058f6:	bf81      	itttt	hi
 80058f8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80058fc:	eb03 0905 	addhi.w	r9, r3, r5
 8005900:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005904:	60a3      	strhi	r3, [r4, #8]
 8005906:	f857 3b1c 	ldr.w	r3, [r7], #28
 800590a:	bf98      	it	ls
 800590c:	f04f 0900 	movls.w	r9, #0
 8005910:	463d      	mov	r5, r7
 8005912:	f04f 0b00 	mov.w	fp, #0
 8005916:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800591a:	6023      	str	r3, [r4, #0]
 800591c:	6831      	ldr	r1, [r6, #0]
 800591e:	ab03      	add	r3, sp, #12
 8005920:	2202      	movs	r2, #2
 8005922:	7809      	ldrb	r1, [r1, #0]
 8005924:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005928:	f000 fa10 	bl	8005d4c <memchr>
 800592c:	b328      	cbz	r0, 800597a <_scanf_i+0xb6>
 800592e:	f1bb 0f01 	cmp.w	fp, #1
 8005932:	d159      	bne.n	80059e8 <_scanf_i+0x124>
 8005934:	6862      	ldr	r2, [r4, #4]
 8005936:	b92a      	cbnz	r2, 8005944 <_scanf_i+0x80>
 8005938:	2108      	movs	r1, #8
 800593a:	6822      	ldr	r2, [r4, #0]
 800593c:	6061      	str	r1, [r4, #4]
 800593e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005942:	6022      	str	r2, [r4, #0]
 8005944:	6822      	ldr	r2, [r4, #0]
 8005946:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800594a:	6022      	str	r2, [r4, #0]
 800594c:	68a2      	ldr	r2, [r4, #8]
 800594e:	1e51      	subs	r1, r2, #1
 8005950:	60a1      	str	r1, [r4, #8]
 8005952:	b192      	cbz	r2, 800597a <_scanf_i+0xb6>
 8005954:	6832      	ldr	r2, [r6, #0]
 8005956:	1c51      	adds	r1, r2, #1
 8005958:	6031      	str	r1, [r6, #0]
 800595a:	7812      	ldrb	r2, [r2, #0]
 800595c:	f805 2b01 	strb.w	r2, [r5], #1
 8005960:	6872      	ldr	r2, [r6, #4]
 8005962:	3a01      	subs	r2, #1
 8005964:	2a00      	cmp	r2, #0
 8005966:	6072      	str	r2, [r6, #4]
 8005968:	dc07      	bgt.n	800597a <_scanf_i+0xb6>
 800596a:	4631      	mov	r1, r6
 800596c:	4650      	mov	r0, sl
 800596e:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8005972:	4790      	blx	r2
 8005974:	2800      	cmp	r0, #0
 8005976:	f040 8085 	bne.w	8005a84 <_scanf_i+0x1c0>
 800597a:	f10b 0b01 	add.w	fp, fp, #1
 800597e:	f1bb 0f03 	cmp.w	fp, #3
 8005982:	d1cb      	bne.n	800591c <_scanf_i+0x58>
 8005984:	6863      	ldr	r3, [r4, #4]
 8005986:	b90b      	cbnz	r3, 800598c <_scanf_i+0xc8>
 8005988:	230a      	movs	r3, #10
 800598a:	6063      	str	r3, [r4, #4]
 800598c:	6863      	ldr	r3, [r4, #4]
 800598e:	4945      	ldr	r1, [pc, #276]	@ (8005aa4 <_scanf_i+0x1e0>)
 8005990:	6960      	ldr	r0, [r4, #20]
 8005992:	1ac9      	subs	r1, r1, r3
 8005994:	f000 f91d 	bl	8005bd2 <__sccl>
 8005998:	f04f 0b00 	mov.w	fp, #0
 800599c:	68a3      	ldr	r3, [r4, #8]
 800599e:	6822      	ldr	r2, [r4, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d03d      	beq.n	8005a20 <_scanf_i+0x15c>
 80059a4:	6831      	ldr	r1, [r6, #0]
 80059a6:	6960      	ldr	r0, [r4, #20]
 80059a8:	f891 c000 	ldrb.w	ip, [r1]
 80059ac:	f810 000c 	ldrb.w	r0, [r0, ip]
 80059b0:	2800      	cmp	r0, #0
 80059b2:	d035      	beq.n	8005a20 <_scanf_i+0x15c>
 80059b4:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80059b8:	d124      	bne.n	8005a04 <_scanf_i+0x140>
 80059ba:	0510      	lsls	r0, r2, #20
 80059bc:	d522      	bpl.n	8005a04 <_scanf_i+0x140>
 80059be:	f10b 0b01 	add.w	fp, fp, #1
 80059c2:	f1b9 0f00 	cmp.w	r9, #0
 80059c6:	d003      	beq.n	80059d0 <_scanf_i+0x10c>
 80059c8:	3301      	adds	r3, #1
 80059ca:	f109 39ff 	add.w	r9, r9, #4294967295
 80059ce:	60a3      	str	r3, [r4, #8]
 80059d0:	6873      	ldr	r3, [r6, #4]
 80059d2:	3b01      	subs	r3, #1
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	6073      	str	r3, [r6, #4]
 80059d8:	dd1b      	ble.n	8005a12 <_scanf_i+0x14e>
 80059da:	6833      	ldr	r3, [r6, #0]
 80059dc:	3301      	adds	r3, #1
 80059de:	6033      	str	r3, [r6, #0]
 80059e0:	68a3      	ldr	r3, [r4, #8]
 80059e2:	3b01      	subs	r3, #1
 80059e4:	60a3      	str	r3, [r4, #8]
 80059e6:	e7d9      	b.n	800599c <_scanf_i+0xd8>
 80059e8:	f1bb 0f02 	cmp.w	fp, #2
 80059ec:	d1ae      	bne.n	800594c <_scanf_i+0x88>
 80059ee:	6822      	ldr	r2, [r4, #0]
 80059f0:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80059f4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80059f8:	d1bf      	bne.n	800597a <_scanf_i+0xb6>
 80059fa:	2110      	movs	r1, #16
 80059fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a00:	6061      	str	r1, [r4, #4]
 8005a02:	e7a2      	b.n	800594a <_scanf_i+0x86>
 8005a04:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8005a08:	6022      	str	r2, [r4, #0]
 8005a0a:	780b      	ldrb	r3, [r1, #0]
 8005a0c:	f805 3b01 	strb.w	r3, [r5], #1
 8005a10:	e7de      	b.n	80059d0 <_scanf_i+0x10c>
 8005a12:	4631      	mov	r1, r6
 8005a14:	4650      	mov	r0, sl
 8005a16:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005a1a:	4798      	blx	r3
 8005a1c:	2800      	cmp	r0, #0
 8005a1e:	d0df      	beq.n	80059e0 <_scanf_i+0x11c>
 8005a20:	6823      	ldr	r3, [r4, #0]
 8005a22:	05d9      	lsls	r1, r3, #23
 8005a24:	d50d      	bpl.n	8005a42 <_scanf_i+0x17e>
 8005a26:	42bd      	cmp	r5, r7
 8005a28:	d909      	bls.n	8005a3e <_scanf_i+0x17a>
 8005a2a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005a2e:	4632      	mov	r2, r6
 8005a30:	4650      	mov	r0, sl
 8005a32:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005a36:	f105 39ff 	add.w	r9, r5, #4294967295
 8005a3a:	4798      	blx	r3
 8005a3c:	464d      	mov	r5, r9
 8005a3e:	42bd      	cmp	r5, r7
 8005a40:	d028      	beq.n	8005a94 <_scanf_i+0x1d0>
 8005a42:	6822      	ldr	r2, [r4, #0]
 8005a44:	f012 0210 	ands.w	r2, r2, #16
 8005a48:	d113      	bne.n	8005a72 <_scanf_i+0x1ae>
 8005a4a:	702a      	strb	r2, [r5, #0]
 8005a4c:	4639      	mov	r1, r7
 8005a4e:	6863      	ldr	r3, [r4, #4]
 8005a50:	4650      	mov	r0, sl
 8005a52:	9e01      	ldr	r6, [sp, #4]
 8005a54:	47b0      	blx	r6
 8005a56:	f8d8 3000 	ldr.w	r3, [r8]
 8005a5a:	6821      	ldr	r1, [r4, #0]
 8005a5c:	1d1a      	adds	r2, r3, #4
 8005a5e:	f8c8 2000 	str.w	r2, [r8]
 8005a62:	f011 0f20 	tst.w	r1, #32
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	d00f      	beq.n	8005a8a <_scanf_i+0x1c6>
 8005a6a:	6018      	str	r0, [r3, #0]
 8005a6c:	68e3      	ldr	r3, [r4, #12]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	60e3      	str	r3, [r4, #12]
 8005a72:	2000      	movs	r0, #0
 8005a74:	6923      	ldr	r3, [r4, #16]
 8005a76:	1bed      	subs	r5, r5, r7
 8005a78:	445d      	add	r5, fp
 8005a7a:	442b      	add	r3, r5
 8005a7c:	6123      	str	r3, [r4, #16]
 8005a7e:	b007      	add	sp, #28
 8005a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a84:	f04f 0b00 	mov.w	fp, #0
 8005a88:	e7ca      	b.n	8005a20 <_scanf_i+0x15c>
 8005a8a:	07ca      	lsls	r2, r1, #31
 8005a8c:	bf4c      	ite	mi
 8005a8e:	8018      	strhmi	r0, [r3, #0]
 8005a90:	6018      	strpl	r0, [r3, #0]
 8005a92:	e7eb      	b.n	8005a6c <_scanf_i+0x1a8>
 8005a94:	2001      	movs	r0, #1
 8005a96:	e7f2      	b.n	8005a7e <_scanf_i+0x1ba>
 8005a98:	08006b8c 	.word	0x08006b8c
 8005a9c:	08005ed5 	.word	0x08005ed5
 8005aa0:	08005fb5 	.word	0x08005fb5
 8005aa4:	08006e33 	.word	0x08006e33

08005aa8 <__swhatbuf_r>:
 8005aa8:	b570      	push	{r4, r5, r6, lr}
 8005aaa:	460c      	mov	r4, r1
 8005aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ab0:	4615      	mov	r5, r2
 8005ab2:	2900      	cmp	r1, #0
 8005ab4:	461e      	mov	r6, r3
 8005ab6:	b096      	sub	sp, #88	@ 0x58
 8005ab8:	da0c      	bge.n	8005ad4 <__swhatbuf_r+0x2c>
 8005aba:	89a3      	ldrh	r3, [r4, #12]
 8005abc:	2100      	movs	r1, #0
 8005abe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005ac2:	bf14      	ite	ne
 8005ac4:	2340      	movne	r3, #64	@ 0x40
 8005ac6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005aca:	2000      	movs	r0, #0
 8005acc:	6031      	str	r1, [r6, #0]
 8005ace:	602b      	str	r3, [r5, #0]
 8005ad0:	b016      	add	sp, #88	@ 0x58
 8005ad2:	bd70      	pop	{r4, r5, r6, pc}
 8005ad4:	466a      	mov	r2, sp
 8005ad6:	f000 f907 	bl	8005ce8 <_fstat_r>
 8005ada:	2800      	cmp	r0, #0
 8005adc:	dbed      	blt.n	8005aba <__swhatbuf_r+0x12>
 8005ade:	9901      	ldr	r1, [sp, #4]
 8005ae0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005ae4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005ae8:	4259      	negs	r1, r3
 8005aea:	4159      	adcs	r1, r3
 8005aec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005af0:	e7eb      	b.n	8005aca <__swhatbuf_r+0x22>

08005af2 <__smakebuf_r>:
 8005af2:	898b      	ldrh	r3, [r1, #12]
 8005af4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005af6:	079d      	lsls	r5, r3, #30
 8005af8:	4606      	mov	r6, r0
 8005afa:	460c      	mov	r4, r1
 8005afc:	d507      	bpl.n	8005b0e <__smakebuf_r+0x1c>
 8005afe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005b02:	6023      	str	r3, [r4, #0]
 8005b04:	6123      	str	r3, [r4, #16]
 8005b06:	2301      	movs	r3, #1
 8005b08:	6163      	str	r3, [r4, #20]
 8005b0a:	b003      	add	sp, #12
 8005b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b0e:	466a      	mov	r2, sp
 8005b10:	ab01      	add	r3, sp, #4
 8005b12:	f7ff ffc9 	bl	8005aa8 <__swhatbuf_r>
 8005b16:	9f00      	ldr	r7, [sp, #0]
 8005b18:	4605      	mov	r5, r0
 8005b1a:	4639      	mov	r1, r7
 8005b1c:	4630      	mov	r0, r6
 8005b1e:	f7fe fff7 	bl	8004b10 <_malloc_r>
 8005b22:	b948      	cbnz	r0, 8005b38 <__smakebuf_r+0x46>
 8005b24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b28:	059a      	lsls	r2, r3, #22
 8005b2a:	d4ee      	bmi.n	8005b0a <__smakebuf_r+0x18>
 8005b2c:	f023 0303 	bic.w	r3, r3, #3
 8005b30:	f043 0302 	orr.w	r3, r3, #2
 8005b34:	81a3      	strh	r3, [r4, #12]
 8005b36:	e7e2      	b.n	8005afe <__smakebuf_r+0xc>
 8005b38:	89a3      	ldrh	r3, [r4, #12]
 8005b3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005b3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b42:	81a3      	strh	r3, [r4, #12]
 8005b44:	9b01      	ldr	r3, [sp, #4]
 8005b46:	6020      	str	r0, [r4, #0]
 8005b48:	b15b      	cbz	r3, 8005b62 <__smakebuf_r+0x70>
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b50:	f000 f8dc 	bl	8005d0c <_isatty_r>
 8005b54:	b128      	cbz	r0, 8005b62 <__smakebuf_r+0x70>
 8005b56:	89a3      	ldrh	r3, [r4, #12]
 8005b58:	f023 0303 	bic.w	r3, r3, #3
 8005b5c:	f043 0301 	orr.w	r3, r3, #1
 8005b60:	81a3      	strh	r3, [r4, #12]
 8005b62:	89a3      	ldrh	r3, [r4, #12]
 8005b64:	431d      	orrs	r5, r3
 8005b66:	81a5      	strh	r5, [r4, #12]
 8005b68:	e7cf      	b.n	8005b0a <__smakebuf_r+0x18>

08005b6a <_putc_r>:
 8005b6a:	b570      	push	{r4, r5, r6, lr}
 8005b6c:	460d      	mov	r5, r1
 8005b6e:	4614      	mov	r4, r2
 8005b70:	4606      	mov	r6, r0
 8005b72:	b118      	cbz	r0, 8005b7c <_putc_r+0x12>
 8005b74:	6a03      	ldr	r3, [r0, #32]
 8005b76:	b90b      	cbnz	r3, 8005b7c <_putc_r+0x12>
 8005b78:	f7fe fcec 	bl	8004554 <__sinit>
 8005b7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b7e:	07d8      	lsls	r0, r3, #31
 8005b80:	d405      	bmi.n	8005b8e <_putc_r+0x24>
 8005b82:	89a3      	ldrh	r3, [r4, #12]
 8005b84:	0599      	lsls	r1, r3, #22
 8005b86:	d402      	bmi.n	8005b8e <_putc_r+0x24>
 8005b88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b8a:	f7fe ff54 	bl	8004a36 <__retarget_lock_acquire_recursive>
 8005b8e:	68a3      	ldr	r3, [r4, #8]
 8005b90:	3b01      	subs	r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	60a3      	str	r3, [r4, #8]
 8005b96:	da05      	bge.n	8005ba4 <_putc_r+0x3a>
 8005b98:	69a2      	ldr	r2, [r4, #24]
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	db12      	blt.n	8005bc4 <_putc_r+0x5a>
 8005b9e:	b2eb      	uxtb	r3, r5
 8005ba0:	2b0a      	cmp	r3, #10
 8005ba2:	d00f      	beq.n	8005bc4 <_putc_r+0x5a>
 8005ba4:	6823      	ldr	r3, [r4, #0]
 8005ba6:	1c5a      	adds	r2, r3, #1
 8005ba8:	6022      	str	r2, [r4, #0]
 8005baa:	701d      	strb	r5, [r3, #0]
 8005bac:	b2ed      	uxtb	r5, r5
 8005bae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005bb0:	07da      	lsls	r2, r3, #31
 8005bb2:	d405      	bmi.n	8005bc0 <_putc_r+0x56>
 8005bb4:	89a3      	ldrh	r3, [r4, #12]
 8005bb6:	059b      	lsls	r3, r3, #22
 8005bb8:	d402      	bmi.n	8005bc0 <_putc_r+0x56>
 8005bba:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bbc:	f7fe ff3c 	bl	8004a38 <__retarget_lock_release_recursive>
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	bd70      	pop	{r4, r5, r6, pc}
 8005bc4:	4629      	mov	r1, r5
 8005bc6:	4622      	mov	r2, r4
 8005bc8:	4630      	mov	r0, r6
 8005bca:	f7fe fe14 	bl	80047f6 <__swbuf_r>
 8005bce:	4605      	mov	r5, r0
 8005bd0:	e7ed      	b.n	8005bae <_putc_r+0x44>

08005bd2 <__sccl>:
 8005bd2:	b570      	push	{r4, r5, r6, lr}
 8005bd4:	780b      	ldrb	r3, [r1, #0]
 8005bd6:	4604      	mov	r4, r0
 8005bd8:	2b5e      	cmp	r3, #94	@ 0x5e
 8005bda:	bf0b      	itete	eq
 8005bdc:	784b      	ldrbeq	r3, [r1, #1]
 8005bde:	1c4a      	addne	r2, r1, #1
 8005be0:	1c8a      	addeq	r2, r1, #2
 8005be2:	2100      	movne	r1, #0
 8005be4:	bf08      	it	eq
 8005be6:	2101      	moveq	r1, #1
 8005be8:	3801      	subs	r0, #1
 8005bea:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8005bee:	f800 1f01 	strb.w	r1, [r0, #1]!
 8005bf2:	42a8      	cmp	r0, r5
 8005bf4:	d1fb      	bne.n	8005bee <__sccl+0x1c>
 8005bf6:	b90b      	cbnz	r3, 8005bfc <__sccl+0x2a>
 8005bf8:	1e50      	subs	r0, r2, #1
 8005bfa:	bd70      	pop	{r4, r5, r6, pc}
 8005bfc:	f081 0101 	eor.w	r1, r1, #1
 8005c00:	4610      	mov	r0, r2
 8005c02:	54e1      	strb	r1, [r4, r3]
 8005c04:	4602      	mov	r2, r0
 8005c06:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005c0a:	2d2d      	cmp	r5, #45	@ 0x2d
 8005c0c:	d005      	beq.n	8005c1a <__sccl+0x48>
 8005c0e:	2d5d      	cmp	r5, #93	@ 0x5d
 8005c10:	d016      	beq.n	8005c40 <__sccl+0x6e>
 8005c12:	2d00      	cmp	r5, #0
 8005c14:	d0f1      	beq.n	8005bfa <__sccl+0x28>
 8005c16:	462b      	mov	r3, r5
 8005c18:	e7f2      	b.n	8005c00 <__sccl+0x2e>
 8005c1a:	7846      	ldrb	r6, [r0, #1]
 8005c1c:	2e5d      	cmp	r6, #93	@ 0x5d
 8005c1e:	d0fa      	beq.n	8005c16 <__sccl+0x44>
 8005c20:	42b3      	cmp	r3, r6
 8005c22:	dcf8      	bgt.n	8005c16 <__sccl+0x44>
 8005c24:	461a      	mov	r2, r3
 8005c26:	3002      	adds	r0, #2
 8005c28:	3201      	adds	r2, #1
 8005c2a:	4296      	cmp	r6, r2
 8005c2c:	54a1      	strb	r1, [r4, r2]
 8005c2e:	dcfb      	bgt.n	8005c28 <__sccl+0x56>
 8005c30:	1af2      	subs	r2, r6, r3
 8005c32:	3a01      	subs	r2, #1
 8005c34:	42b3      	cmp	r3, r6
 8005c36:	bfa8      	it	ge
 8005c38:	2200      	movge	r2, #0
 8005c3a:	1c5d      	adds	r5, r3, #1
 8005c3c:	18ab      	adds	r3, r5, r2
 8005c3e:	e7e1      	b.n	8005c04 <__sccl+0x32>
 8005c40:	4610      	mov	r0, r2
 8005c42:	e7da      	b.n	8005bfa <__sccl+0x28>

08005c44 <__submore>:
 8005c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c48:	460c      	mov	r4, r1
 8005c4a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005c4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c50:	4299      	cmp	r1, r3
 8005c52:	d11b      	bne.n	8005c8c <__submore+0x48>
 8005c54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005c58:	f7fe ff5a 	bl	8004b10 <_malloc_r>
 8005c5c:	b918      	cbnz	r0, 8005c66 <__submore+0x22>
 8005c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c6a:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005c6c:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8005c70:	6360      	str	r0, [r4, #52]	@ 0x34
 8005c72:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8005c76:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005c7a:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8005c7e:	7043      	strb	r3, [r0, #1]
 8005c80:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005c84:	7003      	strb	r3, [r0, #0]
 8005c86:	6020      	str	r0, [r4, #0]
 8005c88:	2000      	movs	r0, #0
 8005c8a:	e7ea      	b.n	8005c62 <__submore+0x1e>
 8005c8c:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8005c8e:	0077      	lsls	r7, r6, #1
 8005c90:	463a      	mov	r2, r7
 8005c92:	f000 f877 	bl	8005d84 <_realloc_r>
 8005c96:	4605      	mov	r5, r0
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	d0e0      	beq.n	8005c5e <__submore+0x1a>
 8005c9c:	eb00 0806 	add.w	r8, r0, r6
 8005ca0:	4601      	mov	r1, r0
 8005ca2:	4632      	mov	r2, r6
 8005ca4:	4640      	mov	r0, r8
 8005ca6:	f000 f85f 	bl	8005d68 <memcpy>
 8005caa:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8005cae:	f8c4 8000 	str.w	r8, [r4]
 8005cb2:	e7e9      	b.n	8005c88 <__submore+0x44>

08005cb4 <memmove>:
 8005cb4:	4288      	cmp	r0, r1
 8005cb6:	b510      	push	{r4, lr}
 8005cb8:	eb01 0402 	add.w	r4, r1, r2
 8005cbc:	d902      	bls.n	8005cc4 <memmove+0x10>
 8005cbe:	4284      	cmp	r4, r0
 8005cc0:	4623      	mov	r3, r4
 8005cc2:	d807      	bhi.n	8005cd4 <memmove+0x20>
 8005cc4:	1e43      	subs	r3, r0, #1
 8005cc6:	42a1      	cmp	r1, r4
 8005cc8:	d008      	beq.n	8005cdc <memmove+0x28>
 8005cca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005cce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005cd2:	e7f8      	b.n	8005cc6 <memmove+0x12>
 8005cd4:	4601      	mov	r1, r0
 8005cd6:	4402      	add	r2, r0
 8005cd8:	428a      	cmp	r2, r1
 8005cda:	d100      	bne.n	8005cde <memmove+0x2a>
 8005cdc:	bd10      	pop	{r4, pc}
 8005cde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ce2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ce6:	e7f7      	b.n	8005cd8 <memmove+0x24>

08005ce8 <_fstat_r>:
 8005ce8:	b538      	push	{r3, r4, r5, lr}
 8005cea:	2300      	movs	r3, #0
 8005cec:	4d06      	ldr	r5, [pc, #24]	@ (8005d08 <_fstat_r+0x20>)
 8005cee:	4604      	mov	r4, r0
 8005cf0:	4608      	mov	r0, r1
 8005cf2:	4611      	mov	r1, r2
 8005cf4:	602b      	str	r3, [r5, #0]
 8005cf6:	f7fd f9fb 	bl	80030f0 <_fstat>
 8005cfa:	1c43      	adds	r3, r0, #1
 8005cfc:	d102      	bne.n	8005d04 <_fstat_r+0x1c>
 8005cfe:	682b      	ldr	r3, [r5, #0]
 8005d00:	b103      	cbz	r3, 8005d04 <_fstat_r+0x1c>
 8005d02:	6023      	str	r3, [r4, #0]
 8005d04:	bd38      	pop	{r3, r4, r5, pc}
 8005d06:	bf00      	nop
 8005d08:	20004414 	.word	0x20004414

08005d0c <_isatty_r>:
 8005d0c:	b538      	push	{r3, r4, r5, lr}
 8005d0e:	2300      	movs	r3, #0
 8005d10:	4d05      	ldr	r5, [pc, #20]	@ (8005d28 <_isatty_r+0x1c>)
 8005d12:	4604      	mov	r4, r0
 8005d14:	4608      	mov	r0, r1
 8005d16:	602b      	str	r3, [r5, #0]
 8005d18:	f7fd f9f9 	bl	800310e <_isatty>
 8005d1c:	1c43      	adds	r3, r0, #1
 8005d1e:	d102      	bne.n	8005d26 <_isatty_r+0x1a>
 8005d20:	682b      	ldr	r3, [r5, #0]
 8005d22:	b103      	cbz	r3, 8005d26 <_isatty_r+0x1a>
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	bd38      	pop	{r3, r4, r5, pc}
 8005d28:	20004414 	.word	0x20004414

08005d2c <_sbrk_r>:
 8005d2c:	b538      	push	{r3, r4, r5, lr}
 8005d2e:	2300      	movs	r3, #0
 8005d30:	4d05      	ldr	r5, [pc, #20]	@ (8005d48 <_sbrk_r+0x1c>)
 8005d32:	4604      	mov	r4, r0
 8005d34:	4608      	mov	r0, r1
 8005d36:	602b      	str	r3, [r5, #0]
 8005d38:	f7fd fa00 	bl	800313c <_sbrk>
 8005d3c:	1c43      	adds	r3, r0, #1
 8005d3e:	d102      	bne.n	8005d46 <_sbrk_r+0x1a>
 8005d40:	682b      	ldr	r3, [r5, #0]
 8005d42:	b103      	cbz	r3, 8005d46 <_sbrk_r+0x1a>
 8005d44:	6023      	str	r3, [r4, #0]
 8005d46:	bd38      	pop	{r3, r4, r5, pc}
 8005d48:	20004414 	.word	0x20004414

08005d4c <memchr>:
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	b510      	push	{r4, lr}
 8005d50:	b2c9      	uxtb	r1, r1
 8005d52:	4402      	add	r2, r0
 8005d54:	4293      	cmp	r3, r2
 8005d56:	4618      	mov	r0, r3
 8005d58:	d101      	bne.n	8005d5e <memchr+0x12>
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	e003      	b.n	8005d66 <memchr+0x1a>
 8005d5e:	7804      	ldrb	r4, [r0, #0]
 8005d60:	3301      	adds	r3, #1
 8005d62:	428c      	cmp	r4, r1
 8005d64:	d1f6      	bne.n	8005d54 <memchr+0x8>
 8005d66:	bd10      	pop	{r4, pc}

08005d68 <memcpy>:
 8005d68:	440a      	add	r2, r1
 8005d6a:	4291      	cmp	r1, r2
 8005d6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d70:	d100      	bne.n	8005d74 <memcpy+0xc>
 8005d72:	4770      	bx	lr
 8005d74:	b510      	push	{r4, lr}
 8005d76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d7a:	4291      	cmp	r1, r2
 8005d7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d80:	d1f9      	bne.n	8005d76 <memcpy+0xe>
 8005d82:	bd10      	pop	{r4, pc}

08005d84 <_realloc_r>:
 8005d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d88:	4680      	mov	r8, r0
 8005d8a:	4615      	mov	r5, r2
 8005d8c:	460c      	mov	r4, r1
 8005d8e:	b921      	cbnz	r1, 8005d9a <_realloc_r+0x16>
 8005d90:	4611      	mov	r1, r2
 8005d92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d96:	f7fe bebb 	b.w	8004b10 <_malloc_r>
 8005d9a:	b92a      	cbnz	r2, 8005da8 <_realloc_r+0x24>
 8005d9c:	f7fe fe4e 	bl	8004a3c <_free_r>
 8005da0:	2400      	movs	r4, #0
 8005da2:	4620      	mov	r0, r4
 8005da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005da8:	f000 f906 	bl	8005fb8 <_malloc_usable_size_r>
 8005dac:	4285      	cmp	r5, r0
 8005dae:	4606      	mov	r6, r0
 8005db0:	d802      	bhi.n	8005db8 <_realloc_r+0x34>
 8005db2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005db6:	d8f4      	bhi.n	8005da2 <_realloc_r+0x1e>
 8005db8:	4629      	mov	r1, r5
 8005dba:	4640      	mov	r0, r8
 8005dbc:	f7fe fea8 	bl	8004b10 <_malloc_r>
 8005dc0:	4607      	mov	r7, r0
 8005dc2:	2800      	cmp	r0, #0
 8005dc4:	d0ec      	beq.n	8005da0 <_realloc_r+0x1c>
 8005dc6:	42b5      	cmp	r5, r6
 8005dc8:	462a      	mov	r2, r5
 8005dca:	4621      	mov	r1, r4
 8005dcc:	bf28      	it	cs
 8005dce:	4632      	movcs	r2, r6
 8005dd0:	f7ff ffca 	bl	8005d68 <memcpy>
 8005dd4:	4621      	mov	r1, r4
 8005dd6:	4640      	mov	r0, r8
 8005dd8:	f7fe fe30 	bl	8004a3c <_free_r>
 8005ddc:	463c      	mov	r4, r7
 8005dde:	e7e0      	b.n	8005da2 <_realloc_r+0x1e>

08005de0 <_strtol_l.constprop.0>:
 8005de0:	2b24      	cmp	r3, #36	@ 0x24
 8005de2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005de6:	4686      	mov	lr, r0
 8005de8:	4690      	mov	r8, r2
 8005dea:	d801      	bhi.n	8005df0 <_strtol_l.constprop.0+0x10>
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d106      	bne.n	8005dfe <_strtol_l.constprop.0+0x1e>
 8005df0:	f7fe fdf6 	bl	80049e0 <__errno>
 8005df4:	2316      	movs	r3, #22
 8005df6:	6003      	str	r3, [r0, #0]
 8005df8:	2000      	movs	r0, #0
 8005dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dfe:	460d      	mov	r5, r1
 8005e00:	4833      	ldr	r0, [pc, #204]	@ (8005ed0 <_strtol_l.constprop.0+0xf0>)
 8005e02:	462a      	mov	r2, r5
 8005e04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e08:	5d06      	ldrb	r6, [r0, r4]
 8005e0a:	f016 0608 	ands.w	r6, r6, #8
 8005e0e:	d1f8      	bne.n	8005e02 <_strtol_l.constprop.0+0x22>
 8005e10:	2c2d      	cmp	r4, #45	@ 0x2d
 8005e12:	d12d      	bne.n	8005e70 <_strtol_l.constprop.0+0x90>
 8005e14:	2601      	movs	r6, #1
 8005e16:	782c      	ldrb	r4, [r5, #0]
 8005e18:	1c95      	adds	r5, r2, #2
 8005e1a:	f033 0210 	bics.w	r2, r3, #16
 8005e1e:	d109      	bne.n	8005e34 <_strtol_l.constprop.0+0x54>
 8005e20:	2c30      	cmp	r4, #48	@ 0x30
 8005e22:	d12a      	bne.n	8005e7a <_strtol_l.constprop.0+0x9a>
 8005e24:	782a      	ldrb	r2, [r5, #0]
 8005e26:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005e2a:	2a58      	cmp	r2, #88	@ 0x58
 8005e2c:	d125      	bne.n	8005e7a <_strtol_l.constprop.0+0x9a>
 8005e2e:	2310      	movs	r3, #16
 8005e30:	786c      	ldrb	r4, [r5, #1]
 8005e32:	3502      	adds	r5, #2
 8005e34:	2200      	movs	r2, #0
 8005e36:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005e3a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005e3e:	fbbc f9f3 	udiv	r9, ip, r3
 8005e42:	4610      	mov	r0, r2
 8005e44:	fb03 ca19 	mls	sl, r3, r9, ip
 8005e48:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005e4c:	2f09      	cmp	r7, #9
 8005e4e:	d81b      	bhi.n	8005e88 <_strtol_l.constprop.0+0xa8>
 8005e50:	463c      	mov	r4, r7
 8005e52:	42a3      	cmp	r3, r4
 8005e54:	dd27      	ble.n	8005ea6 <_strtol_l.constprop.0+0xc6>
 8005e56:	1c57      	adds	r7, r2, #1
 8005e58:	d007      	beq.n	8005e6a <_strtol_l.constprop.0+0x8a>
 8005e5a:	4581      	cmp	r9, r0
 8005e5c:	d320      	bcc.n	8005ea0 <_strtol_l.constprop.0+0xc0>
 8005e5e:	d101      	bne.n	8005e64 <_strtol_l.constprop.0+0x84>
 8005e60:	45a2      	cmp	sl, r4
 8005e62:	db1d      	blt.n	8005ea0 <_strtol_l.constprop.0+0xc0>
 8005e64:	2201      	movs	r2, #1
 8005e66:	fb00 4003 	mla	r0, r0, r3, r4
 8005e6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e6e:	e7eb      	b.n	8005e48 <_strtol_l.constprop.0+0x68>
 8005e70:	2c2b      	cmp	r4, #43	@ 0x2b
 8005e72:	bf04      	itt	eq
 8005e74:	782c      	ldrbeq	r4, [r5, #0]
 8005e76:	1c95      	addeq	r5, r2, #2
 8005e78:	e7cf      	b.n	8005e1a <_strtol_l.constprop.0+0x3a>
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1da      	bne.n	8005e34 <_strtol_l.constprop.0+0x54>
 8005e7e:	2c30      	cmp	r4, #48	@ 0x30
 8005e80:	bf0c      	ite	eq
 8005e82:	2308      	moveq	r3, #8
 8005e84:	230a      	movne	r3, #10
 8005e86:	e7d5      	b.n	8005e34 <_strtol_l.constprop.0+0x54>
 8005e88:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005e8c:	2f19      	cmp	r7, #25
 8005e8e:	d801      	bhi.n	8005e94 <_strtol_l.constprop.0+0xb4>
 8005e90:	3c37      	subs	r4, #55	@ 0x37
 8005e92:	e7de      	b.n	8005e52 <_strtol_l.constprop.0+0x72>
 8005e94:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005e98:	2f19      	cmp	r7, #25
 8005e9a:	d804      	bhi.n	8005ea6 <_strtol_l.constprop.0+0xc6>
 8005e9c:	3c57      	subs	r4, #87	@ 0x57
 8005e9e:	e7d8      	b.n	8005e52 <_strtol_l.constprop.0+0x72>
 8005ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ea4:	e7e1      	b.n	8005e6a <_strtol_l.constprop.0+0x8a>
 8005ea6:	1c53      	adds	r3, r2, #1
 8005ea8:	d108      	bne.n	8005ebc <_strtol_l.constprop.0+0xdc>
 8005eaa:	2322      	movs	r3, #34	@ 0x22
 8005eac:	4660      	mov	r0, ip
 8005eae:	f8ce 3000 	str.w	r3, [lr]
 8005eb2:	f1b8 0f00 	cmp.w	r8, #0
 8005eb6:	d0a0      	beq.n	8005dfa <_strtol_l.constprop.0+0x1a>
 8005eb8:	1e69      	subs	r1, r5, #1
 8005eba:	e006      	b.n	8005eca <_strtol_l.constprop.0+0xea>
 8005ebc:	b106      	cbz	r6, 8005ec0 <_strtol_l.constprop.0+0xe0>
 8005ebe:	4240      	negs	r0, r0
 8005ec0:	f1b8 0f00 	cmp.w	r8, #0
 8005ec4:	d099      	beq.n	8005dfa <_strtol_l.constprop.0+0x1a>
 8005ec6:	2a00      	cmp	r2, #0
 8005ec8:	d1f6      	bne.n	8005eb8 <_strtol_l.constprop.0+0xd8>
 8005eca:	f8c8 1000 	str.w	r1, [r8]
 8005ece:	e794      	b.n	8005dfa <_strtol_l.constprop.0+0x1a>
 8005ed0:	08006e3f 	.word	0x08006e3f

08005ed4 <_strtol_r>:
 8005ed4:	f7ff bf84 	b.w	8005de0 <_strtol_l.constprop.0>

08005ed8 <_strtoul_l.constprop.0>:
 8005ed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005edc:	4686      	mov	lr, r0
 8005ede:	460d      	mov	r5, r1
 8005ee0:	4e33      	ldr	r6, [pc, #204]	@ (8005fb0 <_strtoul_l.constprop.0+0xd8>)
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ee8:	5d37      	ldrb	r7, [r6, r4]
 8005eea:	f017 0708 	ands.w	r7, r7, #8
 8005eee:	d1f8      	bne.n	8005ee2 <_strtoul_l.constprop.0+0xa>
 8005ef0:	2c2d      	cmp	r4, #45	@ 0x2d
 8005ef2:	d12f      	bne.n	8005f54 <_strtoul_l.constprop.0+0x7c>
 8005ef4:	2701      	movs	r7, #1
 8005ef6:	782c      	ldrb	r4, [r5, #0]
 8005ef8:	1c85      	adds	r5, r0, #2
 8005efa:	f033 0010 	bics.w	r0, r3, #16
 8005efe:	d109      	bne.n	8005f14 <_strtoul_l.constprop.0+0x3c>
 8005f00:	2c30      	cmp	r4, #48	@ 0x30
 8005f02:	d12c      	bne.n	8005f5e <_strtoul_l.constprop.0+0x86>
 8005f04:	7828      	ldrb	r0, [r5, #0]
 8005f06:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8005f0a:	2858      	cmp	r0, #88	@ 0x58
 8005f0c:	d127      	bne.n	8005f5e <_strtoul_l.constprop.0+0x86>
 8005f0e:	2310      	movs	r3, #16
 8005f10:	786c      	ldrb	r4, [r5, #1]
 8005f12:	3502      	adds	r5, #2
 8005f14:	f04f 38ff 	mov.w	r8, #4294967295
 8005f18:	fbb8 f8f3 	udiv	r8, r8, r3
 8005f1c:	2600      	movs	r6, #0
 8005f1e:	fb03 f908 	mul.w	r9, r3, r8
 8005f22:	4630      	mov	r0, r6
 8005f24:	ea6f 0909 	mvn.w	r9, r9
 8005f28:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8005f2c:	f1bc 0f09 	cmp.w	ip, #9
 8005f30:	d81c      	bhi.n	8005f6c <_strtoul_l.constprop.0+0x94>
 8005f32:	4664      	mov	r4, ip
 8005f34:	42a3      	cmp	r3, r4
 8005f36:	dd2a      	ble.n	8005f8e <_strtoul_l.constprop.0+0xb6>
 8005f38:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005f3c:	d007      	beq.n	8005f4e <_strtoul_l.constprop.0+0x76>
 8005f3e:	4580      	cmp	r8, r0
 8005f40:	d322      	bcc.n	8005f88 <_strtoul_l.constprop.0+0xb0>
 8005f42:	d101      	bne.n	8005f48 <_strtoul_l.constprop.0+0x70>
 8005f44:	45a1      	cmp	r9, r4
 8005f46:	db1f      	blt.n	8005f88 <_strtoul_l.constprop.0+0xb0>
 8005f48:	2601      	movs	r6, #1
 8005f4a:	fb00 4003 	mla	r0, r0, r3, r4
 8005f4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f52:	e7e9      	b.n	8005f28 <_strtoul_l.constprop.0+0x50>
 8005f54:	2c2b      	cmp	r4, #43	@ 0x2b
 8005f56:	bf04      	itt	eq
 8005f58:	782c      	ldrbeq	r4, [r5, #0]
 8005f5a:	1c85      	addeq	r5, r0, #2
 8005f5c:	e7cd      	b.n	8005efa <_strtoul_l.constprop.0+0x22>
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1d8      	bne.n	8005f14 <_strtoul_l.constprop.0+0x3c>
 8005f62:	2c30      	cmp	r4, #48	@ 0x30
 8005f64:	bf0c      	ite	eq
 8005f66:	2308      	moveq	r3, #8
 8005f68:	230a      	movne	r3, #10
 8005f6a:	e7d3      	b.n	8005f14 <_strtoul_l.constprop.0+0x3c>
 8005f6c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8005f70:	f1bc 0f19 	cmp.w	ip, #25
 8005f74:	d801      	bhi.n	8005f7a <_strtoul_l.constprop.0+0xa2>
 8005f76:	3c37      	subs	r4, #55	@ 0x37
 8005f78:	e7dc      	b.n	8005f34 <_strtoul_l.constprop.0+0x5c>
 8005f7a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8005f7e:	f1bc 0f19 	cmp.w	ip, #25
 8005f82:	d804      	bhi.n	8005f8e <_strtoul_l.constprop.0+0xb6>
 8005f84:	3c57      	subs	r4, #87	@ 0x57
 8005f86:	e7d5      	b.n	8005f34 <_strtoul_l.constprop.0+0x5c>
 8005f88:	f04f 36ff 	mov.w	r6, #4294967295
 8005f8c:	e7df      	b.n	8005f4e <_strtoul_l.constprop.0+0x76>
 8005f8e:	1c73      	adds	r3, r6, #1
 8005f90:	d106      	bne.n	8005fa0 <_strtoul_l.constprop.0+0xc8>
 8005f92:	2322      	movs	r3, #34	@ 0x22
 8005f94:	4630      	mov	r0, r6
 8005f96:	f8ce 3000 	str.w	r3, [lr]
 8005f9a:	b932      	cbnz	r2, 8005faa <_strtoul_l.constprop.0+0xd2>
 8005f9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fa0:	b107      	cbz	r7, 8005fa4 <_strtoul_l.constprop.0+0xcc>
 8005fa2:	4240      	negs	r0, r0
 8005fa4:	2a00      	cmp	r2, #0
 8005fa6:	d0f9      	beq.n	8005f9c <_strtoul_l.constprop.0+0xc4>
 8005fa8:	b106      	cbz	r6, 8005fac <_strtoul_l.constprop.0+0xd4>
 8005faa:	1e69      	subs	r1, r5, #1
 8005fac:	6011      	str	r1, [r2, #0]
 8005fae:	e7f5      	b.n	8005f9c <_strtoul_l.constprop.0+0xc4>
 8005fb0:	08006e3f 	.word	0x08006e3f

08005fb4 <_strtoul_r>:
 8005fb4:	f7ff bf90 	b.w	8005ed8 <_strtoul_l.constprop.0>

08005fb8 <_malloc_usable_size_r>:
 8005fb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fbc:	1f18      	subs	r0, r3, #4
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	bfbc      	itt	lt
 8005fc2:	580b      	ldrlt	r3, [r1, r0]
 8005fc4:	18c0      	addlt	r0, r0, r3
 8005fc6:	4770      	bx	lr

08005fc8 <_init>:
 8005fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fca:	bf00      	nop
 8005fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fce:	bc08      	pop	{r3}
 8005fd0:	469e      	mov	lr, r3
 8005fd2:	4770      	bx	lr

08005fd4 <_fini>:
 8005fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd6:	bf00      	nop
 8005fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fda:	bc08      	pop	{r3}
 8005fdc:	469e      	mov	lr, r3
 8005fde:	4770      	bx	lr


Cable Undefined V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b48  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f3c  08005d2c  08005d2c  00006d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c68  08006c68  00008d20  2**0
                  CONTENTS
  4 .ARM          00000008  08006c68  08006c68  00007c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c70  08006c70  00008d20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c70  08006c70  00007c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c74  08006c74  00007c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000d20  20000000  08006c78  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000036e0  20000d20  08007998  00008d20  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004400  08007998  00009400  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008d20  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ea0  00000000  00000000  00008d49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023f1  00000000  00000000  00012be9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  00014fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000875  00000000  00000000  00015b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dc6f  00000000  00000000  000163d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009fce  00000000  00000000  00034044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c63d  00000000  00000000  0003e012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da64f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bcc  00000000  00000000  000da694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000de260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000d20 	.word	0x20000d20
 8000200:	00000000 	.word	0x00000000
 8000204:	08005d14 	.word	0x08005d14

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000d24 	.word	0x20000d24
 8000220:	08005d14 	.word	0x08005d14

08000224 <strcmp>:
 8000224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800022c:	2a01      	cmp	r2, #1
 800022e:	bf28      	it	cs
 8000230:	429a      	cmpcs	r2, r3
 8000232:	d0f7      	beq.n	8000224 <strcmp>
 8000234:	1ad0      	subs	r0, r2, r3
 8000236:	4770      	bx	lr

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	0a1b      	lsrs	r3, r3, #8
 8000256:	b29a      	uxth	r2, r3
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	611a      	str	r2, [r3, #16]
}
 800025c:	bf00      	nop
 800025e:	370c      	adds	r7, #12
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr

08000266 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000266:	b480      	push	{r7}
 8000268:	b083      	sub	sp, #12
 800026a:	af00      	add	r7, sp, #0
 800026c:	6078      	str	r0, [r7, #4]
 800026e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	0a1b      	lsrs	r3, r3, #8
 8000274:	b29a      	uxth	r2, r3
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	615a      	str	r2, [r3, #20]
}
 800027a:	bf00      	nop
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr

08000284 <FAULT_5v_HandleInterrupt>:
}

/**
 * @brief Handles the 5V FAULT interrupt, only sets flags
 */
void FAULT_5v_HandleInterrupt(void) {
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
    // Set trigger flag when interrupt occurs
	fault_5v_triggered = 1;
 8000288:	4b04      	ldr	r3, [pc, #16]	@ (800029c <FAULT_5v_HandleInterrupt+0x18>)
 800028a:	2201      	movs	r2, #1
 800028c:	701a      	strb	r2, [r3, #0]
    fault_sent = 0;  // Reset message sent flag to allow new transmission
 800028e:	4b04      	ldr	r3, [pc, #16]	@ (80002a0 <FAULT_5v_HandleInterrupt+0x1c>)
 8000290:	2200      	movs	r2, #0
 8000292:	701a      	strb	r2, [r3, #0]
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr
 800029c:	20000d3d 	.word	0x20000d3d
 80002a0:	20000d3e 	.word	0x20000d3e

080002a4 <FAULT_3v3_HandleInterrupt>:

/**
 * @brief Handles the 5V FAULT interrupt, only sets flags
 */
void FAULT_3v3_HandleInterrupt(void) {
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
    // Set trigger flag when interrupt occurs
	fault_3v3_triggered = 1;
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <FAULT_3v3_HandleInterrupt+0x18>)
 80002aa:	2201      	movs	r2, #1
 80002ac:	701a      	strb	r2, [r3, #0]
    fault_sent = 0;  // Reset message sent flag to allow new transmission
 80002ae:	4b04      	ldr	r3, [pc, #16]	@ (80002c0 <FAULT_3v3_HandleInterrupt+0x1c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	701a      	strb	r2, [r3, #0]
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	20000d3c 	.word	0x20000d3c
 80002c0:	20000d3e 	.word	0x20000d3e

080002c4 <FAULT_5v_HandleMsg>:

void FAULT_5v_HandleMsg(void){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	printf("Reseting the protection gpio, 5V");
 80002c8:	480d      	ldr	r0, [pc, #52]	@ (8000300 <FAULT_5v_HandleMsg+0x3c>)
 80002ca:	f004 f81f 	bl	800430c <iprintf>
	fflush(stdout);
 80002ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000304 <FAULT_5v_HandleMsg+0x40>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	689b      	ldr	r3, [r3, #8]
 80002d4:	4618      	mov	r0, r3
 80002d6:	f003 ff43 	bl	8004160 <fflush>

	fault_5v_triggered = 0;
 80002da:	4b0b      	ldr	r3, [pc, #44]	@ (8000308 <FAULT_5v_HandleMsg+0x44>)
 80002dc:	2200      	movs	r2, #0
 80002de:	701a      	strb	r2, [r3, #0]
    fault_sent = 0;
 80002e0:	4b0a      	ldr	r3, [pc, #40]	@ (800030c <FAULT_5v_HandleMsg+0x48>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	701a      	strb	r2, [r3, #0]

    LL_GPIO_ResetOutputPin(PROTECTION_GPIO, PROTECTION_PIN);
 80002e6:	490a      	ldr	r1, [pc, #40]	@ (8000310 <FAULT_5v_HandleMsg+0x4c>)
 80002e8:	480a      	ldr	r0, [pc, #40]	@ (8000314 <FAULT_5v_HandleMsg+0x50>)
 80002ea:	f7ff ffbc 	bl	8000266 <LL_GPIO_ResetOutputPin>
    LL_mDelay(20);
 80002ee:	2014      	movs	r0, #20
 80002f0:	f003 fe5c 	bl	8003fac <LL_mDelay>
    LL_GPIO_SetOutputPin(PROTECTION_GPIO, PROTECTION_PIN);
 80002f4:	4906      	ldr	r1, [pc, #24]	@ (8000310 <FAULT_5v_HandleMsg+0x4c>)
 80002f6:	4807      	ldr	r0, [pc, #28]	@ (8000314 <FAULT_5v_HandleMsg+0x50>)
 80002f8:	f7ff ffa6 	bl	8000248 <LL_GPIO_SetOutputPin>
}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	08005d54 	.word	0x08005d54
 8000304:	20000cd0 	.word	0x20000cd0
 8000308:	20000d3d 	.word	0x20000d3d
 800030c:	20000d3e 	.word	0x20000d3e
 8000310:	04080008 	.word	0x04080008
 8000314:	40011800 	.word	0x40011800

08000318 <FAULT_3v3_HandleMsg>:

void FAULT_3v3_HandleMsg(void){
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	printf("reseting the protection gpio, 3V3");
 800031c:	480d      	ldr	r0, [pc, #52]	@ (8000354 <FAULT_3v3_HandleMsg+0x3c>)
 800031e:	f003 fff5 	bl	800430c <iprintf>
	fflush(stdout);
 8000322:	4b0d      	ldr	r3, [pc, #52]	@ (8000358 <FAULT_3v3_HandleMsg+0x40>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	4618      	mov	r0, r3
 800032a:	f003 ff19 	bl	8004160 <fflush>

	fault_3v3_triggered = 0;
 800032e:	4b0b      	ldr	r3, [pc, #44]	@ (800035c <FAULT_3v3_HandleMsg+0x44>)
 8000330:	2200      	movs	r2, #0
 8000332:	701a      	strb	r2, [r3, #0]
    fault_sent = 0;
 8000334:	4b0a      	ldr	r3, [pc, #40]	@ (8000360 <FAULT_3v3_HandleMsg+0x48>)
 8000336:	2200      	movs	r2, #0
 8000338:	701a      	strb	r2, [r3, #0]

    LL_GPIO_ResetOutputPin(PROTECTION_GPIO, PROTECTION_PIN);
 800033a:	490a      	ldr	r1, [pc, #40]	@ (8000364 <FAULT_3v3_HandleMsg+0x4c>)
 800033c:	480a      	ldr	r0, [pc, #40]	@ (8000368 <FAULT_3v3_HandleMsg+0x50>)
 800033e:	f7ff ff92 	bl	8000266 <LL_GPIO_ResetOutputPin>
    LL_mDelay(20);
 8000342:	2014      	movs	r0, #20
 8000344:	f003 fe32 	bl	8003fac <LL_mDelay>
    LL_GPIO_SetOutputPin(PROTECTION_GPIO, PROTECTION_PIN);
 8000348:	4906      	ldr	r1, [pc, #24]	@ (8000364 <FAULT_3v3_HandleMsg+0x4c>)
 800034a:	4807      	ldr	r0, [pc, #28]	@ (8000368 <FAULT_3v3_HandleMsg+0x50>)
 800034c:	f7ff ff7c 	bl	8000248 <LL_GPIO_SetOutputPin>
}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}
 8000354:	08005d78 	.word	0x08005d78
 8000358:	20000cd0 	.word	0x20000cd0
 800035c:	20000d3c 	.word	0x20000d3c
 8000360:	20000d3e 	.word	0x20000d3e
 8000364:	04080008 	.word	0x04080008
 8000368:	40011800 	.word	0x40011800

0800036c <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	3b01      	subs	r3, #1
 800037a:	4a0a      	ldr	r2, [pc, #40]	@ (80003a4 <LL_DMA_EnableChannel+0x38>)
 800037c:	5cd3      	ldrb	r3, [r2, r3]
 800037e:	461a      	mov	r2, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4413      	add	r3, r2
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	683a      	ldr	r2, [r7, #0]
 8000388:	3a01      	subs	r2, #1
 800038a:	4906      	ldr	r1, [pc, #24]	@ (80003a4 <LL_DMA_EnableChannel+0x38>)
 800038c:	5c8a      	ldrb	r2, [r1, r2]
 800038e:	4611      	mov	r1, r2
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	440a      	add	r2, r1
 8000394:	f043 0301 	orr.w	r3, r3, #1
 8000398:	6013      	str	r3, [r2, #0]
}
 800039a:	bf00      	nop
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr
 80003a4:	080068c0 	.word	0x080068c0

080003a8 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	3b01      	subs	r3, #1
 80003b6:	4a0a      	ldr	r2, [pc, #40]	@ (80003e0 <LL_DMA_DisableChannel+0x38>)
 80003b8:	5cd3      	ldrb	r3, [r2, r3]
 80003ba:	461a      	mov	r2, r3
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4413      	add	r3, r2
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	683a      	ldr	r2, [r7, #0]
 80003c4:	3a01      	subs	r2, #1
 80003c6:	4906      	ldr	r1, [pc, #24]	@ (80003e0 <LL_DMA_DisableChannel+0x38>)
 80003c8:	5c8a      	ldrb	r2, [r1, r2]
 80003ca:	4611      	mov	r1, r2
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	440a      	add	r2, r1
 80003d0:	f023 0301 	bic.w	r3, r3, #1
 80003d4:	6013      	str	r3, [r2, #0]
}
 80003d6:	bf00      	nop
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr
 80003e0:	080068c0 	.word	0x080068c0

080003e4 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b085      	sub	sp, #20
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	60f8      	str	r0, [r7, #12]
 80003ec:	60b9      	str	r1, [r7, #8]
 80003ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	3b01      	subs	r3, #1
 80003f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000424 <LL_DMA_SetDataLength+0x40>)
 80003f6:	5cd3      	ldrb	r3, [r2, r3]
 80003f8:	461a      	mov	r2, r3
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	4413      	add	r3, r2
 80003fe:	685b      	ldr	r3, [r3, #4]
 8000400:	0c1b      	lsrs	r3, r3, #16
 8000402:	041b      	lsls	r3, r3, #16
 8000404:	68ba      	ldr	r2, [r7, #8]
 8000406:	3a01      	subs	r2, #1
 8000408:	4906      	ldr	r1, [pc, #24]	@ (8000424 <LL_DMA_SetDataLength+0x40>)
 800040a:	5c8a      	ldrb	r2, [r1, r2]
 800040c:	4611      	mov	r1, r2
 800040e:	68fa      	ldr	r2, [r7, #12]
 8000410:	440a      	add	r2, r1
 8000412:	4611      	mov	r1, r2
 8000414:	687a      	ldr	r2, [r7, #4]
 8000416:	4313      	orrs	r3, r2
 8000418:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 800041a:	bf00      	nop
 800041c:	3714      	adds	r7, #20
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr
 8000424:	080068c0 	.word	0x080068c0

08000428 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 8000428:	b480      	push	{r7}
 800042a:	b085      	sub	sp, #20
 800042c:	af00      	add	r7, sp, #0
 800042e:	60f8      	str	r0, [r7, #12]
 8000430:	60b9      	str	r1, [r7, #8]
 8000432:	607a      	str	r2, [r7, #4]
 8000434:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8000436:	69bb      	ldr	r3, [r7, #24]
 8000438:	2b10      	cmp	r3, #16
 800043a:	d114      	bne.n	8000466 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 800043c:	68bb      	ldr	r3, [r7, #8]
 800043e:	3b01      	subs	r3, #1
 8000440:	4a15      	ldr	r2, [pc, #84]	@ (8000498 <LL_DMA_ConfigAddresses+0x70>)
 8000442:	5cd3      	ldrb	r3, [r2, r3]
 8000444:	461a      	mov	r2, r3
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	4413      	add	r3, r2
 800044a:	461a      	mov	r2, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	3b01      	subs	r3, #1
 8000454:	4a10      	ldr	r2, [pc, #64]	@ (8000498 <LL_DMA_ConfigAddresses+0x70>)
 8000456:	5cd3      	ldrb	r3, [r2, r3]
 8000458:	461a      	mov	r2, r3
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	4413      	add	r3, r2
 800045e:	461a      	mov	r2, r3
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 8000464:	e013      	b.n	800048e <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	3b01      	subs	r3, #1
 800046a:	4a0b      	ldr	r2, [pc, #44]	@ (8000498 <LL_DMA_ConfigAddresses+0x70>)
 800046c:	5cd3      	ldrb	r3, [r2, r3]
 800046e:	461a      	mov	r2, r3
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	4413      	add	r3, r2
 8000474:	461a      	mov	r2, r3
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800047a:	68bb      	ldr	r3, [r7, #8]
 800047c:	3b01      	subs	r3, #1
 800047e:	4a06      	ldr	r2, [pc, #24]	@ (8000498 <LL_DMA_ConfigAddresses+0x70>)
 8000480:	5cd3      	ldrb	r3, [r2, r3]
 8000482:	461a      	mov	r2, r3
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	4413      	add	r3, r2
 8000488:	461a      	mov	r2, r3
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	60d3      	str	r3, [r2, #12]
}
 800048e:	bf00      	nop
 8000490:	3714      	adds	r7, #20
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	080068c0 	.word	0x080068c0

0800049c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	f043 0201 	orr.w	r2, r3, #1
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	601a      	str	r2, [r3, #0]
}
 80004b0:	bf00      	nop
 80004b2:	370c      	adds	r7, #12
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bc80      	pop	{r7}
 80004b8:	4770      	bx	lr

080004ba <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 80004ba:	b480      	push	{r7}
 80004bc:	b083      	sub	sp, #12
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f023 0201 	bic.w	r2, r3, #1
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	601a      	str	r2, [r3, #0]
}
 80004ce:	bf00      	nop
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr

080004d8 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	6a1a      	ldr	r2, [r3, #32]
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	431a      	orrs	r2, r3
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	621a      	str	r2, [r3, #32]
}
 80004ee:	bf00      	nop
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr

080004f8 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	6a1a      	ldr	r2, [r3, #32]
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	43db      	mvns	r3, r3
 800050a:	401a      	ands	r2, r3
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	621a      	str	r2, [r3, #32]
}
 8000510:	bf00      	nop
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr

0800051a <LL_TIM_EnableDMAReq_CC1>:
  * @rmtoll DIER         CC1DE         LL_TIM_EnableDMAReq_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_CC1(TIM_TypeDef *TIMx)
{
 800051a:	b480      	push	{r7}
 800051c:	b083      	sub	sp, #12
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	68db      	ldr	r3, [r3, #12]
 8000526:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	60da      	str	r2, [r3, #12]
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr

08000538 <LL_TIM_DisableDMAReq_CC1>:
  * @rmtoll DIER         CC1DE         LL_TIM_DisableDMAReq_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableDMAReq_CC1(TIM_TypeDef *TIMx)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	68db      	ldr	r3, [r3, #12]
 8000544:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	60da      	str	r2, [r3, #12]
}
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr
	...

08000558 <addToPin>:

LedEntry LedList[NUM_PIXELS];
uint8_t numActiveLeds = 0;


void addToPin(uint8_t pin, RGB_t color) {
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	6039      	str	r1, [r7, #0]
 8000562:	71fb      	strb	r3, [r7, #7]
    if (pin == 0 || pin > NUM_PIXELS || numActiveLeds >= NUM_PIXELS) {
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d034      	beq.n	80005d4 <addToPin+0x7c>
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	2b78      	cmp	r3, #120	@ 0x78
 800056e:	d831      	bhi.n	80005d4 <addToPin+0x7c>
 8000570:	4b1b      	ldr	r3, [pc, #108]	@ (80005e0 <addToPin+0x88>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b77      	cmp	r3, #119	@ 0x77
 8000576:	d82d      	bhi.n	80005d4 <addToPin+0x7c>
        return;
    }

    // Update if pin already exists
    for (uint8_t i = 0; i < numActiveLeds; i++) {
 8000578:	2300      	movs	r3, #0
 800057a:	73fb      	strb	r3, [r7, #15]
 800057c:	e010      	b.n	80005a0 <addToPin+0x48>
        if (LedList[i].pin == pin) {
 800057e:	7bfb      	ldrb	r3, [r7, #15]
 8000580:	4a18      	ldr	r2, [pc, #96]	@ (80005e4 <addToPin+0x8c>)
 8000582:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000586:	79fa      	ldrb	r2, [r7, #7]
 8000588:	429a      	cmp	r2, r3
 800058a:	d106      	bne.n	800059a <addToPin+0x42>
            LedList[i].color = color;
 800058c:	7bfb      	ldrb	r3, [r7, #15]
 800058e:	4a15      	ldr	r2, [pc, #84]	@ (80005e4 <addToPin+0x8c>)
 8000590:	00db      	lsls	r3, r3, #3
 8000592:	4413      	add	r3, r2
 8000594:	683a      	ldr	r2, [r7, #0]
 8000596:	605a      	str	r2, [r3, #4]
            return;
 8000598:	e01d      	b.n	80005d6 <addToPin+0x7e>
    for (uint8_t i = 0; i < numActiveLeds; i++) {
 800059a:	7bfb      	ldrb	r3, [r7, #15]
 800059c:	3301      	adds	r3, #1
 800059e:	73fb      	strb	r3, [r7, #15]
 80005a0:	4b0f      	ldr	r3, [pc, #60]	@ (80005e0 <addToPin+0x88>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	7bfa      	ldrb	r2, [r7, #15]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d3e9      	bcc.n	800057e <addToPin+0x26>
        }
    }

    // Add new entry
    LedList[numActiveLeds].pin = pin;
 80005aa:	4b0d      	ldr	r3, [pc, #52]	@ (80005e0 <addToPin+0x88>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	4619      	mov	r1, r3
 80005b0:	4a0c      	ldr	r2, [pc, #48]	@ (80005e4 <addToPin+0x8c>)
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	f802 3031 	strb.w	r3, [r2, r1, lsl #3]
    LedList[numActiveLeds].color = color;
 80005b8:	4b09      	ldr	r3, [pc, #36]	@ (80005e0 <addToPin+0x88>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	4a09      	ldr	r2, [pc, #36]	@ (80005e4 <addToPin+0x8c>)
 80005be:	00db      	lsls	r3, r3, #3
 80005c0:	4413      	add	r3, r2
 80005c2:	683a      	ldr	r2, [r7, #0]
 80005c4:	605a      	str	r2, [r3, #4]
    numActiveLeds++;
 80005c6:	4b06      	ldr	r3, [pc, #24]	@ (80005e0 <addToPin+0x88>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	3301      	adds	r3, #1
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	4b04      	ldr	r3, [pc, #16]	@ (80005e0 <addToPin+0x88>)
 80005d0:	701a      	strb	r2, [r3, #0]
 80005d2:	e000      	b.n	80005d6 <addToPin+0x7e>
        return;
 80005d4:	bf00      	nop
}
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20003fe4 	.word	0x20003fe4
 80005e4:	20003c24 	.word	0x20003c24

080005e8 <removeFromPin>:

void removeFromPin(uint8_t pin) {
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < numActiveLeds; i++) {
 80005f2:	2300      	movs	r3, #0
 80005f4:	73fb      	strb	r3, [r7, #15]
 80005f6:	e029      	b.n	800064c <removeFromPin+0x64>
        if (LedList[i].pin == pin) {
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	4a19      	ldr	r2, [pc, #100]	@ (8000660 <removeFromPin+0x78>)
 80005fc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000600:	79fa      	ldrb	r2, [r7, #7]
 8000602:	429a      	cmp	r2, r3
 8000604:	d11f      	bne.n	8000646 <removeFromPin+0x5e>
            for (uint8_t j = i; j < numActiveLeds - 1; j++) {
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	73bb      	strb	r3, [r7, #14]
 800060a:	e00f      	b.n	800062c <removeFromPin+0x44>
                LedList[j] = LedList[j + 1];
 800060c:	7bbb      	ldrb	r3, [r7, #14]
 800060e:	1c5a      	adds	r2, r3, #1
 8000610:	7bbb      	ldrb	r3, [r7, #14]
 8000612:	4813      	ldr	r0, [pc, #76]	@ (8000660 <removeFromPin+0x78>)
 8000614:	4912      	ldr	r1, [pc, #72]	@ (8000660 <removeFromPin+0x78>)
 8000616:	00db      	lsls	r3, r3, #3
 8000618:	4403      	add	r3, r0
 800061a:	00d2      	lsls	r2, r2, #3
 800061c:	440a      	add	r2, r1
 800061e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000622:	e883 0003 	stmia.w	r3, {r0, r1}
            for (uint8_t j = i; j < numActiveLeds - 1; j++) {
 8000626:	7bbb      	ldrb	r3, [r7, #14]
 8000628:	3301      	adds	r3, #1
 800062a:	73bb      	strb	r3, [r7, #14]
 800062c:	7bba      	ldrb	r2, [r7, #14]
 800062e:	4b0d      	ldr	r3, [pc, #52]	@ (8000664 <removeFromPin+0x7c>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	3b01      	subs	r3, #1
 8000634:	429a      	cmp	r2, r3
 8000636:	dbe9      	blt.n	800060c <removeFromPin+0x24>
            }
            numActiveLeds--;
 8000638:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <removeFromPin+0x7c>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	3b01      	subs	r3, #1
 800063e:	b2da      	uxtb	r2, r3
 8000640:	4b08      	ldr	r3, [pc, #32]	@ (8000664 <removeFromPin+0x7c>)
 8000642:	701a      	strb	r2, [r3, #0]
            return;
 8000644:	e007      	b.n	8000656 <removeFromPin+0x6e>
    for (uint8_t i = 0; i < numActiveLeds; i++) {
 8000646:	7bfb      	ldrb	r3, [r7, #15]
 8000648:	3301      	adds	r3, #1
 800064a:	73fb      	strb	r3, [r7, #15]
 800064c:	4b05      	ldr	r3, [pc, #20]	@ (8000664 <removeFromPin+0x7c>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	7bfa      	ldrb	r2, [r7, #15]
 8000652:	429a      	cmp	r2, r3
 8000654:	d3d0      	bcc.n	80005f8 <removeFromPin+0x10>
        }
    }
}
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	20003c24 	.word	0x20003c24
 8000664:	20003fe4 	.word	0x20003fe4

08000668 <clearBoard>:



void clearBoard(void) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
    uint32_t *pBuff = dmaBuffer;
 800066e:	4b13      	ldr	r3, [pc, #76]	@ (80006bc <clearBoard+0x54>)
 8000670:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < NUM_PIXELS * 24; i++) {
 8000672:	2300      	movs	r3, #0
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	e007      	b.n	8000688 <clearBoard+0x20>
        *pBuff++ = NEOPIXEL_ZERO;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	1d1a      	adds	r2, r3, #4
 800067c:	607a      	str	r2, [r7, #4]
 800067e:	221d      	movs	r2, #29
 8000680:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < NUM_PIXELS * 24; i++) {
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	3301      	adds	r3, #1
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	f5b3 6f34 	cmp.w	r3, #2880	@ 0xb40
 800068e:	dbf3      	blt.n	8000678 <clearBoard+0x10>
    }

    dmaBuffer[DMA_BUFF_SIZE - 1] = 0;
 8000690:	4b0a      	ldr	r3, [pc, #40]	@ (80006bc <clearBoard+0x54>)
 8000692:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000696:	461a      	mov	r2, r3
 8000698:	2300      	movs	r3, #0
 800069a:	f8c2 3d00 	str.w	r3, [r2, #3328]	@ 0xd00

    PWM_Start_DMA(TIM2, LL_TIM_CHANNEL_CH1, dmaBuffer, DMA_BUFF_SIZE);
 800069e:	f640 3341 	movw	r3, #2881	@ 0xb41
 80006a2:	4a06      	ldr	r2, [pc, #24]	@ (80006bc <clearBoard+0x54>)
 80006a4:	2101      	movs	r1, #1
 80006a6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80006aa:	f000 f913 	bl	80008d4 <PWM_Start_DMA>
    LL_mDelay(10);
 80006ae:	200a      	movs	r0, #10
 80006b0:	f003 fc7c 	bl	8003fac <LL_mDelay>
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000f20 	.word	0x20000f20

080006c0 <sendPixelData>:

void sendPixelData() {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08c      	sub	sp, #48	@ 0x30
 80006c4:	af00      	add	r7, sp, #0
    LL_mDelay(10);
 80006c6:	200a      	movs	r0, #10
 80006c8:	f003 fc70 	bl	8003fac <LL_mDelay>
    if (numActiveLeds == 0) {
 80006cc:	4b79      	ldr	r3, [pc, #484]	@ (80008b4 <sendPixelData+0x1f4>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d102      	bne.n	80006da <sendPixelData+0x1a>
        clearBoard();
 80006d4:	f7ff ffc8 	bl	8000668 <clearBoard>
        return;
 80006d8:	e0e9      	b.n	80008ae <sendPixelData+0x1ee>
//        pixel[i].data = 0;
//    }

    // Copy assigned LED colors
    // Copy assigned LED colors
    for (uint8_t i = 0; i < numActiveLeds; i++) {
 80006da:	2300      	movs	r3, #0
 80006dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80006e0:	e045      	b.n	800076e <sendPixelData+0xae>
        uint8_t pin = LedList[i].pin;
 80006e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80006e6:	4a74      	ldr	r2, [pc, #464]	@ (80008b8 <sendPixelData+0x1f8>)
 80006e8:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80006ec:	70fb      	strb	r3, [r7, #3]
        if (pin > 0 && pin <= NUM_PIXELS) {
 80006ee:	78fb      	ldrb	r3, [r7, #3]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d037      	beq.n	8000764 <sendPixelData+0xa4>
 80006f4:	78fb      	ldrb	r3, [r7, #3]
 80006f6:	2b78      	cmp	r3, #120	@ 0x78
 80006f8:	d834      	bhi.n	8000764 <sendPixelData+0xa4>
            pixel[pin - 1] = LedList[i].color;
 80006fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80006fe:	78fa      	ldrb	r2, [r7, #3]
 8000700:	3a01      	subs	r2, #1
 8000702:	496e      	ldr	r1, [pc, #440]	@ (80008bc <sendPixelData+0x1fc>)
 8000704:	486c      	ldr	r0, [pc, #432]	@ (80008b8 <sendPixelData+0x1f8>)
 8000706:	00db      	lsls	r3, r3, #3
 8000708:	4403      	add	r3, r0
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
            pixel[pin - 1].color.r >>= 2;
 8000710:	78fb      	ldrb	r3, [r7, #3]
 8000712:	3b01      	subs	r3, #1
 8000714:	4a69      	ldr	r2, [pc, #420]	@ (80008bc <sendPixelData+0x1fc>)
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	4413      	add	r3, r2
 800071a:	785a      	ldrb	r2, [r3, #1]
 800071c:	78fb      	ldrb	r3, [r7, #3]
 800071e:	3b01      	subs	r3, #1
 8000720:	0892      	lsrs	r2, r2, #2
 8000722:	b2d1      	uxtb	r1, r2
 8000724:	4a65      	ldr	r2, [pc, #404]	@ (80008bc <sendPixelData+0x1fc>)
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	4413      	add	r3, r2
 800072a:	460a      	mov	r2, r1
 800072c:	705a      	strb	r2, [r3, #1]
            pixel[pin - 1].color.g >>= 2;
 800072e:	78fb      	ldrb	r3, [r7, #3]
 8000730:	3b01      	subs	r3, #1
 8000732:	4a62      	ldr	r2, [pc, #392]	@ (80008bc <sendPixelData+0x1fc>)
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	4413      	add	r3, r2
 8000738:	789a      	ldrb	r2, [r3, #2]
 800073a:	78fb      	ldrb	r3, [r7, #3]
 800073c:	3b01      	subs	r3, #1
 800073e:	0892      	lsrs	r2, r2, #2
 8000740:	b2d1      	uxtb	r1, r2
 8000742:	4a5e      	ldr	r2, [pc, #376]	@ (80008bc <sendPixelData+0x1fc>)
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	4413      	add	r3, r2
 8000748:	460a      	mov	r2, r1
 800074a:	709a      	strb	r2, [r3, #2]
            pixel[pin - 1].color.b >>= 2;
 800074c:	78fb      	ldrb	r3, [r7, #3]
 800074e:	3b01      	subs	r3, #1
 8000750:	4a5a      	ldr	r2, [pc, #360]	@ (80008bc <sendPixelData+0x1fc>)
 8000752:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 8000756:	78fb      	ldrb	r3, [r7, #3]
 8000758:	3b01      	subs	r3, #1
 800075a:	0892      	lsrs	r2, r2, #2
 800075c:	b2d1      	uxtb	r1, r2
 800075e:	4a57      	ldr	r2, [pc, #348]	@ (80008bc <sendPixelData+0x1fc>)
 8000760:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    for (uint8_t i = 0; i < numActiveLeds; i++) {
 8000764:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000768:	3301      	adds	r3, #1
 800076a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800076e:	4b51      	ldr	r3, [pc, #324]	@ (80008b4 <sendPixelData+0x1f4>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000776:	429a      	cmp	r2, r3
 8000778:	d3b3      	bcc.n	80006e2 <sendPixelData+0x22>
    }



    // Transfer pixel data into DMA buffer
    uint32_t *pBuff = dmaBuffer;
 800077a:	4b51      	ldr	r3, [pc, #324]	@ (80008c0 <sendPixelData+0x200>)
 800077c:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (int i = 0; i < NUM_PIXELS; i++) {
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	@ 0x24
 8000782:	e07e      	b.n	8000882 <sendPixelData+0x1c2>
    	if (pixel[i].data != 0) {
 8000784:	4a4d      	ldr	r2, [pc, #308]	@ (80008bc <sendPixelData+0x1fc>)
 8000786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d058      	beq.n	8000842 <sendPixelData+0x182>
    	//        	        printf("Buffer[%d]: %d\n", (i * 24) + (23 - j), bit); // Prints every bit written to the buffer
    		printf("LED %d - R: ", i + 1);
 8000790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000792:	3301      	adds	r3, #1
 8000794:	4619      	mov	r1, r3
 8000796:	484b      	ldr	r0, [pc, #300]	@ (80008c4 <sendPixelData+0x204>)
 8000798:	f003 fdb8 	bl	800430c <iprintf>
			for (int j = 7; j >= 0; j--) {
 800079c:	2307      	movs	r3, #7
 800079e:	623b      	str	r3, [r7, #32]
 80007a0:	e012      	b.n	80007c8 <sendPixelData+0x108>
				uint32_t bit = (pixel[i].color.r >> j) & 0x01;
 80007a2:	4a46      	ldr	r2, [pc, #280]	@ (80008bc <sendPixelData+0x1fc>)
 80007a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	4413      	add	r3, r2
 80007aa:	785b      	ldrb	r3, [r3, #1]
 80007ac:	461a      	mov	r2, r3
 80007ae:	6a3b      	ldr	r3, [r7, #32]
 80007b0:	fa42 f303 	asr.w	r3, r2, r3
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	60bb      	str	r3, [r7, #8]
				printf("%d", bit);
 80007ba:	68b9      	ldr	r1, [r7, #8]
 80007bc:	4842      	ldr	r0, [pc, #264]	@ (80008c8 <sendPixelData+0x208>)
 80007be:	f003 fda5 	bl	800430c <iprintf>
			for (int j = 7; j >= 0; j--) {
 80007c2:	6a3b      	ldr	r3, [r7, #32]
 80007c4:	3b01      	subs	r3, #1
 80007c6:	623b      	str	r3, [r7, #32]
 80007c8:	6a3b      	ldr	r3, [r7, #32]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	dae9      	bge.n	80007a2 <sendPixelData+0xe2>
			}
			printf("  G: ");
 80007ce:	483f      	ldr	r0, [pc, #252]	@ (80008cc <sendPixelData+0x20c>)
 80007d0:	f003 fd9c 	bl	800430c <iprintf>
			for (int j = 7; j >= 0; j--) {
 80007d4:	2307      	movs	r3, #7
 80007d6:	61fb      	str	r3, [r7, #28]
 80007d8:	e012      	b.n	8000800 <sendPixelData+0x140>
				uint32_t bit = (pixel[i].color.g >> j) & 0x01;
 80007da:	4a38      	ldr	r2, [pc, #224]	@ (80008bc <sendPixelData+0x1fc>)
 80007dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	4413      	add	r3, r2
 80007e2:	789b      	ldrb	r3, [r3, #2]
 80007e4:	461a      	mov	r2, r3
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	fa42 f303 	asr.w	r3, r2, r3
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	60fb      	str	r3, [r7, #12]
				printf("%d", bit);
 80007f2:	68f9      	ldr	r1, [r7, #12]
 80007f4:	4834      	ldr	r0, [pc, #208]	@ (80008c8 <sendPixelData+0x208>)
 80007f6:	f003 fd89 	bl	800430c <iprintf>
			for (int j = 7; j >= 0; j--) {
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	3b01      	subs	r3, #1
 80007fe:	61fb      	str	r3, [r7, #28]
 8000800:	69fb      	ldr	r3, [r7, #28]
 8000802:	2b00      	cmp	r3, #0
 8000804:	dae9      	bge.n	80007da <sendPixelData+0x11a>
			}
			printf("  B: ");
 8000806:	4832      	ldr	r0, [pc, #200]	@ (80008d0 <sendPixelData+0x210>)
 8000808:	f003 fd80 	bl	800430c <iprintf>
			for (int j = 7; j >= 0; j--) {
 800080c:	2307      	movs	r3, #7
 800080e:	61bb      	str	r3, [r7, #24]
 8000810:	e011      	b.n	8000836 <sendPixelData+0x176>
				uint32_t bit = (pixel[i].color.b >> j) & 0x01;
 8000812:	4a2a      	ldr	r2, [pc, #168]	@ (80008bc <sendPixelData+0x1fc>)
 8000814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000816:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800081a:	461a      	mov	r2, r3
 800081c:	69bb      	ldr	r3, [r7, #24]
 800081e:	fa42 f303 	asr.w	r3, r2, r3
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	613b      	str	r3, [r7, #16]
				printf("%d", bit);
 8000828:	6939      	ldr	r1, [r7, #16]
 800082a:	4827      	ldr	r0, [pc, #156]	@ (80008c8 <sendPixelData+0x208>)
 800082c:	f003 fd6e 	bl	800430c <iprintf>
			for (int j = 7; j >= 0; j--) {
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	3b01      	subs	r3, #1
 8000834:	61bb      	str	r3, [r7, #24]
 8000836:	69bb      	ldr	r3, [r7, #24]
 8000838:	2b00      	cmp	r3, #0
 800083a:	daea      	bge.n	8000812 <sendPixelData+0x152>
			}
			printf("\n");
 800083c:	200a      	movs	r0, #10
 800083e:	f003 fd77 	bl	8004330 <putchar>
		}
        for (int j = 23; j >= 0; j--) {
 8000842:	2317      	movs	r3, #23
 8000844:	617b      	str	r3, [r7, #20]
 8000846:	e016      	b.n	8000876 <sendPixelData+0x1b6>
        	uint32_t bit = (pixel[i].data >> j) & 0x01 ? NEOPIXEL_ONE : NEOPIXEL_ZERO;
 8000848:	4a1c      	ldr	r2, [pc, #112]	@ (80008bc <sendPixelData+0x1fc>)
 800084a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800084c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	fa22 f303 	lsr.w	r3, r2, r3
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <sendPixelData+0x1a2>
 800085e:	233a      	movs	r3, #58	@ 0x3a
 8000860:	e000      	b.n	8000864 <sendPixelData+0x1a4>
 8000862:	231d      	movs	r3, #29
 8000864:	607b      	str	r3, [r7, #4]

        	*pBuff++ = bit;
 8000866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000868:	1d1a      	adds	r2, r3, #4
 800086a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	601a      	str	r2, [r3, #0]
        for (int j = 23; j >= 0; j--) {
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	3b01      	subs	r3, #1
 8000874:	617b      	str	r3, [r7, #20]
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	2b00      	cmp	r3, #0
 800087a:	dae5      	bge.n	8000848 <sendPixelData+0x188>
    for (int i = 0; i < NUM_PIXELS; i++) {
 800087c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800087e:	3301      	adds	r3, #1
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
 8000882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000884:	2b77      	cmp	r3, #119	@ 0x77
 8000886:	f77f af7d 	ble.w	8000784 <sendPixelData+0xc4>
//        	dmaBuffer[i * 24 + j] = bit;
        }
    }

    dmaBuffer[DMA_BUFF_SIZE - 1] = 0;
 800088a:	4b0d      	ldr	r3, [pc, #52]	@ (80008c0 <sendPixelData+0x200>)
 800088c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000890:	461a      	mov	r2, r3
 8000892:	2300      	movs	r3, #0
 8000894:	f8c2 3d00 	str.w	r3, [r2, #3328]	@ 0xd00
  	PWM_Start_DMA(TIM2, LL_TIM_CHANNEL_CH1, dmaBuffer, DMA_BUFF_SIZE);
 8000898:	f640 3341 	movw	r3, #2881	@ 0xb41
 800089c:	4a08      	ldr	r2, [pc, #32]	@ (80008c0 <sendPixelData+0x200>)
 800089e:	2101      	movs	r1, #1
 80008a0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80008a4:	f000 f816 	bl	80008d4 <PWM_Start_DMA>

    LL_mDelay(10);
 80008a8:	200a      	movs	r0, #10
 80008aa:	f003 fb7f 	bl	8003fac <LL_mDelay>
}
 80008ae:	3730      	adds	r7, #48	@ 0x30
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20003fe4 	.word	0x20003fe4
 80008b8:	20003c24 	.word	0x20003c24
 80008bc:	20000d40 	.word	0x20000d40
 80008c0:	20000f20 	.word	0x20000f20
 80008c4:	08005d9c 	.word	0x08005d9c
 80008c8:	08005dac 	.word	0x08005dac
 80008cc:	08005db0 	.word	0x08005db0
 80008d0:	08005db8 	.word	0x08005db8

080008d4 <PWM_Start_DMA>:




void PWM_Start_DMA(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t *buffer, uint32_t size)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af02      	add	r7, sp, #8
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
 80008e0:	603b      	str	r3, [r7, #0]
    // 1. Configure DMA source and destination
    LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_5,
 80008e2:	687a      	ldr	r2, [r7, #4]
                           (uint32_t)buffer,                      // Memory Address (source)
                           (uint32_t)&TIMx->CCR1,                 // Peripheral Address (destination)
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	3334      	adds	r3, #52	@ 0x34
    LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_5,
 80008e8:	4619      	mov	r1, r3
 80008ea:	2310      	movs	r3, #16
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	460b      	mov	r3, r1
 80008f0:	2105      	movs	r1, #5
 80008f2:	480d      	ldr	r0, [pc, #52]	@ (8000928 <PWM_Start_DMA+0x54>)
 80008f4:	f7ff fd98 	bl	8000428 <LL_DMA_ConfigAddresses>
                           LL_DMA_DIRECTION_MEMORY_TO_PERIPH);    // Memory-to-Peripheral

    // 2. Set number of data items
    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_5, size);
 80008f8:	683a      	ldr	r2, [r7, #0]
 80008fa:	2105      	movs	r1, #5
 80008fc:	480a      	ldr	r0, [pc, #40]	@ (8000928 <PWM_Start_DMA+0x54>)
 80008fe:	f7ff fd71 	bl	80003e4 <LL_DMA_SetDataLength>

    // 4. Enable DMA Stream
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_5);
 8000902:	2105      	movs	r1, #5
 8000904:	4808      	ldr	r0, [pc, #32]	@ (8000928 <PWM_Start_DMA+0x54>)
 8000906:	f7ff fd31 	bl	800036c <LL_DMA_EnableChannel>

    // 5. Enable TIM2 DMA request for CC1
    LL_TIM_EnableDMAReq_CC1(TIMx);
 800090a:	68f8      	ldr	r0, [r7, #12]
 800090c:	f7ff fe05 	bl	800051a <LL_TIM_EnableDMAReq_CC1>

    // 6. Enable TIM2 Channel 1 (PWM mode must already be configured)
    LL_TIM_CC_EnableChannel(TIMx, Channel);
 8000910:	68b9      	ldr	r1, [r7, #8]
 8000912:	68f8      	ldr	r0, [r7, #12]
 8000914:	f7ff fde0 	bl	80004d8 <LL_TIM_CC_EnableChannel>

    // 7. Start Timer
    LL_TIM_EnableCounter(TIMx);
 8000918:	68f8      	ldr	r0, [r7, #12]
 800091a:	f7ff fdbf 	bl	800049c <LL_TIM_EnableCounter>
}
 800091e:	bf00      	nop
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40020000 	.word	0x40020000

0800092c <LL_TIM_PWM_PulseFinishedCallback>:

void LL_TIM_PWM_PulseFinishedCallback(TIM_TypeDef *TIMx)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	LL_TIM_DisableDMAReq_CC1(TIMx);
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff fdff 	bl	8000538 <LL_TIM_DisableDMAReq_CC1>
	LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_5);
 800093a:	2105      	movs	r1, #5
 800093c:	4806      	ldr	r0, [pc, #24]	@ (8000958 <LL_TIM_PWM_PulseFinishedCallback+0x2c>)
 800093e:	f7ff fd33 	bl	80003a8 <LL_DMA_DisableChannel>

	LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH1);
 8000942:	2101      	movs	r1, #1
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f7ff fdd7 	bl	80004f8 <LL_TIM_CC_DisableChannel>
	LL_TIM_DisableCounter(TIMx);
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff fdb5 	bl	80004ba <LL_TIM_DisableCounter>
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40020000 	.word	0x40020000

0800095c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f003 0307 	and.w	r3, r3, #7
 800096a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800096c:	4b0c      	ldr	r3, [pc, #48]	@ (80009a0 <__NVIC_SetPriorityGrouping+0x44>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000972:	68ba      	ldr	r2, [r7, #8]
 8000974:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000978:	4013      	ands	r3, r2
 800097a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000984:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000988:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800098c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800098e:	4a04      	ldr	r2, [pc, #16]	@ (80009a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	60d3      	str	r3, [r2, #12]
}
 8000994:	bf00      	nop
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a8:	4b04      	ldr	r3, [pc, #16]	@ (80009bc <__NVIC_GetPriorityGrouping+0x18>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	0a1b      	lsrs	r3, r3, #8
 80009ae:	f003 0307 	and.w	r3, r3, #7
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	db0b      	blt.n	80009ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	f003 021f 	and.w	r2, r3, #31
 80009d8:	4906      	ldr	r1, [pc, #24]	@ (80009f4 <__NVIC_EnableIRQ+0x34>)
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	095b      	lsrs	r3, r3, #5
 80009e0:	2001      	movs	r0, #1
 80009e2:	fa00 f202 	lsl.w	r2, r0, r2
 80009e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	e000e100 	.word	0xe000e100

080009f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	6039      	str	r1, [r7, #0]
 8000a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	db0a      	blt.n	8000a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	490c      	ldr	r1, [pc, #48]	@ (8000a44 <__NVIC_SetPriority+0x4c>)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	0112      	lsls	r2, r2, #4
 8000a18:	b2d2      	uxtb	r2, r2
 8000a1a:	440b      	add	r3, r1
 8000a1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a20:	e00a      	b.n	8000a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4908      	ldr	r1, [pc, #32]	@ (8000a48 <__NVIC_SetPriority+0x50>)
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	f003 030f 	and.w	r3, r3, #15
 8000a2e:	3b04      	subs	r3, #4
 8000a30:	0112      	lsls	r2, r2, #4
 8000a32:	b2d2      	uxtb	r2, r2
 8000a34:	440b      	add	r3, r1
 8000a36:	761a      	strb	r2, [r3, #24]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	e000e100 	.word	0xe000e100
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b089      	sub	sp, #36	@ 0x24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	f1c3 0307 	rsb	r3, r3, #7
 8000a66:	2b04      	cmp	r3, #4
 8000a68:	bf28      	it	cs
 8000a6a:	2304      	movcs	r3, #4
 8000a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3304      	adds	r3, #4
 8000a72:	2b06      	cmp	r3, #6
 8000a74:	d902      	bls.n	8000a7c <NVIC_EncodePriority+0x30>
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3b03      	subs	r3, #3
 8000a7a:	e000      	b.n	8000a7e <NVIC_EncodePriority+0x32>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a80:	f04f 32ff 	mov.w	r2, #4294967295
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43da      	mvns	r2, r3
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	401a      	ands	r2, r3
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a94:	f04f 31ff 	mov.w	r1, #4294967295
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9e:	43d9      	mvns	r1, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa4:	4313      	orrs	r3, r2
         );
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3724      	adds	r7, #36	@ 0x24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr

08000ab0 <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b089      	sub	sp, #36	@ 0x24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	332c      	adds	r3, #44	@ 0x2c
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8000ac8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000acc:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ace:	69ba      	ldr	r2, [r7, #24]
 8000ad0:	fa92 f2a2 	rbit	r2, r2
 8000ad4:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ad6:	697a      	ldr	r2, [r7, #20]
 8000ad8:	fab2 f282 	clz	r2, r2
 8000adc:	b2d2      	uxtb	r2, r2
 8000ade:	40d3      	lsrs	r3, r2
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	440b      	add	r3, r1
 8000ae4:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	f003 031f 	and.w	r3, r3, #31
 8000af0:	211f      	movs	r1, #31
 8000af2:	fa01 f303 	lsl.w	r3, r1, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	401a      	ands	r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f003 011f 	and.w	r1, r3, #31
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	f003 031f 	and.w	r3, r3, #31
 8000b06:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0a:	431a      	orrs	r2, r3
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000b10:	bf00      	nop
 8000b12:	3724      	adds	r7, #36	@ 0x24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr

08000b1a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b08d      	sub	sp, #52	@ 0x34
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	60f8      	str	r0, [r7, #12]
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	330c      	adds	r3, #12
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	fa92 f2a2 	rbit	r2, r2
 8000b3e:	617a      	str	r2, [r7, #20]
  return result;
 8000b40:	697a      	ldr	r2, [r7, #20]
 8000b42:	fab2 f282 	clz	r2, r2
 8000b46:	b2d2      	uxtb	r2, r2
 8000b48:	40d3      	lsrs	r3, r2
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	440b      	add	r3, r1
 8000b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  MODIFY_REG(*preg,
 8000b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8000b5a:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8000b5e:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b60:	6a39      	ldr	r1, [r7, #32]
 8000b62:	fa91 f1a1 	rbit	r1, r1
 8000b66:	61f9      	str	r1, [r7, #28]
  return result;
 8000b68:	69f9      	ldr	r1, [r7, #28]
 8000b6a:	fab1 f181 	clz	r1, r1
 8000b6e:	b2c9      	uxtb	r1, r1
 8000b70:	40cb      	lsrs	r3, r1
 8000b72:	2107      	movs	r1, #7
 8000b74:	fa01 f303 	lsl.w	r3, r1, r3
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8000b82:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8000b86:	62b9      	str	r1, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000b8a:	fa91 f1a1 	rbit	r1, r1
 8000b8e:	6279      	str	r1, [r7, #36]	@ 0x24
  return result;
 8000b90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000b92:	fab1 f181 	clz	r1, r1
 8000b96:	b2c9      	uxtb	r1, r1
 8000b98:	40cb      	lsrs	r3, r1
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba0:	431a      	orrs	r2, r3
 8000ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ba4:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8000ba6:	bf00      	nop
 8000ba8:	3734      	adds	r7, #52	@ 0x34
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <LL_DMA_SetDataTransferDirection>:
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	4a0c      	ldr	r2, [pc, #48]	@ (8000bf4 <LL_DMA_SetDataTransferDirection+0x44>)
 8000bc2:	5cd3      	ldrb	r3, [r2, r3]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	4413      	add	r3, r2
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000bd0:	f023 0310 	bic.w	r3, r3, #16
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	3a01      	subs	r2, #1
 8000bd8:	4906      	ldr	r1, [pc, #24]	@ (8000bf4 <LL_DMA_SetDataTransferDirection+0x44>)
 8000bda:	5c8a      	ldrb	r2, [r1, r2]
 8000bdc:	4611      	mov	r1, r2
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	440a      	add	r2, r1
 8000be2:	4611      	mov	r1, r2
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	600b      	str	r3, [r1, #0]
}
 8000bea:	bf00      	nop
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	080068c8 	.word	0x080068c8

08000bf8 <LL_DMA_SetMode>:
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	4a0b      	ldr	r2, [pc, #44]	@ (8000c38 <LL_DMA_SetMode+0x40>)
 8000c0a:	5cd3      	ldrb	r3, [r2, r3]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	4413      	add	r3, r2
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f023 0220 	bic.w	r2, r3, #32
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	4906      	ldr	r1, [pc, #24]	@ (8000c38 <LL_DMA_SetMode+0x40>)
 8000c1e:	5ccb      	ldrb	r3, [r1, r3]
 8000c20:	4619      	mov	r1, r3
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	440b      	add	r3, r1
 8000c26:	4619      	mov	r1, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	600b      	str	r3, [r1, #0]
}
 8000c2e:	bf00      	nop
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr
 8000c38:	080068c8 	.word	0x080068c8

08000c3c <LL_DMA_SetPeriphIncMode>:
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c7c <LL_DMA_SetPeriphIncMode+0x40>)
 8000c4e:	5cd3      	ldrb	r3, [r2, r3]
 8000c50:	461a      	mov	r2, r3
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	4413      	add	r3, r2
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	4906      	ldr	r1, [pc, #24]	@ (8000c7c <LL_DMA_SetPeriphIncMode+0x40>)
 8000c62:	5ccb      	ldrb	r3, [r1, r3]
 8000c64:	4619      	mov	r1, r3
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	440b      	add	r3, r1
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	600b      	str	r3, [r1, #0]
}
 8000c72:	bf00      	nop
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr
 8000c7c:	080068c8 	.word	0x080068c8

08000c80 <LL_DMA_SetMemoryIncMode>:
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc0 <LL_DMA_SetMemoryIncMode+0x40>)
 8000c92:	5cd3      	ldrb	r3, [r2, r3]
 8000c94:	461a      	mov	r2, r3
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	4413      	add	r3, r2
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	4906      	ldr	r1, [pc, #24]	@ (8000cc0 <LL_DMA_SetMemoryIncMode+0x40>)
 8000ca6:	5ccb      	ldrb	r3, [r1, r3]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	440b      	add	r3, r1
 8000cae:	4619      	mov	r1, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	600b      	str	r3, [r1, #0]
}
 8000cb6:	bf00      	nop
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	080068c8 	.word	0x080068c8

08000cc4 <LL_DMA_SetPeriphSize>:
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	4a0b      	ldr	r2, [pc, #44]	@ (8000d04 <LL_DMA_SetPeriphSize+0x40>)
 8000cd6:	5cd3      	ldrb	r3, [r2, r3]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	4413      	add	r3, r2
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	4906      	ldr	r1, [pc, #24]	@ (8000d04 <LL_DMA_SetPeriphSize+0x40>)
 8000cea:	5ccb      	ldrb	r3, [r1, r3]
 8000cec:	4619      	mov	r1, r3
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	440b      	add	r3, r1
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	600b      	str	r3, [r1, #0]
}
 8000cfa:	bf00      	nop
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	080068c8 	.word	0x080068c8

08000d08 <LL_DMA_SetMemorySize>:
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	4a0b      	ldr	r2, [pc, #44]	@ (8000d48 <LL_DMA_SetMemorySize+0x40>)
 8000d1a:	5cd3      	ldrb	r3, [r2, r3]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	4413      	add	r3, r2
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	4906      	ldr	r1, [pc, #24]	@ (8000d48 <LL_DMA_SetMemorySize+0x40>)
 8000d2e:	5ccb      	ldrb	r3, [r1, r3]
 8000d30:	4619      	mov	r1, r3
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	440b      	add	r3, r1
 8000d36:	4619      	mov	r1, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	600b      	str	r3, [r1, #0]
}
 8000d3e:	bf00      	nop
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	080068c8 	.word	0x080068c8

08000d4c <LL_DMA_SetChannelPriorityLevel>:
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	4a0b      	ldr	r2, [pc, #44]	@ (8000d8c <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000d5e:	5cd3      	ldrb	r3, [r2, r3]
 8000d60:	461a      	mov	r2, r3
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	4413      	add	r3, r2
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	4906      	ldr	r1, [pc, #24]	@ (8000d8c <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000d72:	5ccb      	ldrb	r3, [r1, r3]
 8000d74:	4619      	mov	r1, r3
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	440b      	add	r3, r1
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	600b      	str	r3, [r1, #0]
}
 8000d82:	bf00      	nop
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	080068c8 	.word	0x080068c8

08000d90 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	3b01      	subs	r3, #1
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc8 <LL_DMA_EnableIT_TC+0x38>)
 8000da0:	5cd3      	ldrb	r3, [r2, r3]
 8000da2:	461a      	mov	r2, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4413      	add	r3, r2
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	683a      	ldr	r2, [r7, #0]
 8000dac:	3a01      	subs	r2, #1
 8000dae:	4906      	ldr	r1, [pc, #24]	@ (8000dc8 <LL_DMA_EnableIT_TC+0x38>)
 8000db0:	5c8a      	ldrb	r2, [r1, r2]
 8000db2:	4611      	mov	r1, r2
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	440a      	add	r2, r1
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	6013      	str	r3, [r2, #0]
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr
 8000dc8:	080068c8 	.word	0x080068c8

08000dcc <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000dd0:	4b04      	ldr	r3, [pc, #16]	@ (8000de4 <LL_RCC_HSE_Enable+0x18>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a03      	ldr	r2, [pc, #12]	@ (8000de4 <LL_RCC_HSE_Enable+0x18>)
 8000dd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dda:	6013      	str	r3, [r2, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr
 8000de4:	40021000 	.word	0x40021000

08000de8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000dec:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <LL_RCC_HSE_IsReady+0x20>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000df4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000df8:	bf0c      	ite	eq
 8000dfa:	2301      	moveq	r3, #1
 8000dfc:	2300      	movne	r3, #0
 8000dfe:	b2db      	uxtb	r3, r3
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	40021000 	.word	0x40021000

08000e0c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000e14:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <LL_RCC_SetSysClkSource+0x24>)
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f023 0203 	bic.w	r2, r3, #3
 8000e1c:	4904      	ldr	r1, [pc, #16]	@ (8000e30 <LL_RCC_SetSysClkSource+0x24>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	604b      	str	r3, [r1, #4]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	40021000 	.word	0x40021000

08000e34 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000e38:	4b03      	ldr	r3, [pc, #12]	@ (8000e48 <LL_RCC_GetSysClkSource+0x14>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 030c 	and.w	r3, r3, #12
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr
 8000e48:	40021000 	.word	0x40021000

08000e4c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000e54:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <LL_RCC_SetAHBPrescaler+0x24>)
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e5c:	4904      	ldr	r1, [pc, #16]	@ (8000e70 <LL_RCC_SetAHBPrescaler+0x24>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	604b      	str	r3, [r1, #4]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	40021000 	.word	0x40021000

08000e74 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000e7c:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000e84:	4904      	ldr	r1, [pc, #16]	@ (8000e98 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	604b      	str	r3, [r1, #4]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	40021000 	.word	0x40021000

08000e9c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000ea4:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000eac:	4904      	ldr	r1, [pc, #16]	@ (8000ec0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	604b      	str	r3, [r1, #4]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8000ecc:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <LL_RCC_SetADCClockSource+0x24>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000ed4:	4904      	ldr	r1, [pc, #16]	@ (8000ee8 <LL_RCC_SetADCClockSource+0x24>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	604b      	str	r3, [r1, #4]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	40021000 	.word	0x40021000

08000eec <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000ef0:	4b04      	ldr	r3, [pc, #16]	@ (8000f04 <LL_RCC_PLL_Enable+0x18>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a03      	ldr	r2, [pc, #12]	@ (8000f04 <LL_RCC_PLL_Enable+0x18>)
 8000ef6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000efa:	6013      	str	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	40021000 	.word	0x40021000

08000f08 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000f0c:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <LL_RCC_PLL_IsReady+0x20>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000f18:	bf0c      	ite	eq
 8000f1a:	2301      	moveq	r3, #1
 8000f1c:	2300      	movne	r3, #0
 8000f1e:	b2db      	uxtb	r3, r3
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr
 8000f28:	40021000 	.word	0x40021000

08000f2c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8000f36:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <LL_RCC_PLL_ConfigDomain_SYS+0x50>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	430b      	orrs	r3, r1
 8000f48:	490c      	ldr	r1, [pc, #48]	@ (8000f7c <LL_RCC_PLL_ConfigDomain_SYS+0x50>)
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	604b      	str	r3, [r1, #4]
             (Source & (RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE)) | PLLMul);
#if defined(RCC_CFGR2_PREDIV1)
#if defined(RCC_CFGR2_PREDIV1SRC)
  MODIFY_REG(RCC->CFGR2, (RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC),
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f7c <LL_RCC_PLL_ConfigDomain_SYS+0x50>)
 8000f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f56:	f023 030f 	bic.w	r3, r3, #15
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	f002 010f 	and.w	r1, r2, #15
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	0912      	lsrs	r2, r2, #4
 8000f64:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	4904      	ldr	r1, [pc, #16]	@ (8000f7c <LL_RCC_PLL_ConfigDomain_SYS+0x50>)
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	62cb      	str	r3, [r1, #44]	@ 0x2c
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40021000 	.word	0x40021000

08000f80 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000f88:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f8a:	695a      	ldr	r2, [r3, #20]
 8000f8c:	4907      	ldr	r1, [pc, #28]	@ (8000fac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000f94:	4b05      	ldr	r3, [pc, #20]	@ (8000fac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f96:	695a      	ldr	r2, [r3, #20]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	40021000 	.word	0x40021000

08000fb0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000fb8:	4b08      	ldr	r3, [pc, #32]	@ (8000fdc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fba:	69da      	ldr	r2, [r3, #28]
 8000fbc:	4907      	ldr	r1, [pc, #28]	@ (8000fdc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000fc4:	4b05      	ldr	r3, [pc, #20]	@ (8000fdc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fc6:	69da      	ldr	r2, [r3, #28]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fce:	68fb      	ldr	r3, [r7, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40021000 	.word	0x40021000

08000fe0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000fe8:	4b08      	ldr	r3, [pc, #32]	@ (800100c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000fea:	699a      	ldr	r2, [r3, #24]
 8000fec:	4907      	ldr	r1, [pc, #28]	@ (800100c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ff4:	4b05      	ldr	r3, [pc, #20]	@ (800100c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ff6:	699a      	ldr	r2, [r3, #24]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40021000 	.word	0x40021000

08001010 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001018:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <LL_FLASH_SetLatency+0x24>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f023 0207 	bic.w	r2, r3, #7
 8001020:	4904      	ldr	r1, [pc, #16]	@ (8001034 <LL_FLASH_SetLatency+0x24>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4313      	orrs	r3, r2
 8001026:	600b      	str	r3, [r1, #0]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40022000 	.word	0x40022000

08001038 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800103c:	4b03      	ldr	r3, [pc, #12]	@ (800104c <LL_FLASH_GetLatency+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0307 	and.w	r3, r3, #7
}
 8001044:	4618      	mov	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr
 800104c:	40022000 	.word	0x40022000

08001050 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001058:	4b05      	ldr	r3, [pc, #20]	@ (8001070 <LL_EXTI_EnableIT_0_31+0x20>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4904      	ldr	r1, [pc, #16]	@ (8001070 <LL_EXTI_EnableIT_0_31+0x20>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4313      	orrs	r3, r2
 8001062:	600b      	str	r3, [r1, #0]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40010400 	.word	0x40010400

08001074 <LL_TIM_DisableARRPreload>:
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	601a      	str	r2, [r3, #0]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
	...

08001094 <LL_TIM_OC_DisableFast>:
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d01c      	beq.n	80010de <LL_TIM_OC_DisableFast+0x4a>
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	d017      	beq.n	80010da <LL_TIM_OC_DisableFast+0x46>
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	2b10      	cmp	r3, #16
 80010ae:	d012      	beq.n	80010d6 <LL_TIM_OC_DisableFast+0x42>
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	2b40      	cmp	r3, #64	@ 0x40
 80010b4:	d00d      	beq.n	80010d2 <LL_TIM_OC_DisableFast+0x3e>
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010bc:	d007      	beq.n	80010ce <LL_TIM_OC_DisableFast+0x3a>
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010c4:	d101      	bne.n	80010ca <LL_TIM_OC_DisableFast+0x36>
 80010c6:	2305      	movs	r3, #5
 80010c8:	e00a      	b.n	80010e0 <LL_TIM_OC_DisableFast+0x4c>
 80010ca:	2306      	movs	r3, #6
 80010cc:	e008      	b.n	80010e0 <LL_TIM_OC_DisableFast+0x4c>
 80010ce:	2304      	movs	r3, #4
 80010d0:	e006      	b.n	80010e0 <LL_TIM_OC_DisableFast+0x4c>
 80010d2:	2303      	movs	r3, #3
 80010d4:	e004      	b.n	80010e0 <LL_TIM_OC_DisableFast+0x4c>
 80010d6:	2302      	movs	r3, #2
 80010d8:	e002      	b.n	80010e0 <LL_TIM_OC_DisableFast+0x4c>
 80010da:	2301      	movs	r3, #1
 80010dc:	e000      	b.n	80010e0 <LL_TIM_OC_DisableFast+0x4c>
 80010de:	2300      	movs	r3, #0
 80010e0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3318      	adds	r3, #24
 80010e6:	4619      	mov	r1, r3
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001114 <LL_TIM_OC_DisableFast+0x80>)
 80010ec:	5cd3      	ldrb	r3, [r2, r3]
 80010ee:	440b      	add	r3, r1
 80010f0:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	4907      	ldr	r1, [pc, #28]	@ (8001118 <LL_TIM_OC_DisableFast+0x84>)
 80010fa:	5ccb      	ldrb	r3, [r1, r3]
 80010fc:	4619      	mov	r1, r3
 80010fe:	2304      	movs	r3, #4
 8001100:	408b      	lsls	r3, r1
 8001102:	43db      	mvns	r3, r3
 8001104:	401a      	ands	r2, r3
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	601a      	str	r2, [r3, #0]
}
 800110a:	bf00      	nop
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	080068d0 	.word	0x080068d0
 8001118:	080068d8 	.word	0x080068d8

0800111c <LL_TIM_OC_EnablePreload>:
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d01c      	beq.n	8001166 <LL_TIM_OC_EnablePreload+0x4a>
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	2b04      	cmp	r3, #4
 8001130:	d017      	beq.n	8001162 <LL_TIM_OC_EnablePreload+0x46>
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	2b10      	cmp	r3, #16
 8001136:	d012      	beq.n	800115e <LL_TIM_OC_EnablePreload+0x42>
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	2b40      	cmp	r3, #64	@ 0x40
 800113c:	d00d      	beq.n	800115a <LL_TIM_OC_EnablePreload+0x3e>
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001144:	d007      	beq.n	8001156 <LL_TIM_OC_EnablePreload+0x3a>
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800114c:	d101      	bne.n	8001152 <LL_TIM_OC_EnablePreload+0x36>
 800114e:	2305      	movs	r3, #5
 8001150:	e00a      	b.n	8001168 <LL_TIM_OC_EnablePreload+0x4c>
 8001152:	2306      	movs	r3, #6
 8001154:	e008      	b.n	8001168 <LL_TIM_OC_EnablePreload+0x4c>
 8001156:	2304      	movs	r3, #4
 8001158:	e006      	b.n	8001168 <LL_TIM_OC_EnablePreload+0x4c>
 800115a:	2303      	movs	r3, #3
 800115c:	e004      	b.n	8001168 <LL_TIM_OC_EnablePreload+0x4c>
 800115e:	2302      	movs	r3, #2
 8001160:	e002      	b.n	8001168 <LL_TIM_OC_EnablePreload+0x4c>
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <LL_TIM_OC_EnablePreload+0x4c>
 8001166:	2300      	movs	r3, #0
 8001168:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3318      	adds	r3, #24
 800116e:	4619      	mov	r1, r3
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	4a0a      	ldr	r2, [pc, #40]	@ (800119c <LL_TIM_OC_EnablePreload+0x80>)
 8001174:	5cd3      	ldrb	r3, [r2, r3]
 8001176:	440b      	add	r3, r1
 8001178:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	4907      	ldr	r1, [pc, #28]	@ (80011a0 <LL_TIM_OC_EnablePreload+0x84>)
 8001182:	5ccb      	ldrb	r3, [r1, r3]
 8001184:	4619      	mov	r1, r3
 8001186:	2308      	movs	r3, #8
 8001188:	408b      	lsls	r3, r1
 800118a:	431a      	orrs	r2, r3
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	601a      	str	r2, [r3, #0]
}
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	080068d0 	.word	0x080068d0
 80011a0:	080068d8 	.word	0x080068d8

080011a4 <LL_TIM_SetClockSource>:
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80011b6:	f023 0307 	bic.w	r3, r3, #7
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	431a      	orrs	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	609a      	str	r2, [r3, #8]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <LL_TIM_SetTriggerOutput>:
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	431a      	orrs	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	605a      	str	r2, [r3, #4]
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr

080011f0 <LL_TIM_DisableMasterSlaveMode>:
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	609a      	str	r2, [r3, #8]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr

0800120e <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	60da      	str	r2, [r3, #12]
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr

0800122c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	615a      	str	r2, [r3, #20]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr

08001256 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001266:	2b40      	cmp	r3, #64	@ 0x40
 8001268:	bf0c      	ite	eq
 800126a:	2301      	moveq	r3, #1
 800126c:	2300      	movne	r3, #0
 800126e:	b2db      	uxtb	r3, r3
}
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr

0800127a <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800128a:	2b80      	cmp	r3, #128	@ 0x80
 800128c:	bf0c      	ite	eq
 800128e:	2301      	moveq	r3, #1
 8001290:	2300      	movne	r3, #0
 8001292:	b2db      	uxtb	r3, r3
}
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr

0800129e <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800129e:	b480      	push	{r7}
 80012a0:	b089      	sub	sp, #36	@ 0x24
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	330c      	adds	r3, #12
 80012aa:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	e853 3f00 	ldrex	r3, [r3]
 80012b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	f043 0320 	orr.w	r3, r3, #32
 80012ba:	61fb      	str	r3, [r7, #28]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	330c      	adds	r3, #12
 80012c0:	69fa      	ldr	r2, [r7, #28]
 80012c2:	61ba      	str	r2, [r7, #24]
 80012c4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80012c6:	6979      	ldr	r1, [r7, #20]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	e841 2300 	strex	r3, r2, [r1]
 80012ce:	613b      	str	r3, [r7, #16]
   return(result);
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1e7      	bne.n	80012a6 <LL_USART_EnableIT_RXNE+0x8>
}
 80012d6:	bf00      	nop
 80012d8:	bf00      	nop
 80012da:	3724      	adds	r7, #36	@ 0x24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr

080012e2 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	460b      	mov	r3, r1
 80012ec:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80012ee:	78fa      	ldrb	r2, [r7, #3]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	605a      	str	r2, [r3, #4]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr

080012fe <LL_GPIO_SetPinMode>:
{
 80012fe:	b490      	push	{r4, r7}
 8001300:	b088      	sub	sp, #32
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	461a      	mov	r2, r3
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	0e1b      	lsrs	r3, r3, #24
 8001312:	4413      	add	r3, r2
 8001314:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001316:	6822      	ldr	r2, [r4, #0]
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa93 f3a3 	rbit	r3, r3
 8001322:	613b      	str	r3, [r7, #16]
  return result;
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	fab3 f383 	clz	r3, r3
 800132a:	b2db      	uxtb	r3, r3
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	210f      	movs	r1, #15
 8001330:	fa01 f303 	lsl.w	r3, r1, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	401a      	ands	r2, r3
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	fa93 f3a3 	rbit	r3, r3
 8001342:	61bb      	str	r3, [r7, #24]
  return result;
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	fab3 f383 	clz	r3, r3
 800134a:	b2db      	uxtb	r3, r3
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	fa01 f303 	lsl.w	r3, r1, r3
 8001354:	4313      	orrs	r3, r2
 8001356:	6023      	str	r3, [r4, #0]
}
 8001358:	bf00      	nop
 800135a:	3720      	adds	r7, #32
 800135c:	46bd      	mov	sp, r7
 800135e:	bc90      	pop	{r4, r7}
 8001360:	4770      	bx	lr

08001362 <LL_GPIO_SetOutputPin>:
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	0a1b      	lsrs	r3, r3, #8
 8001370:	b29a      	uxth	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	611a      	str	r2, [r3, #16]
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <LL_GPIO_ResetOutputPin>:
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	b29a      	uxth	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	615a      	str	r2, [r3, #20]
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
	...

080013a0 <LL_GPIO_AF_EnableRemap_USART2>:
  * @rmtoll MAPR          USART2_REMAP           LL_GPIO_AF_EnableRemap_USART2
  * @note  ENABLE: Remap     (CTS/PD3, RTS/PD4, TX/PD5, RX/PD6, CK/PD7)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_USART2(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_USART2_REMAP | AFIO_MAPR_SWJ_CFG);
 80013a4:	4b05      	ldr	r3, [pc, #20]	@ (80013bc <LL_GPIO_AF_EnableRemap_USART2+0x1c>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	4a04      	ldr	r2, [pc, #16]	@ (80013bc <LL_GPIO_AF_EnableRemap_USART2+0x1c>)
 80013aa:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80013ae:	f043 0308 	orr.w	r3, r3, #8
 80013b2:	6053      	str	r3, [r2, #4]
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	40010000 	.word	0x40010000

080013c0 <LL_GPIO_AF_RemapPartial1_TIM2>:
  * @rmtoll MAPR          TIM2_REMAP           LL_GPIO_AF_RemapPartial1_TIM2
  * @note  PARTIAL_1: Partial remap (CH1/ETR/PA15, CH2/PB3, CH3/PA2,  CH4/PA3)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_RemapPartial1_TIM2(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM2_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1 | AFIO_MAPR_SWJ_CFG));
 80013c4:	4b07      	ldr	r3, [pc, #28]	@ (80013e4 <LL_GPIO_AF_RemapPartial1_TIM2+0x24>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80013d0:	4a04      	ldr	r2, [pc, #16]	@ (80013e4 <LL_GPIO_AF_RemapPartial1_TIM2+0x24>)
 80013d2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80013d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013da:	6053      	str	r3, [r2, #4]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	40010000 	.word	0x40010000

080013e8 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 80013ec:	4b05      	ldr	r3, [pc, #20]	@ (8001404 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013f4:	4a03      	ldr	r2, [pc, #12]	@ (8001404 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 80013f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013fa:	6053      	str	r3, [r2, #4]
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	40010000 	.word	0x40010000

08001408 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8001412:	4a13      	ldr	r2, [pc, #76]	@ (8001460 <LL_GPIO_AF_SetEXTISource+0x58>)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	b2db      	uxtb	r3, r3
 8001418:	3302      	adds	r3, #2
 800141a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	0c1b      	lsrs	r3, r3, #16
 8001422:	43db      	mvns	r3, r3
 8001424:	ea02 0103 	and.w	r1, r2, r3
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	0c1b      	lsrs	r3, r3, #16
 800142c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	fa93 f3a3 	rbit	r3, r3
 8001434:	60bb      	str	r3, [r7, #8]
  return result;
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	fab3 f383 	clz	r3, r3
 800143c:	b2db      	uxtb	r3, r3
 800143e:	461a      	mov	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	fa03 f202 	lsl.w	r2, r3, r2
 8001446:	4806      	ldr	r0, [pc, #24]	@ (8001460 <LL_GPIO_AF_SetEXTISource+0x58>)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	430a      	orrs	r2, r1
 800144e:	3302      	adds	r3, #2
 8001450:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40010000 	.word	0x40010000

08001464 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Погледни чата с г-н Стефанов, _write e блокираща функция

int _write(int file, char *ptr, int len) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	e011      	b.n	800149a <_write+0x36>
        while (!LL_USART_IsActiveFlag_TXE(USART2));  // Wait until TX buffer is empty
 8001476:	bf00      	nop
 8001478:	4810      	ldr	r0, [pc, #64]	@ (80014bc <_write+0x58>)
 800147a:	f7ff fefe 	bl	800127a <LL_USART_IsActiveFlag_TXE>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0f9      	beq.n	8001478 <_write+0x14>
        LL_USART_TransmitData8(USART2, ptr[i]);      // Send byte
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	4413      	add	r3, r2
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	4619      	mov	r1, r3
 800148e:	480b      	ldr	r0, [pc, #44]	@ (80014bc <_write+0x58>)
 8001490:	f7ff ff27 	bl	80012e2 <LL_USART_TransmitData8>
    for (int i = 0; i < len; i++) {
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	3301      	adds	r3, #1
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	429a      	cmp	r2, r3
 80014a0:	dbe9      	blt.n	8001476 <_write+0x12>
    }

    while (!LL_USART_IsActiveFlag_TC(USART2));  // Wait for last transmission to complete
 80014a2:	bf00      	nop
 80014a4:	4805      	ldr	r0, [pc, #20]	@ (80014bc <_write+0x58>)
 80014a6:	f7ff fed6 	bl	8001256 <LL_USART_IsActiveFlag_TC>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0f9      	beq.n	80014a4 <_write+0x40>
    return len;
 80014b0:	687b      	ldr	r3, [r7, #4]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40004400 	.word	0x40004400

080014c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 80014c6:	2001      	movs	r0, #1
 80014c8:	f7ff fd8a 	bl	8000fe0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80014cc:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80014d0:	f7ff fd6e 	bl	8000fb0 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d4:	2003      	movs	r0, #3
 80014d6:	f7ff fa41 	bl	800095c <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80014da:	f7ff fa63 	bl	80009a4 <__NVIC_GetPriorityGrouping>
 80014de:	4603      	mov	r3, r0
 80014e0:	2200      	movs	r2, #0
 80014e2:	210f      	movs	r1, #15
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fab1 	bl	8000a4c <NVIC_EncodePriority>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4619      	mov	r1, r3
 80014ee:	f04f 30ff 	mov.w	r0, #4294967295
 80014f2:	f7ff fa81 	bl	80009f8 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 80014f6:	f7ff ff77 	bl	80013e8 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014fa:	f000 f865 	bl	80015c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014fe:	f000 fb0d 	bl	8001b1c <MX_GPIO_Init>
  MX_DMA_Init();
 8001502:	f000 faf3 	bl	8001aec <MX_DMA_Init>
  MX_ADC1_Init();
 8001506:	f000 f8a1 	bl	800164c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800150a:	f000 f9c7 	bl	800189c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800150e:	f000 fa2d 	bl	800196c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001512:	f000 fa83 	bl	8001a1c <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8001516:	f000 f997 	bl	8001848 <MX_TIM6_Init>
  MX_TIM2_Init();
 800151a:	f000 f8f9 	bl	8001710 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Enable UART Interupts
  LL_USART_EnableIT_RXNE(USART1);
 800151e:	4823      	ldr	r0, [pc, #140]	@ (80015ac <main+0xec>)
 8001520:	f7ff febd 	bl	800129e <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART3);
 8001524:	4822      	ldr	r0, [pc, #136]	@ (80015b0 <main+0xf0>)
 8001526:	f7ff feba 	bl	800129e <LL_USART_EnableIT_RXNE>

  // Enable EXTI Fault GPIO Interrupts
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_12);
 800152a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800152e:	f7ff fd8f 	bl	8001050 <LL_EXTI_EnableIT_0_31>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_13);
 8001532:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001536:	f7ff fd8b 	bl	8001050 <LL_EXTI_EnableIT_0_31>

  // Enable DMA Interrupt
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_5);
 800153a:	2105      	movs	r1, #5
 800153c:	481d      	ldr	r0, [pc, #116]	@ (80015b4 <main+0xf4>)
 800153e:	f7ff fc27 	bl	8000d90 <LL_DMA_EnableIT_TC>


  SignalAnalyzer_Init();
 8001542:	f001 fb1d 	bl	8002b80 <SignalAnalyzer_Init>

  // Reset all Muxes
  LL_GPIO_SetOutputPin(RST_GPIO, RST_PIN);
 8001546:	491c      	ldr	r1, [pc, #112]	@ (80015b8 <main+0xf8>)
 8001548:	481c      	ldr	r0, [pc, #112]	@ (80015bc <main+0xfc>)
 800154a:	f7ff ff0a 	bl	8001362 <LL_GPIO_SetOutputPin>
  LL_mDelay(20);
 800154e:	2014      	movs	r0, #20
 8001550:	f002 fd2c 	bl	8003fac <LL_mDelay>
  LL_GPIO_ResetOutputPin(RST_GPIO, RST_PIN);
 8001554:	4918      	ldr	r1, [pc, #96]	@ (80015b8 <main+0xf8>)
 8001556:	4819      	ldr	r0, [pc, #100]	@ (80015bc <main+0xfc>)
 8001558:	f7ff ff12 	bl	8001380 <LL_GPIO_ResetOutputPin>
  LL_mDelay(20);
 800155c:	2014      	movs	r0, #20
 800155e:	f002 fd25 	bl	8003fac <LL_mDelay>

  // Enable Protection
  LL_GPIO_SetOutputPin(PROTECTION_GPIO, PROTECTION_PIN);
 8001562:	4917      	ldr	r1, [pc, #92]	@ (80015c0 <main+0x100>)
 8001564:	4817      	ldr	r0, [pc, #92]	@ (80015c4 <main+0x104>)
 8001566:	f7ff fefc 	bl	8001362 <LL_GPIO_SetOutputPin>

  	RGB_t color1 = { .color = { .r = 255, .g = 0, .b = 0 } };  // Red color
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	23ff      	movs	r3, #255	@ 0xff
 8001570:	737b      	strb	r3, [r7, #13]
    RGB_t color2 = { .color = { .r = 0, .g = 255, .b = 0 } };  // Green color
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	23ff      	movs	r3, #255	@ 0xff
 8001578:	72bb      	strb	r3, [r7, #10]
    RGB_t color3 = { .color = { .r = 0, .g = 0, .b = 255 } };  // Blue color
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	23ff      	movs	r3, #255	@ 0xff
 8001580:	713b      	strb	r3, [r7, #4]
    RGB_t color4 = { .color = { .r = 255, .g = 255, .b = 0 } };  // Yellow color
 8001582:	2300      	movs	r3, #0
 8001584:	603b      	str	r3, [r7, #0]
 8001586:	23ff      	movs	r3, #255	@ 0xff
 8001588:	707b      	strb	r3, [r7, #1]
 800158a:	23ff      	movs	r3, #255	@ 0xff
 800158c:	70bb      	strb	r3, [r7, #2]

    addToPin(120, color4);
 800158e:	6839      	ldr	r1, [r7, #0]
 8001590:	2078      	movs	r0, #120	@ 0x78
 8001592:	f7fe ffe1 	bl	8000558 <addToPin>
    sendPixelData();
 8001596:	f7ff f893 	bl	80006c0 <sendPixelData>
    addToPin(20, color1);
 800159a:	68f9      	ldr	r1, [r7, #12]
 800159c:	2014      	movs	r0, #20
 800159e:	f7fe ffdb 	bl	8000558 <addToPin>
    sendPixelData();
 80015a2:	f7ff f88d 	bl	80006c0 <sendPixelData>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  while (1)
 80015a6:	bf00      	nop
 80015a8:	e7fd      	b.n	80015a6 <main+0xe6>
 80015aa:	bf00      	nop
 80015ac:	40013800 	.word	0x40013800
 80015b0:	40004800 	.word	0x40004800
 80015b4:	40020000 	.word	0x40020000
 80015b8:	04020002 	.word	0x04020002
 80015bc:	40010c00 	.word	0x40010c00
 80015c0:	04080008 	.word	0x04080008
 80015c4:	40011800 	.word	0x40011800

080015c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80015cc:	2002      	movs	r0, #2
 80015ce:	f7ff fd1f 	bl	8001010 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 80015d2:	bf00      	nop
 80015d4:	f7ff fd30 	bl	8001038 <LL_FLASH_GetLatency>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d1fa      	bne.n	80015d4 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 80015de:	f7ff fbf5 	bl	8000dcc <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80015e2:	bf00      	nop
 80015e4:	f7ff fc00 	bl	8000de8 <LL_RCC_HSE_IsReady>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d1fa      	bne.n	80015e4 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 80015ee:	f44f 11e0 	mov.w	r1, #1835008	@ 0x1c0000
 80015f2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80015f6:	f7ff fc99 	bl	8000f2c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80015fa:	f7ff fc77 	bl	8000eec <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80015fe:	bf00      	nop
 8001600:	f7ff fc82 	bl	8000f08 <LL_RCC_PLL_IsReady>
 8001604:	4603      	mov	r3, r0
 8001606:	2b01      	cmp	r3, #1
 8001608:	d1fa      	bne.n	8001600 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800160a:	2000      	movs	r0, #0
 800160c:	f7ff fc1e 	bl	8000e4c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001610:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001614:	f7ff fc2e 	bl	8000e74 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001618:	2000      	movs	r0, #0
 800161a:	f7ff fc3f 	bl	8000e9c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800161e:	2002      	movs	r0, #2
 8001620:	f7ff fbf4 	bl	8000e0c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001624:	bf00      	nop
 8001626:	f7ff fc05 	bl	8000e34 <LL_RCC_GetSysClkSource>
 800162a:	4603      	mov	r3, r0
 800162c:	2b08      	cmp	r3, #8
 800162e:	d1fa      	bne.n	8001626 <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(72000000);
 8001630:	4805      	ldr	r0, [pc, #20]	@ (8001648 <SystemClock_Config+0x80>)
 8001632:	f002 fcad 	bl	8003f90 <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 8001636:	4804      	ldr	r0, [pc, #16]	@ (8001648 <SystemClock_Config+0x80>)
 8001638:	f002 fcdc 	bl	8003ff4 <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_6);
 800163c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001640:	f7ff fc40 	bl	8000ec4 <LL_RCC_SetADCClockSource>
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	044aa200 	.word	0x044aa200

0800164c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08e      	sub	sp, #56	@ 0x38
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001652:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800165c:	2300      	movs	r3, #0
 800165e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001660:	f107 0318 	add.w	r3, r7, #24
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
 800167c:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 800167e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001682:	f7ff fcad 	bl	8000fe0 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001686:	2004      	movs	r0, #4
 8001688:	f7ff fcaa 	bl	8000fe0 <LL_APB2_GRP1_EnableClock>
  PA4   ------> ADC1_IN4
  PA5   ------> ADC1_IN5
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 800168c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001690:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001692:	2300      	movs	r3, #0
 8001694:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	4619      	mov	r1, r3
 800169a:	481a      	ldr	r0, [pc, #104]	@ (8001704 <MX_ADC1_Init+0xb8>)
 800169c:	f001 fee1 	bl	8003462 <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80016a0:	2300      	movs	r3, #0
 80016a2:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80016a8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016ac:	4619      	mov	r1, r3
 80016ae:	4816      	ldr	r0, [pc, #88]	@ (8001708 <MX_ADC1_Init+0xbc>)
 80016b0:	f001 fca2 	bl	8002ff8 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80016b4:	2300      	movs	r3, #0
 80016b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80016b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016bc:	4619      	mov	r1, r3
 80016be:	4812      	ldr	r0, [pc, #72]	@ (8001708 <MX_ADC1_Init+0xbc>)
 80016c0:	f001 fc68 	bl	8002f94 <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80016c4:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
 80016c8:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 80016d2:	2302      	movs	r3, #2
 80016d4:	627b      	str	r3, [r7, #36]	@ 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80016da:	f107 0318 	add.w	r3, r7, #24
 80016de:	4619      	mov	r1, r3
 80016e0:	4809      	ldr	r0, [pc, #36]	@ (8001708 <MX_ADC1_Init+0xbc>)
 80016e2:	f001 fcb0 	bl	8003046 <LL_ADC_REG_Init>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 80016e6:	4a09      	ldr	r2, [pc, #36]	@ (800170c <MX_ADC1_Init+0xc0>)
 80016e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016ec:	4806      	ldr	r0, [pc, #24]	@ (8001708 <MX_ADC1_Init+0xbc>)
 80016ee:	f7ff f9df 	bl	8000ab0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80016f2:	2200      	movs	r2, #0
 80016f4:	4905      	ldr	r1, [pc, #20]	@ (800170c <MX_ADC1_Init+0xc0>)
 80016f6:	4804      	ldr	r0, [pc, #16]	@ (8001708 <MX_ADC1_Init+0xbc>)
 80016f8:	f7ff fa0f 	bl	8000b1a <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016fc:	bf00      	nop
 80016fe:	3738      	adds	r7, #56	@ 0x38
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40010800 	.word	0x40010800
 8001708:	40012400 	.word	0x40012400
 800170c:	02300001 	.word	0x02300001

08001710 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b092      	sub	sp, #72	@ 0x48
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001716:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
 8001724:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	2220      	movs	r2, #32
 800172c:	2100      	movs	r1, #0
 800172e:	4618      	mov	r0, r3
 8001730:	f002 ff9c 	bl	800466c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	463b      	mov	r3, r7
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	60da      	str	r2, [r3, #12]
 8001740:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001742:	2001      	movs	r0, #1
 8001744:	f7ff fc34 	bl	8000fb0 <LL_APB1_GRP1_EnableClock>

  /* TIM2 DMA Init */

  /* TIM2_CH1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_5, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001748:	2210      	movs	r2, #16
 800174a:	2105      	movs	r1, #5
 800174c:	483b      	ldr	r0, [pc, #236]	@ (800183c <MX_TIM2_Init+0x12c>)
 800174e:	f7ff fa2f 	bl	8000bb0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PRIORITY_VERYHIGH);
 8001752:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001756:	2105      	movs	r1, #5
 8001758:	4838      	ldr	r0, [pc, #224]	@ (800183c <MX_TIM2_Init+0x12c>)
 800175a:	f7ff faf7 	bl	8000d4c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MODE_NORMAL);
 800175e:	2200      	movs	r2, #0
 8001760:	2105      	movs	r1, #5
 8001762:	4836      	ldr	r0, [pc, #216]	@ (800183c <MX_TIM2_Init+0x12c>)
 8001764:	f7ff fa48 	bl	8000bf8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PERIPH_NOINCREMENT);
 8001768:	2200      	movs	r2, #0
 800176a:	2105      	movs	r1, #5
 800176c:	4833      	ldr	r0, [pc, #204]	@ (800183c <MX_TIM2_Init+0x12c>)
 800176e:	f7ff fa65 	bl	8000c3c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MEMORY_INCREMENT);
 8001772:	2280      	movs	r2, #128	@ 0x80
 8001774:	2105      	movs	r1, #5
 8001776:	4831      	ldr	r0, [pc, #196]	@ (800183c <MX_TIM2_Init+0x12c>)
 8001778:	f7ff fa82 	bl	8000c80 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PDATAALIGN_WORD);
 800177c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001780:	2105      	movs	r1, #5
 8001782:	482e      	ldr	r0, [pc, #184]	@ (800183c <MX_TIM2_Init+0x12c>)
 8001784:	f7ff fa9e 	bl	8000cc4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MDATAALIGN_WORD);
 8001788:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800178c:	2105      	movs	r1, #5
 800178e:	482b      	ldr	r0, [pc, #172]	@ (800183c <MX_TIM2_Init+0x12c>)
 8001790:	f7ff faba 	bl	8000d08 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	86bb      	strh	r3, [r7, #52]	@ 0x34
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001798:	2300      	movs	r3, #0
 800179a:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_InitStruct.Autoreload = 89;
 800179c:	2359      	movs	r3, #89	@ 0x59
 800179e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	643b      	str	r3, [r7, #64]	@ 0x40
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80017a4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80017a8:	4619      	mov	r1, r3
 80017aa:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80017ae:	f002 f897 	bl	80038e0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 80017b2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80017b6:	f7ff fc5d 	bl	8001074 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80017ba:	2100      	movs	r1, #0
 80017bc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80017c0:	f7ff fcf0 	bl	80011a4 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 80017c4:	2101      	movs	r1, #1
 80017c6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80017ca:	f7ff fca7 	bl	800111c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80017ce:	2360      	movs	r3, #96	@ 0x60
 80017d0:	617b      	str	r3, [r7, #20]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.CompareValue = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80017de:	2300      	movs	r3, #0
 80017e0:	627b      	str	r3, [r7, #36]	@ 0x24
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80017e2:	f107 0314 	add.w	r3, r7, #20
 80017e6:	461a      	mov	r2, r3
 80017e8:	2101      	movs	r1, #1
 80017ea:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80017ee:	f002 f8df 	bl	80039b0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 80017f2:	2101      	movs	r1, #1
 80017f4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80017f8:	f7ff fc4c 	bl	8001094 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80017fc:	2100      	movs	r1, #0
 80017fe:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001802:	f7ff fce3 	bl	80011cc <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001806:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800180a:	f7ff fcf1 	bl	80011f0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800180e:	2004      	movs	r0, #4
 8001810:	f7ff fbe6 	bl	8000fe0 <LL_APB2_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA15   ------> TIM2_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001814:	4b0a      	ldr	r3, [pc, #40]	@ (8001840 <MX_TIM2_Init+0x130>)
 8001816:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001818:	2309      	movs	r3, #9
 800181a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800181c:	2302      	movs	r3, #2
 800181e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001824:	463b      	mov	r3, r7
 8001826:	4619      	mov	r1, r3
 8001828:	4806      	ldr	r0, [pc, #24]	@ (8001844 <MX_TIM2_Init+0x134>)
 800182a:	f001 fe1a 	bl	8003462 <LL_GPIO_Init>

  LL_GPIO_AF_RemapPartial1_TIM2();
 800182e:	f7ff fdc7 	bl	80013c0 <LL_GPIO_AF_RemapPartial1_TIM2>

}
 8001832:	bf00      	nop
 8001834:	3748      	adds	r7, #72	@ 0x48
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40020000 	.word	0x40020000
 8001840:	04800080 	.word	0x04800080
 8001844:	40010800 	.word	0x40010800

08001848 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 800185c:	2010      	movs	r0, #16
 800185e:	f7ff fba7 	bl	8000fb0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 800186a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800186e:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	4619      	mov	r1, r3
 8001874:	4808      	ldr	r0, [pc, #32]	@ (8001898 <MX_TIM6_Init+0x50>)
 8001876:	f002 f833 	bl	80038e0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 800187a:	4807      	ldr	r0, [pc, #28]	@ (8001898 <MX_TIM6_Init+0x50>)
 800187c:	f7ff fbfa 	bl	8001074 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8001880:	2100      	movs	r1, #0
 8001882:	4805      	ldr	r0, [pc, #20]	@ (8001898 <MX_TIM6_Init+0x50>)
 8001884:	f7ff fca2 	bl	80011cc <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8001888:	4803      	ldr	r0, [pc, #12]	@ (8001898 <MX_TIM6_Init+0x50>)
 800188a:	f7ff fcb1 	bl	80011f0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800188e:	bf00      	nop
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40001000 	.word	0x40001000

0800189c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08c      	sub	sp, #48	@ 0x30
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	60da      	str	r2, [r3, #12]
 80018b0:	611a      	str	r2, [r3, #16]
 80018b2:	615a      	str	r2, [r3, #20]
 80018b4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b6:	463b      	mov	r3, r7
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80018c4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80018c8:	f7ff fb8a 	bl	8000fe0 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80018cc:	2004      	movs	r0, #4
 80018ce:	f7ff fb87 	bl	8000fe0 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80018d2:	4b22      	ldr	r3, [pc, #136]	@ (800195c <MX_USART1_UART_Init+0xc0>)
 80018d4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80018d6:	2309      	movs	r3, #9
 80018d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80018da:	2303      	movs	r3, #3
 80018dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e2:	463b      	mov	r3, r7
 80018e4:	4619      	mov	r1, r3
 80018e6:	481e      	ldr	r0, [pc, #120]	@ (8001960 <MX_USART1_UART_Init+0xc4>)
 80018e8:	f001 fdbb 	bl	8003462 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80018ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001964 <MX_USART1_UART_Init+0xc8>)
 80018ee:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80018f0:	2304      	movs	r3, #4
 80018f2:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f4:	463b      	mov	r3, r7
 80018f6:	4619      	mov	r1, r3
 80018f8:	4819      	ldr	r0, [pc, #100]	@ (8001960 <MX_USART1_UART_Init+0xc4>)
 80018fa:	f001 fdb2 	bl	8003462 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80018fe:	f7ff f851 	bl	80009a4 <__NVIC_GetPriorityGrouping>
 8001902:	4603      	mov	r3, r0
 8001904:	2200      	movs	r2, #0
 8001906:	2100      	movs	r1, #0
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff f89f 	bl	8000a4c <NVIC_EncodePriority>
 800190e:	4603      	mov	r3, r0
 8001910:	4619      	mov	r1, r3
 8001912:	2025      	movs	r0, #37	@ 0x25
 8001914:	f7ff f870 	bl	80009f8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001918:	2025      	movs	r0, #37	@ 0x25
 800191a:	f7ff f851 	bl	80009c0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800191e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001922:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001924:	2300      	movs	r3, #0
 8001926:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800192c:	2300      	movs	r3, #0
 800192e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001930:	230c      	movs	r3, #12
 8001932:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001934:	2300      	movs	r3, #0
 8001936:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001938:	2300      	movs	r3, #0
 800193a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	4619      	mov	r1, r3
 8001942:	4809      	ldr	r0, [pc, #36]	@ (8001968 <MX_USART1_UART_Init+0xcc>)
 8001944:	f002 fa98 	bl	8003e78 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001948:	4807      	ldr	r0, [pc, #28]	@ (8001968 <MX_USART1_UART_Init+0xcc>)
 800194a:	f7ff fc6f 	bl	800122c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 800194e:	4806      	ldr	r0, [pc, #24]	@ (8001968 <MX_USART1_UART_Init+0xcc>)
 8001950:	f7ff fc5d 	bl	800120e <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001954:	bf00      	nop
 8001956:	3730      	adds	r7, #48	@ 0x30
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	04020002 	.word	0x04020002
 8001960:	40010800 	.word	0x40010800
 8001964:	04040004 	.word	0x04040004
 8001968:	40013800 	.word	0x40013800

0800196c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08c      	sub	sp, #48	@ 0x30
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]
 8001980:	611a      	str	r2, [r3, #16]
 8001982:	615a      	str	r2, [r3, #20]
 8001984:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001986:	463b      	mov	r3, r7
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001994:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001998:	f7ff fb0a 	bl	8000fb0 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 800199c:	2020      	movs	r0, #32
 800199e:	f7ff fb1f 	bl	8000fe0 <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PD5   ------> USART2_TX
  PD6   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80019a2:	f242 0320 	movw	r3, #8224	@ 0x2020
 80019a6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80019a8:	2309      	movs	r3, #9
 80019aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80019ac:	2303      	movs	r3, #3
 80019ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019b4:	463b      	mov	r3, r7
 80019b6:	4619      	mov	r1, r3
 80019b8:	4816      	ldr	r0, [pc, #88]	@ (8001a14 <MX_USART2_UART_Init+0xa8>)
 80019ba:	f001 fd52 	bl	8003462 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80019be:	f244 0340 	movw	r3, #16448	@ 0x4040
 80019c2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80019c4:	2304      	movs	r3, #4
 80019c6:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019c8:	463b      	mov	r3, r7
 80019ca:	4619      	mov	r1, r3
 80019cc:	4811      	ldr	r0, [pc, #68]	@ (8001a14 <MX_USART2_UART_Init+0xa8>)
 80019ce:	f001 fd48 	bl	8003462 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_USART2();
 80019d2:	f7ff fce5 	bl	80013a0 <LL_GPIO_AF_EnableRemap_USART2>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80019d6:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80019da:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80019dc:	2300      	movs	r3, #0
 80019de:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80019e8:	230c      	movs	r3, #12
 80019ea:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80019f0:	2300      	movs	r3, #0
 80019f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	4619      	mov	r1, r3
 80019fa:	4807      	ldr	r0, [pc, #28]	@ (8001a18 <MX_USART2_UART_Init+0xac>)
 80019fc:	f002 fa3c 	bl	8003e78 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001a00:	4805      	ldr	r0, [pc, #20]	@ (8001a18 <MX_USART2_UART_Init+0xac>)
 8001a02:	f7ff fc13 	bl	800122c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001a06:	4804      	ldr	r0, [pc, #16]	@ (8001a18 <MX_USART2_UART_Init+0xac>)
 8001a08:	f7ff fc01 	bl	800120e <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a0c:	bf00      	nop
 8001a0e:	3730      	adds	r7, #48	@ 0x30
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40011400 	.word	0x40011400
 8001a18:	40004400 	.word	0x40004400

08001a1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08c      	sub	sp, #48	@ 0x30
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
 8001a30:	611a      	str	r2, [r3, #16]
 8001a32:	615a      	str	r2, [r3, #20]
 8001a34:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a36:	463b      	mov	r3, r7
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8001a44:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8001a48:	f7ff fab2 	bl	8000fb0 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001a4c:	2008      	movs	r0, #8
 8001a4e:	f7ff fac7 	bl	8000fe0 <LL_APB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001a52:	4b22      	ldr	r3, [pc, #136]	@ (8001adc <MX_USART3_UART_Init+0xc0>)
 8001a54:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a56:	2309      	movs	r3, #9
 8001a58:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a62:	463b      	mov	r3, r7
 8001a64:	4619      	mov	r1, r3
 8001a66:	481e      	ldr	r0, [pc, #120]	@ (8001ae0 <MX_USART3_UART_Init+0xc4>)
 8001a68:	f001 fcfb 	bl	8003462 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8001a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae4 <MX_USART3_UART_Init+0xc8>)
 8001a6e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001a70:	2304      	movs	r3, #4
 8001a72:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a74:	463b      	mov	r3, r7
 8001a76:	4619      	mov	r1, r3
 8001a78:	4819      	ldr	r0, [pc, #100]	@ (8001ae0 <MX_USART3_UART_Init+0xc4>)
 8001a7a:	f001 fcf2 	bl	8003462 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001a7e:	f7fe ff91 	bl	80009a4 <__NVIC_GetPriorityGrouping>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2200      	movs	r2, #0
 8001a86:	2100      	movs	r1, #0
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe ffdf 	bl	8000a4c <NVIC_EncodePriority>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	4619      	mov	r1, r3
 8001a92:	2027      	movs	r0, #39	@ 0x27
 8001a94:	f7fe ffb0 	bl	80009f8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8001a98:	2027      	movs	r0, #39	@ 0x27
 8001a9a:	f7fe ff91 	bl	80009c0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001a9e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001aa2:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001ab0:	230c      	movs	r3, #12
 8001ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART3, &USART_InitStruct);
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4809      	ldr	r0, [pc, #36]	@ (8001ae8 <MX_USART3_UART_Init+0xcc>)
 8001ac4:	f002 f9d8 	bl	8003e78 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8001ac8:	4807      	ldr	r0, [pc, #28]	@ (8001ae8 <MX_USART3_UART_Init+0xcc>)
 8001aca:	f7ff fbaf 	bl	800122c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8001ace:	4806      	ldr	r0, [pc, #24]	@ (8001ae8 <MX_USART3_UART_Init+0xcc>)
 8001ad0:	f7ff fb9d 	bl	800120e <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ad4:	bf00      	nop
 8001ad6:	3730      	adds	r7, #48	@ 0x30
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	04040004 	.word	0x04040004
 8001ae0:	40010c00 	.word	0x40010c00
 8001ae4:	04080008 	.word	0x04080008
 8001ae8:	40004800 	.word	0x40004800

08001aec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001af0:	2001      	movs	r0, #1
 8001af2:	f7ff fa45 	bl	8000f80 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001af6:	f7fe ff55 	bl	80009a4 <__NVIC_GetPriorityGrouping>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2200      	movs	r2, #0
 8001afe:	2100      	movs	r1, #0
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7fe ffa3 	bl	8000a4c <NVIC_EncodePriority>
 8001b06:	4603      	mov	r3, r0
 8001b08:	4619      	mov	r1, r3
 8001b0a:	200f      	movs	r0, #15
 8001b0c:	f7fe ff74 	bl	80009f8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001b10:	200f      	movs	r0, #15
 8001b12:	f7fe ff55 	bl	80009c0 <__NVIC_EnableIRQ>

}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b088      	sub	sp, #32
 8001b20:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001b22:	f107 0318 	add.w	r3, r7, #24
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	1d3b      	adds	r3, r7, #4
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]
 8001b34:	609a      	str	r2, [r3, #8]
 8001b36:	60da      	str	r2, [r3, #12]
 8001b38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOE);
 8001b3a:	2040      	movs	r0, #64	@ 0x40
 8001b3c:	f7ff fa50 	bl	8000fe0 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8001b40:	2010      	movs	r0, #16
 8001b42:	f7ff fa4d 	bl	8000fe0 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001b46:	2004      	movs	r0, #4
 8001b48:	f7ff fa4a 	bl	8000fe0 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001b4c:	2008      	movs	r0, #8
 8001b4e:	f7ff fa47 	bl	8000fe0 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8001b52:	2020      	movs	r0, #32
 8001b54:	f7ff fa44 	bl	8000fe0 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5
 8001b58:	494c      	ldr	r1, [pc, #304]	@ (8001c8c <MX_GPIO_Init+0x170>)
 8001b5a:	484d      	ldr	r0, [pc, #308]	@ (8001c90 <MX_GPIO_Init+0x174>)
 8001b5c:	f7ff fc10 	bl	8001380 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9
                          |LL_GPIO_PIN_11|LL_GPIO_PIN_0);

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2
 8001b60:	494c      	ldr	r1, [pc, #304]	@ (8001c94 <MX_GPIO_Init+0x178>)
 8001b62:	484d      	ldr	r0, [pc, #308]	@ (8001c98 <MX_GPIO_Init+0x17c>)
 8001b64:	f7ff fc0c 	bl	8001380 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6
                          |LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_11);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_12
 8001b68:	494c      	ldr	r1, [pc, #304]	@ (8001c9c <MX_GPIO_Init+0x180>)
 8001b6a:	484d      	ldr	r0, [pc, #308]	@ (8001ca0 <MX_GPIO_Init+0x184>)
 8001b6c:	f7ff fc08 	bl	8001380 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11
 8001b70:	494c      	ldr	r1, [pc, #304]	@ (8001ca4 <MX_GPIO_Init+0x188>)
 8001b72:	484d      	ldr	r0, [pc, #308]	@ (8001ca8 <MX_GPIO_Init+0x18c>)
 8001b74:	f7ff fc04 	bl	8001380 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
                          |LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_7);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5
 8001b78:	4b44      	ldr	r3, [pc, #272]	@ (8001c8c <MX_GPIO_Init+0x170>)
 8001b7a:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9
                          |LL_GPIO_PIN_11|LL_GPIO_PIN_0;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b80:	2302      	movs	r3, #2
 8001b82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4840      	ldr	r0, [pc, #256]	@ (8001c90 <MX_GPIO_Init+0x174>)
 8001b8e:	f001 fc68 	bl	8003462 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2
 8001b92:	4b40      	ldr	r3, [pc, #256]	@ (8001c94 <MX_GPIO_Init+0x178>)
 8001b94:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6
                          |LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_11;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b96:	2301      	movs	r3, #1
 8001b98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba2:	1d3b      	adds	r3, r7, #4
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	483c      	ldr	r0, [pc, #240]	@ (8001c98 <MX_GPIO_Init+0x17c>)
 8001ba8:	f001 fc5b 	bl	8003462 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_12
 8001bac:	4b3b      	ldr	r3, [pc, #236]	@ (8001c9c <MX_GPIO_Init+0x180>)
 8001bae:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8
                          |LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bbc:	1d3b      	adds	r3, r7, #4
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4837      	ldr	r0, [pc, #220]	@ (8001ca0 <MX_GPIO_Init+0x184>)
 8001bc2:	f001 fc4e 	bl	8003462 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8001bc6:	4b39      	ldr	r3, [pc, #228]	@ (8001cac <MX_GPIO_Init+0x190>)
 8001bc8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001bca:	2304      	movs	r3, #4
 8001bcc:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	482f      	ldr	r0, [pc, #188]	@ (8001c90 <MX_GPIO_Init+0x174>)
 8001bd4:	f001 fc45 	bl	8003462 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11
 8001bd8:	4b32      	ldr	r3, [pc, #200]	@ (8001ca4 <MX_GPIO_Init+0x188>)
 8001bda:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
                          |LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001be0:	2302      	movs	r3, #2
 8001be2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	4619      	mov	r1, r3
 8001bec:	482e      	ldr	r0, [pc, #184]	@ (8001ca8 <MX_GPIO_Init+0x18c>)
 8001bee:	f001 fc38 	bl	8003462 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001bf2:	f240 2302 	movw	r3, #514	@ 0x202
 8001bf6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4823      	ldr	r0, [pc, #140]	@ (8001c90 <MX_GPIO_Init+0x174>)
 8001c02:	f001 fc2e 	bl	8003462 <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTE, LL_GPIO_AF_EXTI_LINE12);
 8001c06:	492a      	ldr	r1, [pc, #168]	@ (8001cb0 <MX_GPIO_Init+0x194>)
 8001c08:	2004      	movs	r0, #4
 8001c0a:	f7ff fbfd 	bl	8001408 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTE, LL_GPIO_AF_EXTI_LINE13);
 8001c0e:	4929      	ldr	r1, [pc, #164]	@ (8001cb4 <MX_GPIO_Init+0x198>)
 8001c10:	2004      	movs	r0, #4
 8001c12:	f7ff fbf9 	bl	8001408 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 8001c16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c1a:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001c20:	2300      	movs	r3, #0
 8001c22:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001c24:	2302      	movs	r3, #2
 8001c26:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001c28:	f107 0318 	add.w	r3, r7, #24
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f001 fae1 	bl	80031f4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001c32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c36:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001c40:	2302      	movs	r3, #2
 8001c42:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001c44:	f107 0318 	add.w	r3, r7, #24
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f001 fad3 	bl	80031f4 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(GPIOE, LL_GPIO_PIN_12, LL_GPIO_MODE_FLOATING);
 8001c4e:	2204      	movs	r2, #4
 8001c50:	4919      	ldr	r1, [pc, #100]	@ (8001cb8 <MX_GPIO_Init+0x19c>)
 8001c52:	480f      	ldr	r0, [pc, #60]	@ (8001c90 <MX_GPIO_Init+0x174>)
 8001c54:	f7ff fb53 	bl	80012fe <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOE, LL_GPIO_PIN_13, LL_GPIO_MODE_FLOATING);
 8001c58:	2204      	movs	r2, #4
 8001c5a:	4918      	ldr	r1, [pc, #96]	@ (8001cbc <MX_GPIO_Init+0x1a0>)
 8001c5c:	480c      	ldr	r0, [pc, #48]	@ (8001c90 <MX_GPIO_Init+0x174>)
 8001c5e:	f7ff fb4e 	bl	80012fe <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001c62:	f7fe fe9f 	bl	80009a4 <__NVIC_GetPriorityGrouping>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe feed 	bl	8000a4c <NVIC_EncodePriority>
 8001c72:	4603      	mov	r3, r0
 8001c74:	4619      	mov	r1, r3
 8001c76:	2028      	movs	r0, #40	@ 0x28
 8001c78:	f7fe febe 	bl	80009f8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c7c:	2028      	movs	r0, #40	@ 0x28
 8001c7e:	f7fe fe9f 	bl	80009c0 <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c82:	bf00      	nop
 8001c84:	3720      	adds	r7, #32
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	040bfdff 	.word	0x040bfdff
 8001c90:	40011800 	.word	0x40011800
 8001c94:	042bffff 	.word	0x042bffff
 8001c98:	40011000 	.word	0x40011000
 8001c9c:	04d3ffff 	.word	0x04d3ffff
 8001ca0:	40010c00 	.word	0x40010c00
 8001ca4:	04ff9bff 	.word	0x04ff9bff
 8001ca8:	40011400 	.word	0x40011400
 8001cac:	04c000c0 	.word	0x04c000c0
 8001cb0:	000f0003 	.word	0x000f0003
 8001cb4:	00f00003 	.word	0x00f00003
 8001cb8:	04100010 	.word	0x04100010
 8001cbc:	04200020 	.word	0x04200020

08001cc0 <LL_GPIO_SetOutputPin>:
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	0a1b      	lsrs	r3, r3, #8
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	611a      	str	r2, [r3, #16]
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <LL_GPIO_ResetOutputPin>:
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	0a1b      	lsrs	r3, r3, #8
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	615a      	str	r2, [r3, #20]
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr

08001cfc <getPortName>:
    {GPIOE, LL_GPIO_PIN_7, &xPins32, &yPins32},  // CS_32 (PE7)
    {GPIOE, LL_GPIO_PIN_8, &xPins33, &yPins33},  // CS_33 (PE8)
    {GPIOE, LL_GPIO_PIN_9, &xPins34, &yPins34}   // CS_34 (PE9)
};

const char* getPortName(GPIO_TypeDef* port) {
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
    if (port == GPIOA) return "GPIOA";
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a11      	ldr	r2, [pc, #68]	@ (8001d4c <getPortName+0x50>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d101      	bne.n	8001d10 <getPortName+0x14>
 8001d0c:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <getPortName+0x54>)
 8001d0e:	e018      	b.n	8001d42 <getPortName+0x46>
    if (port == GPIOB) return "GPIOB";
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a10      	ldr	r2, [pc, #64]	@ (8001d54 <getPortName+0x58>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d101      	bne.n	8001d1c <getPortName+0x20>
 8001d18:	4b0f      	ldr	r3, [pc, #60]	@ (8001d58 <getPortName+0x5c>)
 8001d1a:	e012      	b.n	8001d42 <getPortName+0x46>
    if (port == GPIOC) return "GPIOC";
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a0f      	ldr	r2, [pc, #60]	@ (8001d5c <getPortName+0x60>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d101      	bne.n	8001d28 <getPortName+0x2c>
 8001d24:	4b0e      	ldr	r3, [pc, #56]	@ (8001d60 <getPortName+0x64>)
 8001d26:	e00c      	b.n	8001d42 <getPortName+0x46>
    if (port == GPIOD) return "GPIOD";
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a0e      	ldr	r2, [pc, #56]	@ (8001d64 <getPortName+0x68>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d101      	bne.n	8001d34 <getPortName+0x38>
 8001d30:	4b0d      	ldr	r3, [pc, #52]	@ (8001d68 <getPortName+0x6c>)
 8001d32:	e006      	b.n	8001d42 <getPortName+0x46>
    if (port == GPIOE) return "GPIOE";
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a0d      	ldr	r2, [pc, #52]	@ (8001d6c <getPortName+0x70>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d101      	bne.n	8001d40 <getPortName+0x44>
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d70 <getPortName+0x74>)
 8001d3e:	e000      	b.n	8001d42 <getPortName+0x46>
    return "UNKNOWN";
 8001d40:	4b0c      	ldr	r3, [pc, #48]	@ (8001d74 <getPortName+0x78>)
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	40010800 	.word	0x40010800
 8001d50:	080062b0 	.word	0x080062b0
 8001d54:	40010c00 	.word	0x40010c00
 8001d58:	080062b8 	.word	0x080062b8
 8001d5c:	40011000 	.word	0x40011000
 8001d60:	080062c0 	.word	0x080062c0
 8001d64:	40011400 	.word	0x40011400
 8001d68:	080062c8 	.word	0x080062c8
 8001d6c:	40011800 	.word	0x40011800
 8001d70:	080062d0 	.word	0x080062d0
 8001d74:	080062d8 	.word	0x080062d8

08001d78 <getPinName>:

const char* getPinName(uint32_t pin) {
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
    switch (pin) {
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a5a      	ldr	r2, [pc, #360]	@ (8001eec <getPinName+0x174>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	f000 80a8 	beq.w	8001eda <getPinName+0x162>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a57      	ldr	r2, [pc, #348]	@ (8001eec <getPinName+0x174>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	f200 80a5 	bhi.w	8001ede <getPinName+0x166>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a56      	ldr	r2, [pc, #344]	@ (8001ef0 <getPinName+0x178>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	f000 809c 	beq.w	8001ed6 <getPinName+0x15e>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a53      	ldr	r2, [pc, #332]	@ (8001ef0 <getPinName+0x178>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	f200 809b 	bhi.w	8001ede <getPinName+0x166>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a52      	ldr	r2, [pc, #328]	@ (8001ef4 <getPinName+0x17c>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	f000 8090 	beq.w	8001ed2 <getPinName+0x15a>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4f      	ldr	r2, [pc, #316]	@ (8001ef4 <getPinName+0x17c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	f200 8091 	bhi.w	8001ede <getPinName+0x166>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a4e      	ldr	r2, [pc, #312]	@ (8001ef8 <getPinName+0x180>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	f000 8084 	beq.w	8001ece <getPinName+0x156>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a4b      	ldr	r2, [pc, #300]	@ (8001ef8 <getPinName+0x180>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	f200 8087 	bhi.w	8001ede <getPinName+0x166>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a4a      	ldr	r2, [pc, #296]	@ (8001efc <getPinName+0x184>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d078      	beq.n	8001eca <getPinName+0x152>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a48      	ldr	r2, [pc, #288]	@ (8001efc <getPinName+0x184>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d87e      	bhi.n	8001ede <getPinName+0x166>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a47      	ldr	r2, [pc, #284]	@ (8001f00 <getPinName+0x188>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d06e      	beq.n	8001ec6 <getPinName+0x14e>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a45      	ldr	r2, [pc, #276]	@ (8001f00 <getPinName+0x188>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d876      	bhi.n	8001ede <getPinName+0x166>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a44      	ldr	r2, [pc, #272]	@ (8001f04 <getPinName+0x18c>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d064      	beq.n	8001ec2 <getPinName+0x14a>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a42      	ldr	r2, [pc, #264]	@ (8001f04 <getPinName+0x18c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d86e      	bhi.n	8001ede <getPinName+0x166>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a41      	ldr	r2, [pc, #260]	@ (8001f08 <getPinName+0x190>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d05a      	beq.n	8001ebe <getPinName+0x146>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a3f      	ldr	r2, [pc, #252]	@ (8001f08 <getPinName+0x190>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d866      	bhi.n	8001ede <getPinName+0x166>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f248 0280 	movw	r2, #32896	@ 0x8080
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d04f      	beq.n	8001eba <getPinName+0x142>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f248 0280 	movw	r2, #32896	@ 0x8080
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d85c      	bhi.n	8001ede <getPinName+0x166>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f244 0240 	movw	r2, #16448	@ 0x4040
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d043      	beq.n	8001eb6 <getPinName+0x13e>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f244 0240 	movw	r2, #16448	@ 0x4040
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d852      	bhi.n	8001ede <getPinName+0x166>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f242 0220 	movw	r2, #8224	@ 0x2020
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d037      	beq.n	8001eb2 <getPinName+0x13a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f242 0220 	movw	r2, #8224	@ 0x2020
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d848      	bhi.n	8001ede <getPinName+0x166>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f241 0210 	movw	r2, #4112	@ 0x1010
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d02b      	beq.n	8001eae <getPinName+0x136>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f241 0210 	movw	r2, #4112	@ 0x1010
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d83e      	bhi.n	8001ede <getPinName+0x166>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f640 0208 	movw	r2, #2056	@ 0x808
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d01f      	beq.n	8001eaa <getPinName+0x132>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f640 0208 	movw	r2, #2056	@ 0x808
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d834      	bhi.n	8001ede <getPinName+0x166>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f240 4204 	movw	r2, #1028	@ 0x404
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d013      	beq.n	8001ea6 <getPinName+0x12e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f240 4204 	movw	r2, #1028	@ 0x404
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d82a      	bhi.n	8001ede <getPinName+0x166>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f240 1201 	movw	r2, #257	@ 0x101
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d005      	beq.n	8001e9e <getPinName+0x126>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f240 2202 	movw	r2, #514	@ 0x202
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d002      	beq.n	8001ea2 <getPinName+0x12a>
 8001e9c:	e01f      	b.n	8001ede <getPinName+0x166>
        case LL_GPIO_PIN_0:  return "Pin 0";
 8001e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001f0c <getPinName+0x194>)
 8001ea0:	e01e      	b.n	8001ee0 <getPinName+0x168>
        case LL_GPIO_PIN_1:  return "Pin 1";
 8001ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f10 <getPinName+0x198>)
 8001ea4:	e01c      	b.n	8001ee0 <getPinName+0x168>
        case LL_GPIO_PIN_2:  return "Pin 2";
 8001ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f14 <getPinName+0x19c>)
 8001ea8:	e01a      	b.n	8001ee0 <getPinName+0x168>
        case LL_GPIO_PIN_3:  return "Pin 3";
 8001eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8001f18 <getPinName+0x1a0>)
 8001eac:	e018      	b.n	8001ee0 <getPinName+0x168>
        case LL_GPIO_PIN_4:  return "Pin 4";
 8001eae:	4b1b      	ldr	r3, [pc, #108]	@ (8001f1c <getPinName+0x1a4>)
 8001eb0:	e016      	b.n	8001ee0 <getPinName+0x168>
        case LL_GPIO_PIN_5:  return "Pin 5";
 8001eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f20 <getPinName+0x1a8>)
 8001eb4:	e014      	b.n	8001ee0 <getPinName+0x168>
        case LL_GPIO_PIN_6:  return "Pin 6";
 8001eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f24 <getPinName+0x1ac>)
 8001eb8:	e012      	b.n	8001ee0 <getPinName+0x168>
        case LL_GPIO_PIN_7:  return "Pin 7";
 8001eba:	4b1b      	ldr	r3, [pc, #108]	@ (8001f28 <getPinName+0x1b0>)
 8001ebc:	e010      	b.n	8001ee0 <getPinName+0x168>
        case LL_GPIO_PIN_8:  return "Pin 8";
 8001ebe:	4b1b      	ldr	r3, [pc, #108]	@ (8001f2c <getPinName+0x1b4>)
 8001ec0:	e00e      	b.n	8001ee0 <getPinName+0x168>
        case LL_GPIO_PIN_9:  return "Pin 9";
 8001ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f30 <getPinName+0x1b8>)
 8001ec4:	e00c      	b.n	8001ee0 <getPinName+0x168>
        case LL_GPIO_PIN_10: return "Pin 10";
 8001ec6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f34 <getPinName+0x1bc>)
 8001ec8:	e00a      	b.n	8001ee0 <getPinName+0x168>
        case LL_GPIO_PIN_11: return "Pin 11";
 8001eca:	4b1b      	ldr	r3, [pc, #108]	@ (8001f38 <getPinName+0x1c0>)
 8001ecc:	e008      	b.n	8001ee0 <getPinName+0x168>
        case LL_GPIO_PIN_12: return "Pin 12";
 8001ece:	4b1b      	ldr	r3, [pc, #108]	@ (8001f3c <getPinName+0x1c4>)
 8001ed0:	e006      	b.n	8001ee0 <getPinName+0x168>
        case LL_GPIO_PIN_13: return "Pin 13";
 8001ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f40 <getPinName+0x1c8>)
 8001ed4:	e004      	b.n	8001ee0 <getPinName+0x168>
        case LL_GPIO_PIN_14: return "Pin 14";
 8001ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f44 <getPinName+0x1cc>)
 8001ed8:	e002      	b.n	8001ee0 <getPinName+0x168>
        case LL_GPIO_PIN_15: return "Pin 15";
 8001eda:	4b1b      	ldr	r3, [pc, #108]	@ (8001f48 <getPinName+0x1d0>)
 8001edc:	e000      	b.n	8001ee0 <getPinName+0x168>
        default: return "Unknown Pin";
 8001ede:	4b1b      	ldr	r3, [pc, #108]	@ (8001f4c <getPinName+0x1d4>)
    }
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	04800080 	.word	0x04800080
 8001ef0:	04400040 	.word	0x04400040
 8001ef4:	04200020 	.word	0x04200020
 8001ef8:	04100010 	.word	0x04100010
 8001efc:	04080008 	.word	0x04080008
 8001f00:	04040004 	.word	0x04040004
 8001f04:	04020002 	.word	0x04020002
 8001f08:	04010001 	.word	0x04010001
 8001f0c:	080062e0 	.word	0x080062e0
 8001f10:	080062e8 	.word	0x080062e8
 8001f14:	080062f0 	.word	0x080062f0
 8001f18:	080062f8 	.word	0x080062f8
 8001f1c:	08006300 	.word	0x08006300
 8001f20:	08006308 	.word	0x08006308
 8001f24:	08006310 	.word	0x08006310
 8001f28:	08006318 	.word	0x08006318
 8001f2c:	08006320 	.word	0x08006320
 8001f30:	08006328 	.word	0x08006328
 8001f34:	08006330 	.word	0x08006330
 8001f38:	08006338 	.word	0x08006338
 8001f3c:	08006340 	.word	0x08006340
 8001f40:	08006348 	.word	0x08006348
 8001f44:	08006350 	.word	0x08006350
 8001f48:	08006358 	.word	0x08006358
 8001f4c:	08006360 	.word	0x08006360

08001f50 <setConnection>:


MainTrack mainTracks[32] = {0};
SignalAnalyzerTrack signalAnalyzerTracks[8] = {0};

void setConnection(int x, int y, MUX mux, uint8_t mode) {
 8001f50:	b082      	sub	sp, #8
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	6039      	str	r1, [r7, #0]
 8001f5c:	f107 0110 	add.w	r1, r7, #16
 8001f60:	e881 000c 	stmia.w	r1, {r2, r3}
    if (x < 0 || x > 15 || y < 0 || y > 7) {
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f2c0 80bd 	blt.w	80020e6 <setConnection+0x196>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b0f      	cmp	r3, #15
 8001f70:	f300 80b9 	bgt.w	80020e6 <setConnection+0x196>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f2c0 80b5 	blt.w	80020e6 <setConnection+0x196>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	2b07      	cmp	r3, #7
 8001f80:	f300 80b1 	bgt.w	80020e6 <setConnection+0x196>
    }

//    printMUXDetails(&mux);

    // Activate multiplexer using the struct for CS
    LL_GPIO_ResetOutputPin(mux.port, mux.pin);
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	4611      	mov	r1, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fea7 	bl	8001cde <LL_GPIO_ResetOutputPin>
    LL_mDelay(20);
 8001f90:	2014      	movs	r0, #20
 8001f92:	f002 f80b 	bl	8003fac <LL_mDelay>
    LL_GPIO_SetOutputPin(mux.port, mux.pin);
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff fe8f 	bl	8001cc0 <LL_GPIO_SetOutputPin>
    LL_mDelay(20);
 8001fa2:	2014      	movs	r0, #20
 8001fa4:	f002 f802 	bl	8003fac <LL_mDelay>

    // Set X address
    // Set X address
    (x & 0x01) ? LL_GPIO_SetOutputPin(AX_GPIO, AX0_PIN) : LL_GPIO_ResetOutputPin(AX_GPIO, AX0_PIN);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d005      	beq.n	8001fbe <setConnection+0x6e>
 8001fb2:	f244 0140 	movw	r1, #16448	@ 0x4040
 8001fb6:	484f      	ldr	r0, [pc, #316]	@ (80020f4 <setConnection+0x1a4>)
 8001fb8:	f7ff fe82 	bl	8001cc0 <LL_GPIO_SetOutputPin>
 8001fbc:	e004      	b.n	8001fc8 <setConnection+0x78>
 8001fbe:	f244 0140 	movw	r1, #16448	@ 0x4040
 8001fc2:	484c      	ldr	r0, [pc, #304]	@ (80020f4 <setConnection+0x1a4>)
 8001fc4:	f7ff fe8b 	bl	8001cde <LL_GPIO_ResetOutputPin>
    (x & 0x02) ? LL_GPIO_SetOutputPin(AX_GPIO, AX1_PIN) : LL_GPIO_ResetOutputPin(AX_GPIO, AX1_PIN);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d005      	beq.n	8001fde <setConnection+0x8e>
 8001fd2:	f241 0110 	movw	r1, #4112	@ 0x1010
 8001fd6:	4847      	ldr	r0, [pc, #284]	@ (80020f4 <setConnection+0x1a4>)
 8001fd8:	f7ff fe72 	bl	8001cc0 <LL_GPIO_SetOutputPin>
 8001fdc:	e004      	b.n	8001fe8 <setConnection+0x98>
 8001fde:	f241 0110 	movw	r1, #4112	@ 0x1010
 8001fe2:	4844      	ldr	r0, [pc, #272]	@ (80020f4 <setConnection+0x1a4>)
 8001fe4:	f7ff fe7b 	bl	8001cde <LL_GPIO_ResetOutputPin>
    (x & 0x04) ? LL_GPIO_SetOutputPin(AX_GPIO, AX2_PIN) : LL_GPIO_ResetOutputPin(AX_GPIO, AX2_PIN);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d005      	beq.n	8001ffe <setConnection+0xae>
 8001ff2:	f640 0108 	movw	r1, #2056	@ 0x808
 8001ff6:	483f      	ldr	r0, [pc, #252]	@ (80020f4 <setConnection+0x1a4>)
 8001ff8:	f7ff fe62 	bl	8001cc0 <LL_GPIO_SetOutputPin>
 8001ffc:	e004      	b.n	8002008 <setConnection+0xb8>
 8001ffe:	f640 0108 	movw	r1, #2056	@ 0x808
 8002002:	483c      	ldr	r0, [pc, #240]	@ (80020f4 <setConnection+0x1a4>)
 8002004:	f7ff fe6b 	bl	8001cde <LL_GPIO_ResetOutputPin>
    (x & 0x08) ? LL_GPIO_SetOutputPin(AX_GPIO, AX3_PIN) : LL_GPIO_ResetOutputPin(AX_GPIO, AX3_PIN);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d005      	beq.n	800201e <setConnection+0xce>
 8002012:	f242 0120 	movw	r1, #8224	@ 0x2020
 8002016:	4837      	ldr	r0, [pc, #220]	@ (80020f4 <setConnection+0x1a4>)
 8002018:	f7ff fe52 	bl	8001cc0 <LL_GPIO_SetOutputPin>
 800201c:	e004      	b.n	8002028 <setConnection+0xd8>
 800201e:	f242 0120 	movw	r1, #8224	@ 0x2020
 8002022:	4834      	ldr	r0, [pc, #208]	@ (80020f4 <setConnection+0x1a4>)
 8002024:	f7ff fe5b 	bl	8001cde <LL_GPIO_ResetOutputPin>

    // Set Y address
    (y & 0x01) ? LL_GPIO_SetOutputPin(AY_GPIO, AY0_PIN) : LL_GPIO_ResetOutputPin(AY_GPIO, AY0_PIN);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d005      	beq.n	800203e <setConnection+0xee>
 8002032:	f240 1101 	movw	r1, #257	@ 0x101
 8002036:	482f      	ldr	r0, [pc, #188]	@ (80020f4 <setConnection+0x1a4>)
 8002038:	f7ff fe42 	bl	8001cc0 <LL_GPIO_SetOutputPin>
 800203c:	e004      	b.n	8002048 <setConnection+0xf8>
 800203e:	f240 1101 	movw	r1, #257	@ 0x101
 8002042:	482c      	ldr	r0, [pc, #176]	@ (80020f4 <setConnection+0x1a4>)
 8002044:	f7ff fe4b 	bl	8001cde <LL_GPIO_ResetOutputPin>
    (y & 0x02) ? LL_GPIO_SetOutputPin(AY_GPIO, AY1_PIN) : LL_GPIO_ResetOutputPin(AY_GPIO, AY1_PIN);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d005      	beq.n	800205e <setConnection+0x10e>
 8002052:	f240 2102 	movw	r1, #514	@ 0x202
 8002056:	4827      	ldr	r0, [pc, #156]	@ (80020f4 <setConnection+0x1a4>)
 8002058:	f7ff fe32 	bl	8001cc0 <LL_GPIO_SetOutputPin>
 800205c:	e004      	b.n	8002068 <setConnection+0x118>
 800205e:	f240 2102 	movw	r1, #514	@ 0x202
 8002062:	4824      	ldr	r0, [pc, #144]	@ (80020f4 <setConnection+0x1a4>)
 8002064:	f7ff fe3b 	bl	8001cde <LL_GPIO_ResetOutputPin>
    (y & 0x04) ? LL_GPIO_SetOutputPin(AY_GPIO, AY2_PIN) : LL_GPIO_ResetOutputPin(AY_GPIO, AY2_PIN);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	2b00      	cmp	r3, #0
 8002070:	d005      	beq.n	800207e <setConnection+0x12e>
 8002072:	f240 4104 	movw	r1, #1028	@ 0x404
 8002076:	481f      	ldr	r0, [pc, #124]	@ (80020f4 <setConnection+0x1a4>)
 8002078:	f7ff fe22 	bl	8001cc0 <LL_GPIO_SetOutputPin>
 800207c:	e004      	b.n	8002088 <setConnection+0x138>
 800207e:	f240 4104 	movw	r1, #1028	@ 0x404
 8002082:	481c      	ldr	r0, [pc, #112]	@ (80020f4 <setConnection+0x1a4>)
 8002084:	f7ff fe2b 	bl	8001cde <LL_GPIO_ResetOutputPin>


    // Set data pin
    mode ? LL_GPIO_SetOutputPin(DAT_GPIO, DAT_PIN) : LL_GPIO_ResetOutputPin(DAT_GPIO, DAT_PIN);
 8002088:	f897 3020 	ldrb.w	r3, [r7, #32]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d005      	beq.n	800209c <setConnection+0x14c>
 8002090:	f248 0180 	movw	r1, #32896	@ 0x8080
 8002094:	4817      	ldr	r0, [pc, #92]	@ (80020f4 <setConnection+0x1a4>)
 8002096:	f7ff fe13 	bl	8001cc0 <LL_GPIO_SetOutputPin>
 800209a:	e004      	b.n	80020a6 <setConnection+0x156>
 800209c:	f248 0180 	movw	r1, #32896	@ 0x8080
 80020a0:	4814      	ldr	r0, [pc, #80]	@ (80020f4 <setConnection+0x1a4>)
 80020a2:	f7ff fe1c 	bl	8001cde <LL_GPIO_ResetOutputPin>

    // Strobe signal
    LL_mDelay(20);
 80020a6:	2014      	movs	r0, #20
 80020a8:	f001 ff80 	bl	8003fac <LL_mDelay>
	LL_GPIO_SetOutputPin(STB_GPIO, STB_PIN);
 80020ac:	4912      	ldr	r1, [pc, #72]	@ (80020f8 <setConnection+0x1a8>)
 80020ae:	4811      	ldr	r0, [pc, #68]	@ (80020f4 <setConnection+0x1a4>)
 80020b0:	f7ff fe06 	bl	8001cc0 <LL_GPIO_SetOutputPin>
	LL_mDelay(20);
 80020b4:	2014      	movs	r0, #20
 80020b6:	f001 ff79 	bl	8003fac <LL_mDelay>
	LL_GPIO_ResetOutputPin(STB_GPIO, STB_PIN);
 80020ba:	490f      	ldr	r1, [pc, #60]	@ (80020f8 <setConnection+0x1a8>)
 80020bc:	480d      	ldr	r0, [pc, #52]	@ (80020f4 <setConnection+0x1a4>)
 80020be:	f7ff fe0e 	bl	8001cde <LL_GPIO_ResetOutputPin>

	LL_mDelay(20);
 80020c2:	2014      	movs	r0, #20
 80020c4:	f001 ff72 	bl	8003fac <LL_mDelay>

	LL_GPIO_ResetOutputPin(DAT_GPIO, DAT_PIN);
 80020c8:	f248 0180 	movw	r1, #32896	@ 0x8080
 80020cc:	4809      	ldr	r0, [pc, #36]	@ (80020f4 <setConnection+0x1a4>)
 80020ce:	f7ff fe06 	bl	8001cde <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(mux.port, mux.pin);
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	4611      	mov	r1, r2
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff fe00 	bl	8001cde <LL_GPIO_ResetOutputPin>

	LL_mDelay(20);
 80020de:	2014      	movs	r0, #20
 80020e0:	f001 ff64 	bl	8003fac <LL_mDelay>
 80020e4:	e000      	b.n	80020e8 <setConnection+0x198>
        return;
 80020e6:	bf00      	nop
}
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80020f0:	b002      	add	sp, #8
 80020f2:	4770      	bx	lr
 80020f4:	40010c00 	.word	0x40010c00
 80020f8:	04010001 	.word	0x04010001

080020fc <routeBreadboard>:

void routeBreadboard(int breadboardPin1, int breadboardPin2, int net_id, MUX *muxes, size_t muxCount, uint8_t mode, RGB_t rgb) {
 80020fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020fe:	b0a7      	sub	sp, #156	@ 0x9c
 8002100:	af0c      	add	r7, sp, #48	@ 0x30
 8002102:	6278      	str	r0, [r7, #36]	@ 0x24
 8002104:	6239      	str	r1, [r7, #32]
 8002106:	61fa      	str	r2, [r7, #28]
 8002108:	61bb      	str	r3, [r7, #24]

    char pin1Name[6], pin2Name[6];
    snprintf(pin1Name, sizeof(pin1Name), "B_%d", breadboardPin1);
 800210a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800210e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002110:	4a94      	ldr	r2, [pc, #592]	@ (8002364 <routeBreadboard+0x268>)
 8002112:	2106      	movs	r1, #6
 8002114:	f002 f972 	bl	80043fc <sniprintf>
    snprintf(pin2Name, sizeof(pin2Name), "B_%d", breadboardPin2);
 8002118:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800211c:	6a3b      	ldr	r3, [r7, #32]
 800211e:	4a91      	ldr	r2, [pc, #580]	@ (8002364 <routeBreadboard+0x268>)
 8002120:	2106      	movs	r1, #6
 8002122:	f002 f96b 	bl	80043fc <sniprintf>

    printf("R: %d, G: %d, B: %d\n",
    		rgb.color.r, rgb.color.g, rgb.color.b);
 8002126:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
    printf("R: %d, G: %d, B: %d\n",
 800212a:	4619      	mov	r1, r3
    		rgb.color.r, rgb.color.g, rgb.color.b);
 800212c:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
    printf("R: %d, G: %d, B: %d\n",
 8002130:	461a      	mov	r2, r3
    		rgb.color.r, rgb.color.g, rgb.color.b);
 8002132:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
    printf("R: %d, G: %d, B: %d\n",
 8002136:	488c      	ldr	r0, [pc, #560]	@ (8002368 <routeBreadboard+0x26c>)
 8002138:	f002 f8e8 	bl	800430c <iprintf>

    printf("Routing %s to %s with net ID: %d\n", pin1Name, pin2Name, net_id);
 800213c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002140:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	4889      	ldr	r0, [pc, #548]	@ (800236c <routeBreadboard+0x270>)
 8002148:	f002 f8e0 	bl	800430c <iprintf>
    fflush(stdout);
 800214c:	4b88      	ldr	r3, [pc, #544]	@ (8002370 <routeBreadboard+0x274>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	4618      	mov	r0, r3
 8002154:	f002 f804 	bl	8004160 <fflush>

    int xIndex1 = -1, yIndex1 = -1;
 8002158:	f04f 33ff 	mov.w	r3, #4294967295
 800215c:	667b      	str	r3, [r7, #100]	@ 0x64
 800215e:	f04f 33ff 	mov.w	r3, #4294967295
 8002162:	663b      	str	r3, [r7, #96]	@ 0x60
    int xIndex2 = -1, yIndex2 = -1;
 8002164:	f04f 33ff 	mov.w	r3, #4294967295
 8002168:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800216a:	f04f 33ff 	mov.w	r3, #4294967295
 800216e:	65bb      	str	r3, [r7, #88]	@ 0x58
    MUX *mux1 = NULL;
 8002170:	2300      	movs	r3, #0
 8002172:	657b      	str	r3, [r7, #84]	@ 0x54
    MUX *mux2 = NULL;
 8002174:	2300      	movs	r3, #0
 8002176:	653b      	str	r3, [r7, #80]	@ 0x50
    MainTrack *selectedTrack = NULL;
 8002178:	2300      	movs	r3, #0
 800217a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    int muxIndex = -1;
 800217c:	f04f 33ff 	mov.w	r3, #4294967295
 8002180:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // Find an available or existing main track for the given net ID
    for (int x = 0; x < 32; ++x) {
 8002182:	2300      	movs	r3, #0
 8002184:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002186:	e02c      	b.n	80021e2 <routeBreadboard+0xe6>
        if (mainTracks[x].net_id == net_id) {
 8002188:	4a7a      	ldr	r2, [pc, #488]	@ (8002374 <routeBreadboard+0x278>)
 800218a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800218c:	011b      	lsls	r3, r3, #4
 800218e:	4413      	add	r3, r2
 8002190:	3304      	adds	r3, #4
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	69fa      	ldr	r2, [r7, #28]
 8002196:	429a      	cmp	r2, r3
 8002198:	d105      	bne.n	80021a6 <routeBreadboard+0xaa>
            selectedTrack = &mainTracks[x];  // Reuse existing track if net ID matches
 800219a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	4a75      	ldr	r2, [pc, #468]	@ (8002374 <routeBreadboard+0x278>)
 80021a0:	4413      	add	r3, r2
 80021a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
            break;
 80021a4:	e020      	b.n	80021e8 <routeBreadboard+0xec>
        } else if (!mainTracks[x].is_used) {
 80021a6:	4a73      	ldr	r2, [pc, #460]	@ (8002374 <routeBreadboard+0x278>)
 80021a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021aa:	011b      	lsls	r3, r3, #4
 80021ac:	4413      	add	r3, r2
 80021ae:	3308      	adds	r3, #8
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d112      	bne.n	80021dc <routeBreadboard+0xe0>
            selectedTrack = &mainTracks[x];  // Assign new track if available
 80021b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	4a6e      	ldr	r2, [pc, #440]	@ (8002374 <routeBreadboard+0x278>)
 80021bc:	4413      	add	r3, r2
 80021be:	64fb      	str	r3, [r7, #76]	@ 0x4c
            selectedTrack->is_used = 1;
 80021c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021c2:	2201      	movs	r2, #1
 80021c4:	609a      	str	r2, [r3, #8]
            selectedTrack->net_id = net_id;
 80021c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021c8:	69fa      	ldr	r2, [r7, #28]
 80021ca:	605a      	str	r2, [r3, #4]
            selectedTrack->track_id = x; // Assign track ID here
 80021cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80021d0:	601a      	str	r2, [r3, #0]
            printf("Selected Track id: %d\n", x);
 80021d2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80021d4:	4868      	ldr	r0, [pc, #416]	@ (8002378 <routeBreadboard+0x27c>)
 80021d6:	f002 f899 	bl	800430c <iprintf>
            break;
 80021da:	e005      	b.n	80021e8 <routeBreadboard+0xec>
    for (int x = 0; x < 32; ++x) {
 80021dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021de:	3301      	adds	r3, #1
 80021e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80021e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021e4:	2b1f      	cmp	r3, #31
 80021e6:	ddcf      	ble.n	8002188 <routeBreadboard+0x8c>
        }
    }

    if (!selectedTrack) {
 80021e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d104      	bne.n	80021f8 <routeBreadboard+0xfc>
        printf("Error: No available main track for net ID %d\n", net_id);
 80021ee:	69f9      	ldr	r1, [r7, #28]
 80021f0:	4862      	ldr	r0, [pc, #392]	@ (800237c <routeBreadboard+0x280>)
 80021f2:	f002 f88b 	bl	800430c <iprintf>
 80021f6:	e16c      	b.n	80024d2 <routeBreadboard+0x3d6>
        return;
    }

    // Update connection counter based on mode
	if (mode == 1) {
 80021f8:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d10d      	bne.n	800221c <routeBreadboard+0x120>
		selectedTrack->current_connections++; // Increment current connections
 8002200:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002208:	60da      	str	r2, [r3, #12]
		printf("Main Track %d incremented. Current connections: %d\n", selectedTrack->track_id, selectedTrack->current_connections);
 800220a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800220c:	6819      	ldr	r1, [r3, #0]
 800220e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	461a      	mov	r2, r3
 8002214:	485a      	ldr	r0, [pc, #360]	@ (8002380 <routeBreadboard+0x284>)
 8002216:	f002 f879 	bl	800430c <iprintf>
 800221a:	e025      	b.n	8002268 <routeBreadboard+0x16c>
	} else if (mode == 0) {
 800221c:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8002220:	2b00      	cmp	r3, #0
 8002222:	d121      	bne.n	8002268 <routeBreadboard+0x16c>
		selectedTrack->current_connections--; // Decrement current connections
 8002224:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	1e5a      	subs	r2, r3, #1
 800222a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800222c:	60da      	str	r2, [r3, #12]
		if (selectedTrack->current_connections <= 0) { // If counter is 0, free track
 800222e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	dc10      	bgt.n	8002258 <routeBreadboard+0x15c>
			printf("Main Track %d is now free\n", selectedTrack->track_id);
 8002236:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4619      	mov	r1, r3
 800223c:	4851      	ldr	r0, [pc, #324]	@ (8002384 <routeBreadboard+0x288>)
 800223e:	f002 f865 	bl	800430c <iprintf>
			selectedTrack->is_used = 0;
 8002242:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002244:	2200      	movs	r2, #0
 8002246:	609a      	str	r2, [r3, #8]
			selectedTrack->net_id = -1;
 8002248:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800224a:	f04f 32ff 	mov.w	r2, #4294967295
 800224e:	605a      	str	r2, [r3, #4]
			selectedTrack->current_connections = 0;
 8002250:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002252:	2200      	movs	r2, #0
 8002254:	60da      	str	r2, [r3, #12]
 8002256:	e007      	b.n	8002268 <routeBreadboard+0x16c>
		}else{
			printf("Main Track %d decremented, but still occupied. Current connections: %d\n", selectedTrack->track_id, selectedTrack->current_connections);
 8002258:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800225a:	6819      	ldr	r1, [r3, #0]
 800225c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	461a      	mov	r2, r3
 8002262:	4849      	ldr	r0, [pc, #292]	@ (8002388 <routeBreadboard+0x28c>)
 8002264:	f002 f852 	bl	800430c <iprintf>

		}
	}

    muxIndex = (selectedTrack->track_id < 16) ? 0 : 1;
 8002268:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b0f      	cmp	r3, #15
 800226e:	bfcc      	ite	gt
 8002270:	2301      	movgt	r3, #1
 8002272:	2300      	movle	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	63fb      	str	r3, [r7, #60]	@ 0x3c

        for (size_t i = muxIndex; i < muxCount; i += 2) {
 8002278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800227a:	647b      	str	r3, [r7, #68]	@ 0x44
 800227c:	e05b      	b.n	8002336 <routeBreadboard+0x23a>
            for (int y = 0; y < 8; ++y) {
 800227e:	2300      	movs	r3, #0
 8002280:	643b      	str	r3, [r7, #64]	@ 0x40
 8002282:	e04c      	b.n	800231e <routeBreadboard+0x222>
                if (strcmp((*muxes[i].yPins)[y], pin1Name) == 0 && mux1 == NULL) {
 8002284:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4413      	add	r3, r2
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002294:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8002298:	4611      	mov	r1, r2
 800229a:	4618      	mov	r0, r3
 800229c:	f7fd ffc2 	bl	8000224 <strcmp>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d113      	bne.n	80022ce <routeBreadboard+0x1d2>
 80022a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d110      	bne.n	80022ce <routeBreadboard+0x1d2>
                    xIndex1 = selectedTrack->track_id % 16;
 80022ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	425a      	negs	r2, r3
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	f002 020f 	and.w	r2, r2, #15
 80022ba:	bf58      	it	pl
 80022bc:	4253      	negpl	r3, r2
 80022be:	667b      	str	r3, [r7, #100]	@ 0x64
                    yIndex1 = y;
 80022c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022c2:	663b      	str	r3, [r7, #96]	@ 0x60
                    mux1 = &muxes[i];
 80022c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4413      	add	r3, r2
 80022cc:	657b      	str	r3, [r7, #84]	@ 0x54
                }
                if (strcmp((*muxes[i].yPins)[y], pin2Name) == 0 && mux2 == NULL) {
 80022ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4413      	add	r3, r2
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022de:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fd ff9d 	bl	8000224 <strcmp>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d113      	bne.n	8002318 <routeBreadboard+0x21c>
 80022f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d110      	bne.n	8002318 <routeBreadboard+0x21c>
                    xIndex2 = selectedTrack->track_id % 16;
 80022f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	425a      	negs	r2, r3
 80022fc:	f003 030f 	and.w	r3, r3, #15
 8002300:	f002 020f 	and.w	r2, r2, #15
 8002304:	bf58      	it	pl
 8002306:	4253      	negpl	r3, r2
 8002308:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    yIndex2 = y;
 800230a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800230c:	65bb      	str	r3, [r7, #88]	@ 0x58
                    mux2 = &muxes[i];
 800230e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4413      	add	r3, r2
 8002316:	653b      	str	r3, [r7, #80]	@ 0x50
            for (int y = 0; y < 8; ++y) {
 8002318:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800231a:	3301      	adds	r3, #1
 800231c:	643b      	str	r3, [r7, #64]	@ 0x40
 800231e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002320:	2b07      	cmp	r3, #7
 8002322:	ddaf      	ble.n	8002284 <routeBreadboard+0x188>
                }
            }
            if (mux1 && mux2) break;
 8002324:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <routeBreadboard+0x234>
 800232a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800232c:	2b00      	cmp	r3, #0
 800232e:	d108      	bne.n	8002342 <routeBreadboard+0x246>
        for (size_t i = muxIndex; i < muxCount; i += 2) {
 8002330:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002332:	3302      	adds	r3, #2
 8002334:	647b      	str	r3, [r7, #68]	@ 0x44
 8002336:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002338:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800233c:	429a      	cmp	r2, r3
 800233e:	d39e      	bcc.n	800227e <routeBreadboard+0x182>
 8002340:	e000      	b.n	8002344 <routeBreadboard+0x248>
            if (mux1 && mux2) break;
 8002342:	bf00      	nop
        }

        if (mux1 && mux2) {
 8002344:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 80ba 	beq.w	80024c0 <routeBreadboard+0x3c4>
 800234c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 80b6 	beq.w	80024c0 <routeBreadboard+0x3c4>
        	printf("%s (X:%d, Y:%d) at MUX[%d] CS: %s, Pin: %s, Main Track: %d\n"
 8002354:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8002358:	2b00      	cmp	r3, #0
 800235a:	d019      	beq.n	8002390 <routeBreadboard+0x294>
 800235c:	4b0b      	ldr	r3, [pc, #44]	@ (800238c <routeBreadboard+0x290>)
 800235e:	617b      	str	r3, [r7, #20]
 8002360:	e018      	b.n	8002394 <routeBreadboard+0x298>
 8002362:	bf00      	nop
 8002364:	080063e4 	.word	0x080063e4
 8002368:	080063ec 	.word	0x080063ec
 800236c:	08006404 	.word	0x08006404
 8002370:	20000cd0 	.word	0x20000cd0
 8002374:	20003fe8 	.word	0x20003fe8
 8002378:	08006428 	.word	0x08006428
 800237c:	08006440 	.word	0x08006440
 8002380:	08006470 	.word	0x08006470
 8002384:	080064a4 	.word	0x080064a4
 8002388:	080064c0 	.word	0x080064c0
 800238c:	08006508 	.word	0x08006508
 8002390:	4b51      	ldr	r3, [pc, #324]	@ (80024d8 <routeBreadboard+0x3dc>)
 8002392:	617b      	str	r3, [r7, #20]
        			"%s (X:%d, Y:%d) at MUX[%d] CS: %s, Pin: %s, Main Track: %d\n\n",
        	                mode ? "Connecting" : "Disconnecting",
        	                xIndex1, yIndex1, mux1 - muxes + 1, getPortName(mux1->port), getPinName(mux1->pin), selectedTrack->track_id,
 8002394:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	111b      	asrs	r3, r3, #4
        	printf("%s (X:%d, Y:%d) at MUX[%d] CS: %s, Pin: %s, Main Track: %d\n"
 800239c:	1c5c      	adds	r4, r3, #1
 800239e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff fcaa 	bl	8001cfc <getPortName>
 80023a8:	6138      	str	r0, [r7, #16]
 80023aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fce2 	bl	8001d78 <getPinName>
 80023b4:	60f8      	str	r0, [r7, #12]
 80023b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023b8:	681d      	ldr	r5, [r3, #0]
 80023ba:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <routeBreadboard+0x2ca>
 80023c2:	4e46      	ldr	r6, [pc, #280]	@ (80024dc <routeBreadboard+0x3e0>)
 80023c4:	e000      	b.n	80023c8 <routeBreadboard+0x2cc>
 80023c6:	4e44      	ldr	r6, [pc, #272]	@ (80024d8 <routeBreadboard+0x3dc>)
							mode ? "Connecting" : "Disconnecting",
        	                xIndex2, yIndex2, mux2 - muxes + 1, getPortName(mux2->port), getPinName(mux2->pin), selectedTrack->track_id);
 80023c8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	111b      	asrs	r3, r3, #4
        	printf("%s (X:%d, Y:%d) at MUX[%d] CS: %s, Pin: %s, Main Track: %d\n"
 80023d0:	3301      	adds	r3, #1
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fc8f 	bl	8001cfc <getPortName>
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fcc7 	bl	8001d78 <getPinName>
 80023ea:	4602      	mov	r2, r0
 80023ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80023f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	9208      	str	r2, [sp, #32]
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	9307      	str	r3, [sp, #28]
 80023fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023fe:	9306      	str	r3, [sp, #24]
 8002400:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002402:	9305      	str	r3, [sp, #20]
 8002404:	9604      	str	r6, [sp, #16]
 8002406:	9503      	str	r5, [sp, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	9302      	str	r3, [sp, #8]
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	9301      	str	r3, [sp, #4]
 8002410:	9400      	str	r4, [sp, #0]
 8002412:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002414:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002416:	6979      	ldr	r1, [r7, #20]
 8002418:	4831      	ldr	r0, [pc, #196]	@ (80024e0 <routeBreadboard+0x3e4>)
 800241a:	f001 ff77 	bl	800430c <iprintf>
        	        fflush(stdout);
 800241e:	4b31      	ldr	r3, [pc, #196]	@ (80024e4 <routeBreadboard+0x3e8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	4618      	mov	r0, r3
 8002426:	f001 fe9b 	bl	8004160 <fflush>
			fflush(stdout);
 800242a:	4b2e      	ldr	r3, [pc, #184]	@ (80024e4 <routeBreadboard+0x3e8>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	4618      	mov	r0, r3
 8002432:	f001 fe95 	bl	8004160 <fflush>


            setConnection(xIndex1, yIndex1, *mux1, mode);
 8002436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002438:	f897 2084 	ldrb.w	r2, [r7, #132]	@ 0x84
 800243c:	9202      	str	r2, [sp, #8]
 800243e:	466c      	mov	r4, sp
 8002440:	f103 0208 	add.w	r2, r3, #8
 8002444:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002448:	e884 0003 	stmia.w	r4, {r0, r1}
 800244c:	cb0c      	ldmia	r3, {r2, r3}
 800244e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002450:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002452:	f7ff fd7d 	bl	8001f50 <setConnection>
            setConnection(xIndex2, yIndex2, *mux2, mode);
 8002456:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002458:	f897 2084 	ldrb.w	r2, [r7, #132]	@ 0x84
 800245c:	9202      	str	r2, [sp, #8]
 800245e:	466c      	mov	r4, sp
 8002460:	f103 0208 	add.w	r2, r3, #8
 8002464:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002468:	e884 0003 	stmia.w	r4, {r0, r1}
 800246c:	cb0c      	ldmia	r3, {r2, r3}
 800246e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002470:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002472:	f7ff fd6d 	bl	8001f50 <setConnection>

            mode == 1 ? addToPin(breadboardPin1, rgb) : removeFromPin(breadboardPin1);
 8002476:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800247a:	2b01      	cmp	r3, #1
 800247c:	d107      	bne.n	800248e <routeBreadboard+0x392>
 800247e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002480:	b2db      	uxtb	r3, r3
 8002482:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe f866 	bl	8000558 <addToPin>
 800248c:	e004      	b.n	8002498 <routeBreadboard+0x39c>
 800248e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002490:	b2db      	uxtb	r3, r3
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe f8a8 	bl	80005e8 <removeFromPin>
            mode == 1 ? addToPin(breadboardPin2, rgb) : removeFromPin(breadboardPin2);
 8002498:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800249c:	2b01      	cmp	r3, #1
 800249e:	d107      	bne.n	80024b0 <routeBreadboard+0x3b4>
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fe f855 	bl	8000558 <addToPin>
 80024ae:	e004      	b.n	80024ba <routeBreadboard+0x3be>
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe f897 	bl	80005e8 <removeFromPin>

			sendPixelData();
 80024ba:	f7fe f901 	bl	80006c0 <sendPixelData>
 80024be:	e008      	b.n	80024d2 <routeBreadboard+0x3d6>
        } else {
            printf("Error: Unable to route pins - No available MUX found!\n");
 80024c0:	4809      	ldr	r0, [pc, #36]	@ (80024e8 <routeBreadboard+0x3ec>)
 80024c2:	f001 ff93 	bl	80043ec <puts>
            fflush(stdout);
 80024c6:	4b07      	ldr	r3, [pc, #28]	@ (80024e4 <routeBreadboard+0x3e8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f001 fe47 	bl	8004160 <fflush>
        }
    }
 80024d2:	376c      	adds	r7, #108	@ 0x6c
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024d8:	08006514 	.word	0x08006514
 80024dc:	08006508 	.word	0x08006508
 80024e0:	08006524 	.word	0x08006524
 80024e4:	20000cd0 	.word	0x20000cd0
 80024e8:	0800659c 	.word	0x0800659c

080024ec <routeSignalAnalyzer>:

void routeSignalAnalyzer(int net_id, MUX *muxes, uint8_t mode) {
 80024ec:	b590      	push	{r4, r7, lr}
 80024ee:	b097      	sub	sp, #92	@ 0x5c
 80024f0:	af04      	add	r7, sp, #16
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	4613      	mov	r3, r2
 80024f8:	71fb      	strb	r3, [r7, #7]
    MainTrack *selectedTrack = NULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	647b      	str	r3, [r7, #68]	@ 0x44
    int trackIndex = -1;
 80024fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002502:	627b      	str	r3, [r7, #36]	@ 0x24
    char trackName[10];  // Buffer for formatted string
    int xIndex = -1, yIndex = -1;
 8002504:	f04f 33ff 	mov.w	r3, #4294967295
 8002508:	643b      	str	r3, [r7, #64]	@ 0x40
 800250a:	f04f 33ff 	mov.w	r3, #4294967295
 800250e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    MUX *mux = NULL;
 8002510:	2300      	movs	r3, #0
 8002512:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Step 1: Find a main track that is used and has the matching net_id
    for (int i = 0; i < 32; i++) {
 8002514:	2300      	movs	r3, #0
 8002516:	637b      	str	r3, [r7, #52]	@ 0x34
 8002518:	e02b      	b.n	8002572 <routeSignalAnalyzer+0x86>
        if (mainTracks[i].is_used && mainTracks[i].net_id == net_id) {
 800251a:	4a8e      	ldr	r2, [pc, #568]	@ (8002754 <routeSignalAnalyzer+0x268>)
 800251c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	4413      	add	r3, r2
 8002522:	3308      	adds	r3, #8
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d020      	beq.n	800256c <routeSignalAnalyzer+0x80>
 800252a:	4a8a      	ldr	r2, [pc, #552]	@ (8002754 <routeSignalAnalyzer+0x268>)
 800252c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	4413      	add	r3, r2
 8002532:	3304      	adds	r3, #4
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	429a      	cmp	r2, r3
 800253a:	d117      	bne.n	800256c <routeSignalAnalyzer+0x80>
            selectedTrack = &mainTracks[i];
 800253c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	4a84      	ldr	r2, [pc, #528]	@ (8002754 <routeSignalAnalyzer+0x268>)
 8002542:	4413      	add	r3, r2
 8002544:	647b      	str	r3, [r7, #68]	@ 0x44
            trackIndex = i;
 8002546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002548:	627b      	str	r3, [r7, #36]	@ 0x24
            snprintf(trackName, sizeof(trackName), "MT_%d", trackIndex + 1); // Convert to "MT_X"
 800254a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254c:	3301      	adds	r3, #1
 800254e:	f107 0010 	add.w	r0, r7, #16
 8002552:	4a81      	ldr	r2, [pc, #516]	@ (8002758 <routeSignalAnalyzer+0x26c>)
 8002554:	210a      	movs	r1, #10
 8002556:	f001 ff51 	bl	80043fc <sniprintf>
			printf("Found Main Track %d (Name: %s) for Net ID %d\n", selectedTrack->track_id, trackName, net_id);
 800255a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800255c:	6819      	ldr	r1, [r3, #0]
 800255e:	f107 0210 	add.w	r2, r7, #16
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	487d      	ldr	r0, [pc, #500]	@ (800275c <routeSignalAnalyzer+0x270>)
 8002566:	f001 fed1 	bl	800430c <iprintf>
			break;
 800256a:	e005      	b.n	8002578 <routeSignalAnalyzer+0x8c>
    for (int i = 0; i < 32; i++) {
 800256c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800256e:	3301      	adds	r3, #1
 8002570:	637b      	str	r3, [r7, #52]	@ 0x34
 8002572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002574:	2b1f      	cmp	r3, #31
 8002576:	ddd0      	ble.n	800251a <routeSignalAnalyzer+0x2e>
        }
    }

    if (!selectedTrack) {
 8002578:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800257a:	2b00      	cmp	r3, #0
 800257c:	d104      	bne.n	8002588 <routeSignalAnalyzer+0x9c>
        printf("Error: No active Main Track found for Net ID %d\n", net_id);
 800257e:	68f9      	ldr	r1, [r7, #12]
 8002580:	4877      	ldr	r0, [pc, #476]	@ (8002760 <routeSignalAnalyzer+0x274>)
 8002582:	f001 fec3 	bl	800430c <iprintf>
        return;
 8002586:	e0e2      	b.n	800274e <routeSignalAnalyzer+0x262>
    }

    // Step 2: Check MUX 33 and 34
    MUX *mux33 = &muxes[32]; // MUX 33 (Array index 32)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800258e:	623b      	str	r3, [r7, #32]
    MUX *mux34 = &muxes[33]; // MUX 34 (Array index 33)
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8002596:	61fb      	str	r3, [r7, #28]

    // Step 3: Look for the track ID in X Pins of MUX 33 and 34

    for (int i = 0; i < 16; i++) {
 8002598:	2300      	movs	r3, #0
 800259a:	633b      	str	r3, [r7, #48]	@ 0x30
 800259c:	e028      	b.n	80025f0 <routeSignalAnalyzer+0x104>
        if (strcmp((*mux33->xPins)[i], trackName) == 0) {
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a8:	f107 0210 	add.w	r2, r7, #16
 80025ac:	4611      	mov	r1, r2
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fd fe38 	bl	8000224 <strcmp>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d104      	bne.n	80025c4 <routeSignalAnalyzer+0xd8>
            xIndex = i;
 80025ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025bc:	643b      	str	r3, [r7, #64]	@ 0x40
            mux = mux33;
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	63bb      	str	r3, [r7, #56]	@ 0x38
            break;
 80025c2:	e018      	b.n	80025f6 <routeSignalAnalyzer+0x10a>
        }
        if (strcmp((*mux34->xPins)[i], trackName) == 0) {
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ce:	f107 0210 	add.w	r2, r7, #16
 80025d2:	4611      	mov	r1, r2
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fd fe25 	bl	8000224 <strcmp>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d104      	bne.n	80025ea <routeSignalAnalyzer+0xfe>
            xIndex = i;
 80025e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e2:	643b      	str	r3, [r7, #64]	@ 0x40
            mux = mux34;
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	63bb      	str	r3, [r7, #56]	@ 0x38
            break;
 80025e8:	e005      	b.n	80025f6 <routeSignalAnalyzer+0x10a>
    for (int i = 0; i < 16; i++) {
 80025ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ec:	3301      	adds	r3, #1
 80025ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80025f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f2:	2b0f      	cmp	r3, #15
 80025f4:	ddd3      	ble.n	800259e <routeSignalAnalyzer+0xb2>
        }
    }

    if (mode == 1) {  // Connecting
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d139      	bne.n	8002670 <routeSignalAnalyzer+0x184>
		for (int i = 0; i < 8; i++) {
 80025fc:	2300      	movs	r3, #0
 80025fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002600:	e032      	b.n	8002668 <routeSignalAnalyzer+0x17c>
			if (!signalAnalyzerTracks[i].is_used) {
 8002602:	4958      	ldr	r1, [pc, #352]	@ (8002764 <routeSignalAnalyzer+0x278>)
 8002604:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002606:	4613      	mov	r3, r2
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	4413      	add	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	440b      	add	r3, r1
 8002610:	3308      	adds	r3, #8
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d124      	bne.n	8002662 <routeSignalAnalyzer+0x176>
				yIndex = i;
 8002618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800261a:	63fb      	str	r3, [r7, #60]	@ 0x3c
				signalAnalyzerTracks[i].is_used = 1;
 800261c:	4951      	ldr	r1, [pc, #324]	@ (8002764 <routeSignalAnalyzer+0x278>)
 800261e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002620:	4613      	mov	r3, r2
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	4413      	add	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	3308      	adds	r3, #8
 800262c:	2201      	movs	r2, #1
 800262e:	601a      	str	r2, [r3, #0]
				signalAnalyzerTracks[i].net_id = net_id;
 8002630:	494c      	ldr	r1, [pc, #304]	@ (8002764 <routeSignalAnalyzer+0x278>)
 8002632:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002634:	4613      	mov	r3, r2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	4413      	add	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	3304      	adds	r3, #4
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	601a      	str	r2, [r3, #0]
				signalAnalyzerTracks[i].track_id = xIndex;
 8002644:	4947      	ldr	r1, [pc, #284]	@ (8002764 <routeSignalAnalyzer+0x278>)
 8002646:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002648:	4613      	mov	r3, r2
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	4413      	add	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002654:	601a      	str	r2, [r3, #0]
				printf("Assigned Y Pin %d to Net ID %d\n", yIndex, net_id);
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800265a:	4843      	ldr	r0, [pc, #268]	@ (8002768 <routeSignalAnalyzer+0x27c>)
 800265c:	f001 fe56 	bl	800430c <iprintf>
				break;
 8002660:	e04d      	b.n	80026fe <routeSignalAnalyzer+0x212>
		for (int i = 0; i < 8; i++) {
 8002662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002664:	3301      	adds	r3, #1
 8002666:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800266a:	2b07      	cmp	r3, #7
 800266c:	ddc9      	ble.n	8002602 <routeSignalAnalyzer+0x116>
 800266e:	e046      	b.n	80026fe <routeSignalAnalyzer+0x212>
			}
		}
	} else {  // Disconnecting
		for (int i = 0; i < 8; i++) {
 8002670:	2300      	movs	r3, #0
 8002672:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002674:	e040      	b.n	80026f8 <routeSignalAnalyzer+0x20c>
			if (signalAnalyzerTracks[i].is_used && signalAnalyzerTracks[i].net_id == net_id) {
 8002676:	493b      	ldr	r1, [pc, #236]	@ (8002764 <routeSignalAnalyzer+0x278>)
 8002678:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800267a:	4613      	mov	r3, r2
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	4413      	add	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	440b      	add	r3, r1
 8002684:	3308      	adds	r3, #8
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d032      	beq.n	80026f2 <routeSignalAnalyzer+0x206>
 800268c:	4935      	ldr	r1, [pc, #212]	@ (8002764 <routeSignalAnalyzer+0x278>)
 800268e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002690:	4613      	mov	r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	4413      	add	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	3304      	adds	r3, #4
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d126      	bne.n	80026f2 <routeSignalAnalyzer+0x206>
				yIndex = i;
 80026a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
				signalAnalyzerTracks[i].is_used = 0;
 80026a8:	492e      	ldr	r1, [pc, #184]	@ (8002764 <routeSignalAnalyzer+0x278>)
 80026aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026ac:	4613      	mov	r3, r2
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	4413      	add	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	3308      	adds	r3, #8
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
				signalAnalyzerTracks[i].net_id = -1;
 80026bc:	4929      	ldr	r1, [pc, #164]	@ (8002764 <routeSignalAnalyzer+0x278>)
 80026be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026c0:	4613      	mov	r3, r2
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	4413      	add	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	3304      	adds	r3, #4
 80026cc:	f04f 32ff 	mov.w	r2, #4294967295
 80026d0:	601a      	str	r2, [r3, #0]
				signalAnalyzerTracks[i].track_id = -1;
 80026d2:	4924      	ldr	r1, [pc, #144]	@ (8002764 <routeSignalAnalyzer+0x278>)
 80026d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026d6:	4613      	mov	r3, r2
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	f04f 32ff 	mov.w	r2, #4294967295
 80026e4:	601a      	str	r2, [r3, #0]
				printf("Freed Y Pin %d for Net ID %d\n", yIndex, net_id);
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80026ea:	4820      	ldr	r0, [pc, #128]	@ (800276c <routeSignalAnalyzer+0x280>)
 80026ec:	f001 fe0e 	bl	800430c <iprintf>
				break;
 80026f0:	e005      	b.n	80026fe <routeSignalAnalyzer+0x212>
		for (int i = 0; i < 8; i++) {
 80026f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026f4:	3301      	adds	r3, #1
 80026f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026fa:	2b07      	cmp	r3, #7
 80026fc:	ddbb      	ble.n	8002676 <routeSignalAnalyzer+0x18a>
			}
		}
	}

	if (yIndex == -1) {
 80026fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002704:	d103      	bne.n	800270e <routeSignalAnalyzer+0x222>
		printf("Error: No available Y Pin found for Signal Analyzer\n");
 8002706:	481a      	ldr	r0, [pc, #104]	@ (8002770 <routeSignalAnalyzer+0x284>)
 8002708:	f001 fe70 	bl	80043ec <puts>
		return;
 800270c:	e01f      	b.n	800274e <routeSignalAnalyzer+0x262>
	}

	printf("Connecting Signal Analyzer to MUX %d at (X: %d, Y: %d) for Net ID %d\n",
 800270e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	429a      	cmp	r2, r3
 8002714:	d101      	bne.n	800271a <routeSignalAnalyzer+0x22e>
 8002716:	2121      	movs	r1, #33	@ 0x21
 8002718:	e000      	b.n	800271c <routeSignalAnalyzer+0x230>
 800271a:	2122      	movs	r1, #34	@ 0x22
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002722:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002724:	4813      	ldr	r0, [pc, #76]	@ (8002774 <routeSignalAnalyzer+0x288>)
 8002726:	f001 fdf1 	bl	800430c <iprintf>
		   (mux == mux33 ? 33 : 34), xIndex, yIndex, net_id);

	printf("\n");
 800272a:	200a      	movs	r0, #10
 800272c:	f001 fe00 	bl	8004330 <putchar>

	// Step 5: Set the connection
	setConnection(xIndex, yIndex, *mux, mode);
 8002730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002732:	79fa      	ldrb	r2, [r7, #7]
 8002734:	9202      	str	r2, [sp, #8]
 8002736:	466c      	mov	r4, sp
 8002738:	f103 0208 	add.w	r2, r3, #8
 800273c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002740:	e884 0003 	stmia.w	r4, {r0, r1}
 8002744:	cb0c      	ldmia	r3, {r2, r3}
 8002746:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002748:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800274a:	f7ff fc01 	bl	8001f50 <setConnection>
}
 800274e:	374c      	adds	r7, #76	@ 0x4c
 8002750:	46bd      	mov	sp, r7
 8002752:	bd90      	pop	{r4, r7, pc}
 8002754:	20003fe8 	.word	0x20003fe8
 8002758:	080065d4 	.word	0x080065d4
 800275c:	080065dc 	.word	0x080065dc
 8002760:	0800660c 	.word	0x0800660c
 8002764:	200041e8 	.word	0x200041e8
 8002768:	08006640 	.word	0x08006640
 800276c:	08006660 	.word	0x08006660
 8002770:	08006680 	.word	0x08006680
 8002774:	080066b4 	.word	0x080066b4

08002778 <clear>:

void clear() {
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
    printf("Clearing all main tracks and signal analyzer tracks...\n");
 800277e:	4836      	ldr	r0, [pc, #216]	@ (8002858 <clear+0xe0>)
 8002780:	f001 fe34 	bl	80043ec <puts>

    // Step 1: Clear all main tracks
    for (int i = 0; i < 32; i++) {
 8002784:	2300      	movs	r3, #0
 8002786:	607b      	str	r3, [r7, #4]
 8002788:	e01f      	b.n	80027ca <clear+0x52>
        mainTracks[i].is_used = 0;
 800278a:	4a34      	ldr	r2, [pc, #208]	@ (800285c <clear+0xe4>)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	4413      	add	r3, r2
 8002792:	3308      	adds	r3, #8
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
        mainTracks[i].net_id = -1;
 8002798:	4a30      	ldr	r2, [pc, #192]	@ (800285c <clear+0xe4>)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	011b      	lsls	r3, r3, #4
 800279e:	4413      	add	r3, r2
 80027a0:	3304      	adds	r3, #4
 80027a2:	f04f 32ff 	mov.w	r2, #4294967295
 80027a6:	601a      	str	r2, [r3, #0]
        mainTracks[i].current_connections = 0;
 80027a8:	4a2c      	ldr	r2, [pc, #176]	@ (800285c <clear+0xe4>)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	4413      	add	r3, r2
 80027b0:	330c      	adds	r3, #12
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
        mainTracks[i].track_id = -1;
 80027b6:	4a29      	ldr	r2, [pc, #164]	@ (800285c <clear+0xe4>)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	4413      	add	r3, r2
 80027be:	f04f 32ff 	mov.w	r2, #4294967295
 80027c2:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 32; i++) {
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3301      	adds	r3, #1
 80027c8:	607b      	str	r3, [r7, #4]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b1f      	cmp	r3, #31
 80027ce:	dddc      	ble.n	800278a <clear+0x12>
    }

    printf("All main tracks cleared.\n");
 80027d0:	4823      	ldr	r0, [pc, #140]	@ (8002860 <clear+0xe8>)
 80027d2:	f001 fe0b 	bl	80043ec <puts>

    // Step 2: Clear all signal analyzer tracks
    for (int i = 0; i < 8; i++) {
 80027d6:	2300      	movs	r3, #0
 80027d8:	603b      	str	r3, [r7, #0]
 80027da:	e021      	b.n	8002820 <clear+0xa8>
        signalAnalyzerTracks[i].is_used = 0;
 80027dc:	4921      	ldr	r1, [pc, #132]	@ (8002864 <clear+0xec>)
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	4613      	mov	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	3308      	adds	r3, #8
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
        signalAnalyzerTracks[i].net_id = -1;
 80027f0:	491c      	ldr	r1, [pc, #112]	@ (8002864 <clear+0xec>)
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	4613      	mov	r3, r2
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	4413      	add	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	3304      	adds	r3, #4
 8002800:	f04f 32ff 	mov.w	r2, #4294967295
 8002804:	601a      	str	r2, [r3, #0]
        signalAnalyzerTracks[i].track_id = -1;
 8002806:	4917      	ldr	r1, [pc, #92]	@ (8002864 <clear+0xec>)
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	4613      	mov	r3, r2
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	4413      	add	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	f04f 32ff 	mov.w	r2, #4294967295
 8002818:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	3301      	adds	r3, #1
 800281e:	603b      	str	r3, [r7, #0]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	2b07      	cmp	r3, #7
 8002824:	ddda      	ble.n	80027dc <clear+0x64>
    }

    printf("All signal analyzer tracks cleared.\n");
 8002826:	4810      	ldr	r0, [pc, #64]	@ (8002868 <clear+0xf0>)
 8002828:	f001 fde0 	bl	80043ec <puts>
//    }
//
//    printf("All multiplexer connections cleared.\n");

    // Step 4: Perform hardware reset using RST_GPIO
    LL_GPIO_SetOutputPin(RST_GPIO, RST_PIN);
 800282c:	490f      	ldr	r1, [pc, #60]	@ (800286c <clear+0xf4>)
 800282e:	4810      	ldr	r0, [pc, #64]	@ (8002870 <clear+0xf8>)
 8002830:	f7ff fa46 	bl	8001cc0 <LL_GPIO_SetOutputPin>
    LL_mDelay(20);
 8002834:	2014      	movs	r0, #20
 8002836:	f001 fbb9 	bl	8003fac <LL_mDelay>
    LL_GPIO_ResetOutputPin(RST_GPIO, RST_PIN);
 800283a:	490c      	ldr	r1, [pc, #48]	@ (800286c <clear+0xf4>)
 800283c:	480c      	ldr	r0, [pc, #48]	@ (8002870 <clear+0xf8>)
 800283e:	f7ff fa4e 	bl	8001cde <LL_GPIO_ResetOutputPin>
    LL_mDelay(20);
 8002842:	2014      	movs	r0, #20
 8002844:	f001 fbb2 	bl	8003fac <LL_mDelay>

    printf("RST complete.\n\n");
 8002848:	480a      	ldr	r0, [pc, #40]	@ (8002874 <clear+0xfc>)
 800284a:	f001 fdcf 	bl	80043ec <puts>
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	080066fc 	.word	0x080066fc
 800285c:	20003fe8 	.word	0x20003fe8
 8002860:	08006734 	.word	0x08006734
 8002864:	200041e8 	.word	0x200041e8
 8002868:	08006750 	.word	0x08006750
 800286c:	04020002 	.word	0x04020002
 8002870:	40010c00 	.word	0x40010c00
 8002874:	08006774 	.word	0x08006774

08002878 <processCommand>:

void processCommand(char *command) {
 8002878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287a:	b095      	sub	sp, #84	@ 0x54
 800287c:	af06      	add	r7, sp, #24
 800287e:	6078      	str	r0, [r7, #4]
	if (!fault_3v3_triggered || !fault_5v_triggered){ // test tmr
 8002880:	4b5d      	ldr	r3, [pc, #372]	@ (80029f8 <processCommand+0x180>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d004      	beq.n	8002894 <processCommand+0x1c>
 800288a:	4b5c      	ldr	r3, [pc, #368]	@ (80029fc <processCommand+0x184>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	d15d      	bne.n	8002950 <processCommand+0xd8>

		if (strncmp(command, "RB", 2) == 0) {  // Check if it's a "ROUTE" command
 8002894:	2202      	movs	r2, #2
 8002896:	495a      	ldr	r1, [pc, #360]	@ (8002a00 <processCommand+0x188>)
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f001 feef 	bl	800467c <strncmp>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d155      	bne.n	8002950 <processCommand+0xd8>
				int pin1, pin2, net_id, mode, r, g, b;
				int parsed = sscanf(command, "RB %d %d %d %d %d %d %d",
 80028a4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80028a8:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80028ac:	f107 0314 	add.w	r3, r7, #20
 80028b0:	9304      	str	r3, [sp, #16]
 80028b2:	f107 0318 	add.w	r3, r7, #24
 80028b6:	9303      	str	r3, [sp, #12]
 80028b8:	f107 031c 	add.w	r3, r7, #28
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	f107 0320 	add.w	r3, r7, #32
 80028c2:	9301      	str	r3, [sp, #4]
 80028c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	460b      	mov	r3, r1
 80028cc:	494d      	ldr	r1, [pc, #308]	@ (8002a04 <processCommand+0x18c>)
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f001 fdc8 	bl	8004464 <siscanf>
 80028d4:	6378      	str	r0, [r7, #52]	@ 0x34
									&pin1, &pin2, &net_id, &mode, &r, &g, &b);
				if (parsed == 7) {  // Ensure all arguments were parsed
 80028d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028d8:	2b07      	cmp	r3, #7
 80028da:	d130      	bne.n	800293e <processCommand+0xc6>
					RGB_t color = {b, r, g}; // This is brg, because of the Union, the union is brg, cuz the leds take brg
 80028dc:	2300      	movs	r3, #0
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	743b      	strb	r3, [r7, #16]
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	747b      	strb	r3, [r7, #17]
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	74bb      	strb	r3, [r7, #18]
					printf("Calling routeBreadboard with: Pin1=%d, Pin2=%d, NetID=%d, Mode=%d, RGB(%d,%d,%d)\n",
 80028f2:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 80028f4:	6abd      	ldr	r5, [r7, #40]	@ 0x28
 80028f6:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	69fa      	ldr	r2, [r7, #28]
 80028fc:	69b9      	ldr	r1, [r7, #24]
 80028fe:	6978      	ldr	r0, [r7, #20]
 8002900:	9003      	str	r0, [sp, #12]
 8002902:	9102      	str	r1, [sp, #8]
 8002904:	9201      	str	r2, [sp, #4]
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	4633      	mov	r3, r6
 800290a:	462a      	mov	r2, r5
 800290c:	4621      	mov	r1, r4
 800290e:	483e      	ldr	r0, [pc, #248]	@ (8002a08 <processCommand+0x190>)
 8002910:	f001 fcfc 	bl	800430c <iprintf>
						   pin1, pin2, net_id, mode, r, g, b);
					fflush(stdout);
 8002914:	4b3d      	ldr	r3, [pc, #244]	@ (8002a0c <processCommand+0x194>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	4618      	mov	r0, r3
 800291c:	f001 fc20 	bl	8004160 <fflush>

					routeBreadboard(pin1, pin2, net_id, muxes, sizeof(muxes) / sizeof(muxes[0]), mode, color);
 8002920:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002922:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002924:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	b2db      	uxtb	r3, r3
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	9202      	str	r2, [sp, #8]
 800292e:	9301      	str	r3, [sp, #4]
 8002930:	2322      	movs	r3, #34	@ 0x22
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	4b36      	ldr	r3, [pc, #216]	@ (8002a10 <processCommand+0x198>)
 8002936:	4622      	mov	r2, r4
 8002938:	f7ff fbe0 	bl	80020fc <routeBreadboard>
 800293c:	e008      	b.n	8002950 <processCommand+0xd8>
				} else {
					printf("Error: Invalid RB command format!\n");
 800293e:	4835      	ldr	r0, [pc, #212]	@ (8002a14 <processCommand+0x19c>)
 8002940:	f001 fd54 	bl	80043ec <puts>
					fflush(stdout);
 8002944:	4b31      	ldr	r3, [pc, #196]	@ (8002a0c <processCommand+0x194>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	4618      	mov	r0, r3
 800294c:	f001 fc08 	bl	8004160 <fflush>
				}
			}
		}
		if (strncmp(command, "RS", 2) == 0) {
 8002950:	2202      	movs	r2, #2
 8002952:	4931      	ldr	r1, [pc, #196]	@ (8002a18 <processCommand+0x1a0>)
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f001 fe91 	bl	800467c <strncmp>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d128      	bne.n	80029b2 <processCommand+0x13a>
			int net_id, mode;
			int parsed = sscanf(command, "RS %d %d",
 8002960:	f107 0308 	add.w	r3, r7, #8
 8002964:	f107 020c 	add.w	r2, r7, #12
 8002968:	492c      	ldr	r1, [pc, #176]	@ (8002a1c <processCommand+0x1a4>)
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f001 fd7a 	bl	8004464 <siscanf>
 8002970:	6338      	str	r0, [r7, #48]	@ 0x30
								&net_id, &mode);
			if (parsed == 2) {  // Ensure all arguments were parsed
 8002972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002974:	2b02      	cmp	r3, #2
 8002976:	d113      	bne.n	80029a0 <processCommand+0x128>
				printf("Calling routeSignalAnalyzer with: NetID=%d, Mode=%d\n",
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	4619      	mov	r1, r3
 800297e:	4828      	ldr	r0, [pc, #160]	@ (8002a20 <processCommand+0x1a8>)
 8002980:	f001 fcc4 	bl	800430c <iprintf>
					   net_id, mode);
				fflush(stdout);
 8002984:	4b21      	ldr	r3, [pc, #132]	@ (8002a0c <processCommand+0x194>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	4618      	mov	r0, r3
 800298c:	f001 fbe8 	bl	8004160 <fflush>

				routeSignalAnalyzer(net_id, muxes, mode);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	491e      	ldr	r1, [pc, #120]	@ (8002a10 <processCommand+0x198>)
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff fda7 	bl	80024ec <routeSignalAnalyzer>
 800299e:	e008      	b.n	80029b2 <processCommand+0x13a>
			} else {
				printf("Error: Invalid RS command format!\n");
 80029a0:	4820      	ldr	r0, [pc, #128]	@ (8002a24 <processCommand+0x1ac>)
 80029a2:	f001 fd23 	bl	80043ec <puts>
				fflush(stdout);
 80029a6:	4b19      	ldr	r3, [pc, #100]	@ (8002a0c <processCommand+0x194>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f001 fbd7 	bl	8004160 <fflush>
		}

	}

    if (strncmp(command, "CLR", 3) == 0) {
 80029b2:	2203      	movs	r2, #3
 80029b4:	491c      	ldr	r1, [pc, #112]	@ (8002a28 <processCommand+0x1b0>)
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f001 fe60 	bl	800467c <strncmp>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <processCommand+0x14e>
		clear();
 80029c2:	f7ff fed9 	bl	8002778 <clear>
	}

    if (strncmp(command, "EN 5V", 5) == 0) {
 80029c6:	2205      	movs	r2, #5
 80029c8:	4918      	ldr	r1, [pc, #96]	@ (8002a2c <processCommand+0x1b4>)
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f001 fe56 	bl	800467c <strncmp>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <processCommand+0x162>
    	FAULT_5v_HandleMsg();
 80029d6:	f7fd fc75 	bl	80002c4 <FAULT_5v_HandleMsg>
	}

    if (strncmp(command, "EN 3V3", 6) == 0) {
 80029da:	2206      	movs	r2, #6
 80029dc:	4914      	ldr	r1, [pc, #80]	@ (8002a30 <processCommand+0x1b8>)
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f001 fe4c 	bl	800467c <strncmp>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <processCommand+0x176>
    	FAULT_3v3_HandleMsg();
 80029ea:	f7fd fc95 	bl	8000318 <FAULT_3v3_HandleMsg>
	}
}
 80029ee:	bf00      	nop
 80029f0:	373c      	adds	r7, #60	@ 0x3c
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20000d3c 	.word	0x20000d3c
 80029fc:	20000d3d 	.word	0x20000d3d
 8002a00:	08006784 	.word	0x08006784
 8002a04:	08006788 	.word	0x08006788
 8002a08:	080067a0 	.word	0x080067a0
 8002a0c:	20000cd0 	.word	0x20000cd0
 8002a10:	080068e0 	.word	0x080068e0
 8002a14:	080067f4 	.word	0x080067f4
 8002a18:	08006818 	.word	0x08006818
 8002a1c:	0800681c 	.word	0x0800681c
 8002a20:	08006828 	.word	0x08006828
 8002a24:	08006860 	.word	0x08006860
 8002a28:	08006884 	.word	0x08006884
 8002a2c:	08006888 	.word	0x08006888
 8002a30:	08006890 	.word	0x08006890

08002a34 <UART_ProcessReceivedByte>:
}



void UART_ProcessReceivedByte(uint8_t byte, uint8_t uartNumber)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	460a      	mov	r2, r1
 8002a3e:	71fb      	strb	r3, [r7, #7]
 8002a40:	4613      	mov	r3, r2
 8002a42:	71bb      	strb	r3, [r7, #6]
    static uint8_t rxBuffer[RX_BUFFER_SIZE];
    static uint8_t rxIndex = 0;

    if (rxIndex < (RX_BUFFER_SIZE - 1))
 8002a44:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab0 <UART_ProcessReceivedByte+0x7c>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b62      	cmp	r3, #98	@ 0x62
 8002a4a:	d809      	bhi.n	8002a60 <UART_ProcessReceivedByte+0x2c>
    {
        rxBuffer[rxIndex++] = byte;
 8002a4c:	4b18      	ldr	r3, [pc, #96]	@ (8002ab0 <UART_ProcessReceivedByte+0x7c>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	b2d1      	uxtb	r1, r2
 8002a54:	4a16      	ldr	r2, [pc, #88]	@ (8002ab0 <UART_ProcessReceivedByte+0x7c>)
 8002a56:	7011      	strb	r1, [r2, #0]
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4a16      	ldr	r2, [pc, #88]	@ (8002ab4 <UART_ProcessReceivedByte+0x80>)
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	5453      	strb	r3, [r2, r1]
    }

    if (byte == '\n' || byte == '\r')
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	2b0a      	cmp	r3, #10
 8002a64:	d002      	beq.n	8002a6c <UART_ProcessReceivedByte+0x38>
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	2b0d      	cmp	r3, #13
 8002a6a:	d11c      	bne.n	8002aa6 <UART_ProcessReceivedByte+0x72>
    {
        rxBuffer[rxIndex] = '\0';  // Null-terminate
 8002a6c:	4b10      	ldr	r3, [pc, #64]	@ (8002ab0 <UART_ProcessReceivedByte+0x7c>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	461a      	mov	r2, r3
 8002a72:	4b10      	ldr	r3, [pc, #64]	@ (8002ab4 <UART_ProcessReceivedByte+0x80>)
 8002a74:	2100      	movs	r1, #0
 8002a76:	5499      	strb	r1, [r3, r2]
        printf("Received from UART%d: %s\n", uartNumber, rxBuffer);
 8002a78:	79bb      	ldrb	r3, [r7, #6]
 8002a7a:	4a0e      	ldr	r2, [pc, #56]	@ (8002ab4 <UART_ProcessReceivedByte+0x80>)
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	480e      	ldr	r0, [pc, #56]	@ (8002ab8 <UART_ProcessReceivedByte+0x84>)
 8002a80:	f001 fc44 	bl	800430c <iprintf>
		fflush(stdout);
 8002a84:	4b0d      	ldr	r3, [pc, #52]	@ (8002abc <UART_ProcessReceivedByte+0x88>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f001 fb68 	bl	8004160 <fflush>
        processCommand((char *)rxBuffer);  // Pass to processing function
 8002a90:	4808      	ldr	r0, [pc, #32]	@ (8002ab4 <UART_ProcessReceivedByte+0x80>)
 8002a92:	f7ff fef1 	bl	8002878 <processCommand>

        memset(rxBuffer, 0, RX_BUFFER_SIZE);
 8002a96:	2264      	movs	r2, #100	@ 0x64
 8002a98:	2100      	movs	r1, #0
 8002a9a:	4806      	ldr	r0, [pc, #24]	@ (8002ab4 <UART_ProcessReceivedByte+0x80>)
 8002a9c:	f001 fde6 	bl	800466c <memset>
        rxIndex = 0;
 8002aa0:	4b03      	ldr	r3, [pc, #12]	@ (8002ab0 <UART_ProcessReceivedByte+0x7c>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	701a      	strb	r2, [r3, #0]
    }
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20004248 	.word	0x20004248
 8002ab4:	2000424c 	.word	0x2000424c
 8002ab8:	08006898 	.word	0x08006898
 8002abc:	20000cd0 	.word	0x20000cd0

08002ac0 <LL_ADC_REG_SetContinuousMode>:
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_CONT, Continuous);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f023 0202 	bic.w	r2, r3, #2
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	609a      	str	r2, [r3, #8]
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f043 0201 	orr.w	r2, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	609a      	str	r2, [r3, #8]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr

08002b02 <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f043 0204 	orr.w	r2, r3, #4
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	609a      	str	r2, [r3, #8]
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr

08002b20 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR2      CAL            LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	bf0c      	ite	eq
 8002b34:	2301      	moveq	r3, #1
 8002b36:	2300      	movne	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr

08002b44 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f443 02a0 	orr.w	r2, r3, #5242880	@ 0x500000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	609a      	str	r2, [r3, #8]
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <LL_TIM_EnableCounter>:
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f043 0201 	orr.w	r2, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	601a      	str	r2, [r3, #0]
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr

08002b80 <SignalAnalyzer_Init>:

/**
  * @brief  Initializes the ADC and TIM6.
  */
void SignalAnalyzer_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
    // Enable ADC
    LL_ADC_Enable(ADC1);
 8002b84:	480d      	ldr	r0, [pc, #52]	@ (8002bbc <SignalAnalyzer_Init+0x3c>)
 8002b86:	f7ff ffad 	bl	8002ae4 <LL_ADC_Enable>
    LL_mDelay(1);
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	f001 fa0e 	bl	8003fac <LL_mDelay>

    // Calibrate ADC before use (optional but recommended)
    LL_ADC_StartCalibration(ADC1);
 8002b90:	480a      	ldr	r0, [pc, #40]	@ (8002bbc <SignalAnalyzer_Init+0x3c>)
 8002b92:	f7ff ffb6 	bl	8002b02 <LL_ADC_StartCalibration>
    while (LL_ADC_IsCalibrationOnGoing(ADC1));
 8002b96:	bf00      	nop
 8002b98:	4808      	ldr	r0, [pc, #32]	@ (8002bbc <SignalAnalyzer_Init+0x3c>)
 8002b9a:	f7ff ffc1 	bl	8002b20 <LL_ADC_IsCalibrationOnGoing>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1f9      	bne.n	8002b98 <SignalAnalyzer_Init+0x18>

    // Ensure ADC is set in continuous mode (if not set in CubeMX)
    LL_ADC_REG_SetContinuousMode(ADC1, LL_ADC_REG_CONV_CONTINUOUS);
 8002ba4:	2102      	movs	r1, #2
 8002ba6:	4805      	ldr	r0, [pc, #20]	@ (8002bbc <SignalAnalyzer_Init+0x3c>)
 8002ba8:	f7ff ff8a 	bl	8002ac0 <LL_ADC_REG_SetContinuousMode>

    // Start ADC conversion
    LL_ADC_REG_StartConversionSWStart(ADC1);
 8002bac:	4803      	ldr	r0, [pc, #12]	@ (8002bbc <SignalAnalyzer_Init+0x3c>)
 8002bae:	f7ff ffc9 	bl	8002b44 <LL_ADC_REG_StartConversionSWStart>

    // Enable TIM6 for timestamping
    LL_TIM_EnableCounter(TIM6);
 8002bb2:	4803      	ldr	r0, [pc, #12]	@ (8002bc0 <SignalAnalyzer_Init+0x40>)
 8002bb4:	f7ff ffd5 	bl	8002b62 <LL_TIM_EnableCounter>
}
 8002bb8:	bf00      	nop
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40012400 	.word	0x40012400
 8002bc0:	40001000 	.word	0x40001000

08002bc4 <LL_DMA_IsActiveFlag_TC5>:
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002bd8:	bf0c      	ite	eq
 8002bda:	2301      	moveq	r3, #1
 8002bdc:	2300      	movne	r3, #0
 8002bde:	b2db      	uxtb	r3, r3
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr

08002bea <LL_DMA_ClearFlag_TC5>:
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002bf8:	605a      	str	r2, [r3, #4]
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr

08002c04 <LL_DMA_ClearFlag_HT5>:
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF5);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002c12:	605a      	str	r2, [r3, #4]
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bc80      	pop	{r7}
 8002c1c:	4770      	bx	lr

08002c1e <LL_DMA_ClearFlag_TE5>:
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF5);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002c2c:	605a      	str	r2, [r3, #4]
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8002c40:	4b07      	ldr	r3, [pc, #28]	@ (8002c60 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8002c42:	695a      	ldr	r2, [r3, #20]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4013      	ands	r3, r2
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	bf0c      	ite	eq
 8002c4e:	2301      	moveq	r3, #1
 8002c50:	2300      	movne	r3, #0
 8002c52:	b2db      	uxtb	r3, r3
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40010400 	.word	0x40010400

08002c64 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8002c6c:	4a03      	ldr	r2, [pc, #12]	@ (8002c7c <LL_EXTI_ClearFlag_0_31+0x18>)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6153      	str	r3, [r2, #20]
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr
 8002c7c:	40010400 	.word	0x40010400

08002c80 <LL_USART_IsActiveFlag_RXNE>:
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0320 	and.w	r3, r3, #32
 8002c90:	2b20      	cmp	r3, #32
 8002c92:	bf0c      	ite	eq
 8002c94:	2301      	moveq	r3, #1
 8002c96:	2300      	movne	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr

08002ca4 <LL_USART_ReceiveData8>:
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	b2db      	uxtb	r3, r3
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr

08002cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002cc0:	bf00      	nop
 8002cc2:	e7fd      	b.n	8002cc0 <NMI_Handler+0x4>

08002cc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cc8:	bf00      	nop
 8002cca:	e7fd      	b.n	8002cc8 <HardFault_Handler+0x4>

08002ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cd0:	bf00      	nop
 8002cd2:	e7fd      	b.n	8002cd0 <MemManage_Handler+0x4>

08002cd4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cd8:	bf00      	nop
 8002cda:	e7fd      	b.n	8002cd8 <BusFault_Handler+0x4>

08002cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ce0:	bf00      	nop
 8002ce2:	e7fd      	b.n	8002ce0 <UsageFault_Handler+0x4>

08002ce4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ce8:	bf00      	nop
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr

08002cf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr

08002cfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr

08002d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d0c:	bf00      	nop
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

	if (LL_DMA_IsActiveFlag_TC5(DMA1)) {
 8002d18:	480a      	ldr	r0, [pc, #40]	@ (8002d44 <DMA1_Channel5_IRQHandler+0x30>)
 8002d1a:	f7ff ff53 	bl	8002bc4 <LL_DMA_IsActiveFlag_TC5>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00c      	beq.n	8002d3e <DMA1_Channel5_IRQHandler+0x2a>
//		LL_DMA_ClearFlag_GI5(DMA1);
		LL_DMA_ClearFlag_TC5(DMA1);  // Clear transfer complete flag
 8002d24:	4807      	ldr	r0, [pc, #28]	@ (8002d44 <DMA1_Channel5_IRQHandler+0x30>)
 8002d26:	f7ff ff60 	bl	8002bea <LL_DMA_ClearFlag_TC5>
		LL_DMA_ClearFlag_HT5(DMA1);  // Clear half transfer flag
 8002d2a:	4806      	ldr	r0, [pc, #24]	@ (8002d44 <DMA1_Channel5_IRQHandler+0x30>)
 8002d2c:	f7ff ff6a 	bl	8002c04 <LL_DMA_ClearFlag_HT5>
		LL_DMA_ClearFlag_TE5(DMA1);  // Clear transfer error flag
 8002d30:	4804      	ldr	r0, [pc, #16]	@ (8002d44 <DMA1_Channel5_IRQHandler+0x30>)
 8002d32:	f7ff ff74 	bl	8002c1e <LL_DMA_ClearFlag_TE5>

		// Trigger callback when transfer is complete
		LL_TIM_PWM_PulseFinishedCallback(TIM2);
 8002d36:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002d3a:	f7fd fdf7 	bl	800092c <LL_TIM_PWM_PulseFinishedCallback>
	}

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40020000 	.word	0x40020000

08002d48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
	if (LL_USART_IsActiveFlag_RXNE(USART1))
 8002d4e:	480a      	ldr	r0, [pc, #40]	@ (8002d78 <USART1_IRQHandler+0x30>)
 8002d50:	f7ff ff96 	bl	8002c80 <LL_USART_IsActiveFlag_RXNE>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d009      	beq.n	8002d6e <USART1_IRQHandler+0x26>
	{
		uint8_t receivedByte = LL_USART_ReceiveData8(USART1);
 8002d5a:	4807      	ldr	r0, [pc, #28]	@ (8002d78 <USART1_IRQHandler+0x30>)
 8002d5c:	f7ff ffa2 	bl	8002ca4 <LL_USART_ReceiveData8>
 8002d60:	4603      	mov	r3, r0
 8002d62:	71fb      	strb	r3, [r7, #7]
		UART_ProcessReceivedByte(receivedByte, 1);  // Process received data for UART1
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	2101      	movs	r1, #1
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff fe63 	bl	8002a34 <UART_ProcessReceivedByte>
	}
  /* USER CODE END USART1_IRQn 1 */
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40013800 	.word	0x40013800

08002d7c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */
	 if (LL_USART_IsActiveFlag_RXNE(USART3))
 8002d82:	480a      	ldr	r0, [pc, #40]	@ (8002dac <USART3_IRQHandler+0x30>)
 8002d84:	f7ff ff7c 	bl	8002c80 <LL_USART_IsActiveFlag_RXNE>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d009      	beq.n	8002da2 <USART3_IRQHandler+0x26>
	{
		uint8_t receivedByte = LL_USART_ReceiveData8(USART3);
 8002d8e:	4807      	ldr	r0, [pc, #28]	@ (8002dac <USART3_IRQHandler+0x30>)
 8002d90:	f7ff ff88 	bl	8002ca4 <LL_USART_ReceiveData8>
 8002d94:	4603      	mov	r3, r0
 8002d96:	71fb      	strb	r3, [r7, #7]
		UART_ProcessReceivedByte(receivedByte, 3);  // Process received data for UART3
 8002d98:	79fb      	ldrb	r3, [r7, #7]
 8002d9a:	2103      	movs	r1, #3
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff fe49 	bl	8002a34 <UART_ProcessReceivedByte>
	}
  /* USER CODE END USART3_IRQn 1 */
}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40004800 	.word	0x40004800

08002db0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_12) != RESET)
 8002db4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002db8:	f7ff ff3e 	bl	8002c38 <LL_EXTI_IsActiveFlag_0_31>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d005      	beq.n	8002dce <EXTI15_10_IRQHandler+0x1e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_12);
 8002dc2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002dc6:	f7ff ff4d 	bl	8002c64 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_12 */
    FAULT_3v3_HandleInterrupt();  // Handle FAULT 3V3
 8002dca:	f7fd fa6b 	bl	80002a4 <FAULT_3v3_HandleInterrupt>
    /* USER CODE END LL_EXTI_LINE_12 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8002dce:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002dd2:	f7ff ff31 	bl	8002c38 <LL_EXTI_IsActiveFlag_0_31>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8002ddc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002de0:	f7ff ff40 	bl	8002c64 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */
    FAULT_5v_HandleInterrupt();  // Handle FAULT 3V3
 8002de4:	f7fd fa4e 	bl	8000284 <FAULT_5v_HandleInterrupt>
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002de8:	bf00      	nop
 8002dea:	bd80      	pop	{r7, pc}

08002dec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	e00a      	b.n	8002e14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dfe:	f3af 8000 	nop.w
 8002e02:	4601      	mov	r1, r0
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	1c5a      	adds	r2, r3, #1
 8002e08:	60ba      	str	r2, [r7, #8]
 8002e0a:	b2ca      	uxtb	r2, r1
 8002e0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	3301      	adds	r3, #1
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	dbf0      	blt.n	8002dfe <_read+0x12>
  }

  return len;
 8002e1c:	687b      	ldr	r3, [r7, #4]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr

08002e3c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e4c:	605a      	str	r2, [r3, #4]
  return 0;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bc80      	pop	{r7}
 8002e58:	4770      	bx	lr

08002e5a <_isatty>:

int _isatty(int file)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e62:	2301      	movs	r3, #1
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr

08002e6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b085      	sub	sp, #20
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc80      	pop	{r7}
 8002e84:	4770      	bx	lr
	...

08002e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e90:	4a14      	ldr	r2, [pc, #80]	@ (8002ee4 <_sbrk+0x5c>)
 8002e92:	4b15      	ldr	r3, [pc, #84]	@ (8002ee8 <_sbrk+0x60>)
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e9c:	4b13      	ldr	r3, [pc, #76]	@ (8002eec <_sbrk+0x64>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d102      	bne.n	8002eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ea4:	4b11      	ldr	r3, [pc, #68]	@ (8002eec <_sbrk+0x64>)
 8002ea6:	4a12      	ldr	r2, [pc, #72]	@ (8002ef0 <_sbrk+0x68>)
 8002ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eaa:	4b10      	ldr	r3, [pc, #64]	@ (8002eec <_sbrk+0x64>)
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d207      	bcs.n	8002ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002eb8:	f001 fc38 	bl	800472c <__errno>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	220c      	movs	r2, #12
 8002ec0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec6:	e009      	b.n	8002edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ec8:	4b08      	ldr	r3, [pc, #32]	@ (8002eec <_sbrk+0x64>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ece:	4b07      	ldr	r3, [pc, #28]	@ (8002eec <_sbrk+0x64>)
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	4a05      	ldr	r2, [pc, #20]	@ (8002eec <_sbrk+0x64>)
 8002ed8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002eda:	68fb      	ldr	r3, [r7, #12]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	20010000 	.word	0x20010000
 8002ee8:	00000400 	.word	0x00000400
 8002eec:	200042b0 	.word	0x200042b0
 8002ef0:	20004400 	.word	0x20004400

08002ef4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ef8:	bf00      	nop
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr

08002f00 <Reset_Handler>:
 8002f00:	f7ff fff8 	bl	8002ef4 <SystemInit>
 8002f04:	480b      	ldr	r0, [pc, #44]	@ (8002f34 <LoopFillZerobss+0xe>)
 8002f06:	490c      	ldr	r1, [pc, #48]	@ (8002f38 <LoopFillZerobss+0x12>)
 8002f08:	4a0c      	ldr	r2, [pc, #48]	@ (8002f3c <LoopFillZerobss+0x16>)
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	e002      	b.n	8002f14 <LoopCopyDataInit>

08002f0e <CopyDataInit>:
 8002f0e:	58d4      	ldr	r4, [r2, r3]
 8002f10:	50c4      	str	r4, [r0, r3]
 8002f12:	3304      	adds	r3, #4

08002f14 <LoopCopyDataInit>:
 8002f14:	18c4      	adds	r4, r0, r3
 8002f16:	428c      	cmp	r4, r1
 8002f18:	d3f9      	bcc.n	8002f0e <CopyDataInit>
 8002f1a:	4a09      	ldr	r2, [pc, #36]	@ (8002f40 <LoopFillZerobss+0x1a>)
 8002f1c:	4c09      	ldr	r4, [pc, #36]	@ (8002f44 <LoopFillZerobss+0x1e>)
 8002f1e:	2300      	movs	r3, #0
 8002f20:	e001      	b.n	8002f26 <LoopFillZerobss>

08002f22 <FillZerobss>:
 8002f22:	6013      	str	r3, [r2, #0]
 8002f24:	3204      	adds	r2, #4

08002f26 <LoopFillZerobss>:
 8002f26:	42a2      	cmp	r2, r4
 8002f28:	d3fb      	bcc.n	8002f22 <FillZerobss>
 8002f2a:	f001 fc05 	bl	8004738 <__libc_init_array>
 8002f2e:	f7fe fac7 	bl	80014c0 <main>
 8002f32:	4770      	bx	lr
 8002f34:	20000000 	.word	0x20000000
 8002f38:	20000d20 	.word	0x20000d20
 8002f3c:	08006c78 	.word	0x08006c78
 8002f40:	20000d20 	.word	0x20000d20
 8002f44:	20004400 	.word	0x20004400

08002f48 <ADC1_2_IRQHandler>:
 8002f48:	e7fe      	b.n	8002f48 <ADC1_2_IRQHandler>

08002f4a <LL_ADC_REG_SetSequencerLength>:
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
 8002f52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f58:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bc80      	pop	{r7}
 8002f6c:	4770      	bx	lr

08002f6e <LL_ADC_IsEnabled>:
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	bf0c      	ite	eq
 8002f82:	2301      	moveq	r3, #1
 8002f84:	2300      	movne	r3, #0
 8002f86:	b2db      	uxtb	r3, r3
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr
	...

08002f94 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8002f94:	b590      	push	{r4, r7, lr}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8002fa2:	4813      	ldr	r0, [pc, #76]	@ (8002ff0 <LL_ADC_CommonInit+0x5c>)
 8002fa4:	f7ff ffe3 	bl	8002f6e <LL_ADC_IsEnabled>
 8002fa8:	4604      	mov	r4, r0
 8002faa:	4812      	ldr	r0, [pc, #72]	@ (8002ff4 <LL_ADC_CommonInit+0x60>)
 8002fac:	f7ff ffdf 	bl	8002f6e <LL_ADC_IsEnabled>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	4323      	orrs	r3, r4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d114      	bne.n	8002fe2 <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d009      	beq.n	8002fd4 <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	605a      	str	r2, [r3, #4]
 8002fd2:	e008      	b.n	8002fe6 <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	605a      	str	r2, [r3, #4]
 8002fe0:	e001      	b.n	8002fe6 <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3714      	adds	r7, #20
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd90      	pop	{r4, r7, pc}
 8002ff0:	40012400 	.word	0x40012400
 8002ff4:	40012800 	.word	0x40012800

08002ff8 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003002:	2300      	movs	r3, #0
 8003004:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7ff ffb1 	bl	8002f6e <LL_ADC_IsEnabled>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d112      	bne.n	8003038 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	609a      	str	r2, [r3, #8]
 8003036:	e001      	b.n	800303c <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800303c:	7bfb      	ldrb	r3, [r7, #15]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b084      	sub	sp, #16
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
 800304e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003050:	2300      	movs	r3, #0
 8003052:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff ff8a 	bl	8002f6e <LL_ADC_IsEnabled>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d131      	bne.n	80030c4 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00c      	beq.n	8003082 <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	6859      	ldr	r1, [r3, #4]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	430b      	orrs	r3, r1
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	605a      	str	r2, [r3, #4]
 8003080:	e008      	b.n	8003094 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 800309c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	6811      	ldr	r1, [r2, #0]
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	68d2      	ldr	r2, [r2, #12]
 80030a8:	4311      	orrs	r1, r2
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	6912      	ldr	r2, [r2, #16]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	4619      	mov	r1, r3
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f7ff ff44 	bl	8002f4a <LL_ADC_REG_SetSequencerLength>
 80030c2:	e001      	b.n	80030c8 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <LL_EXTI_EnableIT_0_31>:
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80030dc:	4b05      	ldr	r3, [pc, #20]	@ (80030f4 <LL_EXTI_EnableIT_0_31+0x20>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4904      	ldr	r1, [pc, #16]	@ (80030f4 <LL_EXTI_EnableIT_0_31+0x20>)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	600b      	str	r3, [r1, #0]
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bc80      	pop	{r7}
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40010400 	.word	0x40010400

080030f8 <LL_EXTI_DisableIT_0_31>:
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8003100:	4b05      	ldr	r3, [pc, #20]	@ (8003118 <LL_EXTI_DisableIT_0_31+0x20>)
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	43db      	mvns	r3, r3
 8003108:	4903      	ldr	r1, [pc, #12]	@ (8003118 <LL_EXTI_DisableIT_0_31+0x20>)
 800310a:	4013      	ands	r3, r2
 800310c:	600b      	str	r3, [r1, #0]
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr
 8003118:	40010400 	.word	0x40010400

0800311c <LL_EXTI_EnableEvent_0_31>:
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8003124:	4b05      	ldr	r3, [pc, #20]	@ (800313c <LL_EXTI_EnableEvent_0_31+0x20>)
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	4904      	ldr	r1, [pc, #16]	@ (800313c <LL_EXTI_EnableEvent_0_31+0x20>)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4313      	orrs	r3, r2
 800312e:	604b      	str	r3, [r1, #4]
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40010400 	.word	0x40010400

08003140 <LL_EXTI_DisableEvent_0_31>:
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8003148:	4b05      	ldr	r3, [pc, #20]	@ (8003160 <LL_EXTI_DisableEvent_0_31+0x20>)
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	43db      	mvns	r3, r3
 8003150:	4903      	ldr	r1, [pc, #12]	@ (8003160 <LL_EXTI_DisableEvent_0_31+0x20>)
 8003152:	4013      	ands	r3, r2
 8003154:	604b      	str	r3, [r1, #4]
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr
 8003160:	40010400 	.word	0x40010400

08003164 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800316c:	4b05      	ldr	r3, [pc, #20]	@ (8003184 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	4904      	ldr	r1, [pc, #16]	@ (8003184 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4313      	orrs	r3, r2
 8003176:	608b      	str	r3, [r1, #8]
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40010400 	.word	0x40010400

08003188 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8003190:	4b05      	ldr	r3, [pc, #20]	@ (80031a8 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	43db      	mvns	r3, r3
 8003198:	4903      	ldr	r1, [pc, #12]	@ (80031a8 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800319a:	4013      	ands	r3, r2
 800319c:	608b      	str	r3, [r1, #8]
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr
 80031a8:	40010400 	.word	0x40010400

080031ac <LL_EXTI_EnableFallingTrig_0_31>:
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80031b4:	4b05      	ldr	r3, [pc, #20]	@ (80031cc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	4904      	ldr	r1, [pc, #16]	@ (80031cc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4313      	orrs	r3, r2
 80031be:	60cb      	str	r3, [r1, #12]
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bc80      	pop	{r7}
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	40010400 	.word	0x40010400

080031d0 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80031d8:	4b05      	ldr	r3, [pc, #20]	@ (80031f0 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80031da:	68da      	ldr	r2, [r3, #12]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	43db      	mvns	r3, r3
 80031e0:	4903      	ldr	r1, [pc, #12]	@ (80031f0 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	60cb      	str	r3, [r1, #12]
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr
 80031f0:	40010400 	.word	0x40010400

080031f4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80031fc:	2300      	movs	r3, #0
 80031fe:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	791b      	ldrb	r3, [r3, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d065      	beq.n	80032d4 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d06b      	beq.n	80032e8 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	795b      	ldrb	r3, [r3, #5]
 8003214:	2b02      	cmp	r3, #2
 8003216:	d01c      	beq.n	8003252 <LL_EXTI_Init+0x5e>
 8003218:	2b02      	cmp	r3, #2
 800321a:	dc25      	bgt.n	8003268 <LL_EXTI_Init+0x74>
 800321c:	2b00      	cmp	r3, #0
 800321e:	d002      	beq.n	8003226 <LL_EXTI_Init+0x32>
 8003220:	2b01      	cmp	r3, #1
 8003222:	d00b      	beq.n	800323c <LL_EXTI_Init+0x48>
 8003224:	e020      	b.n	8003268 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff ff88 	bl	8003140 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff ff4d 	bl	80030d4 <LL_EXTI_EnableIT_0_31>
          break;
 800323a:	e018      	b.n	800326e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff ff59 	bl	80030f8 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff ff66 	bl	800311c <LL_EXTI_EnableEvent_0_31>
          break;
 8003250:	e00d      	b.n	800326e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff ff3c 	bl	80030d4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff ff5b 	bl	800311c <LL_EXTI_EnableEvent_0_31>
          break;
 8003266:	e002      	b.n	800326e <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	73fb      	strb	r3, [r7, #15]
          break;
 800326c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	799b      	ldrb	r3, [r3, #6]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d038      	beq.n	80032e8 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	799b      	ldrb	r3, [r3, #6]
 800327a:	2b03      	cmp	r3, #3
 800327c:	d01c      	beq.n	80032b8 <LL_EXTI_Init+0xc4>
 800327e:	2b03      	cmp	r3, #3
 8003280:	dc25      	bgt.n	80032ce <LL_EXTI_Init+0xda>
 8003282:	2b01      	cmp	r3, #1
 8003284:	d002      	beq.n	800328c <LL_EXTI_Init+0x98>
 8003286:	2b02      	cmp	r3, #2
 8003288:	d00b      	beq.n	80032a2 <LL_EXTI_Init+0xae>
 800328a:	e020      	b.n	80032ce <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff ff9d 	bl	80031d0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff ff62 	bl	8003164 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80032a0:	e022      	b.n	80032e8 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff ff6e 	bl	8003188 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff ff7b 	bl	80031ac <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80032b6:	e017      	b.n	80032e8 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff ff51 	bl	8003164 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff ff70 	bl	80031ac <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80032cc:	e00c      	b.n	80032e8 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	73fb      	strb	r3, [r7, #15]
            break;
 80032d2:	e009      	b.n	80032e8 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff ff0d 	bl	80030f8 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff ff2c 	bl	8003140 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <LL_GPIO_SetPinMode>:
{
 80032f2:	b490      	push	{r4, r7}
 80032f4:	b088      	sub	sp, #32
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	60f8      	str	r0, [r7, #12]
 80032fa:	60b9      	str	r1, [r7, #8]
 80032fc:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	461a      	mov	r2, r3
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	0e1b      	lsrs	r3, r3, #24
 8003306:	4413      	add	r3, r2
 8003308:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800330a:	6822      	ldr	r2, [r4, #0]
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	fa93 f3a3 	rbit	r3, r3
 8003316:	613b      	str	r3, [r7, #16]
  return result;
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	fab3 f383 	clz	r3, r3
 800331e:	b2db      	uxtb	r3, r3
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	210f      	movs	r1, #15
 8003324:	fa01 f303 	lsl.w	r3, r1, r3
 8003328:	43db      	mvns	r3, r3
 800332a:	401a      	ands	r2, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	fa93 f3a3 	rbit	r3, r3
 8003336:	61bb      	str	r3, [r7, #24]
  return result;
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	fab3 f383 	clz	r3, r3
 800333e:	b2db      	uxtb	r3, r3
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	fa01 f303 	lsl.w	r3, r1, r3
 8003348:	4313      	orrs	r3, r2
 800334a:	6023      	str	r3, [r4, #0]
}
 800334c:	bf00      	nop
 800334e:	3720      	adds	r7, #32
 8003350:	46bd      	mov	sp, r7
 8003352:	bc90      	pop	{r4, r7}
 8003354:	4770      	bx	lr

08003356 <LL_GPIO_SetPinSpeed>:
{
 8003356:	b490      	push	{r4, r7}
 8003358:	b088      	sub	sp, #32
 800335a:	af00      	add	r7, sp, #0
 800335c:	60f8      	str	r0, [r7, #12]
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	461a      	mov	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	0e1b      	lsrs	r3, r3, #24
 800336a:	4413      	add	r3, r2
 800336c:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800336e:	6822      	ldr	r2, [r4, #0]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	fa93 f3a3 	rbit	r3, r3
 800337a:	613b      	str	r3, [r7, #16]
  return result;
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	fab3 f383 	clz	r3, r3
 8003382:	b2db      	uxtb	r3, r3
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	2103      	movs	r1, #3
 8003388:	fa01 f303 	lsl.w	r3, r1, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	401a      	ands	r2, r3
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	fa93 f3a3 	rbit	r3, r3
 800339a:	61bb      	str	r3, [r7, #24]
  return result;
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	fab3 f383 	clz	r3, r3
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	fa01 f303 	lsl.w	r3, r1, r3
 80033ac:	4313      	orrs	r3, r2
 80033ae:	6023      	str	r3, [r4, #0]
}
 80033b0:	bf00      	nop
 80033b2:	3720      	adds	r7, #32
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bc90      	pop	{r4, r7}
 80033b8:	4770      	bx	lr

080033ba <LL_GPIO_SetPinOutputType>:
{
 80033ba:	b490      	push	{r4, r7}
 80033bc:	b088      	sub	sp, #32
 80033be:	af00      	add	r7, sp, #0
 80033c0:	60f8      	str	r0, [r7, #12]
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	461a      	mov	r2, r3
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	0e1b      	lsrs	r3, r3, #24
 80033ce:	4413      	add	r3, r2
 80033d0:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80033d2:	6822      	ldr	r2, [r4, #0]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	fa93 f3a3 	rbit	r3, r3
 80033de:	613b      	str	r3, [r7, #16]
  return result;
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	fab3 f383 	clz	r3, r3
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	2104      	movs	r1, #4
 80033ec:	fa01 f303 	lsl.w	r3, r1, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	401a      	ands	r2, r3
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	fa93 f3a3 	rbit	r3, r3
 80033fe:	61bb      	str	r3, [r7, #24]
  return result;
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	fab3 f383 	clz	r3, r3
 8003406:	b2db      	uxtb	r3, r3
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	fa01 f303 	lsl.w	r3, r1, r3
 8003410:	4313      	orrs	r3, r2
 8003412:	6023      	str	r3, [r4, #0]
}
 8003414:	bf00      	nop
 8003416:	3720      	adds	r7, #32
 8003418:	46bd      	mov	sp, r7
 800341a:	bc90      	pop	{r4, r7}
 800341c:	4770      	bx	lr

0800341e <LL_GPIO_SetPinPull>:
{
 800341e:	b480      	push	{r7}
 8003420:	b087      	sub	sp, #28
 8003422:	af00      	add	r7, sp, #0
 8003424:	60f8      	str	r0, [r7, #12]
 8003426:	60b9      	str	r1, [r7, #8]
 8003428:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	0a1b      	lsrs	r3, r3, #8
 8003432:	43db      	mvns	r3, r3
 8003434:	401a      	ands	r2, r3
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	0a1b      	lsrs	r3, r3, #8
 800343a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	fa93 f3a3 	rbit	r3, r3
 8003442:	613b      	str	r3, [r7, #16]
  return result;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	fab3 f383 	clz	r3, r3
 800344a:	b2db      	uxtb	r3, r3
 800344c:	4619      	mov	r1, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	408b      	lsls	r3, r1
 8003452:	431a      	orrs	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	60da      	str	r2, [r3, #12]
}
 8003458:	bf00      	nop
 800345a:	371c      	adds	r7, #28
 800345c:	46bd      	mov	sp, r7
 800345e:	bc80      	pop	{r7}
 8003460:	4770      	bx	lr

08003462 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b088      	sub	sp, #32
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
 800346a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	021b      	lsls	r3, r3, #8
 8003472:	0c1b      	lsrs	r3, r3, #16
 8003474:	617b      	str	r3, [r7, #20]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	fa93 f3a3 	rbit	r3, r3
 8003480:	60fb      	str	r3, [r7, #12]
  return result;
 8003482:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8003484:	fab3 f383 	clz	r3, r3
 8003488:	b2db      	uxtb	r3, r3
 800348a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800348c:	e044      	b.n	8003518 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 800348e:	2201      	movs	r2, #1
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	409a      	lsls	r2, r3
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	4013      	ands	r3, r2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d03a      	beq.n	8003512 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	2b07      	cmp	r3, #7
 80034a0:	d806      	bhi.n	80034b0 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 80034a2:	f240 1201 	movw	r2, #257	@ 0x101
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	61bb      	str	r3, [r7, #24]
 80034ae:	e008      	b.n	80034c2 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	3b08      	subs	r3, #8
 80034b4:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80034c0:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d106      	bne.n	80034d8 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	461a      	mov	r2, r3
 80034d0:	69b9      	ldr	r1, [r7, #24]
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff ffa3 	bl	800341e <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	461a      	mov	r2, r3
 80034de:	69b9      	ldr	r1, [r7, #24]
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7ff ff06 	bl	80032f2 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d003      	beq.n	80034f6 <LL_GPIO_Init+0x94>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b09      	cmp	r3, #9
 80034f4:	d10d      	bne.n	8003512 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	461a      	mov	r2, r3
 80034fc:	69b9      	ldr	r1, [r7, #24]
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff ff29 	bl	8003356 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	461a      	mov	r2, r3
 800350a:	69b9      	ldr	r1, [r7, #24]
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7ff ff54 	bl	80033ba <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3301      	adds	r3, #1
 8003516:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1b4      	bne.n	800348e <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3720      	adds	r7, #32
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <LL_RCC_HSE_GetPrediv2>:
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV2));
 8003534:	4b03      	ldr	r3, [pc, #12]	@ (8003544 <LL_RCC_HSE_GetPrediv2+0x14>)
 8003536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003538:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800353c:	4618      	mov	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr
 8003544:	40021000 	.word	0x40021000

08003548 <LL_RCC_GetSysClkSource>:
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800354c:	4b03      	ldr	r3, [pc, #12]	@ (800355c <LL_RCC_GetSysClkSource+0x14>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 030c 	and.w	r3, r3, #12
}
 8003554:	4618      	mov	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr
 800355c:	40021000 	.word	0x40021000

08003560 <LL_RCC_GetAHBPrescaler>:
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003564:	4b03      	ldr	r3, [pc, #12]	@ (8003574 <LL_RCC_GetAHBPrescaler+0x14>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800356c:	4618      	mov	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr
 8003574:	40021000 	.word	0x40021000

08003578 <LL_RCC_GetAPB1Prescaler>:
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800357c:	4b03      	ldr	r3, [pc, #12]	@ (800358c <LL_RCC_GetAPB1Prescaler+0x14>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8003584:	4618      	mov	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr
 800358c:	40021000 	.word	0x40021000

08003590 <LL_RCC_GetAPB2Prescaler>:
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003594:	4b03      	ldr	r3, [pc, #12]	@ (80035a4 <LL_RCC_GetAPB2Prescaler+0x14>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800359c:	4618      	mov	r0, r3
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr
 80035a4:	40021000 	.word	0x40021000

080035a8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
 80035ae:	4b09      	ldr	r3, [pc, #36]	@ (80035d4 <LL_RCC_PLL_GetMainSource+0x2c>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035b6:	607b      	str	r3, [r7, #4]
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
 80035b8:	4b06      	ldr	r3, [pc, #24]	@ (80035d4 <LL_RCC_PLL_GetMainSource+0x2c>)
 80035ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035c2:	603b      	str	r3, [r7, #0]
  return (uint32_t)(pllsrc | predivsrc);
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	4313      	orrs	r3, r2
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr
 80035d4:	40021000 	.word	0x40021000

080035d8 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 80035dc:	4b03      	ldr	r3, [pc, #12]	@ (80035ec <LL_RCC_PLL_GetMultiplicator+0x14>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bc80      	pop	{r7}
 80035ea:	4770      	bx	lr
 80035ec:	40021000 	.word	0x40021000

080035f0 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
 80035f4:	4b03      	ldr	r3, [pc, #12]	@ (8003604 <LL_RCC_PLL_GetPrediv+0x14>)
 80035f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f8:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
#endif /*RCC_CFGR2_PREDIV1*/
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr
 8003604:	40021000 	.word	0x40021000

08003608 <LL_RCC_PLL2_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL2_MUL_14
  *         @arg @ref LL_RCC_PLL2_MUL_16
  *         @arg @ref LL_RCC_PLL2_MUL_20
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetMultiplicator(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL2MUL));
 800360c:	4b03      	ldr	r3, [pc, #12]	@ (800361c <LL_RCC_PLL2_GetMultiplicator+0x14>)
 800360e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003610:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8003614:	4618      	mov	r0, r3
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr
 800361c:	40021000 	.word	0x40021000

08003620 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003628:	f000 f820 	bl	800366c <RCC_GetSystemClockFreq>
 800362c:	4602      	mov	r2, r0
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f000 f83e 	bl	80036b8 <RCC_GetHCLKClockFreq>
 800363c:	4602      	mov	r2, r0
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	4618      	mov	r0, r3
 8003648:	f000 f84c 	bl	80036e4 <RCC_GetPCLK1ClockFreq>
 800364c:	4602      	mov	r2, r0
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	4618      	mov	r0, r3
 8003658:	f000 f858 	bl	800370c <RCC_GetPCLK2ClockFreq>
 800365c:	4602      	mov	r2, r0
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	60da      	str	r2, [r3, #12]
}
 8003662:	bf00      	nop
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
	...

0800366c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003672:	2300      	movs	r3, #0
 8003674:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003676:	f7ff ff67 	bl	8003548 <LL_RCC_GetSysClkSource>
 800367a:	4603      	mov	r3, r0
 800367c:	2b08      	cmp	r3, #8
 800367e:	d00c      	beq.n	800369a <RCC_GetSystemClockFreq+0x2e>
 8003680:	2b08      	cmp	r3, #8
 8003682:	d80e      	bhi.n	80036a2 <RCC_GetSystemClockFreq+0x36>
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <RCC_GetSystemClockFreq+0x22>
 8003688:	2b04      	cmp	r3, #4
 800368a:	d003      	beq.n	8003694 <RCC_GetSystemClockFreq+0x28>
 800368c:	e009      	b.n	80036a2 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800368e:	4b09      	ldr	r3, [pc, #36]	@ (80036b4 <RCC_GetSystemClockFreq+0x48>)
 8003690:	607b      	str	r3, [r7, #4]
      break;
 8003692:	e009      	b.n	80036a8 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003694:	4b07      	ldr	r3, [pc, #28]	@ (80036b4 <RCC_GetSystemClockFreq+0x48>)
 8003696:	607b      	str	r3, [r7, #4]
      break;
 8003698:	e006      	b.n	80036a8 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800369a:	f000 f84b 	bl	8003734 <RCC_PLL_GetFreqDomain_SYS>
 800369e:	6078      	str	r0, [r7, #4]
      break;
 80036a0:	e002      	b.n	80036a8 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 80036a2:	4b04      	ldr	r3, [pc, #16]	@ (80036b4 <RCC_GetSystemClockFreq+0x48>)
 80036a4:	607b      	str	r3, [r7, #4]
      break;
 80036a6:	bf00      	nop
  }

  return frequency;
 80036a8:	687b      	ldr	r3, [r7, #4]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	007a1200 	.word	0x007a1200

080036b8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80036c0:	f7ff ff4e 	bl	8003560 <LL_RCC_GetAHBPrescaler>
 80036c4:	4603      	mov	r3, r0
 80036c6:	091b      	lsrs	r3, r3, #4
 80036c8:	f003 030f 	and.w	r3, r3, #15
 80036cc:	4a04      	ldr	r2, [pc, #16]	@ (80036e0 <RCC_GetHCLKClockFreq+0x28>)
 80036ce:	5cd3      	ldrb	r3, [r2, r3]
 80036d0:	461a      	mov	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	40d3      	lsrs	r3, r2
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	08006b00 	.word	0x08006b00

080036e4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80036ec:	f7ff ff44 	bl	8003578 <LL_RCC_GetAPB1Prescaler>
 80036f0:	4603      	mov	r3, r0
 80036f2:	0a1b      	lsrs	r3, r3, #8
 80036f4:	4a04      	ldr	r2, [pc, #16]	@ (8003708 <RCC_GetPCLK1ClockFreq+0x24>)
 80036f6:	5cd3      	ldrb	r3, [r2, r3]
 80036f8:	461a      	mov	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	40d3      	lsrs	r3, r2
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	08006b10 	.word	0x08006b10

0800370c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003714:	f7ff ff3c 	bl	8003590 <LL_RCC_GetAPB2Prescaler>
 8003718:	4603      	mov	r3, r0
 800371a:	0adb      	lsrs	r3, r3, #11
 800371c:	4a04      	ldr	r2, [pc, #16]	@ (8003730 <RCC_GetPCLK2ClockFreq+0x24>)
 800371e:	5cd3      	ldrb	r3, [r2, r3]
 8003720:	461a      	mov	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	40d3      	lsrs	r3, r2
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	08006b10 	.word	0x08006b10

08003734 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003734:	b590      	push	{r4, r7, lr}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800373a:	2300      	movs	r3, #0
 800373c:	607b      	str	r3, [r7, #4]
 800373e:	2300      	movs	r3, #0
 8003740:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003742:	f7ff ff31 	bl	80035a8 <LL_RCC_PLL_GetMainSource>
 8003746:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 800374e:	d017      	beq.n	8003780 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8003756:	d81e      	bhi.n	8003796 <RCC_PLL_GetFreqDomain_SYS+0x62>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d004      	beq.n	8003768 <RCC_PLL_GetFreqDomain_SYS+0x34>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003764:	d003      	beq.n	800376e <RCC_PLL_GetFreqDomain_SYS+0x3a>
 8003766:	e016      	b.n	8003796 <RCC_PLL_GetFreqDomain_SYS+0x62>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8003768:	4b1a      	ldr	r3, [pc, #104]	@ (80037d4 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 800376a:	607b      	str	r3, [r7, #4]
      break;
 800376c:	e016      	b.n	800379c <RCC_PLL_GetFreqDomain_SYS+0x68>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 800376e:	f7ff ff3f 	bl	80035f0 <LL_RCC_PLL_GetPrediv>
 8003772:	4603      	mov	r3, r0
 8003774:	3301      	adds	r3, #1
 8003776:	4a18      	ldr	r2, [pc, #96]	@ (80037d8 <RCC_PLL_GetFreqDomain_SYS+0xa4>)
 8003778:	fbb2 f3f3 	udiv	r3, r2, r3
 800377c:	607b      	str	r3, [r7, #4]
      break;
 800377e:	e00d      	b.n	800379c <RCC_PLL_GetFreqDomain_SYS+0x68>

#if defined(RCC_PLL2_SUPPORT)
    case LL_RCC_PLLSOURCE_PLL2:       /* PLL2 used as PLL clock source */
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
 8003780:	f000 f82c 	bl	80037dc <RCC_PLL2_GetFreqClockFreq>
 8003784:	4604      	mov	r4, r0
 8003786:	f7ff ff33 	bl	80035f0 <LL_RCC_PLL_GetPrediv>
 800378a:	4603      	mov	r3, r0
 800378c:	3301      	adds	r3, #1
 800378e:	fbb4 f3f3 	udiv	r3, r4, r3
 8003792:	607b      	str	r3, [r7, #4]
      break;
 8003794:	e002      	b.n	800379c <RCC_PLL_GetFreqDomain_SYS+0x68>
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8003796:	4b0f      	ldr	r3, [pc, #60]	@ (80037d4 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 8003798:	607b      	str	r3, [r7, #4]
      break;
 800379a:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 800379c:	f7ff ff1c 	bl	80035d8 <LL_RCC_PLL_GetMultiplicator>
 80037a0:	4603      	mov	r3, r0
 80037a2:	f5b3 1f50 	cmp.w	r3, #3407872	@ 0x340000
 80037a6:	d00a      	beq.n	80037be <RCC_PLL_GetFreqDomain_SYS+0x8a>
 80037a8:	f7ff ff16 	bl	80035d8 <LL_RCC_PLL_GetMultiplicator>
 80037ac:	4603      	mov	r3, r0
 80037ae:	0c9b      	lsrs	r3, r3, #18
 80037b0:	f003 030f 	and.w	r3, r3, #15
 80037b4:	3302      	adds	r3, #2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	fb02 f303 	mul.w	r3, r2, r3
 80037bc:	e006      	b.n	80037cc <RCC_PLL_GetFreqDomain_SYS+0x98>
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	4613      	mov	r3, r2
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	085b      	lsrs	r3, r3, #1
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd90      	pop	{r4, r7, pc}
 80037d4:	003d0900 	.word	0x003d0900
 80037d8:	007a1200 	.word	0x007a1200

080037dc <RCC_PLL2_GetFreqClockFreq>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL2_GetFreqClockFreq(void)
{
 80037dc:	b598      	push	{r3, r4, r7, lr}
 80037de:	af00      	add	r7, sp, #0
  return __LL_RCC_CALC_PLL2CLK_FREQ(HSE_VALUE, LL_RCC_PLL2_GetMultiplicator(), LL_RCC_HSE_GetPrediv2());
 80037e0:	f7ff ff12 	bl	8003608 <LL_RCC_PLL2_GetMultiplicator>
 80037e4:	4603      	mov	r3, r0
 80037e6:	0a1b      	lsrs	r3, r3, #8
 80037e8:	4a07      	ldr	r2, [pc, #28]	@ (8003808 <RCC_PLL2_GetFreqClockFreq+0x2c>)
 80037ea:	fb02 f303 	mul.w	r3, r2, r3
 80037ee:	f503 0474 	add.w	r4, r3, #15990784	@ 0xf40000
 80037f2:	f504 5410 	add.w	r4, r4, #9216	@ 0x2400
 80037f6:	f7ff fe9b 	bl	8003530 <LL_RCC_HSE_GetPrediv2>
 80037fa:	4603      	mov	r3, r0
 80037fc:	091b      	lsrs	r3, r3, #4
 80037fe:	3301      	adds	r3, #1
 8003800:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003804:	4618      	mov	r0, r3
 8003806:	bd98      	pop	{r3, r4, r7, pc}
 8003808:	007a1200 	.word	0x007a1200

0800380c <LL_TIM_SetPrescaler>:
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr

08003826 <LL_TIM_SetAutoReload>:
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr

08003840 <LL_TIM_SetRepetitionCounter>:
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr

0800385a <LL_TIM_OC_SetCompareCH1>:
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	bc80      	pop	{r7}
 8003872:	4770      	bx	lr

08003874 <LL_TIM_OC_SetCompareCH2>:
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr

0800388e <LL_TIM_OC_SetCompareCH3>:
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr

080038a8 <LL_TIM_OC_SetCompareCH4>:
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	bc80      	pop	{r7}
 80038c0:	4770      	bx	lr

080038c2 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	f043 0201 	orr.w	r2, r3, #1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	615a      	str	r2, [r3, #20]
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr

080038e0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a2b      	ldr	r2, [pc, #172]	@ (80039a0 <LL_TIM_Init+0xc0>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d00f      	beq.n	8003918 <LL_TIM_Init+0x38>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038fe:	d00b      	beq.n	8003918 <LL_TIM_Init+0x38>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a28      	ldr	r2, [pc, #160]	@ (80039a4 <LL_TIM_Init+0xc4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d007      	beq.n	8003918 <LL_TIM_Init+0x38>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a27      	ldr	r2, [pc, #156]	@ (80039a8 <LL_TIM_Init+0xc8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d003      	beq.n	8003918 <LL_TIM_Init+0x38>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a26      	ldr	r2, [pc, #152]	@ (80039ac <LL_TIM_Init+0xcc>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d106      	bne.n	8003926 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	4313      	orrs	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a1d      	ldr	r2, [pc, #116]	@ (80039a0 <LL_TIM_Init+0xc0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d00f      	beq.n	800394e <LL_TIM_Init+0x6e>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003934:	d00b      	beq.n	800394e <LL_TIM_Init+0x6e>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a1a      	ldr	r2, [pc, #104]	@ (80039a4 <LL_TIM_Init+0xc4>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d007      	beq.n	800394e <LL_TIM_Init+0x6e>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a19      	ldr	r2, [pc, #100]	@ (80039a8 <LL_TIM_Init+0xc8>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d003      	beq.n	800394e <LL_TIM_Init+0x6e>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a18      	ldr	r2, [pc, #96]	@ (80039ac <LL_TIM_Init+0xcc>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d106      	bne.n	800395c <LL_TIM_Init+0x7c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4313      	orrs	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	4619      	mov	r1, r3
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7ff ff5c 	bl	8003826 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	4619      	mov	r1, r3
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff ff49 	bl	800380c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a08      	ldr	r2, [pc, #32]	@ (80039a0 <LL_TIM_Init+0xc0>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d105      	bne.n	800398e <LL_TIM_Init+0xae>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	4619      	mov	r1, r3
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7ff ff59 	bl	8003840 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff ff97 	bl	80038c2 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40012c00 	.word	0x40012c00
 80039a4:	40000400 	.word	0x40000400
 80039a8:	40000800 	.word	0x40000800
 80039ac:	40000c00 	.word	0x40000c00

080039b0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039c6:	d027      	beq.n	8003a18 <LL_TIM_OC_Init+0x68>
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039ce:	d82a      	bhi.n	8003a26 <LL_TIM_OC_Init+0x76>
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039d6:	d018      	beq.n	8003a0a <LL_TIM_OC_Init+0x5a>
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039de:	d822      	bhi.n	8003a26 <LL_TIM_OC_Init+0x76>
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d003      	beq.n	80039ee <LL_TIM_OC_Init+0x3e>
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b10      	cmp	r3, #16
 80039ea:	d007      	beq.n	80039fc <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80039ec:	e01b      	b.n	8003a26 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 f81f 	bl	8003a34 <OC1Config>
 80039f6:	4603      	mov	r3, r0
 80039f8:	75fb      	strb	r3, [r7, #23]
      break;
 80039fa:	e015      	b.n	8003a28 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f87e 	bl	8003b00 <OC2Config>
 8003a04:	4603      	mov	r3, r0
 8003a06:	75fb      	strb	r3, [r7, #23]
      break;
 8003a08:	e00e      	b.n	8003a28 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 f8e1 	bl	8003bd4 <OC3Config>
 8003a12:	4603      	mov	r3, r0
 8003a14:	75fb      	strb	r3, [r7, #23]
      break;
 8003a16:	e007      	b.n	8003a28 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 f944 	bl	8003ca8 <OC4Config>
 8003a20:	4603      	mov	r3, r0
 8003a22:	75fb      	strb	r3, [r7, #23]
      break;
 8003a24:	e000      	b.n	8003a28 <LL_TIM_OC_Init+0x78>
      break;
 8003a26:	bf00      	nop
  }

  return result;
 8003a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3718      	adds	r7, #24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
	...

08003a34 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	f023 0201 	bic.w	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f023 0303 	bic.w	r3, r3, #3
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f023 0202 	bic.w	r2, r3, #2
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f023 0201 	bic.w	r2, r3, #1
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a1a      	ldr	r2, [pc, #104]	@ (8003afc <OC1Config+0xc8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d11e      	bne.n	8003ad4 <OC1Config+0xa0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f023 0208 	bic.w	r2, r3, #8
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f023 0204 	bic.w	r2, r3, #4
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff feb7 	bl	800385a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3718      	adds	r7, #24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40012c00 	.word	0x40012c00

08003b00 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	f023 0210 	bic.w	r2, r3, #16
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	021b      	lsls	r3, r3, #8
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f023 0220 	bic.w	r2, r3, #32
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	011b      	lsls	r3, r3, #4
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f023 0210 	bic.w	r2, r3, #16
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a1b      	ldr	r2, [pc, #108]	@ (8003bd0 <OC2Config+0xd0>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d11f      	bne.n	8003ba8 <OC2Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	019b      	lsls	r3, r3, #6
 8003b74:	4313      	orrs	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	019b      	lsls	r3, r3, #6
 8003b84:	4313      	orrs	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4313      	orrs	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	4619      	mov	r1, r3
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7ff fe5a 	bl	8003874 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3718      	adds	r7, #24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40012c00 	.word	0x40012c00

08003bd4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f023 0303 	bic.w	r3, r3, #3
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	021b      	lsls	r3, r3, #8
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	021b      	lsls	r3, r3, #8
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a1b      	ldr	r2, [pc, #108]	@ (8003ca4 <OC3Config+0xd0>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d11f      	bne.n	8003c7a <OC3Config+0xa6>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	029b      	lsls	r3, r3, #10
 8003c46:	4313      	orrs	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	029b      	lsls	r3, r3, #10
 8003c56:	4313      	orrs	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	4313      	orrs	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	015b      	lsls	r3, r3, #5
 8003c76:	4313      	orrs	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7ff fdfe 	bl	800388e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40012c00 	.word	0x40012c00

08003ca8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	021b      	lsls	r3, r3, #8
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	031b      	lsls	r3, r3, #12
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	031b      	lsls	r3, r3, #12
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a0f      	ldr	r2, [pc, #60]	@ (8003d48 <OC4Config+0xa0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d107      	bne.n	8003d20 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	019b      	lsls	r3, r3, #6
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	4619      	mov	r1, r3
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff fdb8 	bl	80038a8 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40012c00 	.word	0x40012c00

08003d4c <LL_USART_IsEnabled>:
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d60:	bf0c      	ite	eq
 8003d62:	2301      	moveq	r3, #1
 8003d64:	2300      	movne	r3, #0
 8003d66:	b2db      	uxtb	r3, r3
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr

08003d72 <LL_USART_SetStopBitsLength>:
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	611a      	str	r2, [r3, #16]
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc80      	pop	{r7}
 8003d94:	4770      	bx	lr

08003d96 <LL_USART_SetHWFlowCtrl>:
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	615a      	str	r2, [r3, #20]
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bc80      	pop	{r7}
 8003db8:	4770      	bx	lr
	...

08003dbc <LL_USART_SetBaudRate>:
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	009a      	lsls	r2, r3, #2
 8003dd2:	441a      	add	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ddc:	4a25      	ldr	r2, [pc, #148]	@ (8003e74 <LL_USART_SetBaudRate+0xb8>)
 8003dde:	fba2 2303 	umull	r2, r3, r2, r3
 8003de2:	095b      	lsrs	r3, r3, #5
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	b299      	uxth	r1, r3
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	4613      	mov	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	009a      	lsls	r2, r3, #2
 8003df4:	441a      	add	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8003e74 <LL_USART_SetBaudRate+0xb8>)
 8003e00:	fba3 0302 	umull	r0, r3, r3, r2
 8003e04:	095b      	lsrs	r3, r3, #5
 8003e06:	2064      	movs	r0, #100	@ 0x64
 8003e08:	fb00 f303 	mul.w	r3, r0, r3
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	3332      	adds	r3, #50	@ 0x32
 8003e12:	4a18      	ldr	r2, [pc, #96]	@ (8003e74 <LL_USART_SetBaudRate+0xb8>)
 8003e14:	fba2 2303 	umull	r2, r3, r2, r3
 8003e18:	095b      	lsrs	r3, r3, #5
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	440b      	add	r3, r1
 8003e24:	b299      	uxth	r1, r3
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009a      	lsls	r2, r3, #2
 8003e30:	441a      	add	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8003e74 <LL_USART_SetBaudRate+0xb8>)
 8003e3c:	fba3 0302 	umull	r0, r3, r3, r2
 8003e40:	095b      	lsrs	r3, r3, #5
 8003e42:	2064      	movs	r0, #100	@ 0x64
 8003e44:	fb00 f303 	mul.w	r3, r0, r3
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	3332      	adds	r3, #50	@ 0x32
 8003e4e:	4a09      	ldr	r2, [pc, #36]	@ (8003e74 <LL_USART_SetBaudRate+0xb8>)
 8003e50:	fba2 2303 	umull	r2, r3, r2, r3
 8003e54:	095b      	lsrs	r3, r3, #5
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	f003 030f 	and.w	r3, r3, #15
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	440b      	add	r3, r1
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	461a      	mov	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	609a      	str	r2, [r3, #8]
}
 8003e68:	bf00      	nop
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bc80      	pop	{r7}
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	51eb851f 	.word	0x51eb851f

08003e78 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b088      	sub	sp, #32
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003e86:	2300      	movs	r3, #0
 8003e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff ff5e 	bl	8003d4c <LL_USART_IsEnabled>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d153      	bne.n	8003f3e <LL_USART_Init+0xc6>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003e9e:	f023 030c 	bic.w	r3, r3, #12
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	6851      	ldr	r1, [r2, #4]
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	68d2      	ldr	r2, [r2, #12]
 8003eaa:	4311      	orrs	r1, r2
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	6912      	ldr	r2, [r2, #16]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7ff ff57 	bl	8003d72 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	4619      	mov	r1, r3
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7ff ff63 	bl	8003d96 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003ed0:	f107 0308 	add.w	r3, r7, #8
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff fba3 	bl	8003620 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a1a      	ldr	r2, [pc, #104]	@ (8003f48 <LL_USART_Init+0xd0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d102      	bne.n	8003ee8 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	61bb      	str	r3, [r7, #24]
 8003ee6:	e01a      	b.n	8003f1e <LL_USART_Init+0xa6>
    }
    else if (USARTx == USART2)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a18      	ldr	r2, [pc, #96]	@ (8003f4c <LL_USART_Init+0xd4>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d102      	bne.n	8003ef6 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	61bb      	str	r3, [r7, #24]
 8003ef4:	e013      	b.n	8003f1e <LL_USART_Init+0xa6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a15      	ldr	r2, [pc, #84]	@ (8003f50 <LL_USART_Init+0xd8>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d102      	bne.n	8003f04 <LL_USART_Init+0x8c>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	61bb      	str	r3, [r7, #24]
 8003f02:	e00c      	b.n	8003f1e <LL_USART_Init+0xa6>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a13      	ldr	r2, [pc, #76]	@ (8003f54 <LL_USART_Init+0xdc>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d102      	bne.n	8003f12 <LL_USART_Init+0x9a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	61bb      	str	r3, [r7, #24]
 8003f10:	e005      	b.n	8003f1e <LL_USART_Init+0xa6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a10      	ldr	r2, [pc, #64]	@ (8003f58 <LL_USART_Init+0xe0>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d101      	bne.n	8003f1e <LL_USART_Init+0xa6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00c      	beq.n	8003f3e <LL_USART_Init+0xc6>
        && (USART_InitStruct->BaudRate != 0U))
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d008      	beq.n	8003f3e <LL_USART_Init+0xc6>
    {
      status = SUCCESS;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8003f34:	461a      	mov	r2, r3
 8003f36:	69b9      	ldr	r1, [r7, #24]
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff ff3f 	bl	8003dbc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003f3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3720      	adds	r7, #32
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40013800 	.word	0x40013800
 8003f4c:	40004400 	.word	0x40004400
 8003f50:	40004800 	.word	0x40004800
 8003f54:	40004c00 	.word	0x40004c00
 8003f58:	40005000 	.word	0x40005000

08003f5c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6e:	4a07      	ldr	r2, [pc, #28]	@ (8003f8c <LL_InitTick+0x30>)
 8003f70:	3b01      	subs	r3, #1
 8003f72:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003f74:	4b05      	ldr	r3, [pc, #20]	@ (8003f8c <LL_InitTick+0x30>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f7a:	4b04      	ldr	r3, [pc, #16]	@ (8003f8c <LL_InitTick+0x30>)
 8003f7c:	2205      	movs	r2, #5
 8003f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bc80      	pop	{r7}
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	e000e010 	.word	0xe000e010

08003f90 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003f98:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff ffdd 	bl	8003f5c <LL_InitTick>
}
 8003fa2:	bf00      	nop
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff0 <LL_mDelay+0x44>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003fba:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc2:	d00c      	beq.n	8003fde <LL_mDelay+0x32>
  {
    Delay++;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003fca:	e008      	b.n	8003fde <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003fcc:	4b08      	ldr	r3, [pc, #32]	@ (8003ff0 <LL_mDelay+0x44>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <LL_mDelay+0x32>
    {
      Delay--;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1f3      	bne.n	8003fcc <LL_mDelay+0x20>
    }
  }
}
 8003fe4:	bf00      	nop
 8003fe6:	bf00      	nop
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bc80      	pop	{r7}
 8003fee:	4770      	bx	lr
 8003ff0:	e000e010 	.word	0xe000e010

08003ff4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003ffc:	4a03      	ldr	r2, [pc, #12]	@ (800400c <LL_SetSystemCoreClock+0x18>)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6013      	str	r3, [r2, #0]
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	bc80      	pop	{r7}
 800400a:	4770      	bx	lr
 800400c:	20000cc0 	.word	0x20000cc0

08004010 <__sflush_r>:
 8004010:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004016:	0716      	lsls	r6, r2, #28
 8004018:	4605      	mov	r5, r0
 800401a:	460c      	mov	r4, r1
 800401c:	d454      	bmi.n	80040c8 <__sflush_r+0xb8>
 800401e:	684b      	ldr	r3, [r1, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	dc02      	bgt.n	800402a <__sflush_r+0x1a>
 8004024:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004026:	2b00      	cmp	r3, #0
 8004028:	dd48      	ble.n	80040bc <__sflush_r+0xac>
 800402a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800402c:	2e00      	cmp	r6, #0
 800402e:	d045      	beq.n	80040bc <__sflush_r+0xac>
 8004030:	2300      	movs	r3, #0
 8004032:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004036:	682f      	ldr	r7, [r5, #0]
 8004038:	6a21      	ldr	r1, [r4, #32]
 800403a:	602b      	str	r3, [r5, #0]
 800403c:	d030      	beq.n	80040a0 <__sflush_r+0x90>
 800403e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004040:	89a3      	ldrh	r3, [r4, #12]
 8004042:	0759      	lsls	r1, r3, #29
 8004044:	d505      	bpl.n	8004052 <__sflush_r+0x42>
 8004046:	6863      	ldr	r3, [r4, #4]
 8004048:	1ad2      	subs	r2, r2, r3
 800404a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800404c:	b10b      	cbz	r3, 8004052 <__sflush_r+0x42>
 800404e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004050:	1ad2      	subs	r2, r2, r3
 8004052:	2300      	movs	r3, #0
 8004054:	4628      	mov	r0, r5
 8004056:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004058:	6a21      	ldr	r1, [r4, #32]
 800405a:	47b0      	blx	r6
 800405c:	1c43      	adds	r3, r0, #1
 800405e:	89a3      	ldrh	r3, [r4, #12]
 8004060:	d106      	bne.n	8004070 <__sflush_r+0x60>
 8004062:	6829      	ldr	r1, [r5, #0]
 8004064:	291d      	cmp	r1, #29
 8004066:	d82b      	bhi.n	80040c0 <__sflush_r+0xb0>
 8004068:	4a28      	ldr	r2, [pc, #160]	@ (800410c <__sflush_r+0xfc>)
 800406a:	410a      	asrs	r2, r1
 800406c:	07d6      	lsls	r6, r2, #31
 800406e:	d427      	bmi.n	80040c0 <__sflush_r+0xb0>
 8004070:	2200      	movs	r2, #0
 8004072:	6062      	str	r2, [r4, #4]
 8004074:	6922      	ldr	r2, [r4, #16]
 8004076:	04d9      	lsls	r1, r3, #19
 8004078:	6022      	str	r2, [r4, #0]
 800407a:	d504      	bpl.n	8004086 <__sflush_r+0x76>
 800407c:	1c42      	adds	r2, r0, #1
 800407e:	d101      	bne.n	8004084 <__sflush_r+0x74>
 8004080:	682b      	ldr	r3, [r5, #0]
 8004082:	b903      	cbnz	r3, 8004086 <__sflush_r+0x76>
 8004084:	6560      	str	r0, [r4, #84]	@ 0x54
 8004086:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004088:	602f      	str	r7, [r5, #0]
 800408a:	b1b9      	cbz	r1, 80040bc <__sflush_r+0xac>
 800408c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004090:	4299      	cmp	r1, r3
 8004092:	d002      	beq.n	800409a <__sflush_r+0x8a>
 8004094:	4628      	mov	r0, r5
 8004096:	f000 fb77 	bl	8004788 <_free_r>
 800409a:	2300      	movs	r3, #0
 800409c:	6363      	str	r3, [r4, #52]	@ 0x34
 800409e:	e00d      	b.n	80040bc <__sflush_r+0xac>
 80040a0:	2301      	movs	r3, #1
 80040a2:	4628      	mov	r0, r5
 80040a4:	47b0      	blx	r6
 80040a6:	4602      	mov	r2, r0
 80040a8:	1c50      	adds	r0, r2, #1
 80040aa:	d1c9      	bne.n	8004040 <__sflush_r+0x30>
 80040ac:	682b      	ldr	r3, [r5, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0c6      	beq.n	8004040 <__sflush_r+0x30>
 80040b2:	2b1d      	cmp	r3, #29
 80040b4:	d001      	beq.n	80040ba <__sflush_r+0xaa>
 80040b6:	2b16      	cmp	r3, #22
 80040b8:	d11d      	bne.n	80040f6 <__sflush_r+0xe6>
 80040ba:	602f      	str	r7, [r5, #0]
 80040bc:	2000      	movs	r0, #0
 80040be:	e021      	b.n	8004104 <__sflush_r+0xf4>
 80040c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040c4:	b21b      	sxth	r3, r3
 80040c6:	e01a      	b.n	80040fe <__sflush_r+0xee>
 80040c8:	690f      	ldr	r7, [r1, #16]
 80040ca:	2f00      	cmp	r7, #0
 80040cc:	d0f6      	beq.n	80040bc <__sflush_r+0xac>
 80040ce:	0793      	lsls	r3, r2, #30
 80040d0:	bf18      	it	ne
 80040d2:	2300      	movne	r3, #0
 80040d4:	680e      	ldr	r6, [r1, #0]
 80040d6:	bf08      	it	eq
 80040d8:	694b      	ldreq	r3, [r1, #20]
 80040da:	1bf6      	subs	r6, r6, r7
 80040dc:	600f      	str	r7, [r1, #0]
 80040de:	608b      	str	r3, [r1, #8]
 80040e0:	2e00      	cmp	r6, #0
 80040e2:	ddeb      	ble.n	80040bc <__sflush_r+0xac>
 80040e4:	4633      	mov	r3, r6
 80040e6:	463a      	mov	r2, r7
 80040e8:	4628      	mov	r0, r5
 80040ea:	6a21      	ldr	r1, [r4, #32]
 80040ec:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80040f0:	47e0      	blx	ip
 80040f2:	2800      	cmp	r0, #0
 80040f4:	dc07      	bgt.n	8004106 <__sflush_r+0xf6>
 80040f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004102:	81a3      	strh	r3, [r4, #12]
 8004104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004106:	4407      	add	r7, r0
 8004108:	1a36      	subs	r6, r6, r0
 800410a:	e7e9      	b.n	80040e0 <__sflush_r+0xd0>
 800410c:	dfbffffe 	.word	0xdfbffffe

08004110 <_fflush_r>:
 8004110:	b538      	push	{r3, r4, r5, lr}
 8004112:	690b      	ldr	r3, [r1, #16]
 8004114:	4605      	mov	r5, r0
 8004116:	460c      	mov	r4, r1
 8004118:	b913      	cbnz	r3, 8004120 <_fflush_r+0x10>
 800411a:	2500      	movs	r5, #0
 800411c:	4628      	mov	r0, r5
 800411e:	bd38      	pop	{r3, r4, r5, pc}
 8004120:	b118      	cbz	r0, 800412a <_fflush_r+0x1a>
 8004122:	6a03      	ldr	r3, [r0, #32]
 8004124:	b90b      	cbnz	r3, 800412a <_fflush_r+0x1a>
 8004126:	f000 f8bb 	bl	80042a0 <__sinit>
 800412a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0f3      	beq.n	800411a <_fflush_r+0xa>
 8004132:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004134:	07d0      	lsls	r0, r2, #31
 8004136:	d404      	bmi.n	8004142 <_fflush_r+0x32>
 8004138:	0599      	lsls	r1, r3, #22
 800413a:	d402      	bmi.n	8004142 <_fflush_r+0x32>
 800413c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800413e:	f000 fb20 	bl	8004782 <__retarget_lock_acquire_recursive>
 8004142:	4628      	mov	r0, r5
 8004144:	4621      	mov	r1, r4
 8004146:	f7ff ff63 	bl	8004010 <__sflush_r>
 800414a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800414c:	4605      	mov	r5, r0
 800414e:	07da      	lsls	r2, r3, #31
 8004150:	d4e4      	bmi.n	800411c <_fflush_r+0xc>
 8004152:	89a3      	ldrh	r3, [r4, #12]
 8004154:	059b      	lsls	r3, r3, #22
 8004156:	d4e1      	bmi.n	800411c <_fflush_r+0xc>
 8004158:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800415a:	f000 fb13 	bl	8004784 <__retarget_lock_release_recursive>
 800415e:	e7dd      	b.n	800411c <_fflush_r+0xc>

08004160 <fflush>:
 8004160:	4601      	mov	r1, r0
 8004162:	b920      	cbnz	r0, 800416e <fflush+0xe>
 8004164:	4a04      	ldr	r2, [pc, #16]	@ (8004178 <fflush+0x18>)
 8004166:	4905      	ldr	r1, [pc, #20]	@ (800417c <fflush+0x1c>)
 8004168:	4805      	ldr	r0, [pc, #20]	@ (8004180 <fflush+0x20>)
 800416a:	f000 b8b1 	b.w	80042d0 <_fwalk_sglue>
 800416e:	4b05      	ldr	r3, [pc, #20]	@ (8004184 <fflush+0x24>)
 8004170:	6818      	ldr	r0, [r3, #0]
 8004172:	f7ff bfcd 	b.w	8004110 <_fflush_r>
 8004176:	bf00      	nop
 8004178:	20000cc4 	.word	0x20000cc4
 800417c:	08004111 	.word	0x08004111
 8004180:	20000cd4 	.word	0x20000cd4
 8004184:	20000cd0 	.word	0x20000cd0

08004188 <std>:
 8004188:	2300      	movs	r3, #0
 800418a:	b510      	push	{r4, lr}
 800418c:	4604      	mov	r4, r0
 800418e:	e9c0 3300 	strd	r3, r3, [r0]
 8004192:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004196:	6083      	str	r3, [r0, #8]
 8004198:	8181      	strh	r1, [r0, #12]
 800419a:	6643      	str	r3, [r0, #100]	@ 0x64
 800419c:	81c2      	strh	r2, [r0, #14]
 800419e:	6183      	str	r3, [r0, #24]
 80041a0:	4619      	mov	r1, r3
 80041a2:	2208      	movs	r2, #8
 80041a4:	305c      	adds	r0, #92	@ 0x5c
 80041a6:	f000 fa61 	bl	800466c <memset>
 80041aa:	4b0d      	ldr	r3, [pc, #52]	@ (80041e0 <std+0x58>)
 80041ac:	6224      	str	r4, [r4, #32]
 80041ae:	6263      	str	r3, [r4, #36]	@ 0x24
 80041b0:	4b0c      	ldr	r3, [pc, #48]	@ (80041e4 <std+0x5c>)
 80041b2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80041b4:	4b0c      	ldr	r3, [pc, #48]	@ (80041e8 <std+0x60>)
 80041b6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80041b8:	4b0c      	ldr	r3, [pc, #48]	@ (80041ec <std+0x64>)
 80041ba:	6323      	str	r3, [r4, #48]	@ 0x30
 80041bc:	4b0c      	ldr	r3, [pc, #48]	@ (80041f0 <std+0x68>)
 80041be:	429c      	cmp	r4, r3
 80041c0:	d006      	beq.n	80041d0 <std+0x48>
 80041c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80041c6:	4294      	cmp	r4, r2
 80041c8:	d002      	beq.n	80041d0 <std+0x48>
 80041ca:	33d0      	adds	r3, #208	@ 0xd0
 80041cc:	429c      	cmp	r4, r3
 80041ce:	d105      	bne.n	80041dc <std+0x54>
 80041d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80041d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041d8:	f000 bad2 	b.w	8004780 <__retarget_lock_init_recursive>
 80041dc:	bd10      	pop	{r4, pc}
 80041de:	bf00      	nop
 80041e0:	080044b9 	.word	0x080044b9
 80041e4:	080044df 	.word	0x080044df
 80041e8:	08004517 	.word	0x08004517
 80041ec:	0800453b 	.word	0x0800453b
 80041f0:	200042b4 	.word	0x200042b4

080041f4 <stdio_exit_handler>:
 80041f4:	4a02      	ldr	r2, [pc, #8]	@ (8004200 <stdio_exit_handler+0xc>)
 80041f6:	4903      	ldr	r1, [pc, #12]	@ (8004204 <stdio_exit_handler+0x10>)
 80041f8:	4803      	ldr	r0, [pc, #12]	@ (8004208 <stdio_exit_handler+0x14>)
 80041fa:	f000 b869 	b.w	80042d0 <_fwalk_sglue>
 80041fe:	bf00      	nop
 8004200:	20000cc4 	.word	0x20000cc4
 8004204:	08004111 	.word	0x08004111
 8004208:	20000cd4 	.word	0x20000cd4

0800420c <cleanup_stdio>:
 800420c:	6841      	ldr	r1, [r0, #4]
 800420e:	4b0c      	ldr	r3, [pc, #48]	@ (8004240 <cleanup_stdio+0x34>)
 8004210:	b510      	push	{r4, lr}
 8004212:	4299      	cmp	r1, r3
 8004214:	4604      	mov	r4, r0
 8004216:	d001      	beq.n	800421c <cleanup_stdio+0x10>
 8004218:	f7ff ff7a 	bl	8004110 <_fflush_r>
 800421c:	68a1      	ldr	r1, [r4, #8]
 800421e:	4b09      	ldr	r3, [pc, #36]	@ (8004244 <cleanup_stdio+0x38>)
 8004220:	4299      	cmp	r1, r3
 8004222:	d002      	beq.n	800422a <cleanup_stdio+0x1e>
 8004224:	4620      	mov	r0, r4
 8004226:	f7ff ff73 	bl	8004110 <_fflush_r>
 800422a:	68e1      	ldr	r1, [r4, #12]
 800422c:	4b06      	ldr	r3, [pc, #24]	@ (8004248 <cleanup_stdio+0x3c>)
 800422e:	4299      	cmp	r1, r3
 8004230:	d004      	beq.n	800423c <cleanup_stdio+0x30>
 8004232:	4620      	mov	r0, r4
 8004234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004238:	f7ff bf6a 	b.w	8004110 <_fflush_r>
 800423c:	bd10      	pop	{r4, pc}
 800423e:	bf00      	nop
 8004240:	200042b4 	.word	0x200042b4
 8004244:	2000431c 	.word	0x2000431c
 8004248:	20004384 	.word	0x20004384

0800424c <global_stdio_init.part.0>:
 800424c:	b510      	push	{r4, lr}
 800424e:	4b0b      	ldr	r3, [pc, #44]	@ (800427c <global_stdio_init.part.0+0x30>)
 8004250:	4c0b      	ldr	r4, [pc, #44]	@ (8004280 <global_stdio_init.part.0+0x34>)
 8004252:	4a0c      	ldr	r2, [pc, #48]	@ (8004284 <global_stdio_init.part.0+0x38>)
 8004254:	4620      	mov	r0, r4
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	2104      	movs	r1, #4
 800425a:	2200      	movs	r2, #0
 800425c:	f7ff ff94 	bl	8004188 <std>
 8004260:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004264:	2201      	movs	r2, #1
 8004266:	2109      	movs	r1, #9
 8004268:	f7ff ff8e 	bl	8004188 <std>
 800426c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004270:	2202      	movs	r2, #2
 8004272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004276:	2112      	movs	r1, #18
 8004278:	f7ff bf86 	b.w	8004188 <std>
 800427c:	200043ec 	.word	0x200043ec
 8004280:	200042b4 	.word	0x200042b4
 8004284:	080041f5 	.word	0x080041f5

08004288 <__sfp_lock_acquire>:
 8004288:	4801      	ldr	r0, [pc, #4]	@ (8004290 <__sfp_lock_acquire+0x8>)
 800428a:	f000 ba7a 	b.w	8004782 <__retarget_lock_acquire_recursive>
 800428e:	bf00      	nop
 8004290:	200043f5 	.word	0x200043f5

08004294 <__sfp_lock_release>:
 8004294:	4801      	ldr	r0, [pc, #4]	@ (800429c <__sfp_lock_release+0x8>)
 8004296:	f000 ba75 	b.w	8004784 <__retarget_lock_release_recursive>
 800429a:	bf00      	nop
 800429c:	200043f5 	.word	0x200043f5

080042a0 <__sinit>:
 80042a0:	b510      	push	{r4, lr}
 80042a2:	4604      	mov	r4, r0
 80042a4:	f7ff fff0 	bl	8004288 <__sfp_lock_acquire>
 80042a8:	6a23      	ldr	r3, [r4, #32]
 80042aa:	b11b      	cbz	r3, 80042b4 <__sinit+0x14>
 80042ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042b0:	f7ff bff0 	b.w	8004294 <__sfp_lock_release>
 80042b4:	4b04      	ldr	r3, [pc, #16]	@ (80042c8 <__sinit+0x28>)
 80042b6:	6223      	str	r3, [r4, #32]
 80042b8:	4b04      	ldr	r3, [pc, #16]	@ (80042cc <__sinit+0x2c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1f5      	bne.n	80042ac <__sinit+0xc>
 80042c0:	f7ff ffc4 	bl	800424c <global_stdio_init.part.0>
 80042c4:	e7f2      	b.n	80042ac <__sinit+0xc>
 80042c6:	bf00      	nop
 80042c8:	0800420d 	.word	0x0800420d
 80042cc:	200043ec 	.word	0x200043ec

080042d0 <_fwalk_sglue>:
 80042d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042d4:	4607      	mov	r7, r0
 80042d6:	4688      	mov	r8, r1
 80042d8:	4614      	mov	r4, r2
 80042da:	2600      	movs	r6, #0
 80042dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80042e0:	f1b9 0901 	subs.w	r9, r9, #1
 80042e4:	d505      	bpl.n	80042f2 <_fwalk_sglue+0x22>
 80042e6:	6824      	ldr	r4, [r4, #0]
 80042e8:	2c00      	cmp	r4, #0
 80042ea:	d1f7      	bne.n	80042dc <_fwalk_sglue+0xc>
 80042ec:	4630      	mov	r0, r6
 80042ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042f2:	89ab      	ldrh	r3, [r5, #12]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d907      	bls.n	8004308 <_fwalk_sglue+0x38>
 80042f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042fc:	3301      	adds	r3, #1
 80042fe:	d003      	beq.n	8004308 <_fwalk_sglue+0x38>
 8004300:	4629      	mov	r1, r5
 8004302:	4638      	mov	r0, r7
 8004304:	47c0      	blx	r8
 8004306:	4306      	orrs	r6, r0
 8004308:	3568      	adds	r5, #104	@ 0x68
 800430a:	e7e9      	b.n	80042e0 <_fwalk_sglue+0x10>

0800430c <iprintf>:
 800430c:	b40f      	push	{r0, r1, r2, r3}
 800430e:	b507      	push	{r0, r1, r2, lr}
 8004310:	4906      	ldr	r1, [pc, #24]	@ (800432c <iprintf+0x20>)
 8004312:	ab04      	add	r3, sp, #16
 8004314:	6808      	ldr	r0, [r1, #0]
 8004316:	f853 2b04 	ldr.w	r2, [r3], #4
 800431a:	6881      	ldr	r1, [r0, #8]
 800431c:	9301      	str	r3, [sp, #4]
 800431e:	f000 fe73 	bl	8005008 <_vfiprintf_r>
 8004322:	b003      	add	sp, #12
 8004324:	f85d eb04 	ldr.w	lr, [sp], #4
 8004328:	b004      	add	sp, #16
 800432a:	4770      	bx	lr
 800432c:	20000cd0 	.word	0x20000cd0

08004330 <putchar>:
 8004330:	4b02      	ldr	r3, [pc, #8]	@ (800433c <putchar+0xc>)
 8004332:	4601      	mov	r1, r0
 8004334:	6818      	ldr	r0, [r3, #0]
 8004336:	6882      	ldr	r2, [r0, #8]
 8004338:	f001 babd 	b.w	80058b6 <_putc_r>
 800433c:	20000cd0 	.word	0x20000cd0

08004340 <_puts_r>:
 8004340:	6a03      	ldr	r3, [r0, #32]
 8004342:	b570      	push	{r4, r5, r6, lr}
 8004344:	4605      	mov	r5, r0
 8004346:	460e      	mov	r6, r1
 8004348:	6884      	ldr	r4, [r0, #8]
 800434a:	b90b      	cbnz	r3, 8004350 <_puts_r+0x10>
 800434c:	f7ff ffa8 	bl	80042a0 <__sinit>
 8004350:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004352:	07db      	lsls	r3, r3, #31
 8004354:	d405      	bmi.n	8004362 <_puts_r+0x22>
 8004356:	89a3      	ldrh	r3, [r4, #12]
 8004358:	0598      	lsls	r0, r3, #22
 800435a:	d402      	bmi.n	8004362 <_puts_r+0x22>
 800435c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800435e:	f000 fa10 	bl	8004782 <__retarget_lock_acquire_recursive>
 8004362:	89a3      	ldrh	r3, [r4, #12]
 8004364:	0719      	lsls	r1, r3, #28
 8004366:	d502      	bpl.n	800436e <_puts_r+0x2e>
 8004368:	6923      	ldr	r3, [r4, #16]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d135      	bne.n	80043da <_puts_r+0x9a>
 800436e:	4621      	mov	r1, r4
 8004370:	4628      	mov	r0, r5
 8004372:	f000 f925 	bl	80045c0 <__swsetup_r>
 8004376:	b380      	cbz	r0, 80043da <_puts_r+0x9a>
 8004378:	f04f 35ff 	mov.w	r5, #4294967295
 800437c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800437e:	07da      	lsls	r2, r3, #31
 8004380:	d405      	bmi.n	800438e <_puts_r+0x4e>
 8004382:	89a3      	ldrh	r3, [r4, #12]
 8004384:	059b      	lsls	r3, r3, #22
 8004386:	d402      	bmi.n	800438e <_puts_r+0x4e>
 8004388:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800438a:	f000 f9fb 	bl	8004784 <__retarget_lock_release_recursive>
 800438e:	4628      	mov	r0, r5
 8004390:	bd70      	pop	{r4, r5, r6, pc}
 8004392:	2b00      	cmp	r3, #0
 8004394:	da04      	bge.n	80043a0 <_puts_r+0x60>
 8004396:	69a2      	ldr	r2, [r4, #24]
 8004398:	429a      	cmp	r2, r3
 800439a:	dc17      	bgt.n	80043cc <_puts_r+0x8c>
 800439c:	290a      	cmp	r1, #10
 800439e:	d015      	beq.n	80043cc <_puts_r+0x8c>
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	6022      	str	r2, [r4, #0]
 80043a6:	7019      	strb	r1, [r3, #0]
 80043a8:	68a3      	ldr	r3, [r4, #8]
 80043aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80043ae:	3b01      	subs	r3, #1
 80043b0:	60a3      	str	r3, [r4, #8]
 80043b2:	2900      	cmp	r1, #0
 80043b4:	d1ed      	bne.n	8004392 <_puts_r+0x52>
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	da11      	bge.n	80043de <_puts_r+0x9e>
 80043ba:	4622      	mov	r2, r4
 80043bc:	210a      	movs	r1, #10
 80043be:	4628      	mov	r0, r5
 80043c0:	f000 f8bf 	bl	8004542 <__swbuf_r>
 80043c4:	3001      	adds	r0, #1
 80043c6:	d0d7      	beq.n	8004378 <_puts_r+0x38>
 80043c8:	250a      	movs	r5, #10
 80043ca:	e7d7      	b.n	800437c <_puts_r+0x3c>
 80043cc:	4622      	mov	r2, r4
 80043ce:	4628      	mov	r0, r5
 80043d0:	f000 f8b7 	bl	8004542 <__swbuf_r>
 80043d4:	3001      	adds	r0, #1
 80043d6:	d1e7      	bne.n	80043a8 <_puts_r+0x68>
 80043d8:	e7ce      	b.n	8004378 <_puts_r+0x38>
 80043da:	3e01      	subs	r6, #1
 80043dc:	e7e4      	b.n	80043a8 <_puts_r+0x68>
 80043de:	6823      	ldr	r3, [r4, #0]
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	6022      	str	r2, [r4, #0]
 80043e4:	220a      	movs	r2, #10
 80043e6:	701a      	strb	r2, [r3, #0]
 80043e8:	e7ee      	b.n	80043c8 <_puts_r+0x88>
	...

080043ec <puts>:
 80043ec:	4b02      	ldr	r3, [pc, #8]	@ (80043f8 <puts+0xc>)
 80043ee:	4601      	mov	r1, r0
 80043f0:	6818      	ldr	r0, [r3, #0]
 80043f2:	f7ff bfa5 	b.w	8004340 <_puts_r>
 80043f6:	bf00      	nop
 80043f8:	20000cd0 	.word	0x20000cd0

080043fc <sniprintf>:
 80043fc:	b40c      	push	{r2, r3}
 80043fe:	b530      	push	{r4, r5, lr}
 8004400:	4b17      	ldr	r3, [pc, #92]	@ (8004460 <sniprintf+0x64>)
 8004402:	1e0c      	subs	r4, r1, #0
 8004404:	681d      	ldr	r5, [r3, #0]
 8004406:	b09d      	sub	sp, #116	@ 0x74
 8004408:	da08      	bge.n	800441c <sniprintf+0x20>
 800440a:	238b      	movs	r3, #139	@ 0x8b
 800440c:	f04f 30ff 	mov.w	r0, #4294967295
 8004410:	602b      	str	r3, [r5, #0]
 8004412:	b01d      	add	sp, #116	@ 0x74
 8004414:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004418:	b002      	add	sp, #8
 800441a:	4770      	bx	lr
 800441c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004420:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004424:	bf0c      	ite	eq
 8004426:	4623      	moveq	r3, r4
 8004428:	f104 33ff 	addne.w	r3, r4, #4294967295
 800442c:	9304      	str	r3, [sp, #16]
 800442e:	9307      	str	r3, [sp, #28]
 8004430:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004434:	9002      	str	r0, [sp, #8]
 8004436:	9006      	str	r0, [sp, #24]
 8004438:	f8ad 3016 	strh.w	r3, [sp, #22]
 800443c:	4628      	mov	r0, r5
 800443e:	ab21      	add	r3, sp, #132	@ 0x84
 8004440:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004442:	a902      	add	r1, sp, #8
 8004444:	9301      	str	r3, [sp, #4]
 8004446:	f000 faf1 	bl	8004a2c <_svfiprintf_r>
 800444a:	1c43      	adds	r3, r0, #1
 800444c:	bfbc      	itt	lt
 800444e:	238b      	movlt	r3, #139	@ 0x8b
 8004450:	602b      	strlt	r3, [r5, #0]
 8004452:	2c00      	cmp	r4, #0
 8004454:	d0dd      	beq.n	8004412 <sniprintf+0x16>
 8004456:	2200      	movs	r2, #0
 8004458:	9b02      	ldr	r3, [sp, #8]
 800445a:	701a      	strb	r2, [r3, #0]
 800445c:	e7d9      	b.n	8004412 <sniprintf+0x16>
 800445e:	bf00      	nop
 8004460:	20000cd0 	.word	0x20000cd0

08004464 <siscanf>:
 8004464:	b40e      	push	{r1, r2, r3}
 8004466:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800446a:	b530      	push	{r4, r5, lr}
 800446c:	b09c      	sub	sp, #112	@ 0x70
 800446e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8004470:	f854 5b04 	ldr.w	r5, [r4], #4
 8004474:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004478:	9002      	str	r0, [sp, #8]
 800447a:	9006      	str	r0, [sp, #24]
 800447c:	f7fb fedc 	bl	8000238 <strlen>
 8004480:	4b0b      	ldr	r3, [pc, #44]	@ (80044b0 <siscanf+0x4c>)
 8004482:	9003      	str	r0, [sp, #12]
 8004484:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004486:	2300      	movs	r3, #0
 8004488:	930f      	str	r3, [sp, #60]	@ 0x3c
 800448a:	9314      	str	r3, [sp, #80]	@ 0x50
 800448c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004490:	9007      	str	r0, [sp, #28]
 8004492:	4808      	ldr	r0, [pc, #32]	@ (80044b4 <siscanf+0x50>)
 8004494:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004498:	462a      	mov	r2, r5
 800449a:	4623      	mov	r3, r4
 800449c:	a902      	add	r1, sp, #8
 800449e:	6800      	ldr	r0, [r0, #0]
 80044a0:	9401      	str	r4, [sp, #4]
 80044a2:	f000 fc17 	bl	8004cd4 <__ssvfiscanf_r>
 80044a6:	b01c      	add	sp, #112	@ 0x70
 80044a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044ac:	b003      	add	sp, #12
 80044ae:	4770      	bx	lr
 80044b0:	080044db 	.word	0x080044db
 80044b4:	20000cd0 	.word	0x20000cd0

080044b8 <__sread>:
 80044b8:	b510      	push	{r4, lr}
 80044ba:	460c      	mov	r4, r1
 80044bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044c0:	f000 f910 	bl	80046e4 <_read_r>
 80044c4:	2800      	cmp	r0, #0
 80044c6:	bfab      	itete	ge
 80044c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80044ca:	89a3      	ldrhlt	r3, [r4, #12]
 80044cc:	181b      	addge	r3, r3, r0
 80044ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80044d2:	bfac      	ite	ge
 80044d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80044d6:	81a3      	strhlt	r3, [r4, #12]
 80044d8:	bd10      	pop	{r4, pc}

080044da <__seofread>:
 80044da:	2000      	movs	r0, #0
 80044dc:	4770      	bx	lr

080044de <__swrite>:
 80044de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044e2:	461f      	mov	r7, r3
 80044e4:	898b      	ldrh	r3, [r1, #12]
 80044e6:	4605      	mov	r5, r0
 80044e8:	05db      	lsls	r3, r3, #23
 80044ea:	460c      	mov	r4, r1
 80044ec:	4616      	mov	r6, r2
 80044ee:	d505      	bpl.n	80044fc <__swrite+0x1e>
 80044f0:	2302      	movs	r3, #2
 80044f2:	2200      	movs	r2, #0
 80044f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044f8:	f000 f8e2 	bl	80046c0 <_lseek_r>
 80044fc:	89a3      	ldrh	r3, [r4, #12]
 80044fe:	4632      	mov	r2, r6
 8004500:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004504:	81a3      	strh	r3, [r4, #12]
 8004506:	4628      	mov	r0, r5
 8004508:	463b      	mov	r3, r7
 800450a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800450e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004512:	f000 b8f9 	b.w	8004708 <_write_r>

08004516 <__sseek>:
 8004516:	b510      	push	{r4, lr}
 8004518:	460c      	mov	r4, r1
 800451a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800451e:	f000 f8cf 	bl	80046c0 <_lseek_r>
 8004522:	1c43      	adds	r3, r0, #1
 8004524:	89a3      	ldrh	r3, [r4, #12]
 8004526:	bf15      	itete	ne
 8004528:	6560      	strne	r0, [r4, #84]	@ 0x54
 800452a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800452e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004532:	81a3      	strheq	r3, [r4, #12]
 8004534:	bf18      	it	ne
 8004536:	81a3      	strhne	r3, [r4, #12]
 8004538:	bd10      	pop	{r4, pc}

0800453a <__sclose>:
 800453a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800453e:	f000 b8af 	b.w	80046a0 <_close_r>

08004542 <__swbuf_r>:
 8004542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004544:	460e      	mov	r6, r1
 8004546:	4614      	mov	r4, r2
 8004548:	4605      	mov	r5, r0
 800454a:	b118      	cbz	r0, 8004554 <__swbuf_r+0x12>
 800454c:	6a03      	ldr	r3, [r0, #32]
 800454e:	b90b      	cbnz	r3, 8004554 <__swbuf_r+0x12>
 8004550:	f7ff fea6 	bl	80042a0 <__sinit>
 8004554:	69a3      	ldr	r3, [r4, #24]
 8004556:	60a3      	str	r3, [r4, #8]
 8004558:	89a3      	ldrh	r3, [r4, #12]
 800455a:	071a      	lsls	r2, r3, #28
 800455c:	d501      	bpl.n	8004562 <__swbuf_r+0x20>
 800455e:	6923      	ldr	r3, [r4, #16]
 8004560:	b943      	cbnz	r3, 8004574 <__swbuf_r+0x32>
 8004562:	4621      	mov	r1, r4
 8004564:	4628      	mov	r0, r5
 8004566:	f000 f82b 	bl	80045c0 <__swsetup_r>
 800456a:	b118      	cbz	r0, 8004574 <__swbuf_r+0x32>
 800456c:	f04f 37ff 	mov.w	r7, #4294967295
 8004570:	4638      	mov	r0, r7
 8004572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004574:	6823      	ldr	r3, [r4, #0]
 8004576:	6922      	ldr	r2, [r4, #16]
 8004578:	b2f6      	uxtb	r6, r6
 800457a:	1a98      	subs	r0, r3, r2
 800457c:	6963      	ldr	r3, [r4, #20]
 800457e:	4637      	mov	r7, r6
 8004580:	4283      	cmp	r3, r0
 8004582:	dc05      	bgt.n	8004590 <__swbuf_r+0x4e>
 8004584:	4621      	mov	r1, r4
 8004586:	4628      	mov	r0, r5
 8004588:	f7ff fdc2 	bl	8004110 <_fflush_r>
 800458c:	2800      	cmp	r0, #0
 800458e:	d1ed      	bne.n	800456c <__swbuf_r+0x2a>
 8004590:	68a3      	ldr	r3, [r4, #8]
 8004592:	3b01      	subs	r3, #1
 8004594:	60a3      	str	r3, [r4, #8]
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	6022      	str	r2, [r4, #0]
 800459c:	701e      	strb	r6, [r3, #0]
 800459e:	6962      	ldr	r2, [r4, #20]
 80045a0:	1c43      	adds	r3, r0, #1
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d004      	beq.n	80045b0 <__swbuf_r+0x6e>
 80045a6:	89a3      	ldrh	r3, [r4, #12]
 80045a8:	07db      	lsls	r3, r3, #31
 80045aa:	d5e1      	bpl.n	8004570 <__swbuf_r+0x2e>
 80045ac:	2e0a      	cmp	r6, #10
 80045ae:	d1df      	bne.n	8004570 <__swbuf_r+0x2e>
 80045b0:	4621      	mov	r1, r4
 80045b2:	4628      	mov	r0, r5
 80045b4:	f7ff fdac 	bl	8004110 <_fflush_r>
 80045b8:	2800      	cmp	r0, #0
 80045ba:	d0d9      	beq.n	8004570 <__swbuf_r+0x2e>
 80045bc:	e7d6      	b.n	800456c <__swbuf_r+0x2a>
	...

080045c0 <__swsetup_r>:
 80045c0:	b538      	push	{r3, r4, r5, lr}
 80045c2:	4b29      	ldr	r3, [pc, #164]	@ (8004668 <__swsetup_r+0xa8>)
 80045c4:	4605      	mov	r5, r0
 80045c6:	6818      	ldr	r0, [r3, #0]
 80045c8:	460c      	mov	r4, r1
 80045ca:	b118      	cbz	r0, 80045d4 <__swsetup_r+0x14>
 80045cc:	6a03      	ldr	r3, [r0, #32]
 80045ce:	b90b      	cbnz	r3, 80045d4 <__swsetup_r+0x14>
 80045d0:	f7ff fe66 	bl	80042a0 <__sinit>
 80045d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045d8:	0719      	lsls	r1, r3, #28
 80045da:	d422      	bmi.n	8004622 <__swsetup_r+0x62>
 80045dc:	06da      	lsls	r2, r3, #27
 80045de:	d407      	bmi.n	80045f0 <__swsetup_r+0x30>
 80045e0:	2209      	movs	r2, #9
 80045e2:	602a      	str	r2, [r5, #0]
 80045e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045e8:	f04f 30ff 	mov.w	r0, #4294967295
 80045ec:	81a3      	strh	r3, [r4, #12]
 80045ee:	e033      	b.n	8004658 <__swsetup_r+0x98>
 80045f0:	0758      	lsls	r0, r3, #29
 80045f2:	d512      	bpl.n	800461a <__swsetup_r+0x5a>
 80045f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80045f6:	b141      	cbz	r1, 800460a <__swsetup_r+0x4a>
 80045f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80045fc:	4299      	cmp	r1, r3
 80045fe:	d002      	beq.n	8004606 <__swsetup_r+0x46>
 8004600:	4628      	mov	r0, r5
 8004602:	f000 f8c1 	bl	8004788 <_free_r>
 8004606:	2300      	movs	r3, #0
 8004608:	6363      	str	r3, [r4, #52]	@ 0x34
 800460a:	89a3      	ldrh	r3, [r4, #12]
 800460c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004610:	81a3      	strh	r3, [r4, #12]
 8004612:	2300      	movs	r3, #0
 8004614:	6063      	str	r3, [r4, #4]
 8004616:	6923      	ldr	r3, [r4, #16]
 8004618:	6023      	str	r3, [r4, #0]
 800461a:	89a3      	ldrh	r3, [r4, #12]
 800461c:	f043 0308 	orr.w	r3, r3, #8
 8004620:	81a3      	strh	r3, [r4, #12]
 8004622:	6923      	ldr	r3, [r4, #16]
 8004624:	b94b      	cbnz	r3, 800463a <__swsetup_r+0x7a>
 8004626:	89a3      	ldrh	r3, [r4, #12]
 8004628:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800462c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004630:	d003      	beq.n	800463a <__swsetup_r+0x7a>
 8004632:	4621      	mov	r1, r4
 8004634:	4628      	mov	r0, r5
 8004636:	f001 f902 	bl	800583e <__smakebuf_r>
 800463a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800463e:	f013 0201 	ands.w	r2, r3, #1
 8004642:	d00a      	beq.n	800465a <__swsetup_r+0x9a>
 8004644:	2200      	movs	r2, #0
 8004646:	60a2      	str	r2, [r4, #8]
 8004648:	6962      	ldr	r2, [r4, #20]
 800464a:	4252      	negs	r2, r2
 800464c:	61a2      	str	r2, [r4, #24]
 800464e:	6922      	ldr	r2, [r4, #16]
 8004650:	b942      	cbnz	r2, 8004664 <__swsetup_r+0xa4>
 8004652:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004656:	d1c5      	bne.n	80045e4 <__swsetup_r+0x24>
 8004658:	bd38      	pop	{r3, r4, r5, pc}
 800465a:	0799      	lsls	r1, r3, #30
 800465c:	bf58      	it	pl
 800465e:	6962      	ldrpl	r2, [r4, #20]
 8004660:	60a2      	str	r2, [r4, #8]
 8004662:	e7f4      	b.n	800464e <__swsetup_r+0x8e>
 8004664:	2000      	movs	r0, #0
 8004666:	e7f7      	b.n	8004658 <__swsetup_r+0x98>
 8004668:	20000cd0 	.word	0x20000cd0

0800466c <memset>:
 800466c:	4603      	mov	r3, r0
 800466e:	4402      	add	r2, r0
 8004670:	4293      	cmp	r3, r2
 8004672:	d100      	bne.n	8004676 <memset+0xa>
 8004674:	4770      	bx	lr
 8004676:	f803 1b01 	strb.w	r1, [r3], #1
 800467a:	e7f9      	b.n	8004670 <memset+0x4>

0800467c <strncmp>:
 800467c:	b510      	push	{r4, lr}
 800467e:	b16a      	cbz	r2, 800469c <strncmp+0x20>
 8004680:	3901      	subs	r1, #1
 8004682:	1884      	adds	r4, r0, r2
 8004684:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004688:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800468c:	429a      	cmp	r2, r3
 800468e:	d103      	bne.n	8004698 <strncmp+0x1c>
 8004690:	42a0      	cmp	r0, r4
 8004692:	d001      	beq.n	8004698 <strncmp+0x1c>
 8004694:	2a00      	cmp	r2, #0
 8004696:	d1f5      	bne.n	8004684 <strncmp+0x8>
 8004698:	1ad0      	subs	r0, r2, r3
 800469a:	bd10      	pop	{r4, pc}
 800469c:	4610      	mov	r0, r2
 800469e:	e7fc      	b.n	800469a <strncmp+0x1e>

080046a0 <_close_r>:
 80046a0:	b538      	push	{r3, r4, r5, lr}
 80046a2:	2300      	movs	r3, #0
 80046a4:	4d05      	ldr	r5, [pc, #20]	@ (80046bc <_close_r+0x1c>)
 80046a6:	4604      	mov	r4, r0
 80046a8:	4608      	mov	r0, r1
 80046aa:	602b      	str	r3, [r5, #0]
 80046ac:	f7fe fbbb 	bl	8002e26 <_close>
 80046b0:	1c43      	adds	r3, r0, #1
 80046b2:	d102      	bne.n	80046ba <_close_r+0x1a>
 80046b4:	682b      	ldr	r3, [r5, #0]
 80046b6:	b103      	cbz	r3, 80046ba <_close_r+0x1a>
 80046b8:	6023      	str	r3, [r4, #0]
 80046ba:	bd38      	pop	{r3, r4, r5, pc}
 80046bc:	200043f0 	.word	0x200043f0

080046c0 <_lseek_r>:
 80046c0:	b538      	push	{r3, r4, r5, lr}
 80046c2:	4604      	mov	r4, r0
 80046c4:	4608      	mov	r0, r1
 80046c6:	4611      	mov	r1, r2
 80046c8:	2200      	movs	r2, #0
 80046ca:	4d05      	ldr	r5, [pc, #20]	@ (80046e0 <_lseek_r+0x20>)
 80046cc:	602a      	str	r2, [r5, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	f7fe fbcd 	bl	8002e6e <_lseek>
 80046d4:	1c43      	adds	r3, r0, #1
 80046d6:	d102      	bne.n	80046de <_lseek_r+0x1e>
 80046d8:	682b      	ldr	r3, [r5, #0]
 80046da:	b103      	cbz	r3, 80046de <_lseek_r+0x1e>
 80046dc:	6023      	str	r3, [r4, #0]
 80046de:	bd38      	pop	{r3, r4, r5, pc}
 80046e0:	200043f0 	.word	0x200043f0

080046e4 <_read_r>:
 80046e4:	b538      	push	{r3, r4, r5, lr}
 80046e6:	4604      	mov	r4, r0
 80046e8:	4608      	mov	r0, r1
 80046ea:	4611      	mov	r1, r2
 80046ec:	2200      	movs	r2, #0
 80046ee:	4d05      	ldr	r5, [pc, #20]	@ (8004704 <_read_r+0x20>)
 80046f0:	602a      	str	r2, [r5, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	f7fe fb7a 	bl	8002dec <_read>
 80046f8:	1c43      	adds	r3, r0, #1
 80046fa:	d102      	bne.n	8004702 <_read_r+0x1e>
 80046fc:	682b      	ldr	r3, [r5, #0]
 80046fe:	b103      	cbz	r3, 8004702 <_read_r+0x1e>
 8004700:	6023      	str	r3, [r4, #0]
 8004702:	bd38      	pop	{r3, r4, r5, pc}
 8004704:	200043f0 	.word	0x200043f0

08004708 <_write_r>:
 8004708:	b538      	push	{r3, r4, r5, lr}
 800470a:	4604      	mov	r4, r0
 800470c:	4608      	mov	r0, r1
 800470e:	4611      	mov	r1, r2
 8004710:	2200      	movs	r2, #0
 8004712:	4d05      	ldr	r5, [pc, #20]	@ (8004728 <_write_r+0x20>)
 8004714:	602a      	str	r2, [r5, #0]
 8004716:	461a      	mov	r2, r3
 8004718:	f7fc fea4 	bl	8001464 <_write>
 800471c:	1c43      	adds	r3, r0, #1
 800471e:	d102      	bne.n	8004726 <_write_r+0x1e>
 8004720:	682b      	ldr	r3, [r5, #0]
 8004722:	b103      	cbz	r3, 8004726 <_write_r+0x1e>
 8004724:	6023      	str	r3, [r4, #0]
 8004726:	bd38      	pop	{r3, r4, r5, pc}
 8004728:	200043f0 	.word	0x200043f0

0800472c <__errno>:
 800472c:	4b01      	ldr	r3, [pc, #4]	@ (8004734 <__errno+0x8>)
 800472e:	6818      	ldr	r0, [r3, #0]
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	20000cd0 	.word	0x20000cd0

08004738 <__libc_init_array>:
 8004738:	b570      	push	{r4, r5, r6, lr}
 800473a:	2600      	movs	r6, #0
 800473c:	4d0c      	ldr	r5, [pc, #48]	@ (8004770 <__libc_init_array+0x38>)
 800473e:	4c0d      	ldr	r4, [pc, #52]	@ (8004774 <__libc_init_array+0x3c>)
 8004740:	1b64      	subs	r4, r4, r5
 8004742:	10a4      	asrs	r4, r4, #2
 8004744:	42a6      	cmp	r6, r4
 8004746:	d109      	bne.n	800475c <__libc_init_array+0x24>
 8004748:	f001 fae4 	bl	8005d14 <_init>
 800474c:	2600      	movs	r6, #0
 800474e:	4d0a      	ldr	r5, [pc, #40]	@ (8004778 <__libc_init_array+0x40>)
 8004750:	4c0a      	ldr	r4, [pc, #40]	@ (800477c <__libc_init_array+0x44>)
 8004752:	1b64      	subs	r4, r4, r5
 8004754:	10a4      	asrs	r4, r4, #2
 8004756:	42a6      	cmp	r6, r4
 8004758:	d105      	bne.n	8004766 <__libc_init_array+0x2e>
 800475a:	bd70      	pop	{r4, r5, r6, pc}
 800475c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004760:	4798      	blx	r3
 8004762:	3601      	adds	r6, #1
 8004764:	e7ee      	b.n	8004744 <__libc_init_array+0xc>
 8004766:	f855 3b04 	ldr.w	r3, [r5], #4
 800476a:	4798      	blx	r3
 800476c:	3601      	adds	r6, #1
 800476e:	e7f2      	b.n	8004756 <__libc_init_array+0x1e>
 8004770:	08006c70 	.word	0x08006c70
 8004774:	08006c70 	.word	0x08006c70
 8004778:	08006c70 	.word	0x08006c70
 800477c:	08006c74 	.word	0x08006c74

08004780 <__retarget_lock_init_recursive>:
 8004780:	4770      	bx	lr

08004782 <__retarget_lock_acquire_recursive>:
 8004782:	4770      	bx	lr

08004784 <__retarget_lock_release_recursive>:
 8004784:	4770      	bx	lr
	...

08004788 <_free_r>:
 8004788:	b538      	push	{r3, r4, r5, lr}
 800478a:	4605      	mov	r5, r0
 800478c:	2900      	cmp	r1, #0
 800478e:	d040      	beq.n	8004812 <_free_r+0x8a>
 8004790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004794:	1f0c      	subs	r4, r1, #4
 8004796:	2b00      	cmp	r3, #0
 8004798:	bfb8      	it	lt
 800479a:	18e4      	addlt	r4, r4, r3
 800479c:	f000 f8de 	bl	800495c <__malloc_lock>
 80047a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004814 <_free_r+0x8c>)
 80047a2:	6813      	ldr	r3, [r2, #0]
 80047a4:	b933      	cbnz	r3, 80047b4 <_free_r+0x2c>
 80047a6:	6063      	str	r3, [r4, #4]
 80047a8:	6014      	str	r4, [r2, #0]
 80047aa:	4628      	mov	r0, r5
 80047ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047b0:	f000 b8da 	b.w	8004968 <__malloc_unlock>
 80047b4:	42a3      	cmp	r3, r4
 80047b6:	d908      	bls.n	80047ca <_free_r+0x42>
 80047b8:	6820      	ldr	r0, [r4, #0]
 80047ba:	1821      	adds	r1, r4, r0
 80047bc:	428b      	cmp	r3, r1
 80047be:	bf01      	itttt	eq
 80047c0:	6819      	ldreq	r1, [r3, #0]
 80047c2:	685b      	ldreq	r3, [r3, #4]
 80047c4:	1809      	addeq	r1, r1, r0
 80047c6:	6021      	streq	r1, [r4, #0]
 80047c8:	e7ed      	b.n	80047a6 <_free_r+0x1e>
 80047ca:	461a      	mov	r2, r3
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	b10b      	cbz	r3, 80047d4 <_free_r+0x4c>
 80047d0:	42a3      	cmp	r3, r4
 80047d2:	d9fa      	bls.n	80047ca <_free_r+0x42>
 80047d4:	6811      	ldr	r1, [r2, #0]
 80047d6:	1850      	adds	r0, r2, r1
 80047d8:	42a0      	cmp	r0, r4
 80047da:	d10b      	bne.n	80047f4 <_free_r+0x6c>
 80047dc:	6820      	ldr	r0, [r4, #0]
 80047de:	4401      	add	r1, r0
 80047e0:	1850      	adds	r0, r2, r1
 80047e2:	4283      	cmp	r3, r0
 80047e4:	6011      	str	r1, [r2, #0]
 80047e6:	d1e0      	bne.n	80047aa <_free_r+0x22>
 80047e8:	6818      	ldr	r0, [r3, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	4408      	add	r0, r1
 80047ee:	6010      	str	r0, [r2, #0]
 80047f0:	6053      	str	r3, [r2, #4]
 80047f2:	e7da      	b.n	80047aa <_free_r+0x22>
 80047f4:	d902      	bls.n	80047fc <_free_r+0x74>
 80047f6:	230c      	movs	r3, #12
 80047f8:	602b      	str	r3, [r5, #0]
 80047fa:	e7d6      	b.n	80047aa <_free_r+0x22>
 80047fc:	6820      	ldr	r0, [r4, #0]
 80047fe:	1821      	adds	r1, r4, r0
 8004800:	428b      	cmp	r3, r1
 8004802:	bf01      	itttt	eq
 8004804:	6819      	ldreq	r1, [r3, #0]
 8004806:	685b      	ldreq	r3, [r3, #4]
 8004808:	1809      	addeq	r1, r1, r0
 800480a:	6021      	streq	r1, [r4, #0]
 800480c:	6063      	str	r3, [r4, #4]
 800480e:	6054      	str	r4, [r2, #4]
 8004810:	e7cb      	b.n	80047aa <_free_r+0x22>
 8004812:	bd38      	pop	{r3, r4, r5, pc}
 8004814:	200043fc 	.word	0x200043fc

08004818 <sbrk_aligned>:
 8004818:	b570      	push	{r4, r5, r6, lr}
 800481a:	4e0f      	ldr	r6, [pc, #60]	@ (8004858 <sbrk_aligned+0x40>)
 800481c:	460c      	mov	r4, r1
 800481e:	6831      	ldr	r1, [r6, #0]
 8004820:	4605      	mov	r5, r0
 8004822:	b911      	cbnz	r1, 800482a <sbrk_aligned+0x12>
 8004824:	f001 f928 	bl	8005a78 <_sbrk_r>
 8004828:	6030      	str	r0, [r6, #0]
 800482a:	4621      	mov	r1, r4
 800482c:	4628      	mov	r0, r5
 800482e:	f001 f923 	bl	8005a78 <_sbrk_r>
 8004832:	1c43      	adds	r3, r0, #1
 8004834:	d103      	bne.n	800483e <sbrk_aligned+0x26>
 8004836:	f04f 34ff 	mov.w	r4, #4294967295
 800483a:	4620      	mov	r0, r4
 800483c:	bd70      	pop	{r4, r5, r6, pc}
 800483e:	1cc4      	adds	r4, r0, #3
 8004840:	f024 0403 	bic.w	r4, r4, #3
 8004844:	42a0      	cmp	r0, r4
 8004846:	d0f8      	beq.n	800483a <sbrk_aligned+0x22>
 8004848:	1a21      	subs	r1, r4, r0
 800484a:	4628      	mov	r0, r5
 800484c:	f001 f914 	bl	8005a78 <_sbrk_r>
 8004850:	3001      	adds	r0, #1
 8004852:	d1f2      	bne.n	800483a <sbrk_aligned+0x22>
 8004854:	e7ef      	b.n	8004836 <sbrk_aligned+0x1e>
 8004856:	bf00      	nop
 8004858:	200043f8 	.word	0x200043f8

0800485c <_malloc_r>:
 800485c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004860:	1ccd      	adds	r5, r1, #3
 8004862:	f025 0503 	bic.w	r5, r5, #3
 8004866:	3508      	adds	r5, #8
 8004868:	2d0c      	cmp	r5, #12
 800486a:	bf38      	it	cc
 800486c:	250c      	movcc	r5, #12
 800486e:	2d00      	cmp	r5, #0
 8004870:	4606      	mov	r6, r0
 8004872:	db01      	blt.n	8004878 <_malloc_r+0x1c>
 8004874:	42a9      	cmp	r1, r5
 8004876:	d904      	bls.n	8004882 <_malloc_r+0x26>
 8004878:	230c      	movs	r3, #12
 800487a:	6033      	str	r3, [r6, #0]
 800487c:	2000      	movs	r0, #0
 800487e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004882:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004958 <_malloc_r+0xfc>
 8004886:	f000 f869 	bl	800495c <__malloc_lock>
 800488a:	f8d8 3000 	ldr.w	r3, [r8]
 800488e:	461c      	mov	r4, r3
 8004890:	bb44      	cbnz	r4, 80048e4 <_malloc_r+0x88>
 8004892:	4629      	mov	r1, r5
 8004894:	4630      	mov	r0, r6
 8004896:	f7ff ffbf 	bl	8004818 <sbrk_aligned>
 800489a:	1c43      	adds	r3, r0, #1
 800489c:	4604      	mov	r4, r0
 800489e:	d158      	bne.n	8004952 <_malloc_r+0xf6>
 80048a0:	f8d8 4000 	ldr.w	r4, [r8]
 80048a4:	4627      	mov	r7, r4
 80048a6:	2f00      	cmp	r7, #0
 80048a8:	d143      	bne.n	8004932 <_malloc_r+0xd6>
 80048aa:	2c00      	cmp	r4, #0
 80048ac:	d04b      	beq.n	8004946 <_malloc_r+0xea>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	4639      	mov	r1, r7
 80048b2:	4630      	mov	r0, r6
 80048b4:	eb04 0903 	add.w	r9, r4, r3
 80048b8:	f001 f8de 	bl	8005a78 <_sbrk_r>
 80048bc:	4581      	cmp	r9, r0
 80048be:	d142      	bne.n	8004946 <_malloc_r+0xea>
 80048c0:	6821      	ldr	r1, [r4, #0]
 80048c2:	4630      	mov	r0, r6
 80048c4:	1a6d      	subs	r5, r5, r1
 80048c6:	4629      	mov	r1, r5
 80048c8:	f7ff ffa6 	bl	8004818 <sbrk_aligned>
 80048cc:	3001      	adds	r0, #1
 80048ce:	d03a      	beq.n	8004946 <_malloc_r+0xea>
 80048d0:	6823      	ldr	r3, [r4, #0]
 80048d2:	442b      	add	r3, r5
 80048d4:	6023      	str	r3, [r4, #0]
 80048d6:	f8d8 3000 	ldr.w	r3, [r8]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	bb62      	cbnz	r2, 8004938 <_malloc_r+0xdc>
 80048de:	f8c8 7000 	str.w	r7, [r8]
 80048e2:	e00f      	b.n	8004904 <_malloc_r+0xa8>
 80048e4:	6822      	ldr	r2, [r4, #0]
 80048e6:	1b52      	subs	r2, r2, r5
 80048e8:	d420      	bmi.n	800492c <_malloc_r+0xd0>
 80048ea:	2a0b      	cmp	r2, #11
 80048ec:	d917      	bls.n	800491e <_malloc_r+0xc2>
 80048ee:	1961      	adds	r1, r4, r5
 80048f0:	42a3      	cmp	r3, r4
 80048f2:	6025      	str	r5, [r4, #0]
 80048f4:	bf18      	it	ne
 80048f6:	6059      	strne	r1, [r3, #4]
 80048f8:	6863      	ldr	r3, [r4, #4]
 80048fa:	bf08      	it	eq
 80048fc:	f8c8 1000 	streq.w	r1, [r8]
 8004900:	5162      	str	r2, [r4, r5]
 8004902:	604b      	str	r3, [r1, #4]
 8004904:	4630      	mov	r0, r6
 8004906:	f000 f82f 	bl	8004968 <__malloc_unlock>
 800490a:	f104 000b 	add.w	r0, r4, #11
 800490e:	1d23      	adds	r3, r4, #4
 8004910:	f020 0007 	bic.w	r0, r0, #7
 8004914:	1ac2      	subs	r2, r0, r3
 8004916:	bf1c      	itt	ne
 8004918:	1a1b      	subne	r3, r3, r0
 800491a:	50a3      	strne	r3, [r4, r2]
 800491c:	e7af      	b.n	800487e <_malloc_r+0x22>
 800491e:	6862      	ldr	r2, [r4, #4]
 8004920:	42a3      	cmp	r3, r4
 8004922:	bf0c      	ite	eq
 8004924:	f8c8 2000 	streq.w	r2, [r8]
 8004928:	605a      	strne	r2, [r3, #4]
 800492a:	e7eb      	b.n	8004904 <_malloc_r+0xa8>
 800492c:	4623      	mov	r3, r4
 800492e:	6864      	ldr	r4, [r4, #4]
 8004930:	e7ae      	b.n	8004890 <_malloc_r+0x34>
 8004932:	463c      	mov	r4, r7
 8004934:	687f      	ldr	r7, [r7, #4]
 8004936:	e7b6      	b.n	80048a6 <_malloc_r+0x4a>
 8004938:	461a      	mov	r2, r3
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	42a3      	cmp	r3, r4
 800493e:	d1fb      	bne.n	8004938 <_malloc_r+0xdc>
 8004940:	2300      	movs	r3, #0
 8004942:	6053      	str	r3, [r2, #4]
 8004944:	e7de      	b.n	8004904 <_malloc_r+0xa8>
 8004946:	230c      	movs	r3, #12
 8004948:	4630      	mov	r0, r6
 800494a:	6033      	str	r3, [r6, #0]
 800494c:	f000 f80c 	bl	8004968 <__malloc_unlock>
 8004950:	e794      	b.n	800487c <_malloc_r+0x20>
 8004952:	6005      	str	r5, [r0, #0]
 8004954:	e7d6      	b.n	8004904 <_malloc_r+0xa8>
 8004956:	bf00      	nop
 8004958:	200043fc 	.word	0x200043fc

0800495c <__malloc_lock>:
 800495c:	4801      	ldr	r0, [pc, #4]	@ (8004964 <__malloc_lock+0x8>)
 800495e:	f7ff bf10 	b.w	8004782 <__retarget_lock_acquire_recursive>
 8004962:	bf00      	nop
 8004964:	200043f4 	.word	0x200043f4

08004968 <__malloc_unlock>:
 8004968:	4801      	ldr	r0, [pc, #4]	@ (8004970 <__malloc_unlock+0x8>)
 800496a:	f7ff bf0b 	b.w	8004784 <__retarget_lock_release_recursive>
 800496e:	bf00      	nop
 8004970:	200043f4 	.word	0x200043f4

08004974 <__ssputs_r>:
 8004974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004978:	461f      	mov	r7, r3
 800497a:	688e      	ldr	r6, [r1, #8]
 800497c:	4682      	mov	sl, r0
 800497e:	42be      	cmp	r6, r7
 8004980:	460c      	mov	r4, r1
 8004982:	4690      	mov	r8, r2
 8004984:	680b      	ldr	r3, [r1, #0]
 8004986:	d82d      	bhi.n	80049e4 <__ssputs_r+0x70>
 8004988:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800498c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004990:	d026      	beq.n	80049e0 <__ssputs_r+0x6c>
 8004992:	6965      	ldr	r5, [r4, #20]
 8004994:	6909      	ldr	r1, [r1, #16]
 8004996:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800499a:	eba3 0901 	sub.w	r9, r3, r1
 800499e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049a2:	1c7b      	adds	r3, r7, #1
 80049a4:	444b      	add	r3, r9
 80049a6:	106d      	asrs	r5, r5, #1
 80049a8:	429d      	cmp	r5, r3
 80049aa:	bf38      	it	cc
 80049ac:	461d      	movcc	r5, r3
 80049ae:	0553      	lsls	r3, r2, #21
 80049b0:	d527      	bpl.n	8004a02 <__ssputs_r+0x8e>
 80049b2:	4629      	mov	r1, r5
 80049b4:	f7ff ff52 	bl	800485c <_malloc_r>
 80049b8:	4606      	mov	r6, r0
 80049ba:	b360      	cbz	r0, 8004a16 <__ssputs_r+0xa2>
 80049bc:	464a      	mov	r2, r9
 80049be:	6921      	ldr	r1, [r4, #16]
 80049c0:	f001 f878 	bl	8005ab4 <memcpy>
 80049c4:	89a3      	ldrh	r3, [r4, #12]
 80049c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80049ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ce:	81a3      	strh	r3, [r4, #12]
 80049d0:	6126      	str	r6, [r4, #16]
 80049d2:	444e      	add	r6, r9
 80049d4:	6026      	str	r6, [r4, #0]
 80049d6:	463e      	mov	r6, r7
 80049d8:	6165      	str	r5, [r4, #20]
 80049da:	eba5 0509 	sub.w	r5, r5, r9
 80049de:	60a5      	str	r5, [r4, #8]
 80049e0:	42be      	cmp	r6, r7
 80049e2:	d900      	bls.n	80049e6 <__ssputs_r+0x72>
 80049e4:	463e      	mov	r6, r7
 80049e6:	4632      	mov	r2, r6
 80049e8:	4641      	mov	r1, r8
 80049ea:	6820      	ldr	r0, [r4, #0]
 80049ec:	f001 f808 	bl	8005a00 <memmove>
 80049f0:	2000      	movs	r0, #0
 80049f2:	68a3      	ldr	r3, [r4, #8]
 80049f4:	1b9b      	subs	r3, r3, r6
 80049f6:	60a3      	str	r3, [r4, #8]
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	4433      	add	r3, r6
 80049fc:	6023      	str	r3, [r4, #0]
 80049fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a02:	462a      	mov	r2, r5
 8004a04:	f001 f864 	bl	8005ad0 <_realloc_r>
 8004a08:	4606      	mov	r6, r0
 8004a0a:	2800      	cmp	r0, #0
 8004a0c:	d1e0      	bne.n	80049d0 <__ssputs_r+0x5c>
 8004a0e:	4650      	mov	r0, sl
 8004a10:	6921      	ldr	r1, [r4, #16]
 8004a12:	f7ff feb9 	bl	8004788 <_free_r>
 8004a16:	230c      	movs	r3, #12
 8004a18:	f8ca 3000 	str.w	r3, [sl]
 8004a1c:	89a3      	ldrh	r3, [r4, #12]
 8004a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a26:	81a3      	strh	r3, [r4, #12]
 8004a28:	e7e9      	b.n	80049fe <__ssputs_r+0x8a>
	...

08004a2c <_svfiprintf_r>:
 8004a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a30:	4698      	mov	r8, r3
 8004a32:	898b      	ldrh	r3, [r1, #12]
 8004a34:	4607      	mov	r7, r0
 8004a36:	061b      	lsls	r3, r3, #24
 8004a38:	460d      	mov	r5, r1
 8004a3a:	4614      	mov	r4, r2
 8004a3c:	b09d      	sub	sp, #116	@ 0x74
 8004a3e:	d510      	bpl.n	8004a62 <_svfiprintf_r+0x36>
 8004a40:	690b      	ldr	r3, [r1, #16]
 8004a42:	b973      	cbnz	r3, 8004a62 <_svfiprintf_r+0x36>
 8004a44:	2140      	movs	r1, #64	@ 0x40
 8004a46:	f7ff ff09 	bl	800485c <_malloc_r>
 8004a4a:	6028      	str	r0, [r5, #0]
 8004a4c:	6128      	str	r0, [r5, #16]
 8004a4e:	b930      	cbnz	r0, 8004a5e <_svfiprintf_r+0x32>
 8004a50:	230c      	movs	r3, #12
 8004a52:	603b      	str	r3, [r7, #0]
 8004a54:	f04f 30ff 	mov.w	r0, #4294967295
 8004a58:	b01d      	add	sp, #116	@ 0x74
 8004a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a5e:	2340      	movs	r3, #64	@ 0x40
 8004a60:	616b      	str	r3, [r5, #20]
 8004a62:	2300      	movs	r3, #0
 8004a64:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a66:	2320      	movs	r3, #32
 8004a68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004a6c:	2330      	movs	r3, #48	@ 0x30
 8004a6e:	f04f 0901 	mov.w	r9, #1
 8004a72:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a76:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004c10 <_svfiprintf_r+0x1e4>
 8004a7a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004a7e:	4623      	mov	r3, r4
 8004a80:	469a      	mov	sl, r3
 8004a82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a86:	b10a      	cbz	r2, 8004a8c <_svfiprintf_r+0x60>
 8004a88:	2a25      	cmp	r2, #37	@ 0x25
 8004a8a:	d1f9      	bne.n	8004a80 <_svfiprintf_r+0x54>
 8004a8c:	ebba 0b04 	subs.w	fp, sl, r4
 8004a90:	d00b      	beq.n	8004aaa <_svfiprintf_r+0x7e>
 8004a92:	465b      	mov	r3, fp
 8004a94:	4622      	mov	r2, r4
 8004a96:	4629      	mov	r1, r5
 8004a98:	4638      	mov	r0, r7
 8004a9a:	f7ff ff6b 	bl	8004974 <__ssputs_r>
 8004a9e:	3001      	adds	r0, #1
 8004aa0:	f000 80a7 	beq.w	8004bf2 <_svfiprintf_r+0x1c6>
 8004aa4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004aa6:	445a      	add	r2, fp
 8004aa8:	9209      	str	r2, [sp, #36]	@ 0x24
 8004aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 809f 	beq.w	8004bf2 <_svfiprintf_r+0x1c6>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8004aba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004abe:	f10a 0a01 	add.w	sl, sl, #1
 8004ac2:	9304      	str	r3, [sp, #16]
 8004ac4:	9307      	str	r3, [sp, #28]
 8004ac6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004aca:	931a      	str	r3, [sp, #104]	@ 0x68
 8004acc:	4654      	mov	r4, sl
 8004ace:	2205      	movs	r2, #5
 8004ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ad4:	484e      	ldr	r0, [pc, #312]	@ (8004c10 <_svfiprintf_r+0x1e4>)
 8004ad6:	f000 ffdf 	bl	8005a98 <memchr>
 8004ada:	9a04      	ldr	r2, [sp, #16]
 8004adc:	b9d8      	cbnz	r0, 8004b16 <_svfiprintf_r+0xea>
 8004ade:	06d0      	lsls	r0, r2, #27
 8004ae0:	bf44      	itt	mi
 8004ae2:	2320      	movmi	r3, #32
 8004ae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ae8:	0711      	lsls	r1, r2, #28
 8004aea:	bf44      	itt	mi
 8004aec:	232b      	movmi	r3, #43	@ 0x2b
 8004aee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004af2:	f89a 3000 	ldrb.w	r3, [sl]
 8004af6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004af8:	d015      	beq.n	8004b26 <_svfiprintf_r+0xfa>
 8004afa:	4654      	mov	r4, sl
 8004afc:	2000      	movs	r0, #0
 8004afe:	f04f 0c0a 	mov.w	ip, #10
 8004b02:	9a07      	ldr	r2, [sp, #28]
 8004b04:	4621      	mov	r1, r4
 8004b06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b0a:	3b30      	subs	r3, #48	@ 0x30
 8004b0c:	2b09      	cmp	r3, #9
 8004b0e:	d94b      	bls.n	8004ba8 <_svfiprintf_r+0x17c>
 8004b10:	b1b0      	cbz	r0, 8004b40 <_svfiprintf_r+0x114>
 8004b12:	9207      	str	r2, [sp, #28]
 8004b14:	e014      	b.n	8004b40 <_svfiprintf_r+0x114>
 8004b16:	eba0 0308 	sub.w	r3, r0, r8
 8004b1a:	fa09 f303 	lsl.w	r3, r9, r3
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	46a2      	mov	sl, r4
 8004b22:	9304      	str	r3, [sp, #16]
 8004b24:	e7d2      	b.n	8004acc <_svfiprintf_r+0xa0>
 8004b26:	9b03      	ldr	r3, [sp, #12]
 8004b28:	1d19      	adds	r1, r3, #4
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	9103      	str	r1, [sp, #12]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	bfbb      	ittet	lt
 8004b32:	425b      	neglt	r3, r3
 8004b34:	f042 0202 	orrlt.w	r2, r2, #2
 8004b38:	9307      	strge	r3, [sp, #28]
 8004b3a:	9307      	strlt	r3, [sp, #28]
 8004b3c:	bfb8      	it	lt
 8004b3e:	9204      	strlt	r2, [sp, #16]
 8004b40:	7823      	ldrb	r3, [r4, #0]
 8004b42:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b44:	d10a      	bne.n	8004b5c <_svfiprintf_r+0x130>
 8004b46:	7863      	ldrb	r3, [r4, #1]
 8004b48:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b4a:	d132      	bne.n	8004bb2 <_svfiprintf_r+0x186>
 8004b4c:	9b03      	ldr	r3, [sp, #12]
 8004b4e:	3402      	adds	r4, #2
 8004b50:	1d1a      	adds	r2, r3, #4
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	9203      	str	r2, [sp, #12]
 8004b56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004b5a:	9305      	str	r3, [sp, #20]
 8004b5c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004c14 <_svfiprintf_r+0x1e8>
 8004b60:	2203      	movs	r2, #3
 8004b62:	4650      	mov	r0, sl
 8004b64:	7821      	ldrb	r1, [r4, #0]
 8004b66:	f000 ff97 	bl	8005a98 <memchr>
 8004b6a:	b138      	cbz	r0, 8004b7c <_svfiprintf_r+0x150>
 8004b6c:	2240      	movs	r2, #64	@ 0x40
 8004b6e:	9b04      	ldr	r3, [sp, #16]
 8004b70:	eba0 000a 	sub.w	r0, r0, sl
 8004b74:	4082      	lsls	r2, r0
 8004b76:	4313      	orrs	r3, r2
 8004b78:	3401      	adds	r4, #1
 8004b7a:	9304      	str	r3, [sp, #16]
 8004b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b80:	2206      	movs	r2, #6
 8004b82:	4825      	ldr	r0, [pc, #148]	@ (8004c18 <_svfiprintf_r+0x1ec>)
 8004b84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004b88:	f000 ff86 	bl	8005a98 <memchr>
 8004b8c:	2800      	cmp	r0, #0
 8004b8e:	d036      	beq.n	8004bfe <_svfiprintf_r+0x1d2>
 8004b90:	4b22      	ldr	r3, [pc, #136]	@ (8004c1c <_svfiprintf_r+0x1f0>)
 8004b92:	bb1b      	cbnz	r3, 8004bdc <_svfiprintf_r+0x1b0>
 8004b94:	9b03      	ldr	r3, [sp, #12]
 8004b96:	3307      	adds	r3, #7
 8004b98:	f023 0307 	bic.w	r3, r3, #7
 8004b9c:	3308      	adds	r3, #8
 8004b9e:	9303      	str	r3, [sp, #12]
 8004ba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ba2:	4433      	add	r3, r6
 8004ba4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ba6:	e76a      	b.n	8004a7e <_svfiprintf_r+0x52>
 8004ba8:	460c      	mov	r4, r1
 8004baa:	2001      	movs	r0, #1
 8004bac:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bb0:	e7a8      	b.n	8004b04 <_svfiprintf_r+0xd8>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	f04f 0c0a 	mov.w	ip, #10
 8004bb8:	4619      	mov	r1, r3
 8004bba:	3401      	adds	r4, #1
 8004bbc:	9305      	str	r3, [sp, #20]
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bc4:	3a30      	subs	r2, #48	@ 0x30
 8004bc6:	2a09      	cmp	r2, #9
 8004bc8:	d903      	bls.n	8004bd2 <_svfiprintf_r+0x1a6>
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0c6      	beq.n	8004b5c <_svfiprintf_r+0x130>
 8004bce:	9105      	str	r1, [sp, #20]
 8004bd0:	e7c4      	b.n	8004b5c <_svfiprintf_r+0x130>
 8004bd2:	4604      	mov	r4, r0
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bda:	e7f0      	b.n	8004bbe <_svfiprintf_r+0x192>
 8004bdc:	ab03      	add	r3, sp, #12
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	462a      	mov	r2, r5
 8004be2:	4638      	mov	r0, r7
 8004be4:	4b0e      	ldr	r3, [pc, #56]	@ (8004c20 <_svfiprintf_r+0x1f4>)
 8004be6:	a904      	add	r1, sp, #16
 8004be8:	f3af 8000 	nop.w
 8004bec:	1c42      	adds	r2, r0, #1
 8004bee:	4606      	mov	r6, r0
 8004bf0:	d1d6      	bne.n	8004ba0 <_svfiprintf_r+0x174>
 8004bf2:	89ab      	ldrh	r3, [r5, #12]
 8004bf4:	065b      	lsls	r3, r3, #25
 8004bf6:	f53f af2d 	bmi.w	8004a54 <_svfiprintf_r+0x28>
 8004bfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004bfc:	e72c      	b.n	8004a58 <_svfiprintf_r+0x2c>
 8004bfe:	ab03      	add	r3, sp, #12
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	462a      	mov	r2, r5
 8004c04:	4638      	mov	r0, r7
 8004c06:	4b06      	ldr	r3, [pc, #24]	@ (8004c20 <_svfiprintf_r+0x1f4>)
 8004c08:	a904      	add	r1, sp, #16
 8004c0a:	f000 fb87 	bl	800531c <_printf_i>
 8004c0e:	e7ed      	b.n	8004bec <_svfiprintf_r+0x1c0>
 8004c10:	08006b18 	.word	0x08006b18
 8004c14:	08006b1e 	.word	0x08006b1e
 8004c18:	08006b22 	.word	0x08006b22
 8004c1c:	00000000 	.word	0x00000000
 8004c20:	08004975 	.word	0x08004975

08004c24 <_sungetc_r>:
 8004c24:	b538      	push	{r3, r4, r5, lr}
 8004c26:	1c4b      	adds	r3, r1, #1
 8004c28:	4614      	mov	r4, r2
 8004c2a:	d103      	bne.n	8004c34 <_sungetc_r+0x10>
 8004c2c:	f04f 35ff 	mov.w	r5, #4294967295
 8004c30:	4628      	mov	r0, r5
 8004c32:	bd38      	pop	{r3, r4, r5, pc}
 8004c34:	8993      	ldrh	r3, [r2, #12]
 8004c36:	b2cd      	uxtb	r5, r1
 8004c38:	f023 0320 	bic.w	r3, r3, #32
 8004c3c:	8193      	strh	r3, [r2, #12]
 8004c3e:	6853      	ldr	r3, [r2, #4]
 8004c40:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004c42:	b18a      	cbz	r2, 8004c68 <_sungetc_r+0x44>
 8004c44:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004c46:	429a      	cmp	r2, r3
 8004c48:	dd08      	ble.n	8004c5c <_sungetc_r+0x38>
 8004c4a:	6823      	ldr	r3, [r4, #0]
 8004c4c:	1e5a      	subs	r2, r3, #1
 8004c4e:	6022      	str	r2, [r4, #0]
 8004c50:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004c54:	6863      	ldr	r3, [r4, #4]
 8004c56:	3301      	adds	r3, #1
 8004c58:	6063      	str	r3, [r4, #4]
 8004c5a:	e7e9      	b.n	8004c30 <_sungetc_r+0xc>
 8004c5c:	4621      	mov	r1, r4
 8004c5e:	f000 fe97 	bl	8005990 <__submore>
 8004c62:	2800      	cmp	r0, #0
 8004c64:	d0f1      	beq.n	8004c4a <_sungetc_r+0x26>
 8004c66:	e7e1      	b.n	8004c2c <_sungetc_r+0x8>
 8004c68:	6921      	ldr	r1, [r4, #16]
 8004c6a:	6822      	ldr	r2, [r4, #0]
 8004c6c:	b141      	cbz	r1, 8004c80 <_sungetc_r+0x5c>
 8004c6e:	4291      	cmp	r1, r2
 8004c70:	d206      	bcs.n	8004c80 <_sungetc_r+0x5c>
 8004c72:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8004c76:	42a9      	cmp	r1, r5
 8004c78:	d102      	bne.n	8004c80 <_sungetc_r+0x5c>
 8004c7a:	3a01      	subs	r2, #1
 8004c7c:	6022      	str	r2, [r4, #0]
 8004c7e:	e7ea      	b.n	8004c56 <_sungetc_r+0x32>
 8004c80:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8004c84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c88:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004c8e:	4623      	mov	r3, r4
 8004c90:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004c94:	6023      	str	r3, [r4, #0]
 8004c96:	2301      	movs	r3, #1
 8004c98:	e7de      	b.n	8004c58 <_sungetc_r+0x34>

08004c9a <__ssrefill_r>:
 8004c9a:	b510      	push	{r4, lr}
 8004c9c:	460c      	mov	r4, r1
 8004c9e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8004ca0:	b169      	cbz	r1, 8004cbe <__ssrefill_r+0x24>
 8004ca2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ca6:	4299      	cmp	r1, r3
 8004ca8:	d001      	beq.n	8004cae <__ssrefill_r+0x14>
 8004caa:	f7ff fd6d 	bl	8004788 <_free_r>
 8004cae:	2000      	movs	r0, #0
 8004cb0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004cb2:	6360      	str	r0, [r4, #52]	@ 0x34
 8004cb4:	6063      	str	r3, [r4, #4]
 8004cb6:	b113      	cbz	r3, 8004cbe <__ssrefill_r+0x24>
 8004cb8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004cba:	6023      	str	r3, [r4, #0]
 8004cbc:	bd10      	pop	{r4, pc}
 8004cbe:	6923      	ldr	r3, [r4, #16]
 8004cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc4:	6023      	str	r3, [r4, #0]
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	6063      	str	r3, [r4, #4]
 8004cca:	89a3      	ldrh	r3, [r4, #12]
 8004ccc:	f043 0320 	orr.w	r3, r3, #32
 8004cd0:	81a3      	strh	r3, [r4, #12]
 8004cd2:	e7f3      	b.n	8004cbc <__ssrefill_r+0x22>

08004cd4 <__ssvfiscanf_r>:
 8004cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cd8:	460c      	mov	r4, r1
 8004cda:	2100      	movs	r1, #0
 8004cdc:	4606      	mov	r6, r0
 8004cde:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8004ce2:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8004ce6:	49aa      	ldr	r1, [pc, #680]	@ (8004f90 <__ssvfiscanf_r+0x2bc>)
 8004ce8:	f10d 0804 	add.w	r8, sp, #4
 8004cec:	91a0      	str	r1, [sp, #640]	@ 0x280
 8004cee:	49a9      	ldr	r1, [pc, #676]	@ (8004f94 <__ssvfiscanf_r+0x2c0>)
 8004cf0:	4fa9      	ldr	r7, [pc, #676]	@ (8004f98 <__ssvfiscanf_r+0x2c4>)
 8004cf2:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8004cf6:	91a1      	str	r1, [sp, #644]	@ 0x284
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	7813      	ldrb	r3, [r2, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 8159 	beq.w	8004fb4 <__ssvfiscanf_r+0x2e0>
 8004d02:	5cf9      	ldrb	r1, [r7, r3]
 8004d04:	1c55      	adds	r5, r2, #1
 8004d06:	f011 0108 	ands.w	r1, r1, #8
 8004d0a:	d019      	beq.n	8004d40 <__ssvfiscanf_r+0x6c>
 8004d0c:	6863      	ldr	r3, [r4, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	dd0f      	ble.n	8004d32 <__ssvfiscanf_r+0x5e>
 8004d12:	6823      	ldr	r3, [r4, #0]
 8004d14:	781a      	ldrb	r2, [r3, #0]
 8004d16:	5cba      	ldrb	r2, [r7, r2]
 8004d18:	0712      	lsls	r2, r2, #28
 8004d1a:	d401      	bmi.n	8004d20 <__ssvfiscanf_r+0x4c>
 8004d1c:	462a      	mov	r2, r5
 8004d1e:	e7ec      	b.n	8004cfa <__ssvfiscanf_r+0x26>
 8004d20:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004d22:	3301      	adds	r3, #1
 8004d24:	3201      	adds	r2, #1
 8004d26:	9245      	str	r2, [sp, #276]	@ 0x114
 8004d28:	6862      	ldr	r2, [r4, #4]
 8004d2a:	6023      	str	r3, [r4, #0]
 8004d2c:	3a01      	subs	r2, #1
 8004d2e:	6062      	str	r2, [r4, #4]
 8004d30:	e7ec      	b.n	8004d0c <__ssvfiscanf_r+0x38>
 8004d32:	4621      	mov	r1, r4
 8004d34:	4630      	mov	r0, r6
 8004d36:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004d38:	4798      	blx	r3
 8004d3a:	2800      	cmp	r0, #0
 8004d3c:	d0e9      	beq.n	8004d12 <__ssvfiscanf_r+0x3e>
 8004d3e:	e7ed      	b.n	8004d1c <__ssvfiscanf_r+0x48>
 8004d40:	2b25      	cmp	r3, #37	@ 0x25
 8004d42:	d012      	beq.n	8004d6a <__ssvfiscanf_r+0x96>
 8004d44:	4699      	mov	r9, r3
 8004d46:	6863      	ldr	r3, [r4, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f340 8094 	ble.w	8004e76 <__ssvfiscanf_r+0x1a2>
 8004d4e:	6822      	ldr	r2, [r4, #0]
 8004d50:	7813      	ldrb	r3, [r2, #0]
 8004d52:	454b      	cmp	r3, r9
 8004d54:	f040 812e 	bne.w	8004fb4 <__ssvfiscanf_r+0x2e0>
 8004d58:	6863      	ldr	r3, [r4, #4]
 8004d5a:	3201      	adds	r2, #1
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	6063      	str	r3, [r4, #4]
 8004d60:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8004d62:	6022      	str	r2, [r4, #0]
 8004d64:	3301      	adds	r3, #1
 8004d66:	9345      	str	r3, [sp, #276]	@ 0x114
 8004d68:	e7d8      	b.n	8004d1c <__ssvfiscanf_r+0x48>
 8004d6a:	9141      	str	r1, [sp, #260]	@ 0x104
 8004d6c:	9143      	str	r1, [sp, #268]	@ 0x10c
 8004d6e:	7853      	ldrb	r3, [r2, #1]
 8004d70:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d72:	bf04      	itt	eq
 8004d74:	2310      	moveq	r3, #16
 8004d76:	1c95      	addeq	r5, r2, #2
 8004d78:	f04f 020a 	mov.w	r2, #10
 8004d7c:	bf08      	it	eq
 8004d7e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8004d80:	46a9      	mov	r9, r5
 8004d82:	f819 1b01 	ldrb.w	r1, [r9], #1
 8004d86:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8004d8a:	2b09      	cmp	r3, #9
 8004d8c:	d91e      	bls.n	8004dcc <__ssvfiscanf_r+0xf8>
 8004d8e:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 8004f9c <__ssvfiscanf_r+0x2c8>
 8004d92:	2203      	movs	r2, #3
 8004d94:	4650      	mov	r0, sl
 8004d96:	f000 fe7f 	bl	8005a98 <memchr>
 8004d9a:	b138      	cbz	r0, 8004dac <__ssvfiscanf_r+0xd8>
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	464d      	mov	r5, r9
 8004da0:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004da2:	eba0 000a 	sub.w	r0, r0, sl
 8004da6:	4083      	lsls	r3, r0
 8004da8:	4313      	orrs	r3, r2
 8004daa:	9341      	str	r3, [sp, #260]	@ 0x104
 8004dac:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004db0:	2b78      	cmp	r3, #120	@ 0x78
 8004db2:	d806      	bhi.n	8004dc2 <__ssvfiscanf_r+0xee>
 8004db4:	2b57      	cmp	r3, #87	@ 0x57
 8004db6:	d810      	bhi.n	8004dda <__ssvfiscanf_r+0x106>
 8004db8:	2b25      	cmp	r3, #37	@ 0x25
 8004dba:	d0c3      	beq.n	8004d44 <__ssvfiscanf_r+0x70>
 8004dbc:	d856      	bhi.n	8004e6c <__ssvfiscanf_r+0x198>
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d064      	beq.n	8004e8c <__ssvfiscanf_r+0x1b8>
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004dc6:	230a      	movs	r3, #10
 8004dc8:	9342      	str	r3, [sp, #264]	@ 0x108
 8004dca:	e077      	b.n	8004ebc <__ssvfiscanf_r+0x1e8>
 8004dcc:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8004dce:	464d      	mov	r5, r9
 8004dd0:	fb02 1103 	mla	r1, r2, r3, r1
 8004dd4:	3930      	subs	r1, #48	@ 0x30
 8004dd6:	9143      	str	r1, [sp, #268]	@ 0x10c
 8004dd8:	e7d2      	b.n	8004d80 <__ssvfiscanf_r+0xac>
 8004dda:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8004dde:	2a20      	cmp	r2, #32
 8004de0:	d8ef      	bhi.n	8004dc2 <__ssvfiscanf_r+0xee>
 8004de2:	a101      	add	r1, pc, #4	@ (adr r1, 8004de8 <__ssvfiscanf_r+0x114>)
 8004de4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004de8:	08004e9b 	.word	0x08004e9b
 8004dec:	08004dc3 	.word	0x08004dc3
 8004df0:	08004dc3 	.word	0x08004dc3
 8004df4:	08004ef5 	.word	0x08004ef5
 8004df8:	08004dc3 	.word	0x08004dc3
 8004dfc:	08004dc3 	.word	0x08004dc3
 8004e00:	08004dc3 	.word	0x08004dc3
 8004e04:	08004dc3 	.word	0x08004dc3
 8004e08:	08004dc3 	.word	0x08004dc3
 8004e0c:	08004dc3 	.word	0x08004dc3
 8004e10:	08004dc3 	.word	0x08004dc3
 8004e14:	08004f0b 	.word	0x08004f0b
 8004e18:	08004ef1 	.word	0x08004ef1
 8004e1c:	08004e73 	.word	0x08004e73
 8004e20:	08004e73 	.word	0x08004e73
 8004e24:	08004e73 	.word	0x08004e73
 8004e28:	08004dc3 	.word	0x08004dc3
 8004e2c:	08004ead 	.word	0x08004ead
 8004e30:	08004dc3 	.word	0x08004dc3
 8004e34:	08004dc3 	.word	0x08004dc3
 8004e38:	08004dc3 	.word	0x08004dc3
 8004e3c:	08004dc3 	.word	0x08004dc3
 8004e40:	08004f1b 	.word	0x08004f1b
 8004e44:	08004eb5 	.word	0x08004eb5
 8004e48:	08004e93 	.word	0x08004e93
 8004e4c:	08004dc3 	.word	0x08004dc3
 8004e50:	08004dc3 	.word	0x08004dc3
 8004e54:	08004f17 	.word	0x08004f17
 8004e58:	08004dc3 	.word	0x08004dc3
 8004e5c:	08004ef1 	.word	0x08004ef1
 8004e60:	08004dc3 	.word	0x08004dc3
 8004e64:	08004dc3 	.word	0x08004dc3
 8004e68:	08004e9b 	.word	0x08004e9b
 8004e6c:	3b45      	subs	r3, #69	@ 0x45
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d8a7      	bhi.n	8004dc2 <__ssvfiscanf_r+0xee>
 8004e72:	2305      	movs	r3, #5
 8004e74:	e021      	b.n	8004eba <__ssvfiscanf_r+0x1e6>
 8004e76:	4621      	mov	r1, r4
 8004e78:	4630      	mov	r0, r6
 8004e7a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004e7c:	4798      	blx	r3
 8004e7e:	2800      	cmp	r0, #0
 8004e80:	f43f af65 	beq.w	8004d4e <__ssvfiscanf_r+0x7a>
 8004e84:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004e86:	2800      	cmp	r0, #0
 8004e88:	f040 808c 	bne.w	8004fa4 <__ssvfiscanf_r+0x2d0>
 8004e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e90:	e08c      	b.n	8004fac <__ssvfiscanf_r+0x2d8>
 8004e92:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004e94:	f042 0220 	orr.w	r2, r2, #32
 8004e98:	9241      	str	r2, [sp, #260]	@ 0x104
 8004e9a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004e9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ea0:	9241      	str	r2, [sp, #260]	@ 0x104
 8004ea2:	2210      	movs	r2, #16
 8004ea4:	2b6e      	cmp	r3, #110	@ 0x6e
 8004ea6:	9242      	str	r2, [sp, #264]	@ 0x108
 8004ea8:	d902      	bls.n	8004eb0 <__ssvfiscanf_r+0x1dc>
 8004eaa:	e005      	b.n	8004eb8 <__ssvfiscanf_r+0x1e4>
 8004eac:	2300      	movs	r3, #0
 8004eae:	9342      	str	r3, [sp, #264]	@ 0x108
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e002      	b.n	8004eba <__ssvfiscanf_r+0x1e6>
 8004eb4:	2308      	movs	r3, #8
 8004eb6:	9342      	str	r3, [sp, #264]	@ 0x108
 8004eb8:	2304      	movs	r3, #4
 8004eba:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004ebc:	6863      	ldr	r3, [r4, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	dd39      	ble.n	8004f36 <__ssvfiscanf_r+0x262>
 8004ec2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004ec4:	0659      	lsls	r1, r3, #25
 8004ec6:	d404      	bmi.n	8004ed2 <__ssvfiscanf_r+0x1fe>
 8004ec8:	6823      	ldr	r3, [r4, #0]
 8004eca:	781a      	ldrb	r2, [r3, #0]
 8004ecc:	5cba      	ldrb	r2, [r7, r2]
 8004ece:	0712      	lsls	r2, r2, #28
 8004ed0:	d438      	bmi.n	8004f44 <__ssvfiscanf_r+0x270>
 8004ed2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	dc47      	bgt.n	8004f68 <__ssvfiscanf_r+0x294>
 8004ed8:	466b      	mov	r3, sp
 8004eda:	4622      	mov	r2, r4
 8004edc:	4630      	mov	r0, r6
 8004ede:	a941      	add	r1, sp, #260	@ 0x104
 8004ee0:	f000 fb3c 	bl	800555c <_scanf_chars>
 8004ee4:	2801      	cmp	r0, #1
 8004ee6:	d065      	beq.n	8004fb4 <__ssvfiscanf_r+0x2e0>
 8004ee8:	2802      	cmp	r0, #2
 8004eea:	f47f af17 	bne.w	8004d1c <__ssvfiscanf_r+0x48>
 8004eee:	e7c9      	b.n	8004e84 <__ssvfiscanf_r+0x1b0>
 8004ef0:	220a      	movs	r2, #10
 8004ef2:	e7d7      	b.n	8004ea4 <__ssvfiscanf_r+0x1d0>
 8004ef4:	4629      	mov	r1, r5
 8004ef6:	4640      	mov	r0, r8
 8004ef8:	f000 fd11 	bl	800591e <__sccl>
 8004efc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004efe:	4605      	mov	r5, r0
 8004f00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f04:	9341      	str	r3, [sp, #260]	@ 0x104
 8004f06:	2301      	movs	r3, #1
 8004f08:	e7d7      	b.n	8004eba <__ssvfiscanf_r+0x1e6>
 8004f0a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004f0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f10:	9341      	str	r3, [sp, #260]	@ 0x104
 8004f12:	2300      	movs	r3, #0
 8004f14:	e7d1      	b.n	8004eba <__ssvfiscanf_r+0x1e6>
 8004f16:	2302      	movs	r3, #2
 8004f18:	e7cf      	b.n	8004eba <__ssvfiscanf_r+0x1e6>
 8004f1a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8004f1c:	06c3      	lsls	r3, r0, #27
 8004f1e:	f53f aefd 	bmi.w	8004d1c <__ssvfiscanf_r+0x48>
 8004f22:	9b00      	ldr	r3, [sp, #0]
 8004f24:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004f26:	1d19      	adds	r1, r3, #4
 8004f28:	9100      	str	r1, [sp, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	07c0      	lsls	r0, r0, #31
 8004f2e:	bf4c      	ite	mi
 8004f30:	801a      	strhmi	r2, [r3, #0]
 8004f32:	601a      	strpl	r2, [r3, #0]
 8004f34:	e6f2      	b.n	8004d1c <__ssvfiscanf_r+0x48>
 8004f36:	4621      	mov	r1, r4
 8004f38:	4630      	mov	r0, r6
 8004f3a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004f3c:	4798      	blx	r3
 8004f3e:	2800      	cmp	r0, #0
 8004f40:	d0bf      	beq.n	8004ec2 <__ssvfiscanf_r+0x1ee>
 8004f42:	e79f      	b.n	8004e84 <__ssvfiscanf_r+0x1b0>
 8004f44:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004f46:	3201      	adds	r2, #1
 8004f48:	9245      	str	r2, [sp, #276]	@ 0x114
 8004f4a:	6862      	ldr	r2, [r4, #4]
 8004f4c:	3a01      	subs	r2, #1
 8004f4e:	2a00      	cmp	r2, #0
 8004f50:	6062      	str	r2, [r4, #4]
 8004f52:	dd02      	ble.n	8004f5a <__ssvfiscanf_r+0x286>
 8004f54:	3301      	adds	r3, #1
 8004f56:	6023      	str	r3, [r4, #0]
 8004f58:	e7b6      	b.n	8004ec8 <__ssvfiscanf_r+0x1f4>
 8004f5a:	4621      	mov	r1, r4
 8004f5c:	4630      	mov	r0, r6
 8004f5e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004f60:	4798      	blx	r3
 8004f62:	2800      	cmp	r0, #0
 8004f64:	d0b0      	beq.n	8004ec8 <__ssvfiscanf_r+0x1f4>
 8004f66:	e78d      	b.n	8004e84 <__ssvfiscanf_r+0x1b0>
 8004f68:	2b04      	cmp	r3, #4
 8004f6a:	dc06      	bgt.n	8004f7a <__ssvfiscanf_r+0x2a6>
 8004f6c:	466b      	mov	r3, sp
 8004f6e:	4622      	mov	r2, r4
 8004f70:	4630      	mov	r0, r6
 8004f72:	a941      	add	r1, sp, #260	@ 0x104
 8004f74:	f000 fb4c 	bl	8005610 <_scanf_i>
 8004f78:	e7b4      	b.n	8004ee4 <__ssvfiscanf_r+0x210>
 8004f7a:	4b09      	ldr	r3, [pc, #36]	@ (8004fa0 <__ssvfiscanf_r+0x2cc>)
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f43f aecd 	beq.w	8004d1c <__ssvfiscanf_r+0x48>
 8004f82:	466b      	mov	r3, sp
 8004f84:	4622      	mov	r2, r4
 8004f86:	4630      	mov	r0, r6
 8004f88:	a941      	add	r1, sp, #260	@ 0x104
 8004f8a:	f3af 8000 	nop.w
 8004f8e:	e7a9      	b.n	8004ee4 <__ssvfiscanf_r+0x210>
 8004f90:	08004c25 	.word	0x08004c25
 8004f94:	08004c9b 	.word	0x08004c9b
 8004f98:	08006b67 	.word	0x08006b67
 8004f9c:	08006b1e 	.word	0x08006b1e
 8004fa0:	00000000 	.word	0x00000000
 8004fa4:	89a3      	ldrh	r3, [r4, #12]
 8004fa6:	065b      	lsls	r3, r3, #25
 8004fa8:	f53f af70 	bmi.w	8004e8c <__ssvfiscanf_r+0x1b8>
 8004fac:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8004fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fb4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004fb6:	e7f9      	b.n	8004fac <__ssvfiscanf_r+0x2d8>

08004fb8 <__sfputc_r>:
 8004fb8:	6893      	ldr	r3, [r2, #8]
 8004fba:	b410      	push	{r4}
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	6093      	str	r3, [r2, #8]
 8004fc2:	da07      	bge.n	8004fd4 <__sfputc_r+0x1c>
 8004fc4:	6994      	ldr	r4, [r2, #24]
 8004fc6:	42a3      	cmp	r3, r4
 8004fc8:	db01      	blt.n	8004fce <__sfputc_r+0x16>
 8004fca:	290a      	cmp	r1, #10
 8004fcc:	d102      	bne.n	8004fd4 <__sfputc_r+0x1c>
 8004fce:	bc10      	pop	{r4}
 8004fd0:	f7ff bab7 	b.w	8004542 <__swbuf_r>
 8004fd4:	6813      	ldr	r3, [r2, #0]
 8004fd6:	1c58      	adds	r0, r3, #1
 8004fd8:	6010      	str	r0, [r2, #0]
 8004fda:	7019      	strb	r1, [r3, #0]
 8004fdc:	4608      	mov	r0, r1
 8004fde:	bc10      	pop	{r4}
 8004fe0:	4770      	bx	lr

08004fe2 <__sfputs_r>:
 8004fe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fe4:	4606      	mov	r6, r0
 8004fe6:	460f      	mov	r7, r1
 8004fe8:	4614      	mov	r4, r2
 8004fea:	18d5      	adds	r5, r2, r3
 8004fec:	42ac      	cmp	r4, r5
 8004fee:	d101      	bne.n	8004ff4 <__sfputs_r+0x12>
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	e007      	b.n	8005004 <__sfputs_r+0x22>
 8004ff4:	463a      	mov	r2, r7
 8004ff6:	4630      	mov	r0, r6
 8004ff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ffc:	f7ff ffdc 	bl	8004fb8 <__sfputc_r>
 8005000:	1c43      	adds	r3, r0, #1
 8005002:	d1f3      	bne.n	8004fec <__sfputs_r+0xa>
 8005004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005008 <_vfiprintf_r>:
 8005008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800500c:	460d      	mov	r5, r1
 800500e:	4614      	mov	r4, r2
 8005010:	4698      	mov	r8, r3
 8005012:	4606      	mov	r6, r0
 8005014:	b09d      	sub	sp, #116	@ 0x74
 8005016:	b118      	cbz	r0, 8005020 <_vfiprintf_r+0x18>
 8005018:	6a03      	ldr	r3, [r0, #32]
 800501a:	b90b      	cbnz	r3, 8005020 <_vfiprintf_r+0x18>
 800501c:	f7ff f940 	bl	80042a0 <__sinit>
 8005020:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005022:	07d9      	lsls	r1, r3, #31
 8005024:	d405      	bmi.n	8005032 <_vfiprintf_r+0x2a>
 8005026:	89ab      	ldrh	r3, [r5, #12]
 8005028:	059a      	lsls	r2, r3, #22
 800502a:	d402      	bmi.n	8005032 <_vfiprintf_r+0x2a>
 800502c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800502e:	f7ff fba8 	bl	8004782 <__retarget_lock_acquire_recursive>
 8005032:	89ab      	ldrh	r3, [r5, #12]
 8005034:	071b      	lsls	r3, r3, #28
 8005036:	d501      	bpl.n	800503c <_vfiprintf_r+0x34>
 8005038:	692b      	ldr	r3, [r5, #16]
 800503a:	b99b      	cbnz	r3, 8005064 <_vfiprintf_r+0x5c>
 800503c:	4629      	mov	r1, r5
 800503e:	4630      	mov	r0, r6
 8005040:	f7ff fabe 	bl	80045c0 <__swsetup_r>
 8005044:	b170      	cbz	r0, 8005064 <_vfiprintf_r+0x5c>
 8005046:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005048:	07dc      	lsls	r4, r3, #31
 800504a:	d504      	bpl.n	8005056 <_vfiprintf_r+0x4e>
 800504c:	f04f 30ff 	mov.w	r0, #4294967295
 8005050:	b01d      	add	sp, #116	@ 0x74
 8005052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005056:	89ab      	ldrh	r3, [r5, #12]
 8005058:	0598      	lsls	r0, r3, #22
 800505a:	d4f7      	bmi.n	800504c <_vfiprintf_r+0x44>
 800505c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800505e:	f7ff fb91 	bl	8004784 <__retarget_lock_release_recursive>
 8005062:	e7f3      	b.n	800504c <_vfiprintf_r+0x44>
 8005064:	2300      	movs	r3, #0
 8005066:	9309      	str	r3, [sp, #36]	@ 0x24
 8005068:	2320      	movs	r3, #32
 800506a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800506e:	2330      	movs	r3, #48	@ 0x30
 8005070:	f04f 0901 	mov.w	r9, #1
 8005074:	f8cd 800c 	str.w	r8, [sp, #12]
 8005078:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005224 <_vfiprintf_r+0x21c>
 800507c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005080:	4623      	mov	r3, r4
 8005082:	469a      	mov	sl, r3
 8005084:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005088:	b10a      	cbz	r2, 800508e <_vfiprintf_r+0x86>
 800508a:	2a25      	cmp	r2, #37	@ 0x25
 800508c:	d1f9      	bne.n	8005082 <_vfiprintf_r+0x7a>
 800508e:	ebba 0b04 	subs.w	fp, sl, r4
 8005092:	d00b      	beq.n	80050ac <_vfiprintf_r+0xa4>
 8005094:	465b      	mov	r3, fp
 8005096:	4622      	mov	r2, r4
 8005098:	4629      	mov	r1, r5
 800509a:	4630      	mov	r0, r6
 800509c:	f7ff ffa1 	bl	8004fe2 <__sfputs_r>
 80050a0:	3001      	adds	r0, #1
 80050a2:	f000 80a7 	beq.w	80051f4 <_vfiprintf_r+0x1ec>
 80050a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050a8:	445a      	add	r2, fp
 80050aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80050ac:	f89a 3000 	ldrb.w	r3, [sl]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 809f 	beq.w	80051f4 <_vfiprintf_r+0x1ec>
 80050b6:	2300      	movs	r3, #0
 80050b8:	f04f 32ff 	mov.w	r2, #4294967295
 80050bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050c0:	f10a 0a01 	add.w	sl, sl, #1
 80050c4:	9304      	str	r3, [sp, #16]
 80050c6:	9307      	str	r3, [sp, #28]
 80050c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80050cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80050ce:	4654      	mov	r4, sl
 80050d0:	2205      	movs	r2, #5
 80050d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050d6:	4853      	ldr	r0, [pc, #332]	@ (8005224 <_vfiprintf_r+0x21c>)
 80050d8:	f000 fcde 	bl	8005a98 <memchr>
 80050dc:	9a04      	ldr	r2, [sp, #16]
 80050de:	b9d8      	cbnz	r0, 8005118 <_vfiprintf_r+0x110>
 80050e0:	06d1      	lsls	r1, r2, #27
 80050e2:	bf44      	itt	mi
 80050e4:	2320      	movmi	r3, #32
 80050e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050ea:	0713      	lsls	r3, r2, #28
 80050ec:	bf44      	itt	mi
 80050ee:	232b      	movmi	r3, #43	@ 0x2b
 80050f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050f4:	f89a 3000 	ldrb.w	r3, [sl]
 80050f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80050fa:	d015      	beq.n	8005128 <_vfiprintf_r+0x120>
 80050fc:	4654      	mov	r4, sl
 80050fe:	2000      	movs	r0, #0
 8005100:	f04f 0c0a 	mov.w	ip, #10
 8005104:	9a07      	ldr	r2, [sp, #28]
 8005106:	4621      	mov	r1, r4
 8005108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800510c:	3b30      	subs	r3, #48	@ 0x30
 800510e:	2b09      	cmp	r3, #9
 8005110:	d94b      	bls.n	80051aa <_vfiprintf_r+0x1a2>
 8005112:	b1b0      	cbz	r0, 8005142 <_vfiprintf_r+0x13a>
 8005114:	9207      	str	r2, [sp, #28]
 8005116:	e014      	b.n	8005142 <_vfiprintf_r+0x13a>
 8005118:	eba0 0308 	sub.w	r3, r0, r8
 800511c:	fa09 f303 	lsl.w	r3, r9, r3
 8005120:	4313      	orrs	r3, r2
 8005122:	46a2      	mov	sl, r4
 8005124:	9304      	str	r3, [sp, #16]
 8005126:	e7d2      	b.n	80050ce <_vfiprintf_r+0xc6>
 8005128:	9b03      	ldr	r3, [sp, #12]
 800512a:	1d19      	adds	r1, r3, #4
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	9103      	str	r1, [sp, #12]
 8005130:	2b00      	cmp	r3, #0
 8005132:	bfbb      	ittet	lt
 8005134:	425b      	neglt	r3, r3
 8005136:	f042 0202 	orrlt.w	r2, r2, #2
 800513a:	9307      	strge	r3, [sp, #28]
 800513c:	9307      	strlt	r3, [sp, #28]
 800513e:	bfb8      	it	lt
 8005140:	9204      	strlt	r2, [sp, #16]
 8005142:	7823      	ldrb	r3, [r4, #0]
 8005144:	2b2e      	cmp	r3, #46	@ 0x2e
 8005146:	d10a      	bne.n	800515e <_vfiprintf_r+0x156>
 8005148:	7863      	ldrb	r3, [r4, #1]
 800514a:	2b2a      	cmp	r3, #42	@ 0x2a
 800514c:	d132      	bne.n	80051b4 <_vfiprintf_r+0x1ac>
 800514e:	9b03      	ldr	r3, [sp, #12]
 8005150:	3402      	adds	r4, #2
 8005152:	1d1a      	adds	r2, r3, #4
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	9203      	str	r2, [sp, #12]
 8005158:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800515c:	9305      	str	r3, [sp, #20]
 800515e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005228 <_vfiprintf_r+0x220>
 8005162:	2203      	movs	r2, #3
 8005164:	4650      	mov	r0, sl
 8005166:	7821      	ldrb	r1, [r4, #0]
 8005168:	f000 fc96 	bl	8005a98 <memchr>
 800516c:	b138      	cbz	r0, 800517e <_vfiprintf_r+0x176>
 800516e:	2240      	movs	r2, #64	@ 0x40
 8005170:	9b04      	ldr	r3, [sp, #16]
 8005172:	eba0 000a 	sub.w	r0, r0, sl
 8005176:	4082      	lsls	r2, r0
 8005178:	4313      	orrs	r3, r2
 800517a:	3401      	adds	r4, #1
 800517c:	9304      	str	r3, [sp, #16]
 800517e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005182:	2206      	movs	r2, #6
 8005184:	4829      	ldr	r0, [pc, #164]	@ (800522c <_vfiprintf_r+0x224>)
 8005186:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800518a:	f000 fc85 	bl	8005a98 <memchr>
 800518e:	2800      	cmp	r0, #0
 8005190:	d03f      	beq.n	8005212 <_vfiprintf_r+0x20a>
 8005192:	4b27      	ldr	r3, [pc, #156]	@ (8005230 <_vfiprintf_r+0x228>)
 8005194:	bb1b      	cbnz	r3, 80051de <_vfiprintf_r+0x1d6>
 8005196:	9b03      	ldr	r3, [sp, #12]
 8005198:	3307      	adds	r3, #7
 800519a:	f023 0307 	bic.w	r3, r3, #7
 800519e:	3308      	adds	r3, #8
 80051a0:	9303      	str	r3, [sp, #12]
 80051a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051a4:	443b      	add	r3, r7
 80051a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80051a8:	e76a      	b.n	8005080 <_vfiprintf_r+0x78>
 80051aa:	460c      	mov	r4, r1
 80051ac:	2001      	movs	r0, #1
 80051ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80051b2:	e7a8      	b.n	8005106 <_vfiprintf_r+0xfe>
 80051b4:	2300      	movs	r3, #0
 80051b6:	f04f 0c0a 	mov.w	ip, #10
 80051ba:	4619      	mov	r1, r3
 80051bc:	3401      	adds	r4, #1
 80051be:	9305      	str	r3, [sp, #20]
 80051c0:	4620      	mov	r0, r4
 80051c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051c6:	3a30      	subs	r2, #48	@ 0x30
 80051c8:	2a09      	cmp	r2, #9
 80051ca:	d903      	bls.n	80051d4 <_vfiprintf_r+0x1cc>
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0c6      	beq.n	800515e <_vfiprintf_r+0x156>
 80051d0:	9105      	str	r1, [sp, #20]
 80051d2:	e7c4      	b.n	800515e <_vfiprintf_r+0x156>
 80051d4:	4604      	mov	r4, r0
 80051d6:	2301      	movs	r3, #1
 80051d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80051dc:	e7f0      	b.n	80051c0 <_vfiprintf_r+0x1b8>
 80051de:	ab03      	add	r3, sp, #12
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	462a      	mov	r2, r5
 80051e4:	4630      	mov	r0, r6
 80051e6:	4b13      	ldr	r3, [pc, #76]	@ (8005234 <_vfiprintf_r+0x22c>)
 80051e8:	a904      	add	r1, sp, #16
 80051ea:	f3af 8000 	nop.w
 80051ee:	4607      	mov	r7, r0
 80051f0:	1c78      	adds	r0, r7, #1
 80051f2:	d1d6      	bne.n	80051a2 <_vfiprintf_r+0x19a>
 80051f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051f6:	07d9      	lsls	r1, r3, #31
 80051f8:	d405      	bmi.n	8005206 <_vfiprintf_r+0x1fe>
 80051fa:	89ab      	ldrh	r3, [r5, #12]
 80051fc:	059a      	lsls	r2, r3, #22
 80051fe:	d402      	bmi.n	8005206 <_vfiprintf_r+0x1fe>
 8005200:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005202:	f7ff fabf 	bl	8004784 <__retarget_lock_release_recursive>
 8005206:	89ab      	ldrh	r3, [r5, #12]
 8005208:	065b      	lsls	r3, r3, #25
 800520a:	f53f af1f 	bmi.w	800504c <_vfiprintf_r+0x44>
 800520e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005210:	e71e      	b.n	8005050 <_vfiprintf_r+0x48>
 8005212:	ab03      	add	r3, sp, #12
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	462a      	mov	r2, r5
 8005218:	4630      	mov	r0, r6
 800521a:	4b06      	ldr	r3, [pc, #24]	@ (8005234 <_vfiprintf_r+0x22c>)
 800521c:	a904      	add	r1, sp, #16
 800521e:	f000 f87d 	bl	800531c <_printf_i>
 8005222:	e7e4      	b.n	80051ee <_vfiprintf_r+0x1e6>
 8005224:	08006b18 	.word	0x08006b18
 8005228:	08006b1e 	.word	0x08006b1e
 800522c:	08006b22 	.word	0x08006b22
 8005230:	00000000 	.word	0x00000000
 8005234:	08004fe3 	.word	0x08004fe3

08005238 <_printf_common>:
 8005238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800523c:	4616      	mov	r6, r2
 800523e:	4698      	mov	r8, r3
 8005240:	688a      	ldr	r2, [r1, #8]
 8005242:	690b      	ldr	r3, [r1, #16]
 8005244:	4607      	mov	r7, r0
 8005246:	4293      	cmp	r3, r2
 8005248:	bfb8      	it	lt
 800524a:	4613      	movlt	r3, r2
 800524c:	6033      	str	r3, [r6, #0]
 800524e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005252:	460c      	mov	r4, r1
 8005254:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005258:	b10a      	cbz	r2, 800525e <_printf_common+0x26>
 800525a:	3301      	adds	r3, #1
 800525c:	6033      	str	r3, [r6, #0]
 800525e:	6823      	ldr	r3, [r4, #0]
 8005260:	0699      	lsls	r1, r3, #26
 8005262:	bf42      	ittt	mi
 8005264:	6833      	ldrmi	r3, [r6, #0]
 8005266:	3302      	addmi	r3, #2
 8005268:	6033      	strmi	r3, [r6, #0]
 800526a:	6825      	ldr	r5, [r4, #0]
 800526c:	f015 0506 	ands.w	r5, r5, #6
 8005270:	d106      	bne.n	8005280 <_printf_common+0x48>
 8005272:	f104 0a19 	add.w	sl, r4, #25
 8005276:	68e3      	ldr	r3, [r4, #12]
 8005278:	6832      	ldr	r2, [r6, #0]
 800527a:	1a9b      	subs	r3, r3, r2
 800527c:	42ab      	cmp	r3, r5
 800527e:	dc2b      	bgt.n	80052d8 <_printf_common+0xa0>
 8005280:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005284:	6822      	ldr	r2, [r4, #0]
 8005286:	3b00      	subs	r3, #0
 8005288:	bf18      	it	ne
 800528a:	2301      	movne	r3, #1
 800528c:	0692      	lsls	r2, r2, #26
 800528e:	d430      	bmi.n	80052f2 <_printf_common+0xba>
 8005290:	4641      	mov	r1, r8
 8005292:	4638      	mov	r0, r7
 8005294:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005298:	47c8      	blx	r9
 800529a:	3001      	adds	r0, #1
 800529c:	d023      	beq.n	80052e6 <_printf_common+0xae>
 800529e:	6823      	ldr	r3, [r4, #0]
 80052a0:	6922      	ldr	r2, [r4, #16]
 80052a2:	f003 0306 	and.w	r3, r3, #6
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	bf14      	ite	ne
 80052aa:	2500      	movne	r5, #0
 80052ac:	6833      	ldreq	r3, [r6, #0]
 80052ae:	f04f 0600 	mov.w	r6, #0
 80052b2:	bf08      	it	eq
 80052b4:	68e5      	ldreq	r5, [r4, #12]
 80052b6:	f104 041a 	add.w	r4, r4, #26
 80052ba:	bf08      	it	eq
 80052bc:	1aed      	subeq	r5, r5, r3
 80052be:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80052c2:	bf08      	it	eq
 80052c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052c8:	4293      	cmp	r3, r2
 80052ca:	bfc4      	itt	gt
 80052cc:	1a9b      	subgt	r3, r3, r2
 80052ce:	18ed      	addgt	r5, r5, r3
 80052d0:	42b5      	cmp	r5, r6
 80052d2:	d11a      	bne.n	800530a <_printf_common+0xd2>
 80052d4:	2000      	movs	r0, #0
 80052d6:	e008      	b.n	80052ea <_printf_common+0xb2>
 80052d8:	2301      	movs	r3, #1
 80052da:	4652      	mov	r2, sl
 80052dc:	4641      	mov	r1, r8
 80052de:	4638      	mov	r0, r7
 80052e0:	47c8      	blx	r9
 80052e2:	3001      	adds	r0, #1
 80052e4:	d103      	bne.n	80052ee <_printf_common+0xb6>
 80052e6:	f04f 30ff 	mov.w	r0, #4294967295
 80052ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ee:	3501      	adds	r5, #1
 80052f0:	e7c1      	b.n	8005276 <_printf_common+0x3e>
 80052f2:	2030      	movs	r0, #48	@ 0x30
 80052f4:	18e1      	adds	r1, r4, r3
 80052f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80052fa:	1c5a      	adds	r2, r3, #1
 80052fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005300:	4422      	add	r2, r4
 8005302:	3302      	adds	r3, #2
 8005304:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005308:	e7c2      	b.n	8005290 <_printf_common+0x58>
 800530a:	2301      	movs	r3, #1
 800530c:	4622      	mov	r2, r4
 800530e:	4641      	mov	r1, r8
 8005310:	4638      	mov	r0, r7
 8005312:	47c8      	blx	r9
 8005314:	3001      	adds	r0, #1
 8005316:	d0e6      	beq.n	80052e6 <_printf_common+0xae>
 8005318:	3601      	adds	r6, #1
 800531a:	e7d9      	b.n	80052d0 <_printf_common+0x98>

0800531c <_printf_i>:
 800531c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005320:	7e0f      	ldrb	r7, [r1, #24]
 8005322:	4691      	mov	r9, r2
 8005324:	2f78      	cmp	r7, #120	@ 0x78
 8005326:	4680      	mov	r8, r0
 8005328:	460c      	mov	r4, r1
 800532a:	469a      	mov	sl, r3
 800532c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800532e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005332:	d807      	bhi.n	8005344 <_printf_i+0x28>
 8005334:	2f62      	cmp	r7, #98	@ 0x62
 8005336:	d80a      	bhi.n	800534e <_printf_i+0x32>
 8005338:	2f00      	cmp	r7, #0
 800533a:	f000 80d3 	beq.w	80054e4 <_printf_i+0x1c8>
 800533e:	2f58      	cmp	r7, #88	@ 0x58
 8005340:	f000 80ba 	beq.w	80054b8 <_printf_i+0x19c>
 8005344:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005348:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800534c:	e03a      	b.n	80053c4 <_printf_i+0xa8>
 800534e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005352:	2b15      	cmp	r3, #21
 8005354:	d8f6      	bhi.n	8005344 <_printf_i+0x28>
 8005356:	a101      	add	r1, pc, #4	@ (adr r1, 800535c <_printf_i+0x40>)
 8005358:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800535c:	080053b5 	.word	0x080053b5
 8005360:	080053c9 	.word	0x080053c9
 8005364:	08005345 	.word	0x08005345
 8005368:	08005345 	.word	0x08005345
 800536c:	08005345 	.word	0x08005345
 8005370:	08005345 	.word	0x08005345
 8005374:	080053c9 	.word	0x080053c9
 8005378:	08005345 	.word	0x08005345
 800537c:	08005345 	.word	0x08005345
 8005380:	08005345 	.word	0x08005345
 8005384:	08005345 	.word	0x08005345
 8005388:	080054cb 	.word	0x080054cb
 800538c:	080053f3 	.word	0x080053f3
 8005390:	08005485 	.word	0x08005485
 8005394:	08005345 	.word	0x08005345
 8005398:	08005345 	.word	0x08005345
 800539c:	080054ed 	.word	0x080054ed
 80053a0:	08005345 	.word	0x08005345
 80053a4:	080053f3 	.word	0x080053f3
 80053a8:	08005345 	.word	0x08005345
 80053ac:	08005345 	.word	0x08005345
 80053b0:	0800548d 	.word	0x0800548d
 80053b4:	6833      	ldr	r3, [r6, #0]
 80053b6:	1d1a      	adds	r2, r3, #4
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6032      	str	r2, [r6, #0]
 80053bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80053c4:	2301      	movs	r3, #1
 80053c6:	e09e      	b.n	8005506 <_printf_i+0x1ea>
 80053c8:	6833      	ldr	r3, [r6, #0]
 80053ca:	6820      	ldr	r0, [r4, #0]
 80053cc:	1d19      	adds	r1, r3, #4
 80053ce:	6031      	str	r1, [r6, #0]
 80053d0:	0606      	lsls	r6, r0, #24
 80053d2:	d501      	bpl.n	80053d8 <_printf_i+0xbc>
 80053d4:	681d      	ldr	r5, [r3, #0]
 80053d6:	e003      	b.n	80053e0 <_printf_i+0xc4>
 80053d8:	0645      	lsls	r5, r0, #25
 80053da:	d5fb      	bpl.n	80053d4 <_printf_i+0xb8>
 80053dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80053e0:	2d00      	cmp	r5, #0
 80053e2:	da03      	bge.n	80053ec <_printf_i+0xd0>
 80053e4:	232d      	movs	r3, #45	@ 0x2d
 80053e6:	426d      	negs	r5, r5
 80053e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053ec:	230a      	movs	r3, #10
 80053ee:	4859      	ldr	r0, [pc, #356]	@ (8005554 <_printf_i+0x238>)
 80053f0:	e011      	b.n	8005416 <_printf_i+0xfa>
 80053f2:	6821      	ldr	r1, [r4, #0]
 80053f4:	6833      	ldr	r3, [r6, #0]
 80053f6:	0608      	lsls	r0, r1, #24
 80053f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80053fc:	d402      	bmi.n	8005404 <_printf_i+0xe8>
 80053fe:	0649      	lsls	r1, r1, #25
 8005400:	bf48      	it	mi
 8005402:	b2ad      	uxthmi	r5, r5
 8005404:	2f6f      	cmp	r7, #111	@ 0x6f
 8005406:	6033      	str	r3, [r6, #0]
 8005408:	bf14      	ite	ne
 800540a:	230a      	movne	r3, #10
 800540c:	2308      	moveq	r3, #8
 800540e:	4851      	ldr	r0, [pc, #324]	@ (8005554 <_printf_i+0x238>)
 8005410:	2100      	movs	r1, #0
 8005412:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005416:	6866      	ldr	r6, [r4, #4]
 8005418:	2e00      	cmp	r6, #0
 800541a:	bfa8      	it	ge
 800541c:	6821      	ldrge	r1, [r4, #0]
 800541e:	60a6      	str	r6, [r4, #8]
 8005420:	bfa4      	itt	ge
 8005422:	f021 0104 	bicge.w	r1, r1, #4
 8005426:	6021      	strge	r1, [r4, #0]
 8005428:	b90d      	cbnz	r5, 800542e <_printf_i+0x112>
 800542a:	2e00      	cmp	r6, #0
 800542c:	d04b      	beq.n	80054c6 <_printf_i+0x1aa>
 800542e:	4616      	mov	r6, r2
 8005430:	fbb5 f1f3 	udiv	r1, r5, r3
 8005434:	fb03 5711 	mls	r7, r3, r1, r5
 8005438:	5dc7      	ldrb	r7, [r0, r7]
 800543a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800543e:	462f      	mov	r7, r5
 8005440:	42bb      	cmp	r3, r7
 8005442:	460d      	mov	r5, r1
 8005444:	d9f4      	bls.n	8005430 <_printf_i+0x114>
 8005446:	2b08      	cmp	r3, #8
 8005448:	d10b      	bne.n	8005462 <_printf_i+0x146>
 800544a:	6823      	ldr	r3, [r4, #0]
 800544c:	07df      	lsls	r7, r3, #31
 800544e:	d508      	bpl.n	8005462 <_printf_i+0x146>
 8005450:	6923      	ldr	r3, [r4, #16]
 8005452:	6861      	ldr	r1, [r4, #4]
 8005454:	4299      	cmp	r1, r3
 8005456:	bfde      	ittt	le
 8005458:	2330      	movle	r3, #48	@ 0x30
 800545a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800545e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005462:	1b92      	subs	r2, r2, r6
 8005464:	6122      	str	r2, [r4, #16]
 8005466:	464b      	mov	r3, r9
 8005468:	4621      	mov	r1, r4
 800546a:	4640      	mov	r0, r8
 800546c:	f8cd a000 	str.w	sl, [sp]
 8005470:	aa03      	add	r2, sp, #12
 8005472:	f7ff fee1 	bl	8005238 <_printf_common>
 8005476:	3001      	adds	r0, #1
 8005478:	d14a      	bne.n	8005510 <_printf_i+0x1f4>
 800547a:	f04f 30ff 	mov.w	r0, #4294967295
 800547e:	b004      	add	sp, #16
 8005480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005484:	6823      	ldr	r3, [r4, #0]
 8005486:	f043 0320 	orr.w	r3, r3, #32
 800548a:	6023      	str	r3, [r4, #0]
 800548c:	2778      	movs	r7, #120	@ 0x78
 800548e:	4832      	ldr	r0, [pc, #200]	@ (8005558 <_printf_i+0x23c>)
 8005490:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005494:	6823      	ldr	r3, [r4, #0]
 8005496:	6831      	ldr	r1, [r6, #0]
 8005498:	061f      	lsls	r7, r3, #24
 800549a:	f851 5b04 	ldr.w	r5, [r1], #4
 800549e:	d402      	bmi.n	80054a6 <_printf_i+0x18a>
 80054a0:	065f      	lsls	r7, r3, #25
 80054a2:	bf48      	it	mi
 80054a4:	b2ad      	uxthmi	r5, r5
 80054a6:	6031      	str	r1, [r6, #0]
 80054a8:	07d9      	lsls	r1, r3, #31
 80054aa:	bf44      	itt	mi
 80054ac:	f043 0320 	orrmi.w	r3, r3, #32
 80054b0:	6023      	strmi	r3, [r4, #0]
 80054b2:	b11d      	cbz	r5, 80054bc <_printf_i+0x1a0>
 80054b4:	2310      	movs	r3, #16
 80054b6:	e7ab      	b.n	8005410 <_printf_i+0xf4>
 80054b8:	4826      	ldr	r0, [pc, #152]	@ (8005554 <_printf_i+0x238>)
 80054ba:	e7e9      	b.n	8005490 <_printf_i+0x174>
 80054bc:	6823      	ldr	r3, [r4, #0]
 80054be:	f023 0320 	bic.w	r3, r3, #32
 80054c2:	6023      	str	r3, [r4, #0]
 80054c4:	e7f6      	b.n	80054b4 <_printf_i+0x198>
 80054c6:	4616      	mov	r6, r2
 80054c8:	e7bd      	b.n	8005446 <_printf_i+0x12a>
 80054ca:	6833      	ldr	r3, [r6, #0]
 80054cc:	6825      	ldr	r5, [r4, #0]
 80054ce:	1d18      	adds	r0, r3, #4
 80054d0:	6961      	ldr	r1, [r4, #20]
 80054d2:	6030      	str	r0, [r6, #0]
 80054d4:	062e      	lsls	r6, r5, #24
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	d501      	bpl.n	80054de <_printf_i+0x1c2>
 80054da:	6019      	str	r1, [r3, #0]
 80054dc:	e002      	b.n	80054e4 <_printf_i+0x1c8>
 80054de:	0668      	lsls	r0, r5, #25
 80054e0:	d5fb      	bpl.n	80054da <_printf_i+0x1be>
 80054e2:	8019      	strh	r1, [r3, #0]
 80054e4:	2300      	movs	r3, #0
 80054e6:	4616      	mov	r6, r2
 80054e8:	6123      	str	r3, [r4, #16]
 80054ea:	e7bc      	b.n	8005466 <_printf_i+0x14a>
 80054ec:	6833      	ldr	r3, [r6, #0]
 80054ee:	2100      	movs	r1, #0
 80054f0:	1d1a      	adds	r2, r3, #4
 80054f2:	6032      	str	r2, [r6, #0]
 80054f4:	681e      	ldr	r6, [r3, #0]
 80054f6:	6862      	ldr	r2, [r4, #4]
 80054f8:	4630      	mov	r0, r6
 80054fa:	f000 facd 	bl	8005a98 <memchr>
 80054fe:	b108      	cbz	r0, 8005504 <_printf_i+0x1e8>
 8005500:	1b80      	subs	r0, r0, r6
 8005502:	6060      	str	r0, [r4, #4]
 8005504:	6863      	ldr	r3, [r4, #4]
 8005506:	6123      	str	r3, [r4, #16]
 8005508:	2300      	movs	r3, #0
 800550a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800550e:	e7aa      	b.n	8005466 <_printf_i+0x14a>
 8005510:	4632      	mov	r2, r6
 8005512:	4649      	mov	r1, r9
 8005514:	4640      	mov	r0, r8
 8005516:	6923      	ldr	r3, [r4, #16]
 8005518:	47d0      	blx	sl
 800551a:	3001      	adds	r0, #1
 800551c:	d0ad      	beq.n	800547a <_printf_i+0x15e>
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	079b      	lsls	r3, r3, #30
 8005522:	d413      	bmi.n	800554c <_printf_i+0x230>
 8005524:	68e0      	ldr	r0, [r4, #12]
 8005526:	9b03      	ldr	r3, [sp, #12]
 8005528:	4298      	cmp	r0, r3
 800552a:	bfb8      	it	lt
 800552c:	4618      	movlt	r0, r3
 800552e:	e7a6      	b.n	800547e <_printf_i+0x162>
 8005530:	2301      	movs	r3, #1
 8005532:	4632      	mov	r2, r6
 8005534:	4649      	mov	r1, r9
 8005536:	4640      	mov	r0, r8
 8005538:	47d0      	blx	sl
 800553a:	3001      	adds	r0, #1
 800553c:	d09d      	beq.n	800547a <_printf_i+0x15e>
 800553e:	3501      	adds	r5, #1
 8005540:	68e3      	ldr	r3, [r4, #12]
 8005542:	9903      	ldr	r1, [sp, #12]
 8005544:	1a5b      	subs	r3, r3, r1
 8005546:	42ab      	cmp	r3, r5
 8005548:	dcf2      	bgt.n	8005530 <_printf_i+0x214>
 800554a:	e7eb      	b.n	8005524 <_printf_i+0x208>
 800554c:	2500      	movs	r5, #0
 800554e:	f104 0619 	add.w	r6, r4, #25
 8005552:	e7f5      	b.n	8005540 <_printf_i+0x224>
 8005554:	08006b29 	.word	0x08006b29
 8005558:	08006b3a 	.word	0x08006b3a

0800555c <_scanf_chars>:
 800555c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005560:	4615      	mov	r5, r2
 8005562:	688a      	ldr	r2, [r1, #8]
 8005564:	4680      	mov	r8, r0
 8005566:	460c      	mov	r4, r1
 8005568:	b932      	cbnz	r2, 8005578 <_scanf_chars+0x1c>
 800556a:	698a      	ldr	r2, [r1, #24]
 800556c:	2a00      	cmp	r2, #0
 800556e:	bf14      	ite	ne
 8005570:	f04f 32ff 	movne.w	r2, #4294967295
 8005574:	2201      	moveq	r2, #1
 8005576:	608a      	str	r2, [r1, #8]
 8005578:	2700      	movs	r7, #0
 800557a:	6822      	ldr	r2, [r4, #0]
 800557c:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800560c <_scanf_chars+0xb0>
 8005580:	06d1      	lsls	r1, r2, #27
 8005582:	bf5f      	itttt	pl
 8005584:	681a      	ldrpl	r2, [r3, #0]
 8005586:	1d11      	addpl	r1, r2, #4
 8005588:	6019      	strpl	r1, [r3, #0]
 800558a:	6816      	ldrpl	r6, [r2, #0]
 800558c:	69a0      	ldr	r0, [r4, #24]
 800558e:	b188      	cbz	r0, 80055b4 <_scanf_chars+0x58>
 8005590:	2801      	cmp	r0, #1
 8005592:	d107      	bne.n	80055a4 <_scanf_chars+0x48>
 8005594:	682b      	ldr	r3, [r5, #0]
 8005596:	781a      	ldrb	r2, [r3, #0]
 8005598:	6963      	ldr	r3, [r4, #20]
 800559a:	5c9b      	ldrb	r3, [r3, r2]
 800559c:	b953      	cbnz	r3, 80055b4 <_scanf_chars+0x58>
 800559e:	2f00      	cmp	r7, #0
 80055a0:	d031      	beq.n	8005606 <_scanf_chars+0xaa>
 80055a2:	e022      	b.n	80055ea <_scanf_chars+0x8e>
 80055a4:	2802      	cmp	r0, #2
 80055a6:	d120      	bne.n	80055ea <_scanf_chars+0x8e>
 80055a8:	682b      	ldr	r3, [r5, #0]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	f819 3003 	ldrb.w	r3, [r9, r3]
 80055b0:	071b      	lsls	r3, r3, #28
 80055b2:	d41a      	bmi.n	80055ea <_scanf_chars+0x8e>
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	3701      	adds	r7, #1
 80055b8:	06da      	lsls	r2, r3, #27
 80055ba:	bf5e      	ittt	pl
 80055bc:	682b      	ldrpl	r3, [r5, #0]
 80055be:	781b      	ldrbpl	r3, [r3, #0]
 80055c0:	f806 3b01 	strbpl.w	r3, [r6], #1
 80055c4:	682a      	ldr	r2, [r5, #0]
 80055c6:	686b      	ldr	r3, [r5, #4]
 80055c8:	3201      	adds	r2, #1
 80055ca:	602a      	str	r2, [r5, #0]
 80055cc:	68a2      	ldr	r2, [r4, #8]
 80055ce:	3b01      	subs	r3, #1
 80055d0:	3a01      	subs	r2, #1
 80055d2:	606b      	str	r3, [r5, #4]
 80055d4:	60a2      	str	r2, [r4, #8]
 80055d6:	b142      	cbz	r2, 80055ea <_scanf_chars+0x8e>
 80055d8:	2b00      	cmp	r3, #0
 80055da:	dcd7      	bgt.n	800558c <_scanf_chars+0x30>
 80055dc:	4629      	mov	r1, r5
 80055de:	4640      	mov	r0, r8
 80055e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80055e4:	4798      	blx	r3
 80055e6:	2800      	cmp	r0, #0
 80055e8:	d0d0      	beq.n	800558c <_scanf_chars+0x30>
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	f013 0310 	ands.w	r3, r3, #16
 80055f0:	d105      	bne.n	80055fe <_scanf_chars+0xa2>
 80055f2:	68e2      	ldr	r2, [r4, #12]
 80055f4:	3201      	adds	r2, #1
 80055f6:	60e2      	str	r2, [r4, #12]
 80055f8:	69a2      	ldr	r2, [r4, #24]
 80055fa:	b102      	cbz	r2, 80055fe <_scanf_chars+0xa2>
 80055fc:	7033      	strb	r3, [r6, #0]
 80055fe:	2000      	movs	r0, #0
 8005600:	6923      	ldr	r3, [r4, #16]
 8005602:	443b      	add	r3, r7
 8005604:	6123      	str	r3, [r4, #16]
 8005606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800560a:	bf00      	nop
 800560c:	08006b67 	.word	0x08006b67

08005610 <_scanf_i>:
 8005610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005614:	460c      	mov	r4, r1
 8005616:	4698      	mov	r8, r3
 8005618:	4b72      	ldr	r3, [pc, #456]	@ (80057e4 <_scanf_i+0x1d4>)
 800561a:	b087      	sub	sp, #28
 800561c:	4682      	mov	sl, r0
 800561e:	4616      	mov	r6, r2
 8005620:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005624:	ab03      	add	r3, sp, #12
 8005626:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800562a:	4b6f      	ldr	r3, [pc, #444]	@ (80057e8 <_scanf_i+0x1d8>)
 800562c:	69a1      	ldr	r1, [r4, #24]
 800562e:	4a6f      	ldr	r2, [pc, #444]	@ (80057ec <_scanf_i+0x1dc>)
 8005630:	4627      	mov	r7, r4
 8005632:	2903      	cmp	r1, #3
 8005634:	bf08      	it	eq
 8005636:	461a      	moveq	r2, r3
 8005638:	68a3      	ldr	r3, [r4, #8]
 800563a:	9201      	str	r2, [sp, #4]
 800563c:	1e5a      	subs	r2, r3, #1
 800563e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005642:	bf81      	itttt	hi
 8005644:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005648:	eb03 0905 	addhi.w	r9, r3, r5
 800564c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005650:	60a3      	strhi	r3, [r4, #8]
 8005652:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005656:	bf98      	it	ls
 8005658:	f04f 0900 	movls.w	r9, #0
 800565c:	463d      	mov	r5, r7
 800565e:	f04f 0b00 	mov.w	fp, #0
 8005662:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8005666:	6023      	str	r3, [r4, #0]
 8005668:	6831      	ldr	r1, [r6, #0]
 800566a:	ab03      	add	r3, sp, #12
 800566c:	2202      	movs	r2, #2
 800566e:	7809      	ldrb	r1, [r1, #0]
 8005670:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005674:	f000 fa10 	bl	8005a98 <memchr>
 8005678:	b328      	cbz	r0, 80056c6 <_scanf_i+0xb6>
 800567a:	f1bb 0f01 	cmp.w	fp, #1
 800567e:	d159      	bne.n	8005734 <_scanf_i+0x124>
 8005680:	6862      	ldr	r2, [r4, #4]
 8005682:	b92a      	cbnz	r2, 8005690 <_scanf_i+0x80>
 8005684:	2108      	movs	r1, #8
 8005686:	6822      	ldr	r2, [r4, #0]
 8005688:	6061      	str	r1, [r4, #4]
 800568a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800568e:	6022      	str	r2, [r4, #0]
 8005690:	6822      	ldr	r2, [r4, #0]
 8005692:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8005696:	6022      	str	r2, [r4, #0]
 8005698:	68a2      	ldr	r2, [r4, #8]
 800569a:	1e51      	subs	r1, r2, #1
 800569c:	60a1      	str	r1, [r4, #8]
 800569e:	b192      	cbz	r2, 80056c6 <_scanf_i+0xb6>
 80056a0:	6832      	ldr	r2, [r6, #0]
 80056a2:	1c51      	adds	r1, r2, #1
 80056a4:	6031      	str	r1, [r6, #0]
 80056a6:	7812      	ldrb	r2, [r2, #0]
 80056a8:	f805 2b01 	strb.w	r2, [r5], #1
 80056ac:	6872      	ldr	r2, [r6, #4]
 80056ae:	3a01      	subs	r2, #1
 80056b0:	2a00      	cmp	r2, #0
 80056b2:	6072      	str	r2, [r6, #4]
 80056b4:	dc07      	bgt.n	80056c6 <_scanf_i+0xb6>
 80056b6:	4631      	mov	r1, r6
 80056b8:	4650      	mov	r0, sl
 80056ba:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80056be:	4790      	blx	r2
 80056c0:	2800      	cmp	r0, #0
 80056c2:	f040 8085 	bne.w	80057d0 <_scanf_i+0x1c0>
 80056c6:	f10b 0b01 	add.w	fp, fp, #1
 80056ca:	f1bb 0f03 	cmp.w	fp, #3
 80056ce:	d1cb      	bne.n	8005668 <_scanf_i+0x58>
 80056d0:	6863      	ldr	r3, [r4, #4]
 80056d2:	b90b      	cbnz	r3, 80056d8 <_scanf_i+0xc8>
 80056d4:	230a      	movs	r3, #10
 80056d6:	6063      	str	r3, [r4, #4]
 80056d8:	6863      	ldr	r3, [r4, #4]
 80056da:	4945      	ldr	r1, [pc, #276]	@ (80057f0 <_scanf_i+0x1e0>)
 80056dc:	6960      	ldr	r0, [r4, #20]
 80056de:	1ac9      	subs	r1, r1, r3
 80056e0:	f000 f91d 	bl	800591e <__sccl>
 80056e4:	f04f 0b00 	mov.w	fp, #0
 80056e8:	68a3      	ldr	r3, [r4, #8]
 80056ea:	6822      	ldr	r2, [r4, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d03d      	beq.n	800576c <_scanf_i+0x15c>
 80056f0:	6831      	ldr	r1, [r6, #0]
 80056f2:	6960      	ldr	r0, [r4, #20]
 80056f4:	f891 c000 	ldrb.w	ip, [r1]
 80056f8:	f810 000c 	ldrb.w	r0, [r0, ip]
 80056fc:	2800      	cmp	r0, #0
 80056fe:	d035      	beq.n	800576c <_scanf_i+0x15c>
 8005700:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8005704:	d124      	bne.n	8005750 <_scanf_i+0x140>
 8005706:	0510      	lsls	r0, r2, #20
 8005708:	d522      	bpl.n	8005750 <_scanf_i+0x140>
 800570a:	f10b 0b01 	add.w	fp, fp, #1
 800570e:	f1b9 0f00 	cmp.w	r9, #0
 8005712:	d003      	beq.n	800571c <_scanf_i+0x10c>
 8005714:	3301      	adds	r3, #1
 8005716:	f109 39ff 	add.w	r9, r9, #4294967295
 800571a:	60a3      	str	r3, [r4, #8]
 800571c:	6873      	ldr	r3, [r6, #4]
 800571e:	3b01      	subs	r3, #1
 8005720:	2b00      	cmp	r3, #0
 8005722:	6073      	str	r3, [r6, #4]
 8005724:	dd1b      	ble.n	800575e <_scanf_i+0x14e>
 8005726:	6833      	ldr	r3, [r6, #0]
 8005728:	3301      	adds	r3, #1
 800572a:	6033      	str	r3, [r6, #0]
 800572c:	68a3      	ldr	r3, [r4, #8]
 800572e:	3b01      	subs	r3, #1
 8005730:	60a3      	str	r3, [r4, #8]
 8005732:	e7d9      	b.n	80056e8 <_scanf_i+0xd8>
 8005734:	f1bb 0f02 	cmp.w	fp, #2
 8005738:	d1ae      	bne.n	8005698 <_scanf_i+0x88>
 800573a:	6822      	ldr	r2, [r4, #0]
 800573c:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8005740:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8005744:	d1bf      	bne.n	80056c6 <_scanf_i+0xb6>
 8005746:	2110      	movs	r1, #16
 8005748:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800574c:	6061      	str	r1, [r4, #4]
 800574e:	e7a2      	b.n	8005696 <_scanf_i+0x86>
 8005750:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8005754:	6022      	str	r2, [r4, #0]
 8005756:	780b      	ldrb	r3, [r1, #0]
 8005758:	f805 3b01 	strb.w	r3, [r5], #1
 800575c:	e7de      	b.n	800571c <_scanf_i+0x10c>
 800575e:	4631      	mov	r1, r6
 8005760:	4650      	mov	r0, sl
 8005762:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005766:	4798      	blx	r3
 8005768:	2800      	cmp	r0, #0
 800576a:	d0df      	beq.n	800572c <_scanf_i+0x11c>
 800576c:	6823      	ldr	r3, [r4, #0]
 800576e:	05d9      	lsls	r1, r3, #23
 8005770:	d50d      	bpl.n	800578e <_scanf_i+0x17e>
 8005772:	42bd      	cmp	r5, r7
 8005774:	d909      	bls.n	800578a <_scanf_i+0x17a>
 8005776:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800577a:	4632      	mov	r2, r6
 800577c:	4650      	mov	r0, sl
 800577e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005782:	f105 39ff 	add.w	r9, r5, #4294967295
 8005786:	4798      	blx	r3
 8005788:	464d      	mov	r5, r9
 800578a:	42bd      	cmp	r5, r7
 800578c:	d028      	beq.n	80057e0 <_scanf_i+0x1d0>
 800578e:	6822      	ldr	r2, [r4, #0]
 8005790:	f012 0210 	ands.w	r2, r2, #16
 8005794:	d113      	bne.n	80057be <_scanf_i+0x1ae>
 8005796:	702a      	strb	r2, [r5, #0]
 8005798:	4639      	mov	r1, r7
 800579a:	6863      	ldr	r3, [r4, #4]
 800579c:	4650      	mov	r0, sl
 800579e:	9e01      	ldr	r6, [sp, #4]
 80057a0:	47b0      	blx	r6
 80057a2:	f8d8 3000 	ldr.w	r3, [r8]
 80057a6:	6821      	ldr	r1, [r4, #0]
 80057a8:	1d1a      	adds	r2, r3, #4
 80057aa:	f8c8 2000 	str.w	r2, [r8]
 80057ae:	f011 0f20 	tst.w	r1, #32
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	d00f      	beq.n	80057d6 <_scanf_i+0x1c6>
 80057b6:	6018      	str	r0, [r3, #0]
 80057b8:	68e3      	ldr	r3, [r4, #12]
 80057ba:	3301      	adds	r3, #1
 80057bc:	60e3      	str	r3, [r4, #12]
 80057be:	2000      	movs	r0, #0
 80057c0:	6923      	ldr	r3, [r4, #16]
 80057c2:	1bed      	subs	r5, r5, r7
 80057c4:	445d      	add	r5, fp
 80057c6:	442b      	add	r3, r5
 80057c8:	6123      	str	r3, [r4, #16]
 80057ca:	b007      	add	sp, #28
 80057cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d0:	f04f 0b00 	mov.w	fp, #0
 80057d4:	e7ca      	b.n	800576c <_scanf_i+0x15c>
 80057d6:	07ca      	lsls	r2, r1, #31
 80057d8:	bf4c      	ite	mi
 80057da:	8018      	strhmi	r0, [r3, #0]
 80057dc:	6018      	strpl	r0, [r3, #0]
 80057de:	e7eb      	b.n	80057b8 <_scanf_i+0x1a8>
 80057e0:	2001      	movs	r0, #1
 80057e2:	e7f2      	b.n	80057ca <_scanf_i+0x1ba>
 80057e4:	080068b4 	.word	0x080068b4
 80057e8:	08005c21 	.word	0x08005c21
 80057ec:	08005d01 	.word	0x08005d01
 80057f0:	08006b5b 	.word	0x08006b5b

080057f4 <__swhatbuf_r>:
 80057f4:	b570      	push	{r4, r5, r6, lr}
 80057f6:	460c      	mov	r4, r1
 80057f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057fc:	4615      	mov	r5, r2
 80057fe:	2900      	cmp	r1, #0
 8005800:	461e      	mov	r6, r3
 8005802:	b096      	sub	sp, #88	@ 0x58
 8005804:	da0c      	bge.n	8005820 <__swhatbuf_r+0x2c>
 8005806:	89a3      	ldrh	r3, [r4, #12]
 8005808:	2100      	movs	r1, #0
 800580a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800580e:	bf14      	ite	ne
 8005810:	2340      	movne	r3, #64	@ 0x40
 8005812:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005816:	2000      	movs	r0, #0
 8005818:	6031      	str	r1, [r6, #0]
 800581a:	602b      	str	r3, [r5, #0]
 800581c:	b016      	add	sp, #88	@ 0x58
 800581e:	bd70      	pop	{r4, r5, r6, pc}
 8005820:	466a      	mov	r2, sp
 8005822:	f000 f907 	bl	8005a34 <_fstat_r>
 8005826:	2800      	cmp	r0, #0
 8005828:	dbed      	blt.n	8005806 <__swhatbuf_r+0x12>
 800582a:	9901      	ldr	r1, [sp, #4]
 800582c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005830:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005834:	4259      	negs	r1, r3
 8005836:	4159      	adcs	r1, r3
 8005838:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800583c:	e7eb      	b.n	8005816 <__swhatbuf_r+0x22>

0800583e <__smakebuf_r>:
 800583e:	898b      	ldrh	r3, [r1, #12]
 8005840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005842:	079d      	lsls	r5, r3, #30
 8005844:	4606      	mov	r6, r0
 8005846:	460c      	mov	r4, r1
 8005848:	d507      	bpl.n	800585a <__smakebuf_r+0x1c>
 800584a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800584e:	6023      	str	r3, [r4, #0]
 8005850:	6123      	str	r3, [r4, #16]
 8005852:	2301      	movs	r3, #1
 8005854:	6163      	str	r3, [r4, #20]
 8005856:	b003      	add	sp, #12
 8005858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800585a:	466a      	mov	r2, sp
 800585c:	ab01      	add	r3, sp, #4
 800585e:	f7ff ffc9 	bl	80057f4 <__swhatbuf_r>
 8005862:	9f00      	ldr	r7, [sp, #0]
 8005864:	4605      	mov	r5, r0
 8005866:	4639      	mov	r1, r7
 8005868:	4630      	mov	r0, r6
 800586a:	f7fe fff7 	bl	800485c <_malloc_r>
 800586e:	b948      	cbnz	r0, 8005884 <__smakebuf_r+0x46>
 8005870:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005874:	059a      	lsls	r2, r3, #22
 8005876:	d4ee      	bmi.n	8005856 <__smakebuf_r+0x18>
 8005878:	f023 0303 	bic.w	r3, r3, #3
 800587c:	f043 0302 	orr.w	r3, r3, #2
 8005880:	81a3      	strh	r3, [r4, #12]
 8005882:	e7e2      	b.n	800584a <__smakebuf_r+0xc>
 8005884:	89a3      	ldrh	r3, [r4, #12]
 8005886:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800588a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800588e:	81a3      	strh	r3, [r4, #12]
 8005890:	9b01      	ldr	r3, [sp, #4]
 8005892:	6020      	str	r0, [r4, #0]
 8005894:	b15b      	cbz	r3, 80058ae <__smakebuf_r+0x70>
 8005896:	4630      	mov	r0, r6
 8005898:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800589c:	f000 f8dc 	bl	8005a58 <_isatty_r>
 80058a0:	b128      	cbz	r0, 80058ae <__smakebuf_r+0x70>
 80058a2:	89a3      	ldrh	r3, [r4, #12]
 80058a4:	f023 0303 	bic.w	r3, r3, #3
 80058a8:	f043 0301 	orr.w	r3, r3, #1
 80058ac:	81a3      	strh	r3, [r4, #12]
 80058ae:	89a3      	ldrh	r3, [r4, #12]
 80058b0:	431d      	orrs	r5, r3
 80058b2:	81a5      	strh	r5, [r4, #12]
 80058b4:	e7cf      	b.n	8005856 <__smakebuf_r+0x18>

080058b6 <_putc_r>:
 80058b6:	b570      	push	{r4, r5, r6, lr}
 80058b8:	460d      	mov	r5, r1
 80058ba:	4614      	mov	r4, r2
 80058bc:	4606      	mov	r6, r0
 80058be:	b118      	cbz	r0, 80058c8 <_putc_r+0x12>
 80058c0:	6a03      	ldr	r3, [r0, #32]
 80058c2:	b90b      	cbnz	r3, 80058c8 <_putc_r+0x12>
 80058c4:	f7fe fcec 	bl	80042a0 <__sinit>
 80058c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80058ca:	07d8      	lsls	r0, r3, #31
 80058cc:	d405      	bmi.n	80058da <_putc_r+0x24>
 80058ce:	89a3      	ldrh	r3, [r4, #12]
 80058d0:	0599      	lsls	r1, r3, #22
 80058d2:	d402      	bmi.n	80058da <_putc_r+0x24>
 80058d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058d6:	f7fe ff54 	bl	8004782 <__retarget_lock_acquire_recursive>
 80058da:	68a3      	ldr	r3, [r4, #8]
 80058dc:	3b01      	subs	r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	60a3      	str	r3, [r4, #8]
 80058e2:	da05      	bge.n	80058f0 <_putc_r+0x3a>
 80058e4:	69a2      	ldr	r2, [r4, #24]
 80058e6:	4293      	cmp	r3, r2
 80058e8:	db12      	blt.n	8005910 <_putc_r+0x5a>
 80058ea:	b2eb      	uxtb	r3, r5
 80058ec:	2b0a      	cmp	r3, #10
 80058ee:	d00f      	beq.n	8005910 <_putc_r+0x5a>
 80058f0:	6823      	ldr	r3, [r4, #0]
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	6022      	str	r2, [r4, #0]
 80058f6:	701d      	strb	r5, [r3, #0]
 80058f8:	b2ed      	uxtb	r5, r5
 80058fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80058fc:	07da      	lsls	r2, r3, #31
 80058fe:	d405      	bmi.n	800590c <_putc_r+0x56>
 8005900:	89a3      	ldrh	r3, [r4, #12]
 8005902:	059b      	lsls	r3, r3, #22
 8005904:	d402      	bmi.n	800590c <_putc_r+0x56>
 8005906:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005908:	f7fe ff3c 	bl	8004784 <__retarget_lock_release_recursive>
 800590c:	4628      	mov	r0, r5
 800590e:	bd70      	pop	{r4, r5, r6, pc}
 8005910:	4629      	mov	r1, r5
 8005912:	4622      	mov	r2, r4
 8005914:	4630      	mov	r0, r6
 8005916:	f7fe fe14 	bl	8004542 <__swbuf_r>
 800591a:	4605      	mov	r5, r0
 800591c:	e7ed      	b.n	80058fa <_putc_r+0x44>

0800591e <__sccl>:
 800591e:	b570      	push	{r4, r5, r6, lr}
 8005920:	780b      	ldrb	r3, [r1, #0]
 8005922:	4604      	mov	r4, r0
 8005924:	2b5e      	cmp	r3, #94	@ 0x5e
 8005926:	bf0b      	itete	eq
 8005928:	784b      	ldrbeq	r3, [r1, #1]
 800592a:	1c4a      	addne	r2, r1, #1
 800592c:	1c8a      	addeq	r2, r1, #2
 800592e:	2100      	movne	r1, #0
 8005930:	bf08      	it	eq
 8005932:	2101      	moveq	r1, #1
 8005934:	3801      	subs	r0, #1
 8005936:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800593a:	f800 1f01 	strb.w	r1, [r0, #1]!
 800593e:	42a8      	cmp	r0, r5
 8005940:	d1fb      	bne.n	800593a <__sccl+0x1c>
 8005942:	b90b      	cbnz	r3, 8005948 <__sccl+0x2a>
 8005944:	1e50      	subs	r0, r2, #1
 8005946:	bd70      	pop	{r4, r5, r6, pc}
 8005948:	f081 0101 	eor.w	r1, r1, #1
 800594c:	4610      	mov	r0, r2
 800594e:	54e1      	strb	r1, [r4, r3]
 8005950:	4602      	mov	r2, r0
 8005952:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005956:	2d2d      	cmp	r5, #45	@ 0x2d
 8005958:	d005      	beq.n	8005966 <__sccl+0x48>
 800595a:	2d5d      	cmp	r5, #93	@ 0x5d
 800595c:	d016      	beq.n	800598c <__sccl+0x6e>
 800595e:	2d00      	cmp	r5, #0
 8005960:	d0f1      	beq.n	8005946 <__sccl+0x28>
 8005962:	462b      	mov	r3, r5
 8005964:	e7f2      	b.n	800594c <__sccl+0x2e>
 8005966:	7846      	ldrb	r6, [r0, #1]
 8005968:	2e5d      	cmp	r6, #93	@ 0x5d
 800596a:	d0fa      	beq.n	8005962 <__sccl+0x44>
 800596c:	42b3      	cmp	r3, r6
 800596e:	dcf8      	bgt.n	8005962 <__sccl+0x44>
 8005970:	461a      	mov	r2, r3
 8005972:	3002      	adds	r0, #2
 8005974:	3201      	adds	r2, #1
 8005976:	4296      	cmp	r6, r2
 8005978:	54a1      	strb	r1, [r4, r2]
 800597a:	dcfb      	bgt.n	8005974 <__sccl+0x56>
 800597c:	1af2      	subs	r2, r6, r3
 800597e:	3a01      	subs	r2, #1
 8005980:	42b3      	cmp	r3, r6
 8005982:	bfa8      	it	ge
 8005984:	2200      	movge	r2, #0
 8005986:	1c5d      	adds	r5, r3, #1
 8005988:	18ab      	adds	r3, r5, r2
 800598a:	e7e1      	b.n	8005950 <__sccl+0x32>
 800598c:	4610      	mov	r0, r2
 800598e:	e7da      	b.n	8005946 <__sccl+0x28>

08005990 <__submore>:
 8005990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005994:	460c      	mov	r4, r1
 8005996:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005998:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800599c:	4299      	cmp	r1, r3
 800599e:	d11b      	bne.n	80059d8 <__submore+0x48>
 80059a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80059a4:	f7fe ff5a 	bl	800485c <_malloc_r>
 80059a8:	b918      	cbnz	r0, 80059b2 <__submore+0x22>
 80059aa:	f04f 30ff 	mov.w	r0, #4294967295
 80059ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80059b6:	63a3      	str	r3, [r4, #56]	@ 0x38
 80059b8:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80059bc:	6360      	str	r0, [r4, #52]	@ 0x34
 80059be:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80059c2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80059c6:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80059ca:	7043      	strb	r3, [r0, #1]
 80059cc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80059d0:	7003      	strb	r3, [r0, #0]
 80059d2:	6020      	str	r0, [r4, #0]
 80059d4:	2000      	movs	r0, #0
 80059d6:	e7ea      	b.n	80059ae <__submore+0x1e>
 80059d8:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80059da:	0077      	lsls	r7, r6, #1
 80059dc:	463a      	mov	r2, r7
 80059de:	f000 f877 	bl	8005ad0 <_realloc_r>
 80059e2:	4605      	mov	r5, r0
 80059e4:	2800      	cmp	r0, #0
 80059e6:	d0e0      	beq.n	80059aa <__submore+0x1a>
 80059e8:	eb00 0806 	add.w	r8, r0, r6
 80059ec:	4601      	mov	r1, r0
 80059ee:	4632      	mov	r2, r6
 80059f0:	4640      	mov	r0, r8
 80059f2:	f000 f85f 	bl	8005ab4 <memcpy>
 80059f6:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80059fa:	f8c4 8000 	str.w	r8, [r4]
 80059fe:	e7e9      	b.n	80059d4 <__submore+0x44>

08005a00 <memmove>:
 8005a00:	4288      	cmp	r0, r1
 8005a02:	b510      	push	{r4, lr}
 8005a04:	eb01 0402 	add.w	r4, r1, r2
 8005a08:	d902      	bls.n	8005a10 <memmove+0x10>
 8005a0a:	4284      	cmp	r4, r0
 8005a0c:	4623      	mov	r3, r4
 8005a0e:	d807      	bhi.n	8005a20 <memmove+0x20>
 8005a10:	1e43      	subs	r3, r0, #1
 8005a12:	42a1      	cmp	r1, r4
 8005a14:	d008      	beq.n	8005a28 <memmove+0x28>
 8005a16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a1e:	e7f8      	b.n	8005a12 <memmove+0x12>
 8005a20:	4601      	mov	r1, r0
 8005a22:	4402      	add	r2, r0
 8005a24:	428a      	cmp	r2, r1
 8005a26:	d100      	bne.n	8005a2a <memmove+0x2a>
 8005a28:	bd10      	pop	{r4, pc}
 8005a2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a32:	e7f7      	b.n	8005a24 <memmove+0x24>

08005a34 <_fstat_r>:
 8005a34:	b538      	push	{r3, r4, r5, lr}
 8005a36:	2300      	movs	r3, #0
 8005a38:	4d06      	ldr	r5, [pc, #24]	@ (8005a54 <_fstat_r+0x20>)
 8005a3a:	4604      	mov	r4, r0
 8005a3c:	4608      	mov	r0, r1
 8005a3e:	4611      	mov	r1, r2
 8005a40:	602b      	str	r3, [r5, #0]
 8005a42:	f7fd f9fb 	bl	8002e3c <_fstat>
 8005a46:	1c43      	adds	r3, r0, #1
 8005a48:	d102      	bne.n	8005a50 <_fstat_r+0x1c>
 8005a4a:	682b      	ldr	r3, [r5, #0]
 8005a4c:	b103      	cbz	r3, 8005a50 <_fstat_r+0x1c>
 8005a4e:	6023      	str	r3, [r4, #0]
 8005a50:	bd38      	pop	{r3, r4, r5, pc}
 8005a52:	bf00      	nop
 8005a54:	200043f0 	.word	0x200043f0

08005a58 <_isatty_r>:
 8005a58:	b538      	push	{r3, r4, r5, lr}
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	4d05      	ldr	r5, [pc, #20]	@ (8005a74 <_isatty_r+0x1c>)
 8005a5e:	4604      	mov	r4, r0
 8005a60:	4608      	mov	r0, r1
 8005a62:	602b      	str	r3, [r5, #0]
 8005a64:	f7fd f9f9 	bl	8002e5a <_isatty>
 8005a68:	1c43      	adds	r3, r0, #1
 8005a6a:	d102      	bne.n	8005a72 <_isatty_r+0x1a>
 8005a6c:	682b      	ldr	r3, [r5, #0]
 8005a6e:	b103      	cbz	r3, 8005a72 <_isatty_r+0x1a>
 8005a70:	6023      	str	r3, [r4, #0]
 8005a72:	bd38      	pop	{r3, r4, r5, pc}
 8005a74:	200043f0 	.word	0x200043f0

08005a78 <_sbrk_r>:
 8005a78:	b538      	push	{r3, r4, r5, lr}
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	4d05      	ldr	r5, [pc, #20]	@ (8005a94 <_sbrk_r+0x1c>)
 8005a7e:	4604      	mov	r4, r0
 8005a80:	4608      	mov	r0, r1
 8005a82:	602b      	str	r3, [r5, #0]
 8005a84:	f7fd fa00 	bl	8002e88 <_sbrk>
 8005a88:	1c43      	adds	r3, r0, #1
 8005a8a:	d102      	bne.n	8005a92 <_sbrk_r+0x1a>
 8005a8c:	682b      	ldr	r3, [r5, #0]
 8005a8e:	b103      	cbz	r3, 8005a92 <_sbrk_r+0x1a>
 8005a90:	6023      	str	r3, [r4, #0]
 8005a92:	bd38      	pop	{r3, r4, r5, pc}
 8005a94:	200043f0 	.word	0x200043f0

08005a98 <memchr>:
 8005a98:	4603      	mov	r3, r0
 8005a9a:	b510      	push	{r4, lr}
 8005a9c:	b2c9      	uxtb	r1, r1
 8005a9e:	4402      	add	r2, r0
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	d101      	bne.n	8005aaa <memchr+0x12>
 8005aa6:	2000      	movs	r0, #0
 8005aa8:	e003      	b.n	8005ab2 <memchr+0x1a>
 8005aaa:	7804      	ldrb	r4, [r0, #0]
 8005aac:	3301      	adds	r3, #1
 8005aae:	428c      	cmp	r4, r1
 8005ab0:	d1f6      	bne.n	8005aa0 <memchr+0x8>
 8005ab2:	bd10      	pop	{r4, pc}

08005ab4 <memcpy>:
 8005ab4:	440a      	add	r2, r1
 8005ab6:	4291      	cmp	r1, r2
 8005ab8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005abc:	d100      	bne.n	8005ac0 <memcpy+0xc>
 8005abe:	4770      	bx	lr
 8005ac0:	b510      	push	{r4, lr}
 8005ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ac6:	4291      	cmp	r1, r2
 8005ac8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005acc:	d1f9      	bne.n	8005ac2 <memcpy+0xe>
 8005ace:	bd10      	pop	{r4, pc}

08005ad0 <_realloc_r>:
 8005ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ad4:	4680      	mov	r8, r0
 8005ad6:	4615      	mov	r5, r2
 8005ad8:	460c      	mov	r4, r1
 8005ada:	b921      	cbnz	r1, 8005ae6 <_realloc_r+0x16>
 8005adc:	4611      	mov	r1, r2
 8005ade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ae2:	f7fe bebb 	b.w	800485c <_malloc_r>
 8005ae6:	b92a      	cbnz	r2, 8005af4 <_realloc_r+0x24>
 8005ae8:	f7fe fe4e 	bl	8004788 <_free_r>
 8005aec:	2400      	movs	r4, #0
 8005aee:	4620      	mov	r0, r4
 8005af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005af4:	f000 f906 	bl	8005d04 <_malloc_usable_size_r>
 8005af8:	4285      	cmp	r5, r0
 8005afa:	4606      	mov	r6, r0
 8005afc:	d802      	bhi.n	8005b04 <_realloc_r+0x34>
 8005afe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005b02:	d8f4      	bhi.n	8005aee <_realloc_r+0x1e>
 8005b04:	4629      	mov	r1, r5
 8005b06:	4640      	mov	r0, r8
 8005b08:	f7fe fea8 	bl	800485c <_malloc_r>
 8005b0c:	4607      	mov	r7, r0
 8005b0e:	2800      	cmp	r0, #0
 8005b10:	d0ec      	beq.n	8005aec <_realloc_r+0x1c>
 8005b12:	42b5      	cmp	r5, r6
 8005b14:	462a      	mov	r2, r5
 8005b16:	4621      	mov	r1, r4
 8005b18:	bf28      	it	cs
 8005b1a:	4632      	movcs	r2, r6
 8005b1c:	f7ff ffca 	bl	8005ab4 <memcpy>
 8005b20:	4621      	mov	r1, r4
 8005b22:	4640      	mov	r0, r8
 8005b24:	f7fe fe30 	bl	8004788 <_free_r>
 8005b28:	463c      	mov	r4, r7
 8005b2a:	e7e0      	b.n	8005aee <_realloc_r+0x1e>

08005b2c <_strtol_l.constprop.0>:
 8005b2c:	2b24      	cmp	r3, #36	@ 0x24
 8005b2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b32:	4686      	mov	lr, r0
 8005b34:	4690      	mov	r8, r2
 8005b36:	d801      	bhi.n	8005b3c <_strtol_l.constprop.0+0x10>
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d106      	bne.n	8005b4a <_strtol_l.constprop.0+0x1e>
 8005b3c:	f7fe fdf6 	bl	800472c <__errno>
 8005b40:	2316      	movs	r3, #22
 8005b42:	6003      	str	r3, [r0, #0]
 8005b44:	2000      	movs	r0, #0
 8005b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b4a:	460d      	mov	r5, r1
 8005b4c:	4833      	ldr	r0, [pc, #204]	@ (8005c1c <_strtol_l.constprop.0+0xf0>)
 8005b4e:	462a      	mov	r2, r5
 8005b50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b54:	5d06      	ldrb	r6, [r0, r4]
 8005b56:	f016 0608 	ands.w	r6, r6, #8
 8005b5a:	d1f8      	bne.n	8005b4e <_strtol_l.constprop.0+0x22>
 8005b5c:	2c2d      	cmp	r4, #45	@ 0x2d
 8005b5e:	d12d      	bne.n	8005bbc <_strtol_l.constprop.0+0x90>
 8005b60:	2601      	movs	r6, #1
 8005b62:	782c      	ldrb	r4, [r5, #0]
 8005b64:	1c95      	adds	r5, r2, #2
 8005b66:	f033 0210 	bics.w	r2, r3, #16
 8005b6a:	d109      	bne.n	8005b80 <_strtol_l.constprop.0+0x54>
 8005b6c:	2c30      	cmp	r4, #48	@ 0x30
 8005b6e:	d12a      	bne.n	8005bc6 <_strtol_l.constprop.0+0x9a>
 8005b70:	782a      	ldrb	r2, [r5, #0]
 8005b72:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005b76:	2a58      	cmp	r2, #88	@ 0x58
 8005b78:	d125      	bne.n	8005bc6 <_strtol_l.constprop.0+0x9a>
 8005b7a:	2310      	movs	r3, #16
 8005b7c:	786c      	ldrb	r4, [r5, #1]
 8005b7e:	3502      	adds	r5, #2
 8005b80:	2200      	movs	r2, #0
 8005b82:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005b86:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005b8a:	fbbc f9f3 	udiv	r9, ip, r3
 8005b8e:	4610      	mov	r0, r2
 8005b90:	fb03 ca19 	mls	sl, r3, r9, ip
 8005b94:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005b98:	2f09      	cmp	r7, #9
 8005b9a:	d81b      	bhi.n	8005bd4 <_strtol_l.constprop.0+0xa8>
 8005b9c:	463c      	mov	r4, r7
 8005b9e:	42a3      	cmp	r3, r4
 8005ba0:	dd27      	ble.n	8005bf2 <_strtol_l.constprop.0+0xc6>
 8005ba2:	1c57      	adds	r7, r2, #1
 8005ba4:	d007      	beq.n	8005bb6 <_strtol_l.constprop.0+0x8a>
 8005ba6:	4581      	cmp	r9, r0
 8005ba8:	d320      	bcc.n	8005bec <_strtol_l.constprop.0+0xc0>
 8005baa:	d101      	bne.n	8005bb0 <_strtol_l.constprop.0+0x84>
 8005bac:	45a2      	cmp	sl, r4
 8005bae:	db1d      	blt.n	8005bec <_strtol_l.constprop.0+0xc0>
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	fb00 4003 	mla	r0, r0, r3, r4
 8005bb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005bba:	e7eb      	b.n	8005b94 <_strtol_l.constprop.0+0x68>
 8005bbc:	2c2b      	cmp	r4, #43	@ 0x2b
 8005bbe:	bf04      	itt	eq
 8005bc0:	782c      	ldrbeq	r4, [r5, #0]
 8005bc2:	1c95      	addeq	r5, r2, #2
 8005bc4:	e7cf      	b.n	8005b66 <_strtol_l.constprop.0+0x3a>
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1da      	bne.n	8005b80 <_strtol_l.constprop.0+0x54>
 8005bca:	2c30      	cmp	r4, #48	@ 0x30
 8005bcc:	bf0c      	ite	eq
 8005bce:	2308      	moveq	r3, #8
 8005bd0:	230a      	movne	r3, #10
 8005bd2:	e7d5      	b.n	8005b80 <_strtol_l.constprop.0+0x54>
 8005bd4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005bd8:	2f19      	cmp	r7, #25
 8005bda:	d801      	bhi.n	8005be0 <_strtol_l.constprop.0+0xb4>
 8005bdc:	3c37      	subs	r4, #55	@ 0x37
 8005bde:	e7de      	b.n	8005b9e <_strtol_l.constprop.0+0x72>
 8005be0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005be4:	2f19      	cmp	r7, #25
 8005be6:	d804      	bhi.n	8005bf2 <_strtol_l.constprop.0+0xc6>
 8005be8:	3c57      	subs	r4, #87	@ 0x57
 8005bea:	e7d8      	b.n	8005b9e <_strtol_l.constprop.0+0x72>
 8005bec:	f04f 32ff 	mov.w	r2, #4294967295
 8005bf0:	e7e1      	b.n	8005bb6 <_strtol_l.constprop.0+0x8a>
 8005bf2:	1c53      	adds	r3, r2, #1
 8005bf4:	d108      	bne.n	8005c08 <_strtol_l.constprop.0+0xdc>
 8005bf6:	2322      	movs	r3, #34	@ 0x22
 8005bf8:	4660      	mov	r0, ip
 8005bfa:	f8ce 3000 	str.w	r3, [lr]
 8005bfe:	f1b8 0f00 	cmp.w	r8, #0
 8005c02:	d0a0      	beq.n	8005b46 <_strtol_l.constprop.0+0x1a>
 8005c04:	1e69      	subs	r1, r5, #1
 8005c06:	e006      	b.n	8005c16 <_strtol_l.constprop.0+0xea>
 8005c08:	b106      	cbz	r6, 8005c0c <_strtol_l.constprop.0+0xe0>
 8005c0a:	4240      	negs	r0, r0
 8005c0c:	f1b8 0f00 	cmp.w	r8, #0
 8005c10:	d099      	beq.n	8005b46 <_strtol_l.constprop.0+0x1a>
 8005c12:	2a00      	cmp	r2, #0
 8005c14:	d1f6      	bne.n	8005c04 <_strtol_l.constprop.0+0xd8>
 8005c16:	f8c8 1000 	str.w	r1, [r8]
 8005c1a:	e794      	b.n	8005b46 <_strtol_l.constprop.0+0x1a>
 8005c1c:	08006b67 	.word	0x08006b67

08005c20 <_strtol_r>:
 8005c20:	f7ff bf84 	b.w	8005b2c <_strtol_l.constprop.0>

08005c24 <_strtoul_l.constprop.0>:
 8005c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c28:	4686      	mov	lr, r0
 8005c2a:	460d      	mov	r5, r1
 8005c2c:	4e33      	ldr	r6, [pc, #204]	@ (8005cfc <_strtoul_l.constprop.0+0xd8>)
 8005c2e:	4628      	mov	r0, r5
 8005c30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c34:	5d37      	ldrb	r7, [r6, r4]
 8005c36:	f017 0708 	ands.w	r7, r7, #8
 8005c3a:	d1f8      	bne.n	8005c2e <_strtoul_l.constprop.0+0xa>
 8005c3c:	2c2d      	cmp	r4, #45	@ 0x2d
 8005c3e:	d12f      	bne.n	8005ca0 <_strtoul_l.constprop.0+0x7c>
 8005c40:	2701      	movs	r7, #1
 8005c42:	782c      	ldrb	r4, [r5, #0]
 8005c44:	1c85      	adds	r5, r0, #2
 8005c46:	f033 0010 	bics.w	r0, r3, #16
 8005c4a:	d109      	bne.n	8005c60 <_strtoul_l.constprop.0+0x3c>
 8005c4c:	2c30      	cmp	r4, #48	@ 0x30
 8005c4e:	d12c      	bne.n	8005caa <_strtoul_l.constprop.0+0x86>
 8005c50:	7828      	ldrb	r0, [r5, #0]
 8005c52:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8005c56:	2858      	cmp	r0, #88	@ 0x58
 8005c58:	d127      	bne.n	8005caa <_strtoul_l.constprop.0+0x86>
 8005c5a:	2310      	movs	r3, #16
 8005c5c:	786c      	ldrb	r4, [r5, #1]
 8005c5e:	3502      	adds	r5, #2
 8005c60:	f04f 38ff 	mov.w	r8, #4294967295
 8005c64:	fbb8 f8f3 	udiv	r8, r8, r3
 8005c68:	2600      	movs	r6, #0
 8005c6a:	fb03 f908 	mul.w	r9, r3, r8
 8005c6e:	4630      	mov	r0, r6
 8005c70:	ea6f 0909 	mvn.w	r9, r9
 8005c74:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8005c78:	f1bc 0f09 	cmp.w	ip, #9
 8005c7c:	d81c      	bhi.n	8005cb8 <_strtoul_l.constprop.0+0x94>
 8005c7e:	4664      	mov	r4, ip
 8005c80:	42a3      	cmp	r3, r4
 8005c82:	dd2a      	ble.n	8005cda <_strtoul_l.constprop.0+0xb6>
 8005c84:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005c88:	d007      	beq.n	8005c9a <_strtoul_l.constprop.0+0x76>
 8005c8a:	4580      	cmp	r8, r0
 8005c8c:	d322      	bcc.n	8005cd4 <_strtoul_l.constprop.0+0xb0>
 8005c8e:	d101      	bne.n	8005c94 <_strtoul_l.constprop.0+0x70>
 8005c90:	45a1      	cmp	r9, r4
 8005c92:	db1f      	blt.n	8005cd4 <_strtoul_l.constprop.0+0xb0>
 8005c94:	2601      	movs	r6, #1
 8005c96:	fb00 4003 	mla	r0, r0, r3, r4
 8005c9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c9e:	e7e9      	b.n	8005c74 <_strtoul_l.constprop.0+0x50>
 8005ca0:	2c2b      	cmp	r4, #43	@ 0x2b
 8005ca2:	bf04      	itt	eq
 8005ca4:	782c      	ldrbeq	r4, [r5, #0]
 8005ca6:	1c85      	addeq	r5, r0, #2
 8005ca8:	e7cd      	b.n	8005c46 <_strtoul_l.constprop.0+0x22>
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1d8      	bne.n	8005c60 <_strtoul_l.constprop.0+0x3c>
 8005cae:	2c30      	cmp	r4, #48	@ 0x30
 8005cb0:	bf0c      	ite	eq
 8005cb2:	2308      	moveq	r3, #8
 8005cb4:	230a      	movne	r3, #10
 8005cb6:	e7d3      	b.n	8005c60 <_strtoul_l.constprop.0+0x3c>
 8005cb8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8005cbc:	f1bc 0f19 	cmp.w	ip, #25
 8005cc0:	d801      	bhi.n	8005cc6 <_strtoul_l.constprop.0+0xa2>
 8005cc2:	3c37      	subs	r4, #55	@ 0x37
 8005cc4:	e7dc      	b.n	8005c80 <_strtoul_l.constprop.0+0x5c>
 8005cc6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8005cca:	f1bc 0f19 	cmp.w	ip, #25
 8005cce:	d804      	bhi.n	8005cda <_strtoul_l.constprop.0+0xb6>
 8005cd0:	3c57      	subs	r4, #87	@ 0x57
 8005cd2:	e7d5      	b.n	8005c80 <_strtoul_l.constprop.0+0x5c>
 8005cd4:	f04f 36ff 	mov.w	r6, #4294967295
 8005cd8:	e7df      	b.n	8005c9a <_strtoul_l.constprop.0+0x76>
 8005cda:	1c73      	adds	r3, r6, #1
 8005cdc:	d106      	bne.n	8005cec <_strtoul_l.constprop.0+0xc8>
 8005cde:	2322      	movs	r3, #34	@ 0x22
 8005ce0:	4630      	mov	r0, r6
 8005ce2:	f8ce 3000 	str.w	r3, [lr]
 8005ce6:	b932      	cbnz	r2, 8005cf6 <_strtoul_l.constprop.0+0xd2>
 8005ce8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005cec:	b107      	cbz	r7, 8005cf0 <_strtoul_l.constprop.0+0xcc>
 8005cee:	4240      	negs	r0, r0
 8005cf0:	2a00      	cmp	r2, #0
 8005cf2:	d0f9      	beq.n	8005ce8 <_strtoul_l.constprop.0+0xc4>
 8005cf4:	b106      	cbz	r6, 8005cf8 <_strtoul_l.constprop.0+0xd4>
 8005cf6:	1e69      	subs	r1, r5, #1
 8005cf8:	6011      	str	r1, [r2, #0]
 8005cfa:	e7f5      	b.n	8005ce8 <_strtoul_l.constprop.0+0xc4>
 8005cfc:	08006b67 	.word	0x08006b67

08005d00 <_strtoul_r>:
 8005d00:	f7ff bf90 	b.w	8005c24 <_strtoul_l.constprop.0>

08005d04 <_malloc_usable_size_r>:
 8005d04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d08:	1f18      	subs	r0, r3, #4
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	bfbc      	itt	lt
 8005d0e:	580b      	ldrlt	r3, [r1, r0]
 8005d10:	18c0      	addlt	r0, r0, r3
 8005d12:	4770      	bx	lr

08005d14 <_init>:
 8005d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d16:	bf00      	nop
 8005d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d1a:	bc08      	pop	{r3}
 8005d1c:	469e      	mov	lr, r3
 8005d1e:	4770      	bx	lr

08005d20 <_fini>:
 8005d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d22:	bf00      	nop
 8005d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d26:	bc08      	pop	{r3}
 8005d28:	469e      	mov	lr, r3
 8005d2a:	4770      	bx	lr

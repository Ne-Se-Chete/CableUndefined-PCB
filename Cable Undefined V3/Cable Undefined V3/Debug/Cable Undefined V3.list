
Cable Undefined V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e88  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cf4  0800606c  0800606c  0000706c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d60  08006d60  0000a040  2**0
                  CONTENTS
  4 .ARM          00000008  08006d60  08006d60  00007d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d68  08006d68  0000a040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d68  08006d68  00007d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d6c  08006d6c  00007d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00002040  20000000  08006d70  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000376c  20002040  08008db0  0000a040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200057ac  08008db0  0000a7ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e6c  00000000  00000000  0000a069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023bd  00000000  00000000  00013ed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  00016298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000875  00000000  00000000  00016e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dc6f  00000000  00000000  0001768d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a126  00000000  00000000  000352fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c655  00000000  00000000  0003f422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dba77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bcc  00000000  00000000  000dbabc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000df688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20002040 	.word	0x20002040
 8000200:	00000000 	.word	0x00000000
 8000204:	08006054 	.word	0x08006054

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20002044 	.word	0x20002044
 8000220:	08006054 	.word	0x08006054

08000224 <strcmp>:
 8000224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800022c:	2a01      	cmp	r2, #1
 800022e:	bf28      	it	cs
 8000230:	429a      	cmpcs	r2, r3
 8000232:	d0f7      	beq.n	8000224 <strcmp>
 8000234:	1ad0      	subs	r0, r2, r3
 8000236:	4770      	bx	lr

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	0a1b      	lsrs	r3, r3, #8
 8000256:	b29a      	uxth	r2, r3
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	611a      	str	r2, [r3, #16]
}
 800025c:	bf00      	nop
 800025e:	370c      	adds	r7, #12
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr

08000266 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000266:	b480      	push	{r7}
 8000268:	b083      	sub	sp, #12
 800026a:	af00      	add	r7, sp, #0
 800026c:	6078      	str	r0, [r7, #4]
 800026e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	0a1b      	lsrs	r3, r3, #8
 8000274:	b29a      	uxth	r2, r3
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	615a      	str	r2, [r3, #20]
}
 800027a:	bf00      	nop
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr

08000284 <FAULT_CheckAndReport>:
static char msg[20];

/**
 * @brief Check which FAULT occurred and send the appropriate message
 */
void FAULT_CheckAndReport(void) {
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
    // Only process if an interrupt was triggered and message has not been sent
	if (!fault_sent){
 8000288:	4b1b      	ldr	r3, [pc, #108]	@ (80002f8 <FAULT_CheckAndReport+0x74>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	b2db      	uxtb	r3, r3
 800028e:	2b00      	cmp	r3, #0
 8000290:	d12c      	bne.n	80002ec <FAULT_CheckAndReport+0x68>
		if (fault_3v3_triggered && fault_5v_triggered) {
 8000292:	4b1a      	ldr	r3, [pc, #104]	@ (80002fc <FAULT_CheckAndReport+0x78>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	b2db      	uxtb	r3, r3
 8000298:	2b00      	cmp	r3, #0
 800029a:	d00a      	beq.n	80002b2 <FAULT_CheckAndReport+0x2e>
 800029c:	4b18      	ldr	r3, [pc, #96]	@ (8000300 <FAULT_CheckAndReport+0x7c>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d005      	beq.n	80002b2 <FAULT_CheckAndReport+0x2e>
			snprintf(msg, sizeof(msg), "FAULT 3v3 + 5V\n");
 80002a6:	4a17      	ldr	r2, [pc, #92]	@ (8000304 <FAULT_CheckAndReport+0x80>)
 80002a8:	2114      	movs	r1, #20
 80002aa:	4817      	ldr	r0, [pc, #92]	@ (8000308 <FAULT_CheckAndReport+0x84>)
 80002ac:	f004 fa46 	bl	800473c <sniprintf>
 80002b0:	e014      	b.n	80002dc <FAULT_CheckAndReport+0x58>
		} else if (fault_3v3_triggered) {
 80002b2:	4b12      	ldr	r3, [pc, #72]	@ (80002fc <FAULT_CheckAndReport+0x78>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d005      	beq.n	80002c8 <FAULT_CheckAndReport+0x44>
			snprintf(msg, sizeof(msg), "FAULT 3v3\n");
 80002bc:	4a13      	ldr	r2, [pc, #76]	@ (800030c <FAULT_CheckAndReport+0x88>)
 80002be:	2114      	movs	r1, #20
 80002c0:	4811      	ldr	r0, [pc, #68]	@ (8000308 <FAULT_CheckAndReport+0x84>)
 80002c2:	f004 fa3b 	bl	800473c <sniprintf>
 80002c6:	e009      	b.n	80002dc <FAULT_CheckAndReport+0x58>
		} else if (fault_5v_triggered) {
 80002c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000300 <FAULT_CheckAndReport+0x7c>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d010      	beq.n	80002f4 <FAULT_CheckAndReport+0x70>
			snprintf(msg, sizeof(msg), "FAULT 5V\n");
 80002d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000310 <FAULT_CheckAndReport+0x8c>)
 80002d4:	2114      	movs	r1, #20
 80002d6:	480c      	ldr	r0, [pc, #48]	@ (8000308 <FAULT_CheckAndReport+0x84>)
 80002d8:	f004 fa30 	bl	800473c <sniprintf>
			return; // No fault detected
		}


	// Send message via UART1 and UART3
	sendToUART(USART3, msg);
 80002dc:	490a      	ldr	r1, [pc, #40]	@ (8000308 <FAULT_CheckAndReport+0x84>)
 80002de:	480d      	ldr	r0, [pc, #52]	@ (8000314 <FAULT_CheckAndReport+0x90>)
 80002e0:	f002 fd12 	bl	8002d08 <sendToUART>
	sendToUART(USART1, msg);
 80002e4:	4908      	ldr	r1, [pc, #32]	@ (8000308 <FAULT_CheckAndReport+0x84>)
 80002e6:	480c      	ldr	r0, [pc, #48]	@ (8000318 <FAULT_CheckAndReport+0x94>)
 80002e8:	f002 fd0e 	bl	8002d08 <sendToUART>
	}

	// Mark message as sent
	fault_sent = 1;
 80002ec:	4b02      	ldr	r3, [pc, #8]	@ (80002f8 <FAULT_CheckAndReport+0x74>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	701a      	strb	r2, [r3, #0]
 80002f2:	e000      	b.n	80002f6 <FAULT_CheckAndReport+0x72>
			return; // No fault detected
 80002f4:	bf00      	nop
}
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	2000205e 	.word	0x2000205e
 80002fc:	2000205c 	.word	0x2000205c
 8000300:	2000205d 	.word	0x2000205d
 8000304:	0800606c 	.word	0x0800606c
 8000308:	20002060 	.word	0x20002060
 800030c:	0800607c 	.word	0x0800607c
 8000310:	08006088 	.word	0x08006088
 8000314:	40004800 	.word	0x40004800
 8000318:	40013800 	.word	0x40013800

0800031c <FAULT_5v_HandleInterrupt>:

/**
 * @brief Handles the 5V FAULT interrupt, only sets flags
 */
void FAULT_5v_HandleInterrupt(void) {
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
    // Set trigger flag when interrupt occurs
	fault_5v_triggered = 1;
 8000320:	4b04      	ldr	r3, [pc, #16]	@ (8000334 <FAULT_5v_HandleInterrupt+0x18>)
 8000322:	2201      	movs	r2, #1
 8000324:	701a      	strb	r2, [r3, #0]
    fault_sent = 0;  // Reset message sent flag to allow new transmission
 8000326:	4b04      	ldr	r3, [pc, #16]	@ (8000338 <FAULT_5v_HandleInterrupt+0x1c>)
 8000328:	2200      	movs	r2, #0
 800032a:	701a      	strb	r2, [r3, #0]
}
 800032c:	bf00      	nop
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr
 8000334:	2000205d 	.word	0x2000205d
 8000338:	2000205e 	.word	0x2000205e

0800033c <FAULT_3v3_HandleInterrupt>:

/**
 * @brief Handles the 5V FAULT interrupt, only sets flags
 */
void FAULT_3v3_HandleInterrupt(void) {
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
    // Set trigger flag when interrupt occurs
	fault_3v3_triggered = 1;
 8000340:	4b04      	ldr	r3, [pc, #16]	@ (8000354 <FAULT_3v3_HandleInterrupt+0x18>)
 8000342:	2201      	movs	r2, #1
 8000344:	701a      	strb	r2, [r3, #0]
    fault_sent = 0;  // Reset message sent flag to allow new transmission
 8000346:	4b04      	ldr	r3, [pc, #16]	@ (8000358 <FAULT_3v3_HandleInterrupt+0x1c>)
 8000348:	2200      	movs	r2, #0
 800034a:	701a      	strb	r2, [r3, #0]
}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr
 8000354:	2000205c 	.word	0x2000205c
 8000358:	2000205e 	.word	0x2000205e

0800035c <FAULT_5v_HandleMsg>:

void FAULT_5v_HandleMsg(void){
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	printf("Reseting the protection gpio, 5V");
 8000360:	480d      	ldr	r0, [pc, #52]	@ (8000398 <FAULT_5v_HandleMsg+0x3c>)
 8000362:	f004 f973 	bl	800464c <iprintf>
	fflush(stdout);
 8000366:	4b0d      	ldr	r3, [pc, #52]	@ (800039c <FAULT_5v_HandleMsg+0x40>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	4618      	mov	r0, r3
 800036e:	f004 f897 	bl	80044a0 <fflush>

	fault_5v_triggered = 0;
 8000372:	4b0b      	ldr	r3, [pc, #44]	@ (80003a0 <FAULT_5v_HandleMsg+0x44>)
 8000374:	2200      	movs	r2, #0
 8000376:	701a      	strb	r2, [r3, #0]
    fault_sent = 0;
 8000378:	4b0a      	ldr	r3, [pc, #40]	@ (80003a4 <FAULT_5v_HandleMsg+0x48>)
 800037a:	2200      	movs	r2, #0
 800037c:	701a      	strb	r2, [r3, #0]

    LL_GPIO_ResetOutputPin(PROTECTION_GPIO, PROTECTION_PIN);
 800037e:	490a      	ldr	r1, [pc, #40]	@ (80003a8 <FAULT_5v_HandleMsg+0x4c>)
 8000380:	480a      	ldr	r0, [pc, #40]	@ (80003ac <FAULT_5v_HandleMsg+0x50>)
 8000382:	f7ff ff70 	bl	8000266 <LL_GPIO_ResetOutputPin>
    LL_mDelay(20);
 8000386:	2014      	movs	r0, #20
 8000388:	f003 ffb0 	bl	80042ec <LL_mDelay>
    LL_GPIO_SetOutputPin(PROTECTION_GPIO, PROTECTION_PIN);
 800038c:	4906      	ldr	r1, [pc, #24]	@ (80003a8 <FAULT_5v_HandleMsg+0x4c>)
 800038e:	4807      	ldr	r0, [pc, #28]	@ (80003ac <FAULT_5v_HandleMsg+0x50>)
 8000390:	f7ff ff5a 	bl	8000248 <LL_GPIO_SetOutputPin>
}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}
 8000398:	08006094 	.word	0x08006094
 800039c:	20001ff0 	.word	0x20001ff0
 80003a0:	2000205d 	.word	0x2000205d
 80003a4:	2000205e 	.word	0x2000205e
 80003a8:	04080008 	.word	0x04080008
 80003ac:	40011800 	.word	0x40011800

080003b0 <FAULT_3v3_HandleMsg>:

void FAULT_3v3_HandleMsg(void){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	printf("reseting the protection gpio, 3V3");
 80003b4:	480d      	ldr	r0, [pc, #52]	@ (80003ec <FAULT_3v3_HandleMsg+0x3c>)
 80003b6:	f004 f949 	bl	800464c <iprintf>
	fflush(stdout);
 80003ba:	4b0d      	ldr	r3, [pc, #52]	@ (80003f0 <FAULT_3v3_HandleMsg+0x40>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	689b      	ldr	r3, [r3, #8]
 80003c0:	4618      	mov	r0, r3
 80003c2:	f004 f86d 	bl	80044a0 <fflush>

	fault_3v3_triggered = 0;
 80003c6:	4b0b      	ldr	r3, [pc, #44]	@ (80003f4 <FAULT_3v3_HandleMsg+0x44>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	701a      	strb	r2, [r3, #0]
    fault_sent = 0;
 80003cc:	4b0a      	ldr	r3, [pc, #40]	@ (80003f8 <FAULT_3v3_HandleMsg+0x48>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	701a      	strb	r2, [r3, #0]

    LL_GPIO_ResetOutputPin(PROTECTION_GPIO, PROTECTION_PIN);
 80003d2:	490a      	ldr	r1, [pc, #40]	@ (80003fc <FAULT_3v3_HandleMsg+0x4c>)
 80003d4:	480a      	ldr	r0, [pc, #40]	@ (8000400 <FAULT_3v3_HandleMsg+0x50>)
 80003d6:	f7ff ff46 	bl	8000266 <LL_GPIO_ResetOutputPin>
    LL_mDelay(20);
 80003da:	2014      	movs	r0, #20
 80003dc:	f003 ff86 	bl	80042ec <LL_mDelay>
    LL_GPIO_SetOutputPin(PROTECTION_GPIO, PROTECTION_PIN);
 80003e0:	4906      	ldr	r1, [pc, #24]	@ (80003fc <FAULT_3v3_HandleMsg+0x4c>)
 80003e2:	4807      	ldr	r0, [pc, #28]	@ (8000400 <FAULT_3v3_HandleMsg+0x50>)
 80003e4:	f7ff ff30 	bl	8000248 <LL_GPIO_SetOutputPin>
}
 80003e8:	bf00      	nop
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	080060b8 	.word	0x080060b8
 80003f0:	20001ff0 	.word	0x20001ff0
 80003f4:	2000205c 	.word	0x2000205c
 80003f8:	2000205e 	.word	0x2000205e
 80003fc:	04080008 	.word	0x04080008
 8000400:	40011800 	.word	0x40011800

08000404 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	3b01      	subs	r3, #1
 8000412:	4a0a      	ldr	r2, [pc, #40]	@ (800043c <LL_DMA_EnableChannel+0x38>)
 8000414:	5cd3      	ldrb	r3, [r2, r3]
 8000416:	461a      	mov	r2, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4413      	add	r3, r2
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	683a      	ldr	r2, [r7, #0]
 8000420:	3a01      	subs	r2, #1
 8000422:	4906      	ldr	r1, [pc, #24]	@ (800043c <LL_DMA_EnableChannel+0x38>)
 8000424:	5c8a      	ldrb	r2, [r1, r2]
 8000426:	4611      	mov	r1, r2
 8000428:	687a      	ldr	r2, [r7, #4]
 800042a:	440a      	add	r2, r1
 800042c:	f043 0301 	orr.w	r3, r3, #1
 8000430:	6013      	str	r3, [r2, #0]
}
 8000432:	bf00      	nop
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr
 800043c:	08006bd8 	.word	0x08006bd8

08000440 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	3b01      	subs	r3, #1
 800044e:	4a0a      	ldr	r2, [pc, #40]	@ (8000478 <LL_DMA_DisableChannel+0x38>)
 8000450:	5cd3      	ldrb	r3, [r2, r3]
 8000452:	461a      	mov	r2, r3
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4413      	add	r3, r2
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	683a      	ldr	r2, [r7, #0]
 800045c:	3a01      	subs	r2, #1
 800045e:	4906      	ldr	r1, [pc, #24]	@ (8000478 <LL_DMA_DisableChannel+0x38>)
 8000460:	5c8a      	ldrb	r2, [r1, r2]
 8000462:	4611      	mov	r1, r2
 8000464:	687a      	ldr	r2, [r7, #4]
 8000466:	440a      	add	r2, r1
 8000468:	f023 0301 	bic.w	r3, r3, #1
 800046c:	6013      	str	r3, [r2, #0]
}
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	08006bd8 	.word	0x08006bd8

0800047c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	60f8      	str	r0, [r7, #12]
 8000484:	60b9      	str	r1, [r7, #8]
 8000486:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	3b01      	subs	r3, #1
 800048c:	4a0b      	ldr	r2, [pc, #44]	@ (80004bc <LL_DMA_SetDataLength+0x40>)
 800048e:	5cd3      	ldrb	r3, [r2, r3]
 8000490:	461a      	mov	r2, r3
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	4413      	add	r3, r2
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	0c1b      	lsrs	r3, r3, #16
 800049a:	041b      	lsls	r3, r3, #16
 800049c:	68ba      	ldr	r2, [r7, #8]
 800049e:	3a01      	subs	r2, #1
 80004a0:	4906      	ldr	r1, [pc, #24]	@ (80004bc <LL_DMA_SetDataLength+0x40>)
 80004a2:	5c8a      	ldrb	r2, [r1, r2]
 80004a4:	4611      	mov	r1, r2
 80004a6:	68fa      	ldr	r2, [r7, #12]
 80004a8:	440a      	add	r2, r1
 80004aa:	4611      	mov	r1, r2
 80004ac:	687a      	ldr	r2, [r7, #4]
 80004ae:	4313      	orrs	r3, r2
 80004b0:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80004b2:	bf00      	nop
 80004b4:	3714      	adds	r7, #20
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	08006bd8 	.word	0x08006bd8

080004c0 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
 80004cc:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80004ce:	69bb      	ldr	r3, [r7, #24]
 80004d0:	2b10      	cmp	r3, #16
 80004d2:	d114      	bne.n	80004fe <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	3b01      	subs	r3, #1
 80004d8:	4a15      	ldr	r2, [pc, #84]	@ (8000530 <LL_DMA_ConfigAddresses+0x70>)
 80004da:	5cd3      	ldrb	r3, [r2, r3]
 80004dc:	461a      	mov	r2, r3
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	4413      	add	r3, r2
 80004e2:	461a      	mov	r2, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	3b01      	subs	r3, #1
 80004ec:	4a10      	ldr	r2, [pc, #64]	@ (8000530 <LL_DMA_ConfigAddresses+0x70>)
 80004ee:	5cd3      	ldrb	r3, [r2, r3]
 80004f0:	461a      	mov	r2, r3
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	4413      	add	r3, r2
 80004f6:	461a      	mov	r2, r3
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 80004fc:	e013      	b.n	8000526 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	3b01      	subs	r3, #1
 8000502:	4a0b      	ldr	r2, [pc, #44]	@ (8000530 <LL_DMA_ConfigAddresses+0x70>)
 8000504:	5cd3      	ldrb	r3, [r2, r3]
 8000506:	461a      	mov	r2, r3
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	4413      	add	r3, r2
 800050c:	461a      	mov	r2, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	3b01      	subs	r3, #1
 8000516:	4a06      	ldr	r2, [pc, #24]	@ (8000530 <LL_DMA_ConfigAddresses+0x70>)
 8000518:	5cd3      	ldrb	r3, [r2, r3]
 800051a:	461a      	mov	r2, r3
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	4413      	add	r3, r2
 8000520:	461a      	mov	r2, r3
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	60d3      	str	r3, [r2, #12]
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	08006bd8 	.word	0x08006bd8

08000534 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f043 0201 	orr.w	r2, r3, #1
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	601a      	str	r2, [r3, #0]
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr

08000552 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8000552:	b480      	push	{r7}
 8000554:	b083      	sub	sp, #12
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f023 0201 	bic.w	r2, r3, #1
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	601a      	str	r2, [r3, #0]
}
 8000566:	bf00      	nop
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr

08000570 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	6a1a      	ldr	r2, [r3, #32]
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	431a      	orrs	r2, r3
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	621a      	str	r2, [r3, #32]
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6a1a      	ldr	r2, [r3, #32]
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	43db      	mvns	r3, r3
 80005a2:	401a      	ands	r2, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	621a      	str	r2, [r3, #32]
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr

080005b2 <LL_TIM_EnableDMAReq_CC1>:
  * @rmtoll DIER         CC1DE         LL_TIM_EnableDMAReq_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_CC1(TIM_TypeDef *TIMx)
{
 80005b2:	b480      	push	{r7}
 80005b4:	b083      	sub	sp, #12
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	60da      	str	r2, [r3, #12]
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <LL_TIM_DisableDMAReq_CC1>:
  * @rmtoll DIER         CC1DE         LL_TIM_DisableDMAReq_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableDMAReq_CC1(TIM_TypeDef *TIMx)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	60da      	str	r2, [r3, #12]
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr
	...

080005f0 <addToPin>:

LedEntry LedList[NUM_PIXELS];
uint8_t numActiveLeds = 0;


void addToPin(uint8_t pin, RGB_t color) {
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	6039      	str	r1, [r7, #0]
 80005fa:	71fb      	strb	r3, [r7, #7]
    if (pin == 0 || pin > NUM_PIXELS || numActiveLeds >= NUM_PIXELS) {
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d034      	beq.n	800066c <addToPin+0x7c>
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	2b78      	cmp	r3, #120	@ 0x78
 8000606:	d831      	bhi.n	800066c <addToPin+0x7c>
 8000608:	4b1b      	ldr	r3, [pc, #108]	@ (8000678 <addToPin+0x88>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b77      	cmp	r3, #119	@ 0x77
 800060e:	d82d      	bhi.n	800066c <addToPin+0x7c>
        return;
    }

    // Update if pin already exists
    for (uint8_t i = 0; i < numActiveLeds; i++) {
 8000610:	2300      	movs	r3, #0
 8000612:	73fb      	strb	r3, [r7, #15]
 8000614:	e010      	b.n	8000638 <addToPin+0x48>
        if (LedList[i].pin == pin) {
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	4a18      	ldr	r2, [pc, #96]	@ (800067c <addToPin+0x8c>)
 800061a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800061e:	79fa      	ldrb	r2, [r7, #7]
 8000620:	429a      	cmp	r2, r3
 8000622:	d106      	bne.n	8000632 <addToPin+0x42>
            LedList[i].color = color;
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	4a15      	ldr	r2, [pc, #84]	@ (800067c <addToPin+0x8c>)
 8000628:	00db      	lsls	r3, r3, #3
 800062a:	4413      	add	r3, r2
 800062c:	683a      	ldr	r2, [r7, #0]
 800062e:	605a      	str	r2, [r3, #4]
            return;
 8000630:	e01d      	b.n	800066e <addToPin+0x7e>
    for (uint8_t i = 0; i < numActiveLeds; i++) {
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	3301      	adds	r3, #1
 8000636:	73fb      	strb	r3, [r7, #15]
 8000638:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <addToPin+0x88>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	7bfa      	ldrb	r2, [r7, #15]
 800063e:	429a      	cmp	r2, r3
 8000640:	d3e9      	bcc.n	8000616 <addToPin+0x26>
        }
    }

    // Add new entry
    LedList[numActiveLeds].pin = pin;
 8000642:	4b0d      	ldr	r3, [pc, #52]	@ (8000678 <addToPin+0x88>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	4619      	mov	r1, r3
 8000648:	4a0c      	ldr	r2, [pc, #48]	@ (800067c <addToPin+0x8c>)
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	f802 3031 	strb.w	r3, [r2, r1, lsl #3]
    LedList[numActiveLeds].color = color;
 8000650:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <addToPin+0x88>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	4a09      	ldr	r2, [pc, #36]	@ (800067c <addToPin+0x8c>)
 8000656:	00db      	lsls	r3, r3, #3
 8000658:	4413      	add	r3, r2
 800065a:	683a      	ldr	r2, [r7, #0]
 800065c:	605a      	str	r2, [r3, #4]
    numActiveLeds++;
 800065e:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <addToPin+0x88>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	3301      	adds	r3, #1
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b04      	ldr	r3, [pc, #16]	@ (8000678 <addToPin+0x88>)
 8000668:	701a      	strb	r2, [r3, #0]
 800066a:	e000      	b.n	800066e <addToPin+0x7e>
        return;
 800066c:	bf00      	nop
}
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	20005318 	.word	0x20005318
 800067c:	20004f58 	.word	0x20004f58

08000680 <removeFromPin>:

void removeFromPin(uint8_t pin) {
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
//    for (uint8_t k = 0; k < numActiveLeds; k++) {
//        printf("  Index %d: Pin %d -> R:%d G:%d B:%d\n", k, LedList[k].pin,
//               LedList[k].color.color.r, LedList[k].color.color.g, LedList[k].color.color.b);
//    }

    for (uint8_t i = 0; i < numActiveLeds; i++) {
 800068a:	2300      	movs	r3, #0
 800068c:	73fb      	strb	r3, [r7, #15]
 800068e:	e034      	b.n	80006fa <removeFromPin+0x7a>
        if (LedList[i].pin == pin) {
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	4a1e      	ldr	r2, [pc, #120]	@ (800070c <removeFromPin+0x8c>)
 8000694:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000698:	79fa      	ldrb	r2, [r7, #7]
 800069a:	429a      	cmp	r2, r3
 800069c:	d12a      	bne.n	80006f4 <removeFromPin+0x74>
//            printf("Found pin %d at index %d, removing...\n", pin, i);
            for (uint8_t j = i; j < numActiveLeds - 1; j++) {
 800069e:	7bfb      	ldrb	r3, [r7, #15]
 80006a0:	73bb      	strb	r3, [r7, #14]
 80006a2:	e00f      	b.n	80006c4 <removeFromPin+0x44>
//                printf("Shifting index %d -> index %d (Pin %d)\n", j + 1, j, LedList[j + 1].pin);
                LedList[j] = LedList[j + 1];
 80006a4:	7bbb      	ldrb	r3, [r7, #14]
 80006a6:	1c5a      	adds	r2, r3, #1
 80006a8:	7bbb      	ldrb	r3, [r7, #14]
 80006aa:	4818      	ldr	r0, [pc, #96]	@ (800070c <removeFromPin+0x8c>)
 80006ac:	4917      	ldr	r1, [pc, #92]	@ (800070c <removeFromPin+0x8c>)
 80006ae:	00db      	lsls	r3, r3, #3
 80006b0:	4403      	add	r3, r0
 80006b2:	00d2      	lsls	r2, r2, #3
 80006b4:	440a      	add	r2, r1
 80006b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ba:	e883 0003 	stmia.w	r3, {r0, r1}
            for (uint8_t j = i; j < numActiveLeds - 1; j++) {
 80006be:	7bbb      	ldrb	r3, [r7, #14]
 80006c0:	3301      	adds	r3, #1
 80006c2:	73bb      	strb	r3, [r7, #14]
 80006c4:	7bba      	ldrb	r2, [r7, #14]
 80006c6:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <removeFromPin+0x90>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	3b01      	subs	r3, #1
 80006cc:	429a      	cmp	r2, r3
 80006ce:	dbe9      	blt.n	80006a4 <removeFromPin+0x24>
            }
            numActiveLeds--;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <removeFromPin+0x90>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	3b01      	subs	r3, #1
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000710 <removeFromPin+0x90>)
 80006da:	701a      	strb	r2, [r3, #0]
//            printf("LED removed. Updated LED list:\n");
            for (uint8_t k = 0; k < numActiveLeds; k++) {
 80006dc:	2300      	movs	r3, #0
 80006de:	737b      	strb	r3, [r7, #13]
 80006e0:	e002      	b.n	80006e8 <removeFromPin+0x68>
 80006e2:	7b7b      	ldrb	r3, [r7, #13]
 80006e4:	3301      	adds	r3, #1
 80006e6:	737b      	strb	r3, [r7, #13]
 80006e8:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <removeFromPin+0x90>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	7b7a      	ldrb	r2, [r7, #13]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d3f7      	bcc.n	80006e2 <removeFromPin+0x62>
//                printf("  Index %d: Pin %d -> R:%d G:%d B:%d\n", k, LedList[k].pin,
//                       LedList[k].color.color.r, LedList[k].color.color.g, LedList[k].color.color.b);
            }
//            printf("Remaining active LEDs: %d\n", numActiveLeds);
            return;
 80006f2:	e007      	b.n	8000704 <removeFromPin+0x84>
    for (uint8_t i = 0; i < numActiveLeds; i++) {
 80006f4:	7bfb      	ldrb	r3, [r7, #15]
 80006f6:	3301      	adds	r3, #1
 80006f8:	73fb      	strb	r3, [r7, #15]
 80006fa:	4b05      	ldr	r3, [pc, #20]	@ (8000710 <removeFromPin+0x90>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	7bfa      	ldrb	r2, [r7, #15]
 8000700:	429a      	cmp	r2, r3
 8000702:	d3c5      	bcc.n	8000690 <removeFromPin+0x10>
        }
    }
//    printf("Pin %d not found in active list. No changes made.\n", pin);
}
 8000704:	3714      	adds	r7, #20
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	20004f58 	.word	0x20004f58
 8000710:	20005318 	.word	0x20005318

08000714 <clearLeds>:




void clearLeds(void) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
	numActiveLeds = 0;
 800071a:	4b15      	ldr	r3, [pc, #84]	@ (8000770 <clearLeds+0x5c>)
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]
    uint32_t *pBuff = dmaBuffer;
 8000720:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <clearLeds+0x60>)
 8000722:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < NUM_PIXELS * 24; i++) {
 8000724:	2300      	movs	r3, #0
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	e007      	b.n	800073a <clearLeds+0x26>
        *pBuff++ = NEOPIXEL_ZERO;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	1d1a      	adds	r2, r3, #4
 800072e:	607a      	str	r2, [r7, #4]
 8000730:	221d      	movs	r2, #29
 8000732:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < NUM_PIXELS * 24; i++) {
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	3301      	adds	r3, #1
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	f5b3 6f34 	cmp.w	r3, #2880	@ 0xb40
 8000740:	dbf3      	blt.n	800072a <clearLeds+0x16>
    }

    dmaBuffer[DMA_BUFF_SIZE - 1] = 0;
 8000742:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <clearLeds+0x60>)
 8000744:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000748:	461a      	mov	r2, r3
 800074a:	2300      	movs	r3, #0
 800074c:	f8c2 3d00 	str.w	r3, [r2, #3328]	@ 0xd00

    PWM_Start_DMA(TIM2, LL_TIM_CHANNEL_CH1, dmaBuffer, DMA_BUFF_SIZE);
 8000750:	f640 3341 	movw	r3, #2881	@ 0xb41
 8000754:	4a07      	ldr	r2, [pc, #28]	@ (8000774 <clearLeds+0x60>)
 8000756:	2101      	movs	r1, #1
 8000758:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800075c:	f000 f8b6 	bl	80008cc <PWM_Start_DMA>
    LL_mDelay(10);
 8000760:	200a      	movs	r0, #10
 8000762:	f003 fdc3 	bl	80042ec <LL_mDelay>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20005318 	.word	0x20005318
 8000774:	20002254 	.word	0x20002254

08000778 <sendPixelData>:

void sendPixelData() {
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0
    LL_mDelay(10);
 800077e:	200a      	movs	r0, #10
 8000780:	f003 fdb4 	bl	80042ec <LL_mDelay>
    if (numActiveLeds == 0) {
 8000784:	4b4d      	ldr	r3, [pc, #308]	@ (80008bc <sendPixelData+0x144>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d102      	bne.n	8000792 <sendPixelData+0x1a>
        clearLeds();
 800078c:	f7ff ffc2 	bl	8000714 <clearLeds>
        return;
 8000790:	e091      	b.n	80008b6 <sendPixelData+0x13e>
    }

//     Reset pixel buffer
    for (int i = 0; i < NUM_PIXELS; i++) {
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
 8000796:	e007      	b.n	80007a8 <sendPixelData+0x30>
        pixel[i].data = 0;
 8000798:	4a49      	ldr	r2, [pc, #292]	@ (80008c0 <sendPixelData+0x148>)
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	2100      	movs	r1, #0
 800079e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < NUM_PIXELS; i++) {
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	3301      	adds	r3, #1
 80007a6:	61fb      	str	r3, [r7, #28]
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	2b77      	cmp	r3, #119	@ 0x77
 80007ac:	ddf4      	ble.n	8000798 <sendPixelData+0x20>
    }

    // Copy assigned LED colors
    // Copy assigned LED colors
    for (uint8_t i = 0; i < numActiveLeds; i++) {
 80007ae:	2300      	movs	r3, #0
 80007b0:	76fb      	strb	r3, [r7, #27]
 80007b2:	e041      	b.n	8000838 <sendPixelData+0xc0>
        uint8_t pin = LedList[i].pin;
 80007b4:	7efb      	ldrb	r3, [r7, #27]
 80007b6:	4a43      	ldr	r2, [pc, #268]	@ (80008c4 <sendPixelData+0x14c>)
 80007b8:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80007bc:	71fb      	strb	r3, [r7, #7]
        if (pin > 0 && pin <= NUM_PIXELS) {
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d036      	beq.n	8000832 <sendPixelData+0xba>
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	2b78      	cmp	r3, #120	@ 0x78
 80007c8:	d833      	bhi.n	8000832 <sendPixelData+0xba>
            pixel[pin - 1] = LedList[i].color;
 80007ca:	7efb      	ldrb	r3, [r7, #27]
 80007cc:	79fa      	ldrb	r2, [r7, #7]
 80007ce:	3a01      	subs	r2, #1
 80007d0:	493b      	ldr	r1, [pc, #236]	@ (80008c0 <sendPixelData+0x148>)
 80007d2:	483c      	ldr	r0, [pc, #240]	@ (80008c4 <sendPixelData+0x14c>)
 80007d4:	00db      	lsls	r3, r3, #3
 80007d6:	4403      	add	r3, r0
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
            pixel[pin - 1].color.r >>= 2;
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	3b01      	subs	r3, #1
 80007e2:	4a37      	ldr	r2, [pc, #220]	@ (80008c0 <sendPixelData+0x148>)
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	4413      	add	r3, r2
 80007e8:	785a      	ldrb	r2, [r3, #1]
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	3b01      	subs	r3, #1
 80007ee:	0892      	lsrs	r2, r2, #2
 80007f0:	b2d1      	uxtb	r1, r2
 80007f2:	4a33      	ldr	r2, [pc, #204]	@ (80008c0 <sendPixelData+0x148>)
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	4413      	add	r3, r2
 80007f8:	460a      	mov	r2, r1
 80007fa:	705a      	strb	r2, [r3, #1]
            pixel[pin - 1].color.g >>= 2;
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	3b01      	subs	r3, #1
 8000800:	4a2f      	ldr	r2, [pc, #188]	@ (80008c0 <sendPixelData+0x148>)
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	4413      	add	r3, r2
 8000806:	789a      	ldrb	r2, [r3, #2]
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	3b01      	subs	r3, #1
 800080c:	0892      	lsrs	r2, r2, #2
 800080e:	b2d1      	uxtb	r1, r2
 8000810:	4a2b      	ldr	r2, [pc, #172]	@ (80008c0 <sendPixelData+0x148>)
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	4413      	add	r3, r2
 8000816:	460a      	mov	r2, r1
 8000818:	709a      	strb	r2, [r3, #2]
            pixel[pin - 1].color.b >>= 2;
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	3b01      	subs	r3, #1
 800081e:	4a28      	ldr	r2, [pc, #160]	@ (80008c0 <sendPixelData+0x148>)
 8000820:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	3b01      	subs	r3, #1
 8000828:	0892      	lsrs	r2, r2, #2
 800082a:	b2d1      	uxtb	r1, r2
 800082c:	4a24      	ldr	r2, [pc, #144]	@ (80008c0 <sendPixelData+0x148>)
 800082e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    for (uint8_t i = 0; i < numActiveLeds; i++) {
 8000832:	7efb      	ldrb	r3, [r7, #27]
 8000834:	3301      	adds	r3, #1
 8000836:	76fb      	strb	r3, [r7, #27]
 8000838:	4b20      	ldr	r3, [pc, #128]	@ (80008bc <sendPixelData+0x144>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	7efa      	ldrb	r2, [r7, #27]
 800083e:	429a      	cmp	r2, r3
 8000840:	d3b8      	bcc.n	80007b4 <sendPixelData+0x3c>
    }



    // Transfer pixel data into DMA buffer
    uint32_t *pBuff = dmaBuffer;
 8000842:	4b21      	ldr	r3, [pc, #132]	@ (80008c8 <sendPixelData+0x150>)
 8000844:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < NUM_PIXELS; i++) {
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	e01f      	b.n	800088c <sendPixelData+0x114>
//				printf("%d", bit);
//			}
//			printf("\n");
//		}

        for (int j = 23; j >= 0; j--) {
 800084c:	2317      	movs	r3, #23
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	e016      	b.n	8000880 <sendPixelData+0x108>
        	uint32_t bit = (pixel[i].data >> j) & 0x01 ? NEOPIXEL_ONE : NEOPIXEL_ZERO;
 8000852:	4a1b      	ldr	r2, [pc, #108]	@ (80008c0 <sendPixelData+0x148>)
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	fa22 f303 	lsr.w	r3, r2, r3
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <sendPixelData+0xf4>
 8000868:	233a      	movs	r3, #58	@ 0x3a
 800086a:	e000      	b.n	800086e <sendPixelData+0xf6>
 800086c:	231d      	movs	r3, #29
 800086e:	60bb      	str	r3, [r7, #8]

        	*pBuff++ = bit;
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	1d1a      	adds	r2, r3, #4
 8000874:	617a      	str	r2, [r7, #20]
 8000876:	68ba      	ldr	r2, [r7, #8]
 8000878:	601a      	str	r2, [r3, #0]
        for (int j = 23; j >= 0; j--) {
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	3b01      	subs	r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	2b00      	cmp	r3, #0
 8000884:	dae5      	bge.n	8000852 <sendPixelData+0xda>
    for (int i = 0; i < NUM_PIXELS; i++) {
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	3301      	adds	r3, #1
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	2b77      	cmp	r3, #119	@ 0x77
 8000890:	dddc      	ble.n	800084c <sendPixelData+0xd4>
//        	dmaBuffer[i * 24 + j] = bit;
        }
    }

    dmaBuffer[DMA_BUFF_SIZE - 1] = 0;
 8000892:	4b0d      	ldr	r3, [pc, #52]	@ (80008c8 <sendPixelData+0x150>)
 8000894:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000898:	461a      	mov	r2, r3
 800089a:	2300      	movs	r3, #0
 800089c:	f8c2 3d00 	str.w	r3, [r2, #3328]	@ 0xd00
  	PWM_Start_DMA(TIM2, LL_TIM_CHANNEL_CH1, dmaBuffer, DMA_BUFF_SIZE);
 80008a0:	f640 3341 	movw	r3, #2881	@ 0xb41
 80008a4:	4a08      	ldr	r2, [pc, #32]	@ (80008c8 <sendPixelData+0x150>)
 80008a6:	2101      	movs	r1, #1
 80008a8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80008ac:	f000 f80e 	bl	80008cc <PWM_Start_DMA>

    LL_mDelay(10);
 80008b0:	200a      	movs	r0, #10
 80008b2:	f003 fd1b 	bl	80042ec <LL_mDelay>
}
 80008b6:	3720      	adds	r7, #32
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20005318 	.word	0x20005318
 80008c0:	20002074 	.word	0x20002074
 80008c4:	20004f58 	.word	0x20004f58
 80008c8:	20002254 	.word	0x20002254

080008cc <PWM_Start_DMA>:




void PWM_Start_DMA(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t *buffer, uint32_t size)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af02      	add	r7, sp, #8
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
 80008d8:	603b      	str	r3, [r7, #0]
    // 1. Configure DMA source and destination
    LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_5,
 80008da:	687a      	ldr	r2, [r7, #4]
                           (uint32_t)buffer,                      // Memory Address (source)
                           (uint32_t)&TIMx->CCR1,                 // Peripheral Address (destination)
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	3334      	adds	r3, #52	@ 0x34
    LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_5,
 80008e0:	4619      	mov	r1, r3
 80008e2:	2310      	movs	r3, #16
 80008e4:	9300      	str	r3, [sp, #0]
 80008e6:	460b      	mov	r3, r1
 80008e8:	2105      	movs	r1, #5
 80008ea:	480d      	ldr	r0, [pc, #52]	@ (8000920 <PWM_Start_DMA+0x54>)
 80008ec:	f7ff fde8 	bl	80004c0 <LL_DMA_ConfigAddresses>
                           LL_DMA_DIRECTION_MEMORY_TO_PERIPH);    // Memory-to-Peripheral

    // 2. Set number of data items
    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_5, size);
 80008f0:	683a      	ldr	r2, [r7, #0]
 80008f2:	2105      	movs	r1, #5
 80008f4:	480a      	ldr	r0, [pc, #40]	@ (8000920 <PWM_Start_DMA+0x54>)
 80008f6:	f7ff fdc1 	bl	800047c <LL_DMA_SetDataLength>

    // 4. Enable DMA Stream
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_5);
 80008fa:	2105      	movs	r1, #5
 80008fc:	4808      	ldr	r0, [pc, #32]	@ (8000920 <PWM_Start_DMA+0x54>)
 80008fe:	f7ff fd81 	bl	8000404 <LL_DMA_EnableChannel>

    // 5. Enable TIM2 DMA request for CC1
    LL_TIM_EnableDMAReq_CC1(TIMx);
 8000902:	68f8      	ldr	r0, [r7, #12]
 8000904:	f7ff fe55 	bl	80005b2 <LL_TIM_EnableDMAReq_CC1>

    // 6. Enable TIM2 Channel 1 (PWM mode must already be configured)
    LL_TIM_CC_EnableChannel(TIMx, Channel);
 8000908:	68b9      	ldr	r1, [r7, #8]
 800090a:	68f8      	ldr	r0, [r7, #12]
 800090c:	f7ff fe30 	bl	8000570 <LL_TIM_CC_EnableChannel>

    // 7. Start Timer
    LL_TIM_EnableCounter(TIMx);
 8000910:	68f8      	ldr	r0, [r7, #12]
 8000912:	f7ff fe0f 	bl	8000534 <LL_TIM_EnableCounter>
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40020000 	.word	0x40020000

08000924 <LL_TIM_PWM_PulseFinishedCallback>:

void LL_TIM_PWM_PulseFinishedCallback(TIM_TypeDef *TIMx)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	LL_TIM_DisableDMAReq_CC1(TIMx);
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff fe4f 	bl	80005d0 <LL_TIM_DisableDMAReq_CC1>
	LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_5);
 8000932:	2105      	movs	r1, #5
 8000934:	4806      	ldr	r0, [pc, #24]	@ (8000950 <LL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8000936:	f7ff fd83 	bl	8000440 <LL_DMA_DisableChannel>

	LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH1);
 800093a:	2101      	movs	r1, #1
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f7ff fe27 	bl	8000590 <LL_TIM_CC_DisableChannel>
	LL_TIM_DisableCounter(TIMx);
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff fe05 	bl	8000552 <LL_TIM_DisableCounter>
}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40020000 	.word	0x40020000

08000954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	f003 0307 	and.w	r3, r3, #7
 8000962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000964:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <__NVIC_SetPriorityGrouping+0x44>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800096a:	68ba      	ldr	r2, [r7, #8]
 800096c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000970:	4013      	ands	r3, r2
 8000972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800097c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000980:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000986:	4a04      	ldr	r2, [pc, #16]	@ (8000998 <__NVIC_SetPriorityGrouping+0x44>)
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	60d3      	str	r3, [r2, #12]
}
 800098c:	bf00      	nop
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a0:	4b04      	ldr	r3, [pc, #16]	@ (80009b4 <__NVIC_GetPriorityGrouping+0x18>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	0a1b      	lsrs	r3, r3, #8
 80009a6:	f003 0307 	and.w	r3, r3, #7
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	db0b      	blt.n	80009e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	f003 021f 	and.w	r2, r3, #31
 80009d0:	4906      	ldr	r1, [pc, #24]	@ (80009ec <__NVIC_EnableIRQ+0x34>)
 80009d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d6:	095b      	lsrs	r3, r3, #5
 80009d8:	2001      	movs	r0, #1
 80009da:	fa00 f202 	lsl.w	r2, r0, r2
 80009de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr
 80009ec:	e000e100 	.word	0xe000e100

080009f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	6039      	str	r1, [r7, #0]
 80009fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	db0a      	blt.n	8000a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	490c      	ldr	r1, [pc, #48]	@ (8000a3c <__NVIC_SetPriority+0x4c>)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	0112      	lsls	r2, r2, #4
 8000a10:	b2d2      	uxtb	r2, r2
 8000a12:	440b      	add	r3, r1
 8000a14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a18:	e00a      	b.n	8000a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4908      	ldr	r1, [pc, #32]	@ (8000a40 <__NVIC_SetPriority+0x50>)
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	f003 030f 	and.w	r3, r3, #15
 8000a26:	3b04      	subs	r3, #4
 8000a28:	0112      	lsls	r2, r2, #4
 8000a2a:	b2d2      	uxtb	r2, r2
 8000a2c:	440b      	add	r3, r1
 8000a2e:	761a      	strb	r2, [r3, #24]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000e100 	.word	0xe000e100
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b089      	sub	sp, #36	@ 0x24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	f1c3 0307 	rsb	r3, r3, #7
 8000a5e:	2b04      	cmp	r3, #4
 8000a60:	bf28      	it	cs
 8000a62:	2304      	movcs	r3, #4
 8000a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3304      	adds	r3, #4
 8000a6a:	2b06      	cmp	r3, #6
 8000a6c:	d902      	bls.n	8000a74 <NVIC_EncodePriority+0x30>
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3b03      	subs	r3, #3
 8000a72:	e000      	b.n	8000a76 <NVIC_EncodePriority+0x32>
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a78:	f04f 32ff 	mov.w	r2, #4294967295
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	43da      	mvns	r2, r3
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	401a      	ands	r2, r3
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	fa01 f303 	lsl.w	r3, r1, r3
 8000a96:	43d9      	mvns	r1, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	4313      	orrs	r3, r2
         );
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3724      	adds	r7, #36	@ 0x24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr

08000aa8 <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b089      	sub	sp, #36	@ 0x24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	332c      	adds	r3, #44	@ 0x2c
 8000ab8:	4619      	mov	r1, r3
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8000ac0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000ac4:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ac6:	69ba      	ldr	r2, [r7, #24]
 8000ac8:	fa92 f2a2 	rbit	r2, r2
 8000acc:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ace:	697a      	ldr	r2, [r7, #20]
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	b2d2      	uxtb	r2, r2
 8000ad6:	40d3      	lsrs	r3, r2
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	440b      	add	r3, r1
 8000adc:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	f003 031f 	and.w	r3, r3, #31
 8000ae8:	211f      	movs	r1, #31
 8000aea:	fa01 f303 	lsl.w	r3, r1, r3
 8000aee:	43db      	mvns	r3, r3
 8000af0:	401a      	ands	r2, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f003 011f 	and.w	r1, r3, #31
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	f003 031f 	and.w	r3, r3, #31
 8000afe:	fa01 f303 	lsl.w	r3, r1, r3
 8000b02:	431a      	orrs	r2, r3
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000b08:	bf00      	nop
 8000b0a:	3724      	adds	r7, #36	@ 0x24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr

08000b12 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b08d      	sub	sp, #52	@ 0x34
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	60f8      	str	r0, [r7, #12]
 8000b1a:	60b9      	str	r1, [r7, #8]
 8000b1c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	330c      	adds	r3, #12
 8000b22:	4619      	mov	r1, r3
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b2a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b30:	69ba      	ldr	r2, [r7, #24]
 8000b32:	fa92 f2a2 	rbit	r2, r2
 8000b36:	617a      	str	r2, [r7, #20]
  return result;
 8000b38:	697a      	ldr	r2, [r7, #20]
 8000b3a:	fab2 f282 	clz	r2, r2
 8000b3e:	b2d2      	uxtb	r2, r2
 8000b40:	40d3      	lsrs	r3, r2
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	440b      	add	r3, r1
 8000b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  MODIFY_REG(*preg,
 8000b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8000b52:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8000b56:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b58:	6a39      	ldr	r1, [r7, #32]
 8000b5a:	fa91 f1a1 	rbit	r1, r1
 8000b5e:	61f9      	str	r1, [r7, #28]
  return result;
 8000b60:	69f9      	ldr	r1, [r7, #28]
 8000b62:	fab1 f181 	clz	r1, r1
 8000b66:	b2c9      	uxtb	r1, r1
 8000b68:	40cb      	lsrs	r3, r1
 8000b6a:	2107      	movs	r1, #7
 8000b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b70:	43db      	mvns	r3, r3
 8000b72:	401a      	ands	r2, r3
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8000b7a:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8000b7e:	62b9      	str	r1, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000b82:	fa91 f1a1 	rbit	r1, r1
 8000b86:	6279      	str	r1, [r7, #36]	@ 0x24
  return result;
 8000b88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000b8a:	fab1 f181 	clz	r1, r1
 8000b8e:	b2c9      	uxtb	r1, r1
 8000b90:	40cb      	lsrs	r3, r1
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	fa01 f303 	lsl.w	r3, r1, r3
 8000b98:	431a      	orrs	r2, r3
 8000b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b9c:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8000b9e:	bf00      	nop
 8000ba0:	3734      	adds	r7, #52	@ 0x34
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr

08000ba8 <LL_DMA_SetDataTransferDirection>:
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	4a0c      	ldr	r2, [pc, #48]	@ (8000bec <LL_DMA_SetDataTransferDirection+0x44>)
 8000bba:	5cd3      	ldrb	r3, [r2, r3]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000bc8:	f023 0310 	bic.w	r3, r3, #16
 8000bcc:	68ba      	ldr	r2, [r7, #8]
 8000bce:	3a01      	subs	r2, #1
 8000bd0:	4906      	ldr	r1, [pc, #24]	@ (8000bec <LL_DMA_SetDataTransferDirection+0x44>)
 8000bd2:	5c8a      	ldrb	r2, [r1, r2]
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	440a      	add	r2, r1
 8000bda:	4611      	mov	r1, r2
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	600b      	str	r3, [r1, #0]
}
 8000be2:	bf00      	nop
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr
 8000bec:	08006be0 	.word	0x08006be0

08000bf0 <LL_DMA_SetMode>:
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	4a0b      	ldr	r2, [pc, #44]	@ (8000c30 <LL_DMA_SetMode+0x40>)
 8000c02:	5cd3      	ldrb	r3, [r2, r3]
 8000c04:	461a      	mov	r2, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	4413      	add	r3, r2
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f023 0220 	bic.w	r2, r3, #32
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	4906      	ldr	r1, [pc, #24]	@ (8000c30 <LL_DMA_SetMode+0x40>)
 8000c16:	5ccb      	ldrb	r3, [r1, r3]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	440b      	add	r3, r1
 8000c1e:	4619      	mov	r1, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	600b      	str	r3, [r1, #0]
}
 8000c26:	bf00      	nop
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	08006be0 	.word	0x08006be0

08000c34 <LL_DMA_SetPeriphIncMode>:
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	4a0b      	ldr	r2, [pc, #44]	@ (8000c74 <LL_DMA_SetPeriphIncMode+0x40>)
 8000c46:	5cd3      	ldrb	r3, [r2, r3]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	4906      	ldr	r1, [pc, #24]	@ (8000c74 <LL_DMA_SetPeriphIncMode+0x40>)
 8000c5a:	5ccb      	ldrb	r3, [r1, r3]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	440b      	add	r3, r1
 8000c62:	4619      	mov	r1, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	600b      	str	r3, [r1, #0]
}
 8000c6a:	bf00      	nop
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr
 8000c74:	08006be0 	.word	0x08006be0

08000c78 <LL_DMA_SetMemoryIncMode>:
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb8 <LL_DMA_SetMemoryIncMode+0x40>)
 8000c8a:	5cd3      	ldrb	r3, [r2, r3]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	4413      	add	r3, r2
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	4906      	ldr	r1, [pc, #24]	@ (8000cb8 <LL_DMA_SetMemoryIncMode+0x40>)
 8000c9e:	5ccb      	ldrb	r3, [r1, r3]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	440b      	add	r3, r1
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	600b      	str	r3, [r1, #0]
}
 8000cae:	bf00      	nop
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr
 8000cb8:	08006be0 	.word	0x08006be0

08000cbc <LL_DMA_SetPeriphSize>:
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	4a0b      	ldr	r2, [pc, #44]	@ (8000cfc <LL_DMA_SetPeriphSize+0x40>)
 8000cce:	5cd3      	ldrb	r3, [r2, r3]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	4906      	ldr	r1, [pc, #24]	@ (8000cfc <LL_DMA_SetPeriphSize+0x40>)
 8000ce2:	5ccb      	ldrb	r3, [r1, r3]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	440b      	add	r3, r1
 8000cea:	4619      	mov	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	600b      	str	r3, [r1, #0]
}
 8000cf2:	bf00      	nop
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr
 8000cfc:	08006be0 	.word	0x08006be0

08000d00 <LL_DMA_SetMemorySize>:
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	4a0b      	ldr	r2, [pc, #44]	@ (8000d40 <LL_DMA_SetMemorySize+0x40>)
 8000d12:	5cd3      	ldrb	r3, [r2, r3]
 8000d14:	461a      	mov	r2, r3
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	4413      	add	r3, r2
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	4906      	ldr	r1, [pc, #24]	@ (8000d40 <LL_DMA_SetMemorySize+0x40>)
 8000d26:	5ccb      	ldrb	r3, [r1, r3]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	440b      	add	r3, r1
 8000d2e:	4619      	mov	r1, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	600b      	str	r3, [r1, #0]
}
 8000d36:	bf00      	nop
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr
 8000d40:	08006be0 	.word	0x08006be0

08000d44 <LL_DMA_SetChannelPriorityLevel>:
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	4a0b      	ldr	r2, [pc, #44]	@ (8000d84 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000d56:	5cd3      	ldrb	r3, [r2, r3]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	4906      	ldr	r1, [pc, #24]	@ (8000d84 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000d6a:	5ccb      	ldrb	r3, [r1, r3]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	440b      	add	r3, r1
 8000d72:	4619      	mov	r1, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	600b      	str	r3, [r1, #0]
}
 8000d7a:	bf00      	nop
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	08006be0 	.word	0x08006be0

08000d88 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	3b01      	subs	r3, #1
 8000d96:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc0 <LL_DMA_EnableIT_TC+0x38>)
 8000d98:	5cd3      	ldrb	r3, [r2, r3]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4413      	add	r3, r2
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	683a      	ldr	r2, [r7, #0]
 8000da4:	3a01      	subs	r2, #1
 8000da6:	4906      	ldr	r1, [pc, #24]	@ (8000dc0 <LL_DMA_EnableIT_TC+0x38>)
 8000da8:	5c8a      	ldrb	r2, [r1, r2]
 8000daa:	4611      	mov	r1, r2
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	440a      	add	r2, r1
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	6013      	str	r3, [r2, #0]
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	08006be0 	.word	0x08006be0

08000dc4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000dc8:	4b04      	ldr	r3, [pc, #16]	@ (8000ddc <LL_RCC_HSE_Enable+0x18>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a03      	ldr	r2, [pc, #12]	@ (8000ddc <LL_RCC_HSE_Enable+0x18>)
 8000dce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	40021000 	.word	0x40021000

08000de0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000de4:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <LL_RCC_HSE_IsReady+0x20>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000df0:	bf0c      	ite	eq
 8000df2:	2301      	moveq	r3, #1
 8000df4:	2300      	movne	r3, #0
 8000df6:	b2db      	uxtb	r3, r3
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr
 8000e00:	40021000 	.word	0x40021000

08000e04 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000e0c:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <LL_RCC_SetSysClkSource+0x24>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f023 0203 	bic.w	r2, r3, #3
 8000e14:	4904      	ldr	r1, [pc, #16]	@ (8000e28 <LL_RCC_SetSysClkSource+0x24>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	604b      	str	r3, [r1, #4]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	40021000 	.word	0x40021000

08000e2c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000e30:	4b03      	ldr	r3, [pc, #12]	@ (8000e40 <LL_RCC_GetSysClkSource+0x14>)
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 030c 	and.w	r3, r3, #12
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	40021000 	.word	0x40021000

08000e44 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000e4c:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <LL_RCC_SetAHBPrescaler+0x24>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e54:	4904      	ldr	r1, [pc, #16]	@ (8000e68 <LL_RCC_SetAHBPrescaler+0x24>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	604b      	str	r3, [r1, #4]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000

08000e6c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000e74:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000e7c:	4904      	ldr	r1, [pc, #16]	@ (8000e90 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	604b      	str	r3, [r1, #4]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bc80      	pop	{r7}
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40021000 	.word	0x40021000

08000e94 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000ea4:	4904      	ldr	r1, [pc, #16]	@ (8000eb8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	604b      	str	r3, [r1, #4]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	40021000 	.word	0x40021000

08000ebc <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8000ec4:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <LL_RCC_SetADCClockSource+0x24>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000ecc:	4904      	ldr	r1, [pc, #16]	@ (8000ee0 <LL_RCC_SetADCClockSource+0x24>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	604b      	str	r3, [r1, #4]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000ee8:	4b04      	ldr	r3, [pc, #16]	@ (8000efc <LL_RCC_PLL_Enable+0x18>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a03      	ldr	r2, [pc, #12]	@ (8000efc <LL_RCC_PLL_Enable+0x18>)
 8000eee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ef2:	6013      	str	r3, [r2, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr
 8000efc:	40021000 	.word	0x40021000

08000f00 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000f04:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <LL_RCC_PLL_IsReady+0x20>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000f10:	bf0c      	ite	eq
 8000f12:	2301      	moveq	r3, #1
 8000f14:	2300      	movne	r3, #0
 8000f16:	b2db      	uxtb	r3, r3
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	40021000 	.word	0x40021000

08000f24 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8000f2e:	4b11      	ldr	r3, [pc, #68]	@ (8000f74 <LL_RCC_PLL_ConfigDomain_SYS+0x50>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	430b      	orrs	r3, r1
 8000f40:	490c      	ldr	r1, [pc, #48]	@ (8000f74 <LL_RCC_PLL_ConfigDomain_SYS+0x50>)
 8000f42:	4313      	orrs	r3, r2
 8000f44:	604b      	str	r3, [r1, #4]
             (Source & (RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE)) | PLLMul);
#if defined(RCC_CFGR2_PREDIV1)
#if defined(RCC_CFGR2_PREDIV1SRC)
  MODIFY_REG(RCC->CFGR2, (RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC),
 8000f46:	4b0b      	ldr	r3, [pc, #44]	@ (8000f74 <LL_RCC_PLL_ConfigDomain_SYS+0x50>)
 8000f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f4e:	f023 030f 	bic.w	r3, r3, #15
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	f002 010f 	and.w	r1, r2, #15
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	0912      	lsrs	r2, r2, #4
 8000f5c:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8000f60:	430a      	orrs	r2, r1
 8000f62:	4904      	ldr	r1, [pc, #16]	@ (8000f74 <LL_RCC_PLL_ConfigDomain_SYS+0x50>)
 8000f64:	4313      	orrs	r3, r2
 8000f66:	62cb      	str	r3, [r1, #44]	@ 0x2c
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40021000 	.word	0x40021000

08000f78 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000f80:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f82:	695a      	ldr	r2, [r3, #20]
 8000f84:	4907      	ldr	r1, [pc, #28]	@ (8000fa4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000f8c:	4b05      	ldr	r3, [pc, #20]	@ (8000fa4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f8e:	695a      	ldr	r2, [r3, #20]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4013      	ands	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f96:	68fb      	ldr	r3, [r7, #12]
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40021000 	.word	0x40021000

08000fa8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000fb0:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fb2:	69da      	ldr	r2, [r3, #28]
 8000fb4:	4907      	ldr	r1, [pc, #28]	@ (8000fd4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000fbc:	4b05      	ldr	r3, [pc, #20]	@ (8000fd4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fbe:	69da      	ldr	r2, [r3, #28]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000fe0:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000fe2:	699a      	ldr	r2, [r3, #24]
 8000fe4:	4907      	ldr	r1, [pc, #28]	@ (8001004 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000fec:	4b05      	ldr	r3, [pc, #20]	@ (8001004 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000fee:	699a      	ldr	r2, [r3, #24]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40021000 	.word	0x40021000

08001008 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001010:	4b06      	ldr	r3, [pc, #24]	@ (800102c <LL_FLASH_SetLatency+0x24>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f023 0207 	bic.w	r2, r3, #7
 8001018:	4904      	ldr	r1, [pc, #16]	@ (800102c <LL_FLASH_SetLatency+0x24>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4313      	orrs	r3, r2
 800101e:	600b      	str	r3, [r1, #0]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40022000 	.word	0x40022000

08001030 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001034:	4b03      	ldr	r3, [pc, #12]	@ (8001044 <LL_FLASH_GetLatency+0x14>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0307 	and.w	r3, r3, #7
}
 800103c:	4618      	mov	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr
 8001044:	40022000 	.word	0x40022000

08001048 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001050:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <LL_EXTI_EnableIT_0_31+0x20>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4904      	ldr	r1, [pc, #16]	@ (8001068 <LL_EXTI_EnableIT_0_31+0x20>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4313      	orrs	r3, r2
 800105a:	600b      	str	r3, [r1, #0]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40010400 	.word	0x40010400

0800106c <LL_TIM_DisableARRPreload>:
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	601a      	str	r2, [r3, #0]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr
	...

0800108c <LL_TIM_OC_DisableFast>:
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d01c      	beq.n	80010d6 <LL_TIM_OC_DisableFast+0x4a>
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	2b04      	cmp	r3, #4
 80010a0:	d017      	beq.n	80010d2 <LL_TIM_OC_DisableFast+0x46>
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	2b10      	cmp	r3, #16
 80010a6:	d012      	beq.n	80010ce <LL_TIM_OC_DisableFast+0x42>
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	2b40      	cmp	r3, #64	@ 0x40
 80010ac:	d00d      	beq.n	80010ca <LL_TIM_OC_DisableFast+0x3e>
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010b4:	d007      	beq.n	80010c6 <LL_TIM_OC_DisableFast+0x3a>
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010bc:	d101      	bne.n	80010c2 <LL_TIM_OC_DisableFast+0x36>
 80010be:	2305      	movs	r3, #5
 80010c0:	e00a      	b.n	80010d8 <LL_TIM_OC_DisableFast+0x4c>
 80010c2:	2306      	movs	r3, #6
 80010c4:	e008      	b.n	80010d8 <LL_TIM_OC_DisableFast+0x4c>
 80010c6:	2304      	movs	r3, #4
 80010c8:	e006      	b.n	80010d8 <LL_TIM_OC_DisableFast+0x4c>
 80010ca:	2303      	movs	r3, #3
 80010cc:	e004      	b.n	80010d8 <LL_TIM_OC_DisableFast+0x4c>
 80010ce:	2302      	movs	r3, #2
 80010d0:	e002      	b.n	80010d8 <LL_TIM_OC_DisableFast+0x4c>
 80010d2:	2301      	movs	r3, #1
 80010d4:	e000      	b.n	80010d8 <LL_TIM_OC_DisableFast+0x4c>
 80010d6:	2300      	movs	r3, #0
 80010d8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	3318      	adds	r3, #24
 80010de:	4619      	mov	r1, r3
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	4a0a      	ldr	r2, [pc, #40]	@ (800110c <LL_TIM_OC_DisableFast+0x80>)
 80010e4:	5cd3      	ldrb	r3, [r2, r3]
 80010e6:	440b      	add	r3, r1
 80010e8:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	4907      	ldr	r1, [pc, #28]	@ (8001110 <LL_TIM_OC_DisableFast+0x84>)
 80010f2:	5ccb      	ldrb	r3, [r1, r3]
 80010f4:	4619      	mov	r1, r3
 80010f6:	2304      	movs	r3, #4
 80010f8:	408b      	lsls	r3, r1
 80010fa:	43db      	mvns	r3, r3
 80010fc:	401a      	ands	r2, r3
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	601a      	str	r2, [r3, #0]
}
 8001102:	bf00      	nop
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	08006be8 	.word	0x08006be8
 8001110:	08006bf0 	.word	0x08006bf0

08001114 <LL_TIM_OC_EnablePreload>:
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d01c      	beq.n	800115e <LL_TIM_OC_EnablePreload+0x4a>
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	2b04      	cmp	r3, #4
 8001128:	d017      	beq.n	800115a <LL_TIM_OC_EnablePreload+0x46>
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	2b10      	cmp	r3, #16
 800112e:	d012      	beq.n	8001156 <LL_TIM_OC_EnablePreload+0x42>
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	2b40      	cmp	r3, #64	@ 0x40
 8001134:	d00d      	beq.n	8001152 <LL_TIM_OC_EnablePreload+0x3e>
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800113c:	d007      	beq.n	800114e <LL_TIM_OC_EnablePreload+0x3a>
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001144:	d101      	bne.n	800114a <LL_TIM_OC_EnablePreload+0x36>
 8001146:	2305      	movs	r3, #5
 8001148:	e00a      	b.n	8001160 <LL_TIM_OC_EnablePreload+0x4c>
 800114a:	2306      	movs	r3, #6
 800114c:	e008      	b.n	8001160 <LL_TIM_OC_EnablePreload+0x4c>
 800114e:	2304      	movs	r3, #4
 8001150:	e006      	b.n	8001160 <LL_TIM_OC_EnablePreload+0x4c>
 8001152:	2303      	movs	r3, #3
 8001154:	e004      	b.n	8001160 <LL_TIM_OC_EnablePreload+0x4c>
 8001156:	2302      	movs	r3, #2
 8001158:	e002      	b.n	8001160 <LL_TIM_OC_EnablePreload+0x4c>
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <LL_TIM_OC_EnablePreload+0x4c>
 800115e:	2300      	movs	r3, #0
 8001160:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3318      	adds	r3, #24
 8001166:	4619      	mov	r1, r3
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	4a0a      	ldr	r2, [pc, #40]	@ (8001194 <LL_TIM_OC_EnablePreload+0x80>)
 800116c:	5cd3      	ldrb	r3, [r2, r3]
 800116e:	440b      	add	r3, r1
 8001170:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	4907      	ldr	r1, [pc, #28]	@ (8001198 <LL_TIM_OC_EnablePreload+0x84>)
 800117a:	5ccb      	ldrb	r3, [r1, r3]
 800117c:	4619      	mov	r1, r3
 800117e:	2308      	movs	r3, #8
 8001180:	408b      	lsls	r3, r1
 8001182:	431a      	orrs	r2, r3
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	601a      	str	r2, [r3, #0]
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	08006be8 	.word	0x08006be8
 8001198:	08006bf0 	.word	0x08006bf0

0800119c <LL_TIM_SetClockSource>:
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80011ae:	f023 0307 	bic.w	r3, r3, #7
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	431a      	orrs	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	609a      	str	r2, [r3, #8]
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr

080011c4 <LL_TIM_SetTriggerOutput>:
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	431a      	orrs	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	605a      	str	r2, [r3, #4]
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr

080011e8 <LL_TIM_DisableMasterSlaveMode>:
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	609a      	str	r2, [r3, #8]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr

08001206 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	60da      	str	r2, [r3, #12]
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	615a      	str	r2, [r3, #20]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr

0800124e <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800125e:	2b40      	cmp	r3, #64	@ 0x40
 8001260:	bf0c      	ite	eq
 8001262:	2301      	moveq	r3, #1
 8001264:	2300      	movne	r3, #0
 8001266:	b2db      	uxtb	r3, r3
}
 8001268:	4618      	mov	r0, r3
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr

08001272 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001282:	2b80      	cmp	r3, #128	@ 0x80
 8001284:	bf0c      	ite	eq
 8001286:	2301      	moveq	r3, #1
 8001288:	2300      	movne	r3, #0
 800128a:	b2db      	uxtb	r3, r3
}
 800128c:	4618      	mov	r0, r3
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr

08001296 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001296:	b480      	push	{r7}
 8001298:	b089      	sub	sp, #36	@ 0x24
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	330c      	adds	r3, #12
 80012a2:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	e853 3f00 	ldrex	r3, [r3]
 80012aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	f043 0320 	orr.w	r3, r3, #32
 80012b2:	61fb      	str	r3, [r7, #28]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	330c      	adds	r3, #12
 80012b8:	69fa      	ldr	r2, [r7, #28]
 80012ba:	61ba      	str	r2, [r7, #24]
 80012bc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80012be:	6979      	ldr	r1, [r7, #20]
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	e841 2300 	strex	r3, r2, [r1]
 80012c6:	613b      	str	r3, [r7, #16]
   return(result);
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1e7      	bne.n	800129e <LL_USART_EnableIT_RXNE+0x8>
}
 80012ce:	bf00      	nop
 80012d0:	bf00      	nop
 80012d2:	3724      	adds	r7, #36	@ 0x24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr

080012da <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	460b      	mov	r3, r1
 80012e4:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80012e6:	78fa      	ldrb	r2, [r7, #3]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	605a      	str	r2, [r3, #4]
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr

080012f6 <LL_GPIO_SetPinMode>:
{
 80012f6:	b490      	push	{r4, r7}
 80012f8:	b088      	sub	sp, #32
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	461a      	mov	r2, r3
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	0e1b      	lsrs	r3, r3, #24
 800130a:	4413      	add	r3, r2
 800130c:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800130e:	6822      	ldr	r2, [r4, #0]
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	fa93 f3a3 	rbit	r3, r3
 800131a:	613b      	str	r3, [r7, #16]
  return result;
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	fab3 f383 	clz	r3, r3
 8001322:	b2db      	uxtb	r3, r3
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	210f      	movs	r1, #15
 8001328:	fa01 f303 	lsl.w	r3, r1, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	401a      	ands	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	fa93 f3a3 	rbit	r3, r3
 800133a:	61bb      	str	r3, [r7, #24]
  return result;
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	fab3 f383 	clz	r3, r3
 8001342:	b2db      	uxtb	r3, r3
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	fa01 f303 	lsl.w	r3, r1, r3
 800134c:	4313      	orrs	r3, r2
 800134e:	6023      	str	r3, [r4, #0]
}
 8001350:	bf00      	nop
 8001352:	3720      	adds	r7, #32
 8001354:	46bd      	mov	sp, r7
 8001356:	bc90      	pop	{r4, r7}
 8001358:	4770      	bx	lr

0800135a <LL_GPIO_SetOutputPin>:
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	0a1b      	lsrs	r3, r3, #8
 8001368:	b29a      	uxth	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	611a      	str	r2, [r3, #16]
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <LL_GPIO_ResetOutputPin>:
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	0a1b      	lsrs	r3, r3, #8
 8001386:	b29a      	uxth	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	615a      	str	r2, [r3, #20]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr
	...

08001398 <LL_GPIO_AF_EnableRemap_USART2>:
  * @rmtoll MAPR          USART2_REMAP           LL_GPIO_AF_EnableRemap_USART2
  * @note  ENABLE: Remap     (CTS/PD3, RTS/PD4, TX/PD5, RX/PD6, CK/PD7)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_USART2(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_USART2_REMAP | AFIO_MAPR_SWJ_CFG);
 800139c:	4b05      	ldr	r3, [pc, #20]	@ (80013b4 <LL_GPIO_AF_EnableRemap_USART2+0x1c>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	4a04      	ldr	r2, [pc, #16]	@ (80013b4 <LL_GPIO_AF_EnableRemap_USART2+0x1c>)
 80013a2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80013a6:	f043 0308 	orr.w	r3, r3, #8
 80013aa:	6053      	str	r3, [r2, #4]
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	40010000 	.word	0x40010000

080013b8 <LL_GPIO_AF_RemapPartial1_TIM2>:
  * @rmtoll MAPR          TIM2_REMAP           LL_GPIO_AF_RemapPartial1_TIM2
  * @note  PARTIAL_1: Partial remap (CH1/ETR/PA15, CH2/PB3, CH3/PA2,  CH4/PA3)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_RemapPartial1_TIM2(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM2_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1 | AFIO_MAPR_SWJ_CFG));
 80013bc:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <LL_GPIO_AF_RemapPartial1_TIM2+0x24>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80013c8:	4a04      	ldr	r2, [pc, #16]	@ (80013dc <LL_GPIO_AF_RemapPartial1_TIM2+0x24>)
 80013ca:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80013ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013d2:	6053      	str	r3, [r2, #4]
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	40010000 	.word	0x40010000

080013e0 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 80013e4:	4b05      	ldr	r3, [pc, #20]	@ (80013fc <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013ec:	4a03      	ldr	r2, [pc, #12]	@ (80013fc <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 80013ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013f2:	6053      	str	r3, [r2, #4]
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	40010000 	.word	0x40010000

08001400 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800140a:	4a13      	ldr	r2, [pc, #76]	@ (8001458 <LL_GPIO_AF_SetEXTISource+0x58>)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	3302      	adds	r3, #2
 8001412:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	0c1b      	lsrs	r3, r3, #16
 800141a:	43db      	mvns	r3, r3
 800141c:	ea02 0103 	and.w	r1, r2, r3
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	0c1b      	lsrs	r3, r3, #16
 8001424:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	fa93 f3a3 	rbit	r3, r3
 800142c:	60bb      	str	r3, [r7, #8]
  return result;
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	fab3 f383 	clz	r3, r3
 8001434:	b2db      	uxtb	r3, r3
 8001436:	461a      	mov	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	fa03 f202 	lsl.w	r2, r3, r2
 800143e:	4806      	ldr	r0, [pc, #24]	@ (8001458 <LL_GPIO_AF_SetEXTISource+0x58>)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	430a      	orrs	r2, r1
 8001446:	3302      	adds	r3, #2
 8001448:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40010000 	.word	0x40010000

0800145c <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Погледни чата с г-н Стефанов, _write e блокираща функция

int _write(int file, char *ptr, int len) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	e011      	b.n	8001492 <_write+0x36>
        while (!LL_USART_IsActiveFlag_TXE(USART2));  // Wait until TX buffer is empty
 800146e:	bf00      	nop
 8001470:	4810      	ldr	r0, [pc, #64]	@ (80014b4 <_write+0x58>)
 8001472:	f7ff fefe 	bl	8001272 <LL_USART_IsActiveFlag_TXE>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0f9      	beq.n	8001470 <_write+0x14>
        LL_USART_TransmitData8(USART2, ptr[i]);      // Send byte
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	4413      	add	r3, r2
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4619      	mov	r1, r3
 8001486:	480b      	ldr	r0, [pc, #44]	@ (80014b4 <_write+0x58>)
 8001488:	f7ff ff27 	bl	80012da <LL_USART_TransmitData8>
    for (int i = 0; i < len; i++) {
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	3301      	adds	r3, #1
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	429a      	cmp	r2, r3
 8001498:	dbe9      	blt.n	800146e <_write+0x12>
    }

    while (!LL_USART_IsActiveFlag_TC(USART2));  // Wait for last transmission to complete
 800149a:	bf00      	nop
 800149c:	4805      	ldr	r0, [pc, #20]	@ (80014b4 <_write+0x58>)
 800149e:	f7ff fed6 	bl	800124e <LL_USART_IsActiveFlag_TC>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0f9      	beq.n	800149c <_write+0x40>
    return len;
 80014a8:	687b      	ldr	r3, [r7, #4]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40004400 	.word	0x40004400

080014b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 80014bc:	2001      	movs	r0, #1
 80014be:	f7ff fd8b 	bl	8000fd8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80014c2:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80014c6:	f7ff fd6f 	bl	8000fa8 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ca:	2003      	movs	r0, #3
 80014cc:	f7ff fa42 	bl	8000954 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80014d0:	f7ff fa64 	bl	800099c <__NVIC_GetPriorityGrouping>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2200      	movs	r2, #0
 80014d8:	210f      	movs	r1, #15
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fab2 	bl	8000a44 <NVIC_EncodePriority>
 80014e0:	4603      	mov	r3, r0
 80014e2:	4619      	mov	r1, r3
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
 80014e8:	f7ff fa82 	bl	80009f0 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 80014ec:	f7ff ff78 	bl	80013e0 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f0:	f000 f848 	bl	8001584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f4:	f000 faf0 	bl	8001ad8 <MX_GPIO_Init>
  MX_DMA_Init();
 80014f8:	f000 fad6 	bl	8001aa8 <MX_DMA_Init>
  MX_ADC1_Init();
 80014fc:	f000 f884 	bl	8001608 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001500:	f000 f9aa 	bl	8001858 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001504:	f000 fa10 	bl	8001928 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001508:	f000 fa66 	bl	80019d8 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 800150c:	f000 f97a 	bl	8001804 <MX_TIM6_Init>
  MX_TIM2_Init();
 8001510:	f000 f8dc 	bl	80016cc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Enable UART Interupts
  LL_USART_EnableIT_RXNE(USART1);
 8001514:	4814      	ldr	r0, [pc, #80]	@ (8001568 <main+0xb0>)
 8001516:	f7ff febe 	bl	8001296 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART3);
 800151a:	4814      	ldr	r0, [pc, #80]	@ (800156c <main+0xb4>)
 800151c:	f7ff febb 	bl	8001296 <LL_USART_EnableIT_RXNE>

  // Enable EXTI Fault GPIO Interrupts
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_12);
 8001520:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001524:	f7ff fd90 	bl	8001048 <LL_EXTI_EnableIT_0_31>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_13);
 8001528:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800152c:	f7ff fd8c 	bl	8001048 <LL_EXTI_EnableIT_0_31>

  // Enable DMA Interrupt
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_5);
 8001530:	2105      	movs	r1, #5
 8001532:	480f      	ldr	r0, [pc, #60]	@ (8001570 <main+0xb8>)
 8001534:	f7ff fc28 	bl	8000d88 <LL_DMA_EnableIT_TC>


  SignalAnalyzer_Init();
 8001538:	f001 fcc2 	bl	8002ec0 <SignalAnalyzer_Init>

  // Reset all Muxes
  LL_GPIO_SetOutputPin(RST_GPIO, RST_PIN);
 800153c:	490d      	ldr	r1, [pc, #52]	@ (8001574 <main+0xbc>)
 800153e:	480e      	ldr	r0, [pc, #56]	@ (8001578 <main+0xc0>)
 8001540:	f7ff ff0b 	bl	800135a <LL_GPIO_SetOutputPin>
  LL_mDelay(20);
 8001544:	2014      	movs	r0, #20
 8001546:	f002 fed1 	bl	80042ec <LL_mDelay>
  LL_GPIO_ResetOutputPin(RST_GPIO, RST_PIN);
 800154a:	490a      	ldr	r1, [pc, #40]	@ (8001574 <main+0xbc>)
 800154c:	480a      	ldr	r0, [pc, #40]	@ (8001578 <main+0xc0>)
 800154e:	f7ff ff13 	bl	8001378 <LL_GPIO_ResetOutputPin>
  LL_mDelay(20);
 8001552:	2014      	movs	r0, #20
 8001554:	f002 feca 	bl	80042ec <LL_mDelay>

  // Enable Protection
  LL_GPIO_SetOutputPin(PROTECTION_GPIO, PROTECTION_PIN);
 8001558:	4908      	ldr	r1, [pc, #32]	@ (800157c <main+0xc4>)
 800155a:	4809      	ldr	r0, [pc, #36]	@ (8001580 <main+0xc8>)
 800155c:	f7ff fefd 	bl	800135a <LL_GPIO_SetOutputPin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

//		  sendADCData();
		  FAULT_CheckAndReport();  // Only sends UART if a fault was detected
 8001560:	f7fe fe90 	bl	8000284 <FAULT_CheckAndReport>
 8001564:	e7fc      	b.n	8001560 <main+0xa8>
 8001566:	bf00      	nop
 8001568:	40013800 	.word	0x40013800
 800156c:	40004800 	.word	0x40004800
 8001570:	40020000 	.word	0x40020000
 8001574:	04020002 	.word	0x04020002
 8001578:	40010c00 	.word	0x40010c00
 800157c:	04080008 	.word	0x04080008
 8001580:	40011800 	.word	0x40011800

08001584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8001588:	2002      	movs	r0, #2
 800158a:	f7ff fd3d 	bl	8001008 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 800158e:	bf00      	nop
 8001590:	f7ff fd4e 	bl	8001030 <LL_FLASH_GetLatency>
 8001594:	4603      	mov	r3, r0
 8001596:	2b02      	cmp	r3, #2
 8001598:	d1fa      	bne.n	8001590 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 800159a:	f7ff fc13 	bl	8000dc4 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800159e:	bf00      	nop
 80015a0:	f7ff fc1e 	bl	8000de0 <LL_RCC_HSE_IsReady>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d1fa      	bne.n	80015a0 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 80015aa:	f44f 11e0 	mov.w	r1, #1835008	@ 0x1c0000
 80015ae:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80015b2:	f7ff fcb7 	bl	8000f24 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80015b6:	f7ff fc95 	bl	8000ee4 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80015ba:	bf00      	nop
 80015bc:	f7ff fca0 	bl	8000f00 <LL_RCC_PLL_IsReady>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d1fa      	bne.n	80015bc <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80015c6:	2000      	movs	r0, #0
 80015c8:	f7ff fc3c 	bl	8000e44 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80015cc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80015d0:	f7ff fc4c 	bl	8000e6c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80015d4:	2000      	movs	r0, #0
 80015d6:	f7ff fc5d 	bl	8000e94 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80015da:	2002      	movs	r0, #2
 80015dc:	f7ff fc12 	bl	8000e04 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80015e0:	bf00      	nop
 80015e2:	f7ff fc23 	bl	8000e2c <LL_RCC_GetSysClkSource>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	d1fa      	bne.n	80015e2 <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(72000000);
 80015ec:	4805      	ldr	r0, [pc, #20]	@ (8001604 <SystemClock_Config+0x80>)
 80015ee:	f002 fe6f 	bl	80042d0 <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 80015f2:	4804      	ldr	r0, [pc, #16]	@ (8001604 <SystemClock_Config+0x80>)
 80015f4:	f002 fe9e 	bl	8004334 <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_6);
 80015f8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80015fc:	f7ff fc5e 	bl	8000ebc <LL_RCC_SetADCClockSource>
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	044aa200 	.word	0x044aa200

08001608 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08e      	sub	sp, #56	@ 0x38
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800160e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001618:	2300      	movs	r3, #0
 800161a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800161c:	f107 0318 	add.w	r3, r7, #24
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 800163a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800163e:	f7ff fccb 	bl	8000fd8 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001642:	2004      	movs	r0, #4
 8001644:	f7ff fcc8 	bl	8000fd8 <LL_APB2_GRP1_EnableClock>
  PA4   ------> ADC1_IN4
  PA5   ------> ADC1_IN5
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8001648:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800164c:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	4619      	mov	r1, r3
 8001656:	481a      	ldr	r0, [pc, #104]	@ (80016c0 <MX_ADC1_Init+0xb8>)
 8001658:	f002 f8a3 	bl	80037a2 <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800165c:	2300      	movs	r3, #0
 800165e:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001664:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001668:	4619      	mov	r1, r3
 800166a:	4816      	ldr	r0, [pc, #88]	@ (80016c4 <MX_ADC1_Init+0xbc>)
 800166c:	f001 fe64 	bl	8003338 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8001670:	2300      	movs	r3, #0
 8001672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8001674:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001678:	4619      	mov	r1, r3
 800167a:	4812      	ldr	r0, [pc, #72]	@ (80016c4 <MX_ADC1_Init+0xbc>)
 800167c:	f001 fe2a 	bl	80032d4 <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001680:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
 8001684:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800168a:	2300      	movs	r3, #0
 800168c:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 800168e:	2302      	movs	r3, #2
 8001690:	627b      	str	r3, [r7, #36]	@ 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8001692:	2300      	movs	r3, #0
 8001694:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001696:	f107 0318 	add.w	r3, r7, #24
 800169a:	4619      	mov	r1, r3
 800169c:	4809      	ldr	r0, [pc, #36]	@ (80016c4 <MX_ADC1_Init+0xbc>)
 800169e:	f001 fe72 	bl	8003386 <LL_ADC_REG_Init>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 80016a2:	4a09      	ldr	r2, [pc, #36]	@ (80016c8 <MX_ADC1_Init+0xc0>)
 80016a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016a8:	4806      	ldr	r0, [pc, #24]	@ (80016c4 <MX_ADC1_Init+0xbc>)
 80016aa:	f7ff f9fd 	bl	8000aa8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80016ae:	2200      	movs	r2, #0
 80016b0:	4905      	ldr	r1, [pc, #20]	@ (80016c8 <MX_ADC1_Init+0xc0>)
 80016b2:	4804      	ldr	r0, [pc, #16]	@ (80016c4 <MX_ADC1_Init+0xbc>)
 80016b4:	f7ff fa2d 	bl	8000b12 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016b8:	bf00      	nop
 80016ba:	3738      	adds	r7, #56	@ 0x38
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40010800 	.word	0x40010800
 80016c4:	40012400 	.word	0x40012400
 80016c8:	02300001 	.word	0x02300001

080016cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b092      	sub	sp, #72	@ 0x48
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80016d2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
 80016e0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	2220      	movs	r2, #32
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f003 f95e 	bl	80049ac <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	463b      	mov	r3, r7
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
 80016fc:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80016fe:	2001      	movs	r0, #1
 8001700:	f7ff fc52 	bl	8000fa8 <LL_APB1_GRP1_EnableClock>

  /* TIM2 DMA Init */

  /* TIM2_CH1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_5, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001704:	2210      	movs	r2, #16
 8001706:	2105      	movs	r1, #5
 8001708:	483b      	ldr	r0, [pc, #236]	@ (80017f8 <MX_TIM2_Init+0x12c>)
 800170a:	f7ff fa4d 	bl	8000ba8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PRIORITY_VERYHIGH);
 800170e:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001712:	2105      	movs	r1, #5
 8001714:	4838      	ldr	r0, [pc, #224]	@ (80017f8 <MX_TIM2_Init+0x12c>)
 8001716:	f7ff fb15 	bl	8000d44 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MODE_NORMAL);
 800171a:	2200      	movs	r2, #0
 800171c:	2105      	movs	r1, #5
 800171e:	4836      	ldr	r0, [pc, #216]	@ (80017f8 <MX_TIM2_Init+0x12c>)
 8001720:	f7ff fa66 	bl	8000bf0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PERIPH_NOINCREMENT);
 8001724:	2200      	movs	r2, #0
 8001726:	2105      	movs	r1, #5
 8001728:	4833      	ldr	r0, [pc, #204]	@ (80017f8 <MX_TIM2_Init+0x12c>)
 800172a:	f7ff fa83 	bl	8000c34 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MEMORY_INCREMENT);
 800172e:	2280      	movs	r2, #128	@ 0x80
 8001730:	2105      	movs	r1, #5
 8001732:	4831      	ldr	r0, [pc, #196]	@ (80017f8 <MX_TIM2_Init+0x12c>)
 8001734:	f7ff faa0 	bl	8000c78 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PDATAALIGN_WORD);
 8001738:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800173c:	2105      	movs	r1, #5
 800173e:	482e      	ldr	r0, [pc, #184]	@ (80017f8 <MX_TIM2_Init+0x12c>)
 8001740:	f7ff fabc 	bl	8000cbc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MDATAALIGN_WORD);
 8001744:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001748:	2105      	movs	r1, #5
 800174a:	482b      	ldr	r0, [pc, #172]	@ (80017f8 <MX_TIM2_Init+0x12c>)
 800174c:	f7ff fad8 	bl	8000d00 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	86bb      	strh	r3, [r7, #52]	@ 0x34
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001754:	2300      	movs	r3, #0
 8001756:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_InitStruct.Autoreload = 89;
 8001758:	2359      	movs	r3, #89	@ 0x59
 800175a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800175c:	2300      	movs	r3, #0
 800175e:	643b      	str	r3, [r7, #64]	@ 0x40
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001760:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001764:	4619      	mov	r1, r3
 8001766:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800176a:	f002 fa59 	bl	8003c20 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800176e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001772:	f7ff fc7b 	bl	800106c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001776:	2100      	movs	r1, #0
 8001778:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800177c:	f7ff fd0e 	bl	800119c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8001780:	2101      	movs	r1, #1
 8001782:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001786:	f7ff fcc5 	bl	8001114 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800178a:	2360      	movs	r3, #96	@ 0x60
 800178c:	617b      	str	r3, [r7, #20]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.CompareValue = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800179a:	2300      	movs	r3, #0
 800179c:	627b      	str	r3, [r7, #36]	@ 0x24
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800179e:	f107 0314 	add.w	r3, r7, #20
 80017a2:	461a      	mov	r2, r3
 80017a4:	2101      	movs	r1, #1
 80017a6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80017aa:	f002 faa1 	bl	8003cf0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 80017ae:	2101      	movs	r1, #1
 80017b0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80017b4:	f7ff fc6a 	bl	800108c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80017b8:	2100      	movs	r1, #0
 80017ba:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80017be:	f7ff fd01 	bl	80011c4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80017c2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80017c6:	f7ff fd0f 	bl	80011e8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80017ca:	2004      	movs	r0, #4
 80017cc:	f7ff fc04 	bl	8000fd8 <LL_APB2_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA15   ------> TIM2_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80017d0:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <MX_TIM2_Init+0x130>)
 80017d2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017d4:	2309      	movs	r3, #9
 80017d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80017d8:	2302      	movs	r3, #2
 80017da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e0:	463b      	mov	r3, r7
 80017e2:	4619      	mov	r1, r3
 80017e4:	4806      	ldr	r0, [pc, #24]	@ (8001800 <MX_TIM2_Init+0x134>)
 80017e6:	f001 ffdc 	bl	80037a2 <LL_GPIO_Init>

  LL_GPIO_AF_RemapPartial1_TIM2();
 80017ea:	f7ff fde5 	bl	80013b8 <LL_GPIO_AF_RemapPartial1_TIM2>

}
 80017ee:	bf00      	nop
 80017f0:	3748      	adds	r7, #72	@ 0x48
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40020000 	.word	0x40020000
 80017fc:	04800080 	.word	0x04800080
 8001800:	40010800 	.word	0x40010800

08001804 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8001818:	2010      	movs	r0, #16
 800181a:	f7ff fbc5 	bl	8000fa8 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001822:	2300      	movs	r3, #0
 8001824:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8001826:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800182a:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	4619      	mov	r1, r3
 8001830:	4808      	ldr	r0, [pc, #32]	@ (8001854 <MX_TIM6_Init+0x50>)
 8001832:	f002 f9f5 	bl	8003c20 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 8001836:	4807      	ldr	r0, [pc, #28]	@ (8001854 <MX_TIM6_Init+0x50>)
 8001838:	f7ff fc18 	bl	800106c <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 800183c:	2100      	movs	r1, #0
 800183e:	4805      	ldr	r0, [pc, #20]	@ (8001854 <MX_TIM6_Init+0x50>)
 8001840:	f7ff fcc0 	bl	80011c4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8001844:	4803      	ldr	r0, [pc, #12]	@ (8001854 <MX_TIM6_Init+0x50>)
 8001846:	f7ff fccf 	bl	80011e8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800184a:	bf00      	nop
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40001000 	.word	0x40001000

08001858 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08c      	sub	sp, #48	@ 0x30
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
 800186c:	611a      	str	r2, [r3, #16]
 800186e:	615a      	str	r2, [r3, #20]
 8001870:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001872:	463b      	mov	r3, r7
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001880:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001884:	f7ff fba8 	bl	8000fd8 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001888:	2004      	movs	r0, #4
 800188a:	f7ff fba5 	bl	8000fd8 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800188e:	4b22      	ldr	r3, [pc, #136]	@ (8001918 <MX_USART1_UART_Init+0xc0>)
 8001890:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001892:	2309      	movs	r3, #9
 8001894:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001896:	2303      	movs	r3, #3
 8001898:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189e:	463b      	mov	r3, r7
 80018a0:	4619      	mov	r1, r3
 80018a2:	481e      	ldr	r0, [pc, #120]	@ (800191c <MX_USART1_UART_Init+0xc4>)
 80018a4:	f001 ff7d 	bl	80037a2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80018a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001920 <MX_USART1_UART_Init+0xc8>)
 80018aa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80018ac:	2304      	movs	r3, #4
 80018ae:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b0:	463b      	mov	r3, r7
 80018b2:	4619      	mov	r1, r3
 80018b4:	4819      	ldr	r0, [pc, #100]	@ (800191c <MX_USART1_UART_Init+0xc4>)
 80018b6:	f001 ff74 	bl	80037a2 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80018ba:	f7ff f86f 	bl	800099c <__NVIC_GetPriorityGrouping>
 80018be:	4603      	mov	r3, r0
 80018c0:	2200      	movs	r2, #0
 80018c2:	2100      	movs	r1, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff f8bd 	bl	8000a44 <NVIC_EncodePriority>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4619      	mov	r1, r3
 80018ce:	2025      	movs	r0, #37	@ 0x25
 80018d0:	f7ff f88e 	bl	80009f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80018d4:	2025      	movs	r0, #37	@ 0x25
 80018d6:	f7ff f86f 	bl	80009b8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 921600;
 80018da:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 80018de:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80018ec:	230c      	movs	r3, #12
 80018ee:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80018f4:	2300      	movs	r3, #0
 80018f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	4619      	mov	r1, r3
 80018fe:	4809      	ldr	r0, [pc, #36]	@ (8001924 <MX_USART1_UART_Init+0xcc>)
 8001900:	f002 fc5a 	bl	80041b8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001904:	4807      	ldr	r0, [pc, #28]	@ (8001924 <MX_USART1_UART_Init+0xcc>)
 8001906:	f7ff fc8d 	bl	8001224 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 800190a:	4806      	ldr	r0, [pc, #24]	@ (8001924 <MX_USART1_UART_Init+0xcc>)
 800190c:	f7ff fc7b 	bl	8001206 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001910:	bf00      	nop
 8001912:	3730      	adds	r7, #48	@ 0x30
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	04020002 	.word	0x04020002
 800191c:	40010800 	.word	0x40010800
 8001920:	04040004 	.word	0x04040004
 8001924:	40013800 	.word	0x40013800

08001928 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08c      	sub	sp, #48	@ 0x30
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
 800193c:	611a      	str	r2, [r3, #16]
 800193e:	615a      	str	r2, [r3, #20]
 8001940:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001942:	463b      	mov	r3, r7
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001950:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001954:	f7ff fb28 	bl	8000fa8 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8001958:	2020      	movs	r0, #32
 800195a:	f7ff fb3d 	bl	8000fd8 <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PD5   ------> USART2_TX
  PD6   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 800195e:	f242 0320 	movw	r3, #8224	@ 0x2020
 8001962:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001964:	2309      	movs	r3, #9
 8001966:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001968:	2303      	movs	r3, #3
 800196a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001970:	463b      	mov	r3, r7
 8001972:	4619      	mov	r1, r3
 8001974:	4816      	ldr	r0, [pc, #88]	@ (80019d0 <MX_USART2_UART_Init+0xa8>)
 8001976:	f001 ff14 	bl	80037a2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800197a:	f244 0340 	movw	r3, #16448	@ 0x4040
 800197e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001980:	2304      	movs	r3, #4
 8001982:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001984:	463b      	mov	r3, r7
 8001986:	4619      	mov	r1, r3
 8001988:	4811      	ldr	r0, [pc, #68]	@ (80019d0 <MX_USART2_UART_Init+0xa8>)
 800198a:	f001 ff0a 	bl	80037a2 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_USART2();
 800198e:	f7ff fd03 	bl	8001398 <LL_GPIO_AF_EnableRemap_USART2>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200 ;
 8001992:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001996:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001998:	2300      	movs	r3, #0
 800199a:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800199c:	2300      	movs	r3, #0
 800199e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80019a4:	230c      	movs	r3, #12
 80019a6:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80019ac:	2300      	movs	r3, #0
 80019ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	4619      	mov	r1, r3
 80019b6:	4807      	ldr	r0, [pc, #28]	@ (80019d4 <MX_USART2_UART_Init+0xac>)
 80019b8:	f002 fbfe 	bl	80041b8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80019bc:	4805      	ldr	r0, [pc, #20]	@ (80019d4 <MX_USART2_UART_Init+0xac>)
 80019be:	f7ff fc31 	bl	8001224 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80019c2:	4804      	ldr	r0, [pc, #16]	@ (80019d4 <MX_USART2_UART_Init+0xac>)
 80019c4:	f7ff fc1f 	bl	8001206 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019c8:	bf00      	nop
 80019ca:	3730      	adds	r7, #48	@ 0x30
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40011400 	.word	0x40011400
 80019d4:	40004400 	.word	0x40004400

080019d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08c      	sub	sp, #48	@ 0x30
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
 80019ec:	611a      	str	r2, [r3, #16]
 80019ee:	615a      	str	r2, [r3, #20]
 80019f0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f2:	463b      	mov	r3, r7
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8001a00:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8001a04:	f7ff fad0 	bl	8000fa8 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001a08:	2008      	movs	r0, #8
 8001a0a:	f7ff fae5 	bl	8000fd8 <LL_APB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001a0e:	4b22      	ldr	r3, [pc, #136]	@ (8001a98 <MX_USART3_UART_Init+0xc0>)
 8001a10:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a12:	2309      	movs	r3, #9
 8001a14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001a16:	2303      	movs	r3, #3
 8001a18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1e:	463b      	mov	r3, r7
 8001a20:	4619      	mov	r1, r3
 8001a22:	481e      	ldr	r0, [pc, #120]	@ (8001a9c <MX_USART3_UART_Init+0xc4>)
 8001a24:	f001 febd 	bl	80037a2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8001a28:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa0 <MX_USART3_UART_Init+0xc8>)
 8001a2a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a30:	463b      	mov	r3, r7
 8001a32:	4619      	mov	r1, r3
 8001a34:	4819      	ldr	r0, [pc, #100]	@ (8001a9c <MX_USART3_UART_Init+0xc4>)
 8001a36:	f001 feb4 	bl	80037a2 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001a3a:	f7fe ffaf 	bl	800099c <__NVIC_GetPriorityGrouping>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2200      	movs	r2, #0
 8001a42:	2100      	movs	r1, #0
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fffd 	bl	8000a44 <NVIC_EncodePriority>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	2027      	movs	r0, #39	@ 0x27
 8001a50:	f7fe ffce 	bl	80009f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8001a54:	2027      	movs	r0, #39	@ 0x27
 8001a56:	f7fe ffaf 	bl	80009b8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 921600;
 8001a5a:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8001a5e:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001a64:	2300      	movs	r3, #0
 8001a66:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001a6c:	230c      	movs	r3, #12
 8001a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001a74:	2300      	movs	r3, #0
 8001a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART3, &USART_InitStruct);
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4809      	ldr	r0, [pc, #36]	@ (8001aa4 <MX_USART3_UART_Init+0xcc>)
 8001a80:	f002 fb9a 	bl	80041b8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8001a84:	4807      	ldr	r0, [pc, #28]	@ (8001aa4 <MX_USART3_UART_Init+0xcc>)
 8001a86:	f7ff fbcd 	bl	8001224 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8001a8a:	4806      	ldr	r0, [pc, #24]	@ (8001aa4 <MX_USART3_UART_Init+0xcc>)
 8001a8c:	f7ff fbbb 	bl	8001206 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a90:	bf00      	nop
 8001a92:	3730      	adds	r7, #48	@ 0x30
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	04040004 	.word	0x04040004
 8001a9c:	40010c00 	.word	0x40010c00
 8001aa0:	04080008 	.word	0x04080008
 8001aa4:	40004800 	.word	0x40004800

08001aa8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001aac:	2001      	movs	r0, #1
 8001aae:	f7ff fa63 	bl	8000f78 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001ab2:	f7fe ff73 	bl	800099c <__NVIC_GetPriorityGrouping>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe ffc1 	bl	8000a44 <NVIC_EncodePriority>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	200f      	movs	r0, #15
 8001ac8:	f7fe ff92 	bl	80009f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001acc:	200f      	movs	r0, #15
 8001ace:	f7fe ff73 	bl	80009b8 <__NVIC_EnableIRQ>

}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001ade:	f107 0318 	add.w	r3, r7, #24
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	1d3b      	adds	r3, r7, #4
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]
 8001af0:	609a      	str	r2, [r3, #8]
 8001af2:	60da      	str	r2, [r3, #12]
 8001af4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOE);
 8001af6:	2040      	movs	r0, #64	@ 0x40
 8001af8:	f7ff fa6e 	bl	8000fd8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8001afc:	2010      	movs	r0, #16
 8001afe:	f7ff fa6b 	bl	8000fd8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001b02:	2004      	movs	r0, #4
 8001b04:	f7ff fa68 	bl	8000fd8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001b08:	2008      	movs	r0, #8
 8001b0a:	f7ff fa65 	bl	8000fd8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8001b0e:	2020      	movs	r0, #32
 8001b10:	f7ff fa62 	bl	8000fd8 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5
 8001b14:	494c      	ldr	r1, [pc, #304]	@ (8001c48 <MX_GPIO_Init+0x170>)
 8001b16:	484d      	ldr	r0, [pc, #308]	@ (8001c4c <MX_GPIO_Init+0x174>)
 8001b18:	f7ff fc2e 	bl	8001378 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9
                          |LL_GPIO_PIN_11|LL_GPIO_PIN_0);

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2
 8001b1c:	494c      	ldr	r1, [pc, #304]	@ (8001c50 <MX_GPIO_Init+0x178>)
 8001b1e:	484d      	ldr	r0, [pc, #308]	@ (8001c54 <MX_GPIO_Init+0x17c>)
 8001b20:	f7ff fc2a 	bl	8001378 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6
                          |LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_11);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_12
 8001b24:	494c      	ldr	r1, [pc, #304]	@ (8001c58 <MX_GPIO_Init+0x180>)
 8001b26:	484d      	ldr	r0, [pc, #308]	@ (8001c5c <MX_GPIO_Init+0x184>)
 8001b28:	f7ff fc26 	bl	8001378 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11
 8001b2c:	494c      	ldr	r1, [pc, #304]	@ (8001c60 <MX_GPIO_Init+0x188>)
 8001b2e:	484d      	ldr	r0, [pc, #308]	@ (8001c64 <MX_GPIO_Init+0x18c>)
 8001b30:	f7ff fc22 	bl	8001378 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
                          |LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_7);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5
 8001b34:	4b44      	ldr	r3, [pc, #272]	@ (8001c48 <MX_GPIO_Init+0x170>)
 8001b36:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9
                          |LL_GPIO_PIN_11|LL_GPIO_PIN_0;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	4619      	mov	r1, r3
 8001b48:	4840      	ldr	r0, [pc, #256]	@ (8001c4c <MX_GPIO_Init+0x174>)
 8001b4a:	f001 fe2a 	bl	80037a2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2
 8001b4e:	4b40      	ldr	r3, [pc, #256]	@ (8001c50 <MX_GPIO_Init+0x178>)
 8001b50:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6
                          |LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_11;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b52:	2301      	movs	r3, #1
 8001b54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b56:	2302      	movs	r3, #2
 8001b58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b5e:	1d3b      	adds	r3, r7, #4
 8001b60:	4619      	mov	r1, r3
 8001b62:	483c      	ldr	r0, [pc, #240]	@ (8001c54 <MX_GPIO_Init+0x17c>)
 8001b64:	f001 fe1d 	bl	80037a2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_12
 8001b68:	4b3b      	ldr	r3, [pc, #236]	@ (8001c58 <MX_GPIO_Init+0x180>)
 8001b6a:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8
                          |LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b70:	2302      	movs	r3, #2
 8001b72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4837      	ldr	r0, [pc, #220]	@ (8001c5c <MX_GPIO_Init+0x184>)
 8001b7e:	f001 fe10 	bl	80037a2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8001b82:	4b39      	ldr	r3, [pc, #228]	@ (8001c68 <MX_GPIO_Init+0x190>)
 8001b84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001b86:	2304      	movs	r3, #4
 8001b88:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	482f      	ldr	r0, [pc, #188]	@ (8001c4c <MX_GPIO_Init+0x174>)
 8001b90:	f001 fe07 	bl	80037a2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11
 8001b94:	4b32      	ldr	r3, [pc, #200]	@ (8001c60 <MX_GPIO_Init+0x188>)
 8001b96:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
                          |LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	482e      	ldr	r0, [pc, #184]	@ (8001c64 <MX_GPIO_Init+0x18c>)
 8001baa:	f001 fdfa 	bl	80037a2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001bae:	f240 2302 	movw	r3, #514	@ 0x202
 8001bb2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4823      	ldr	r0, [pc, #140]	@ (8001c4c <MX_GPIO_Init+0x174>)
 8001bbe:	f001 fdf0 	bl	80037a2 <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTE, LL_GPIO_AF_EXTI_LINE12);
 8001bc2:	492a      	ldr	r1, [pc, #168]	@ (8001c6c <MX_GPIO_Init+0x194>)
 8001bc4:	2004      	movs	r0, #4
 8001bc6:	f7ff fc1b 	bl	8001400 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTE, LL_GPIO_AF_EXTI_LINE13);
 8001bca:	4929      	ldr	r1, [pc, #164]	@ (8001c70 <MX_GPIO_Init+0x198>)
 8001bcc:	2004      	movs	r0, #4
 8001bce:	f7ff fc17 	bl	8001400 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 8001bd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bd6:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001be0:	2302      	movs	r3, #2
 8001be2:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001be4:	f107 0318 	add.w	r3, r7, #24
 8001be8:	4618      	mov	r0, r3
 8001bea:	f001 fca3 	bl	8003534 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001bee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bf2:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001c00:	f107 0318 	add.w	r3, r7, #24
 8001c04:	4618      	mov	r0, r3
 8001c06:	f001 fc95 	bl	8003534 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(GPIOE, LL_GPIO_PIN_12, LL_GPIO_MODE_FLOATING);
 8001c0a:	2204      	movs	r2, #4
 8001c0c:	4919      	ldr	r1, [pc, #100]	@ (8001c74 <MX_GPIO_Init+0x19c>)
 8001c0e:	480f      	ldr	r0, [pc, #60]	@ (8001c4c <MX_GPIO_Init+0x174>)
 8001c10:	f7ff fb71 	bl	80012f6 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOE, LL_GPIO_PIN_13, LL_GPIO_MODE_FLOATING);
 8001c14:	2204      	movs	r2, #4
 8001c16:	4918      	ldr	r1, [pc, #96]	@ (8001c78 <MX_GPIO_Init+0x1a0>)
 8001c18:	480c      	ldr	r0, [pc, #48]	@ (8001c4c <MX_GPIO_Init+0x174>)
 8001c1a:	f7ff fb6c 	bl	80012f6 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001c1e:	f7fe febd 	bl	800099c <__NVIC_GetPriorityGrouping>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2200      	movs	r2, #0
 8001c26:	2100      	movs	r1, #0
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe ff0b 	bl	8000a44 <NVIC_EncodePriority>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4619      	mov	r1, r3
 8001c32:	2028      	movs	r0, #40	@ 0x28
 8001c34:	f7fe fedc 	bl	80009f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c38:	2028      	movs	r0, #40	@ 0x28
 8001c3a:	f7fe febd 	bl	80009b8 <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c3e:	bf00      	nop
 8001c40:	3720      	adds	r7, #32
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	040bfdff 	.word	0x040bfdff
 8001c4c:	40011800 	.word	0x40011800
 8001c50:	042bffff 	.word	0x042bffff
 8001c54:	40011000 	.word	0x40011000
 8001c58:	04d3ffff 	.word	0x04d3ffff
 8001c5c:	40010c00 	.word	0x40010c00
 8001c60:	04ff9bff 	.word	0x04ff9bff
 8001c64:	40011400 	.word	0x40011400
 8001c68:	04c000c0 	.word	0x04c000c0
 8001c6c:	000f0003 	.word	0x000f0003
 8001c70:	00f00003 	.word	0x00f00003
 8001c74:	04100010 	.word	0x04100010
 8001c78:	04200020 	.word	0x04200020

08001c7c <LL_GPIO_SetOutputPin>:
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	0a1b      	lsrs	r3, r3, #8
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	611a      	str	r2, [r3, #16]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr

08001c9a <LL_GPIO_ResetOutputPin>:
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	0a1b      	lsrs	r3, r3, #8
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	615a      	str	r2, [r3, #20]
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr

08001cb8 <getPortName>:
    {GPIOE, LL_GPIO_PIN_7, &xPins32, &yPins32},  // CS_32 (PE7)
    {GPIOE, LL_GPIO_PIN_8, &xPins33, &yPins33},  // CS_33 (PE8)
    {GPIOE, LL_GPIO_PIN_9, &xPins34, &yPins34}   // CS_34 (PE9)
};

const char* getPortName(GPIO_TypeDef* port) {
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
    if (port == GPIOA) return "GPIOA";
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a11      	ldr	r2, [pc, #68]	@ (8001d08 <getPortName+0x50>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d101      	bne.n	8001ccc <getPortName+0x14>
 8001cc8:	4b10      	ldr	r3, [pc, #64]	@ (8001d0c <getPortName+0x54>)
 8001cca:	e018      	b.n	8001cfe <getPortName+0x46>
    if (port == GPIOB) return "GPIOB";
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a10      	ldr	r2, [pc, #64]	@ (8001d10 <getPortName+0x58>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d101      	bne.n	8001cd8 <getPortName+0x20>
 8001cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d14 <getPortName+0x5c>)
 8001cd6:	e012      	b.n	8001cfe <getPortName+0x46>
    if (port == GPIOC) return "GPIOC";
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a0f      	ldr	r2, [pc, #60]	@ (8001d18 <getPortName+0x60>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d101      	bne.n	8001ce4 <getPortName+0x2c>
 8001ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8001d1c <getPortName+0x64>)
 8001ce2:	e00c      	b.n	8001cfe <getPortName+0x46>
    if (port == GPIOD) return "GPIOD";
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a0e      	ldr	r2, [pc, #56]	@ (8001d20 <getPortName+0x68>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d101      	bne.n	8001cf0 <getPortName+0x38>
 8001cec:	4b0d      	ldr	r3, [pc, #52]	@ (8001d24 <getPortName+0x6c>)
 8001cee:	e006      	b.n	8001cfe <getPortName+0x46>
    if (port == GPIOE) return "GPIOE";
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a0d      	ldr	r2, [pc, #52]	@ (8001d28 <getPortName+0x70>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d101      	bne.n	8001cfc <getPortName+0x44>
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d2c <getPortName+0x74>)
 8001cfa:	e000      	b.n	8001cfe <getPortName+0x46>
    return "UNKNOWN";
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d30 <getPortName+0x78>)
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr
 8001d08:	40010800 	.word	0x40010800
 8001d0c:	080065cc 	.word	0x080065cc
 8001d10:	40010c00 	.word	0x40010c00
 8001d14:	080065d4 	.word	0x080065d4
 8001d18:	40011000 	.word	0x40011000
 8001d1c:	080065dc 	.word	0x080065dc
 8001d20:	40011400 	.word	0x40011400
 8001d24:	080065e4 	.word	0x080065e4
 8001d28:	40011800 	.word	0x40011800
 8001d2c:	080065ec 	.word	0x080065ec
 8001d30:	080065f4 	.word	0x080065f4

08001d34 <getPinName>:

const char* getPinName(uint32_t pin) {
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
    switch (pin) {
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a5a      	ldr	r2, [pc, #360]	@ (8001ea8 <getPinName+0x174>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	f000 80a8 	beq.w	8001e96 <getPinName+0x162>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a57      	ldr	r2, [pc, #348]	@ (8001ea8 <getPinName+0x174>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	f200 80a5 	bhi.w	8001e9a <getPinName+0x166>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a56      	ldr	r2, [pc, #344]	@ (8001eac <getPinName+0x178>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	f000 809c 	beq.w	8001e92 <getPinName+0x15e>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a53      	ldr	r2, [pc, #332]	@ (8001eac <getPinName+0x178>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	f200 809b 	bhi.w	8001e9a <getPinName+0x166>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a52      	ldr	r2, [pc, #328]	@ (8001eb0 <getPinName+0x17c>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	f000 8090 	beq.w	8001e8e <getPinName+0x15a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a4f      	ldr	r2, [pc, #316]	@ (8001eb0 <getPinName+0x17c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	f200 8091 	bhi.w	8001e9a <getPinName+0x166>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a4e      	ldr	r2, [pc, #312]	@ (8001eb4 <getPinName+0x180>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	f000 8084 	beq.w	8001e8a <getPinName+0x156>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a4b      	ldr	r2, [pc, #300]	@ (8001eb4 <getPinName+0x180>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	f200 8087 	bhi.w	8001e9a <getPinName+0x166>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a4a      	ldr	r2, [pc, #296]	@ (8001eb8 <getPinName+0x184>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d078      	beq.n	8001e86 <getPinName+0x152>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a48      	ldr	r2, [pc, #288]	@ (8001eb8 <getPinName+0x184>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d87e      	bhi.n	8001e9a <getPinName+0x166>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a47      	ldr	r2, [pc, #284]	@ (8001ebc <getPinName+0x188>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d06e      	beq.n	8001e82 <getPinName+0x14e>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a45      	ldr	r2, [pc, #276]	@ (8001ebc <getPinName+0x188>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d876      	bhi.n	8001e9a <getPinName+0x166>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a44      	ldr	r2, [pc, #272]	@ (8001ec0 <getPinName+0x18c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d064      	beq.n	8001e7e <getPinName+0x14a>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a42      	ldr	r2, [pc, #264]	@ (8001ec0 <getPinName+0x18c>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d86e      	bhi.n	8001e9a <getPinName+0x166>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a41      	ldr	r2, [pc, #260]	@ (8001ec4 <getPinName+0x190>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d05a      	beq.n	8001e7a <getPinName+0x146>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a3f      	ldr	r2, [pc, #252]	@ (8001ec4 <getPinName+0x190>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d866      	bhi.n	8001e9a <getPinName+0x166>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f248 0280 	movw	r2, #32896	@ 0x8080
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d04f      	beq.n	8001e76 <getPinName+0x142>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f248 0280 	movw	r2, #32896	@ 0x8080
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d85c      	bhi.n	8001e9a <getPinName+0x166>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f244 0240 	movw	r2, #16448	@ 0x4040
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d043      	beq.n	8001e72 <getPinName+0x13e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f244 0240 	movw	r2, #16448	@ 0x4040
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d852      	bhi.n	8001e9a <getPinName+0x166>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f242 0220 	movw	r2, #8224	@ 0x2020
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d037      	beq.n	8001e6e <getPinName+0x13a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f242 0220 	movw	r2, #8224	@ 0x2020
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d848      	bhi.n	8001e9a <getPinName+0x166>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f241 0210 	movw	r2, #4112	@ 0x1010
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d02b      	beq.n	8001e6a <getPinName+0x136>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f241 0210 	movw	r2, #4112	@ 0x1010
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d83e      	bhi.n	8001e9a <getPinName+0x166>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f640 0208 	movw	r2, #2056	@ 0x808
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d01f      	beq.n	8001e66 <getPinName+0x132>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f640 0208 	movw	r2, #2056	@ 0x808
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d834      	bhi.n	8001e9a <getPinName+0x166>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f240 4204 	movw	r2, #1028	@ 0x404
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d013      	beq.n	8001e62 <getPinName+0x12e>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f240 4204 	movw	r2, #1028	@ 0x404
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d82a      	bhi.n	8001e9a <getPinName+0x166>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f240 1201 	movw	r2, #257	@ 0x101
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d005      	beq.n	8001e5a <getPinName+0x126>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f240 2202 	movw	r2, #514	@ 0x202
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d002      	beq.n	8001e5e <getPinName+0x12a>
 8001e58:	e01f      	b.n	8001e9a <getPinName+0x166>
        case LL_GPIO_PIN_0:  return "Pin 0";
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec8 <getPinName+0x194>)
 8001e5c:	e01e      	b.n	8001e9c <getPinName+0x168>
        case LL_GPIO_PIN_1:  return "Pin 1";
 8001e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ecc <getPinName+0x198>)
 8001e60:	e01c      	b.n	8001e9c <getPinName+0x168>
        case LL_GPIO_PIN_2:  return "Pin 2";
 8001e62:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed0 <getPinName+0x19c>)
 8001e64:	e01a      	b.n	8001e9c <getPinName+0x168>
        case LL_GPIO_PIN_3:  return "Pin 3";
 8001e66:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed4 <getPinName+0x1a0>)
 8001e68:	e018      	b.n	8001e9c <getPinName+0x168>
        case LL_GPIO_PIN_4:  return "Pin 4";
 8001e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed8 <getPinName+0x1a4>)
 8001e6c:	e016      	b.n	8001e9c <getPinName+0x168>
        case LL_GPIO_PIN_5:  return "Pin 5";
 8001e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001edc <getPinName+0x1a8>)
 8001e70:	e014      	b.n	8001e9c <getPinName+0x168>
        case LL_GPIO_PIN_6:  return "Pin 6";
 8001e72:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee0 <getPinName+0x1ac>)
 8001e74:	e012      	b.n	8001e9c <getPinName+0x168>
        case LL_GPIO_PIN_7:  return "Pin 7";
 8001e76:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee4 <getPinName+0x1b0>)
 8001e78:	e010      	b.n	8001e9c <getPinName+0x168>
        case LL_GPIO_PIN_8:  return "Pin 8";
 8001e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee8 <getPinName+0x1b4>)
 8001e7c:	e00e      	b.n	8001e9c <getPinName+0x168>
        case LL_GPIO_PIN_9:  return "Pin 9";
 8001e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001eec <getPinName+0x1b8>)
 8001e80:	e00c      	b.n	8001e9c <getPinName+0x168>
        case LL_GPIO_PIN_10: return "Pin 10";
 8001e82:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef0 <getPinName+0x1bc>)
 8001e84:	e00a      	b.n	8001e9c <getPinName+0x168>
        case LL_GPIO_PIN_11: return "Pin 11";
 8001e86:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef4 <getPinName+0x1c0>)
 8001e88:	e008      	b.n	8001e9c <getPinName+0x168>
        case LL_GPIO_PIN_12: return "Pin 12";
 8001e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef8 <getPinName+0x1c4>)
 8001e8c:	e006      	b.n	8001e9c <getPinName+0x168>
        case LL_GPIO_PIN_13: return "Pin 13";
 8001e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001efc <getPinName+0x1c8>)
 8001e90:	e004      	b.n	8001e9c <getPinName+0x168>
        case LL_GPIO_PIN_14: return "Pin 14";
 8001e92:	4b1b      	ldr	r3, [pc, #108]	@ (8001f00 <getPinName+0x1cc>)
 8001e94:	e002      	b.n	8001e9c <getPinName+0x168>
        case LL_GPIO_PIN_15: return "Pin 15";
 8001e96:	4b1b      	ldr	r3, [pc, #108]	@ (8001f04 <getPinName+0x1d0>)
 8001e98:	e000      	b.n	8001e9c <getPinName+0x168>
        default: return "Unknown Pin";
 8001e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001f08 <getPinName+0x1d4>)
    }
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	04800080 	.word	0x04800080
 8001eac:	04400040 	.word	0x04400040
 8001eb0:	04200020 	.word	0x04200020
 8001eb4:	04100010 	.word	0x04100010
 8001eb8:	04080008 	.word	0x04080008
 8001ebc:	04040004 	.word	0x04040004
 8001ec0:	04020002 	.word	0x04020002
 8001ec4:	04010001 	.word	0x04010001
 8001ec8:	080065fc 	.word	0x080065fc
 8001ecc:	08006604 	.word	0x08006604
 8001ed0:	0800660c 	.word	0x0800660c
 8001ed4:	08006614 	.word	0x08006614
 8001ed8:	0800661c 	.word	0x0800661c
 8001edc:	08006624 	.word	0x08006624
 8001ee0:	0800662c 	.word	0x0800662c
 8001ee4:	08006634 	.word	0x08006634
 8001ee8:	0800663c 	.word	0x0800663c
 8001eec:	08006644 	.word	0x08006644
 8001ef0:	0800664c 	.word	0x0800664c
 8001ef4:	08006654 	.word	0x08006654
 8001ef8:	0800665c 	.word	0x0800665c
 8001efc:	08006664 	.word	0x08006664
 8001f00:	0800666c 	.word	0x0800666c
 8001f04:	08006674 	.word	0x08006674
 8001f08:	0800667c 	.word	0x0800667c

08001f0c <setConnection>:

MainTrack mainTracks[32] = {0};
SignalAnalyzerTrack signalAnalyzerTracks[8] = {0};
uint8_t ledsToMainTracks[120] = {0};

void setConnection(int x, int y, MUX mux, uint8_t mode) {
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	6039      	str	r1, [r7, #0]
 8001f18:	f107 0110 	add.w	r1, r7, #16
 8001f1c:	e881 000c 	stmia.w	r1, {r2, r3}
    if (x < 0 || x > 15 || y < 0 || y > 7) {
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f2c0 80bd 	blt.w	80020a2 <setConnection+0x196>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b0f      	cmp	r3, #15
 8001f2c:	f300 80b9 	bgt.w	80020a2 <setConnection+0x196>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f2c0 80b5 	blt.w	80020a2 <setConnection+0x196>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	2b07      	cmp	r3, #7
 8001f3c:	f300 80b1 	bgt.w	80020a2 <setConnection+0x196>
    }

//    printMUXDetails(&mux);

    // Activate multiplexer using the struct for CS
    LL_GPIO_ResetOutputPin(mux.port, mux.pin);
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	4611      	mov	r1, r2
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff fea7 	bl	8001c9a <LL_GPIO_ResetOutputPin>
    LL_mDelay(20);
 8001f4c:	2014      	movs	r0, #20
 8001f4e:	f002 f9cd 	bl	80042ec <LL_mDelay>
    LL_GPIO_SetOutputPin(mux.port, mux.pin);
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	4611      	mov	r1, r2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff fe8f 	bl	8001c7c <LL_GPIO_SetOutputPin>
    LL_mDelay(20);
 8001f5e:	2014      	movs	r0, #20
 8001f60:	f002 f9c4 	bl	80042ec <LL_mDelay>

    // Set X address
    (x & 0x01) ? LL_GPIO_SetOutputPin(AX_GPIO, AX0_PIN) : LL_GPIO_ResetOutputPin(AX_GPIO, AX0_PIN);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d005      	beq.n	8001f7a <setConnection+0x6e>
 8001f6e:	f244 0140 	movw	r1, #16448	@ 0x4040
 8001f72:	484f      	ldr	r0, [pc, #316]	@ (80020b0 <setConnection+0x1a4>)
 8001f74:	f7ff fe82 	bl	8001c7c <LL_GPIO_SetOutputPin>
 8001f78:	e004      	b.n	8001f84 <setConnection+0x78>
 8001f7a:	f244 0140 	movw	r1, #16448	@ 0x4040
 8001f7e:	484c      	ldr	r0, [pc, #304]	@ (80020b0 <setConnection+0x1a4>)
 8001f80:	f7ff fe8b 	bl	8001c9a <LL_GPIO_ResetOutputPin>
    (x & 0x02) ? LL_GPIO_SetOutputPin(AX_GPIO, AX1_PIN) : LL_GPIO_ResetOutputPin(AX_GPIO, AX1_PIN);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d005      	beq.n	8001f9a <setConnection+0x8e>
 8001f8e:	f241 0110 	movw	r1, #4112	@ 0x1010
 8001f92:	4847      	ldr	r0, [pc, #284]	@ (80020b0 <setConnection+0x1a4>)
 8001f94:	f7ff fe72 	bl	8001c7c <LL_GPIO_SetOutputPin>
 8001f98:	e004      	b.n	8001fa4 <setConnection+0x98>
 8001f9a:	f241 0110 	movw	r1, #4112	@ 0x1010
 8001f9e:	4844      	ldr	r0, [pc, #272]	@ (80020b0 <setConnection+0x1a4>)
 8001fa0:	f7ff fe7b 	bl	8001c9a <LL_GPIO_ResetOutputPin>
    (x & 0x04) ? LL_GPIO_SetOutputPin(AX_GPIO, AX2_PIN) : LL_GPIO_ResetOutputPin(AX_GPIO, AX2_PIN);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d005      	beq.n	8001fba <setConnection+0xae>
 8001fae:	f640 0108 	movw	r1, #2056	@ 0x808
 8001fb2:	483f      	ldr	r0, [pc, #252]	@ (80020b0 <setConnection+0x1a4>)
 8001fb4:	f7ff fe62 	bl	8001c7c <LL_GPIO_SetOutputPin>
 8001fb8:	e004      	b.n	8001fc4 <setConnection+0xb8>
 8001fba:	f640 0108 	movw	r1, #2056	@ 0x808
 8001fbe:	483c      	ldr	r0, [pc, #240]	@ (80020b0 <setConnection+0x1a4>)
 8001fc0:	f7ff fe6b 	bl	8001c9a <LL_GPIO_ResetOutputPin>
    (x & 0x08) ? LL_GPIO_SetOutputPin(AX_GPIO, AX3_PIN) : LL_GPIO_ResetOutputPin(AX_GPIO, AX3_PIN);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d005      	beq.n	8001fda <setConnection+0xce>
 8001fce:	f242 0120 	movw	r1, #8224	@ 0x2020
 8001fd2:	4837      	ldr	r0, [pc, #220]	@ (80020b0 <setConnection+0x1a4>)
 8001fd4:	f7ff fe52 	bl	8001c7c <LL_GPIO_SetOutputPin>
 8001fd8:	e004      	b.n	8001fe4 <setConnection+0xd8>
 8001fda:	f242 0120 	movw	r1, #8224	@ 0x2020
 8001fde:	4834      	ldr	r0, [pc, #208]	@ (80020b0 <setConnection+0x1a4>)
 8001fe0:	f7ff fe5b 	bl	8001c9a <LL_GPIO_ResetOutputPin>

    // Set Y address
    (y & 0x01) ? LL_GPIO_SetOutputPin(AY_GPIO, AY0_PIN) : LL_GPIO_ResetOutputPin(AY_GPIO, AY0_PIN);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d005      	beq.n	8001ffa <setConnection+0xee>
 8001fee:	f240 1101 	movw	r1, #257	@ 0x101
 8001ff2:	482f      	ldr	r0, [pc, #188]	@ (80020b0 <setConnection+0x1a4>)
 8001ff4:	f7ff fe42 	bl	8001c7c <LL_GPIO_SetOutputPin>
 8001ff8:	e004      	b.n	8002004 <setConnection+0xf8>
 8001ffa:	f240 1101 	movw	r1, #257	@ 0x101
 8001ffe:	482c      	ldr	r0, [pc, #176]	@ (80020b0 <setConnection+0x1a4>)
 8002000:	f7ff fe4b 	bl	8001c9a <LL_GPIO_ResetOutputPin>
    (y & 0x02) ? LL_GPIO_SetOutputPin(AY_GPIO, AY1_PIN) : LL_GPIO_ResetOutputPin(AY_GPIO, AY1_PIN);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d005      	beq.n	800201a <setConnection+0x10e>
 800200e:	f240 2102 	movw	r1, #514	@ 0x202
 8002012:	4827      	ldr	r0, [pc, #156]	@ (80020b0 <setConnection+0x1a4>)
 8002014:	f7ff fe32 	bl	8001c7c <LL_GPIO_SetOutputPin>
 8002018:	e004      	b.n	8002024 <setConnection+0x118>
 800201a:	f240 2102 	movw	r1, #514	@ 0x202
 800201e:	4824      	ldr	r0, [pc, #144]	@ (80020b0 <setConnection+0x1a4>)
 8002020:	f7ff fe3b 	bl	8001c9a <LL_GPIO_ResetOutputPin>
    (y & 0x04) ? LL_GPIO_SetOutputPin(AY_GPIO, AY2_PIN) : LL_GPIO_ResetOutputPin(AY_GPIO, AY2_PIN);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	2b00      	cmp	r3, #0
 800202c:	d005      	beq.n	800203a <setConnection+0x12e>
 800202e:	f240 4104 	movw	r1, #1028	@ 0x404
 8002032:	481f      	ldr	r0, [pc, #124]	@ (80020b0 <setConnection+0x1a4>)
 8002034:	f7ff fe22 	bl	8001c7c <LL_GPIO_SetOutputPin>
 8002038:	e004      	b.n	8002044 <setConnection+0x138>
 800203a:	f240 4104 	movw	r1, #1028	@ 0x404
 800203e:	481c      	ldr	r0, [pc, #112]	@ (80020b0 <setConnection+0x1a4>)
 8002040:	f7ff fe2b 	bl	8001c9a <LL_GPIO_ResetOutputPin>


    // Set data pin
    mode ? LL_GPIO_SetOutputPin(DAT_GPIO, DAT_PIN) : LL_GPIO_ResetOutputPin(DAT_GPIO, DAT_PIN);
 8002044:	f897 30a0 	ldrb.w	r3, [r7, #160]	@ 0xa0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <setConnection+0x14c>
 800204c:	f248 0180 	movw	r1, #32896	@ 0x8080
 8002050:	4817      	ldr	r0, [pc, #92]	@ (80020b0 <setConnection+0x1a4>)
 8002052:	f7ff fe13 	bl	8001c7c <LL_GPIO_SetOutputPin>
 8002056:	e004      	b.n	8002062 <setConnection+0x156>
 8002058:	f248 0180 	movw	r1, #32896	@ 0x8080
 800205c:	4814      	ldr	r0, [pc, #80]	@ (80020b0 <setConnection+0x1a4>)
 800205e:	f7ff fe1c 	bl	8001c9a <LL_GPIO_ResetOutputPin>

    // Strobe signal
    LL_mDelay(20);
 8002062:	2014      	movs	r0, #20
 8002064:	f002 f942 	bl	80042ec <LL_mDelay>
	LL_GPIO_SetOutputPin(STB_GPIO, STB_PIN);
 8002068:	4912      	ldr	r1, [pc, #72]	@ (80020b4 <setConnection+0x1a8>)
 800206a:	4811      	ldr	r0, [pc, #68]	@ (80020b0 <setConnection+0x1a4>)
 800206c:	f7ff fe06 	bl	8001c7c <LL_GPIO_SetOutputPin>
	LL_mDelay(20);
 8002070:	2014      	movs	r0, #20
 8002072:	f002 f93b 	bl	80042ec <LL_mDelay>
	LL_GPIO_ResetOutputPin(STB_GPIO, STB_PIN);
 8002076:	490f      	ldr	r1, [pc, #60]	@ (80020b4 <setConnection+0x1a8>)
 8002078:	480d      	ldr	r0, [pc, #52]	@ (80020b0 <setConnection+0x1a4>)
 800207a:	f7ff fe0e 	bl	8001c9a <LL_GPIO_ResetOutputPin>

	LL_mDelay(20);
 800207e:	2014      	movs	r0, #20
 8002080:	f002 f934 	bl	80042ec <LL_mDelay>

	LL_GPIO_ResetOutputPin(DAT_GPIO, DAT_PIN);
 8002084:	f248 0180 	movw	r1, #32896	@ 0x8080
 8002088:	4809      	ldr	r0, [pc, #36]	@ (80020b0 <setConnection+0x1a4>)
 800208a:	f7ff fe06 	bl	8001c9a <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(mux.port, mux.pin);
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	4611      	mov	r1, r2
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff fe00 	bl	8001c9a <LL_GPIO_ResetOutputPin>

	LL_mDelay(20);
 800209a:	2014      	movs	r0, #20
 800209c:	f002 f926 	bl	80042ec <LL_mDelay>
 80020a0:	e000      	b.n	80020a4 <setConnection+0x198>
        return;
 80020a2:	bf00      	nop
}
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80020ac:	b002      	add	sp, #8
 80020ae:	4770      	bx	lr
 80020b0:	40010c00 	.word	0x40010c00
 80020b4:	04010001 	.word	0x04010001

080020b8 <routeBreadboard>:

void routeBreadboard(int breadboardPin1, int breadboardPin2, int net_id, MUX *muxes, size_t muxCount, uint8_t mode, RGB_t rgb) {
 80020b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ba:	b0c3      	sub	sp, #268	@ 0x10c
 80020bc:	af24      	add	r7, sp, #144	@ 0x90
 80020be:	6278      	str	r0, [r7, #36]	@ 0x24
 80020c0:	6239      	str	r1, [r7, #32]
 80020c2:	61fa      	str	r2, [r7, #28]
 80020c4:	61bb      	str	r3, [r7, #24]

    if (breadboardPin1 > 120 || breadboardPin1 < 1 || breadboardPin2 > 120 || breadboardPin2 < 1){
 80020c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c8:	2b78      	cmp	r3, #120	@ 0x78
 80020ca:	f300 82e8 	bgt.w	800269e <routeBreadboard+0x5e6>
 80020ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f340 82e4 	ble.w	800269e <routeBreadboard+0x5e6>
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	2b78      	cmp	r3, #120	@ 0x78
 80020da:	f300 82e0 	bgt.w	800269e <routeBreadboard+0x5e6>
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f340 82dc 	ble.w	800269e <routeBreadboard+0x5e6>
    	return; // Maybe message to UART idk?
    }

    if (mode != 0 && mode != 1){
 80020e6:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d004      	beq.n	80020f8 <routeBreadboard+0x40>
 80020ee:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	f040 82d5 	bne.w	80026a2 <routeBreadboard+0x5ea>
    if (rgb.color.r > 255 || rgb.color.r < 0 || rgb.color.g > 255 || rgb.color.g < 0 || rgb.color.b > 255 || rgb.color.b < 0){
		return; // Maybe message to UART idk?
    }

	char pin1Name[6], pin2Name[6];
    snprintf(pin1Name, sizeof(pin1Name), "B_%d", breadboardPin1);
 80020f8:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80020fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fe:	4aa2      	ldr	r2, [pc, #648]	@ (8002388 <routeBreadboard+0x2d0>)
 8002100:	2106      	movs	r1, #6
 8002102:	f002 fb1b 	bl	800473c <sniprintf>
    snprintf(pin2Name, sizeof(pin2Name), "B_%d", breadboardPin2);
 8002106:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800210a:	6a3b      	ldr	r3, [r7, #32]
 800210c:	4a9e      	ldr	r2, [pc, #632]	@ (8002388 <routeBreadboard+0x2d0>)
 800210e:	2106      	movs	r1, #6
 8002110:	f002 fb14 	bl	800473c <sniprintf>

    // Keep track of leds:
    mode == 1 ? ledsToMainTracks[breadboardPin1 - 1]++ : ledsToMainTracks[breadboardPin1 - 1]--;
 8002114:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 8002118:	2b01      	cmp	r3, #1
 800211a:	d108      	bne.n	800212e <routeBreadboard+0x76>
 800211c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211e:	3b01      	subs	r3, #1
 8002120:	4a9a      	ldr	r2, [pc, #616]	@ (800238c <routeBreadboard+0x2d4>)
 8002122:	5cd2      	ldrb	r2, [r2, r3]
 8002124:	3201      	adds	r2, #1
 8002126:	b2d1      	uxtb	r1, r2
 8002128:	4a98      	ldr	r2, [pc, #608]	@ (800238c <routeBreadboard+0x2d4>)
 800212a:	54d1      	strb	r1, [r2, r3]
 800212c:	e007      	b.n	800213e <routeBreadboard+0x86>
 800212e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002130:	3b01      	subs	r3, #1
 8002132:	4a96      	ldr	r2, [pc, #600]	@ (800238c <routeBreadboard+0x2d4>)
 8002134:	5cd2      	ldrb	r2, [r2, r3]
 8002136:	3a01      	subs	r2, #1
 8002138:	b2d1      	uxtb	r1, r2
 800213a:	4a94      	ldr	r2, [pc, #592]	@ (800238c <routeBreadboard+0x2d4>)
 800213c:	54d1      	strb	r1, [r2, r3]
    mode == 1 ? ledsToMainTracks[breadboardPin2 - 1]++ : ledsToMainTracks[breadboardPin2 - 1]--;
 800213e:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 8002142:	2b01      	cmp	r3, #1
 8002144:	d108      	bne.n	8002158 <routeBreadboard+0xa0>
 8002146:	6a3b      	ldr	r3, [r7, #32]
 8002148:	3b01      	subs	r3, #1
 800214a:	4a90      	ldr	r2, [pc, #576]	@ (800238c <routeBreadboard+0x2d4>)
 800214c:	5cd2      	ldrb	r2, [r2, r3]
 800214e:	3201      	adds	r2, #1
 8002150:	b2d1      	uxtb	r1, r2
 8002152:	4a8e      	ldr	r2, [pc, #568]	@ (800238c <routeBreadboard+0x2d4>)
 8002154:	54d1      	strb	r1, [r2, r3]
 8002156:	e007      	b.n	8002168 <routeBreadboard+0xb0>
 8002158:	6a3b      	ldr	r3, [r7, #32]
 800215a:	3b01      	subs	r3, #1
 800215c:	4a8b      	ldr	r2, [pc, #556]	@ (800238c <routeBreadboard+0x2d4>)
 800215e:	5cd2      	ldrb	r2, [r2, r3]
 8002160:	3a01      	subs	r2, #1
 8002162:	b2d1      	uxtb	r1, r2
 8002164:	4a89      	ldr	r2, [pc, #548]	@ (800238c <routeBreadboard+0x2d4>)
 8002166:	54d1      	strb	r1, [r2, r3]

//    printf("LedsToMainTrakcs[%d] = %d\n", breadboardPin1 - 1, ledsToMainTracks[breadboardPin1 - 1]);
//    printf("LedsToMainTrakcs[%d] = %d\n", breadboardPin2 - 1, ledsToMainTracks[breadboardPin2 - 1]);

    for (int i = 0; i < 120; i++){
 8002168:	2300      	movs	r3, #0
 800216a:	677b      	str	r3, [r7, #116]	@ 0x74
 800216c:	e002      	b.n	8002174 <routeBreadboard+0xbc>
 800216e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002170:	3301      	adds	r3, #1
 8002172:	677b      	str	r3, [r7, #116]	@ 0x74
 8002174:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002176:	2b77      	cmp	r3, #119	@ 0x77
 8002178:	ddf9      	ble.n	800216e <routeBreadboard+0xb6>
    	if (ledsToMainTracks[i] < 0){
    		ledsToMainTracks[i] = 0;
    	}
    }

    printf("Routing %s to %s with net ID: %d\n", pin1Name, pin2Name, net_id);
 800217a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800217e:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	4882      	ldr	r0, [pc, #520]	@ (8002390 <routeBreadboard+0x2d8>)
 8002186:	f002 fa61 	bl	800464c <iprintf>
    fflush(stdout);
 800218a:	4b82      	ldr	r3, [pc, #520]	@ (8002394 <routeBreadboard+0x2dc>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	4618      	mov	r0, r3
 8002192:	f002 f985 	bl	80044a0 <fflush>

    int xIndex1 = -1, yIndex1 = -1;
 8002196:	f04f 33ff 	mov.w	r3, #4294967295
 800219a:	673b      	str	r3, [r7, #112]	@ 0x70
 800219c:	f04f 33ff 	mov.w	r3, #4294967295
 80021a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    int xIndex2 = -1, yIndex2 = -1;
 80021a2:	f04f 33ff 	mov.w	r3, #4294967295
 80021a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80021a8:	f04f 33ff 	mov.w	r3, #4294967295
 80021ac:	667b      	str	r3, [r7, #100]	@ 0x64
    MUX *mux1 = NULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	663b      	str	r3, [r7, #96]	@ 0x60
    MUX *mux2 = NULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    MainTrack *selectedTrack = NULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	65bb      	str	r3, [r7, #88]	@ 0x58
    int muxIndex = -1;
 80021ba:	f04f 33ff 	mov.w	r3, #4294967295
 80021be:	643b      	str	r3, [r7, #64]	@ 0x40

    // Find an available or existing main track for the given net ID
    for (int x = 0; x < 32; ++x) {
 80021c0:	2300      	movs	r3, #0
 80021c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80021c4:	e02c      	b.n	8002220 <routeBreadboard+0x168>
        if (mainTracks[x].net_id == net_id) {
 80021c6:	4a74      	ldr	r2, [pc, #464]	@ (8002398 <routeBreadboard+0x2e0>)
 80021c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	4413      	add	r3, r2
 80021ce:	3304      	adds	r3, #4
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	69fa      	ldr	r2, [r7, #28]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d105      	bne.n	80021e4 <routeBreadboard+0x12c>
            selectedTrack = &mainTracks[x];  // Reuse existing track if net ID matches
 80021d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021da:	011b      	lsls	r3, r3, #4
 80021dc:	4a6e      	ldr	r2, [pc, #440]	@ (8002398 <routeBreadboard+0x2e0>)
 80021de:	4413      	add	r3, r2
 80021e0:	65bb      	str	r3, [r7, #88]	@ 0x58
            break;
 80021e2:	e020      	b.n	8002226 <routeBreadboard+0x16e>
        } else if (!mainTracks[x].is_used) {
 80021e4:	4a6c      	ldr	r2, [pc, #432]	@ (8002398 <routeBreadboard+0x2e0>)
 80021e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	4413      	add	r3, r2
 80021ec:	3308      	adds	r3, #8
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d112      	bne.n	800221a <routeBreadboard+0x162>
            selectedTrack = &mainTracks[x];  // Assign new track if available
 80021f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021f6:	011b      	lsls	r3, r3, #4
 80021f8:	4a67      	ldr	r2, [pc, #412]	@ (8002398 <routeBreadboard+0x2e0>)
 80021fa:	4413      	add	r3, r2
 80021fc:	65bb      	str	r3, [r7, #88]	@ 0x58
            selectedTrack->is_used = 1;
 80021fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002200:	2201      	movs	r2, #1
 8002202:	609a      	str	r2, [r3, #8]
            selectedTrack->net_id = net_id;
 8002204:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002206:	69fa      	ldr	r2, [r7, #28]
 8002208:	605a      	str	r2, [r3, #4]
            selectedTrack->track_id = x; // Assign track ID here
 800220a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800220c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800220e:	601a      	str	r2, [r3, #0]
            printf("Selected Track id: %d\n", x);
 8002210:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002212:	4862      	ldr	r0, [pc, #392]	@ (800239c <routeBreadboard+0x2e4>)
 8002214:	f002 fa1a 	bl	800464c <iprintf>
            break;
 8002218:	e005      	b.n	8002226 <routeBreadboard+0x16e>
    for (int x = 0; x < 32; ++x) {
 800221a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800221c:	3301      	adds	r3, #1
 800221e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002220:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002222:	2b1f      	cmp	r3, #31
 8002224:	ddcf      	ble.n	80021c6 <routeBreadboard+0x10e>
        }
    }

    if (!selectedTrack) {
 8002226:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002228:	2b00      	cmp	r3, #0
 800222a:	d104      	bne.n	8002236 <routeBreadboard+0x17e>
        printf("Error: No available main track for net ID %d\n", net_id);
 800222c:	69f9      	ldr	r1, [r7, #28]
 800222e:	485c      	ldr	r0, [pc, #368]	@ (80023a0 <routeBreadboard+0x2e8>)
 8002230:	f002 fa0c 	bl	800464c <iprintf>
        return;
 8002234:	e236      	b.n	80026a4 <routeBreadboard+0x5ec>
    }

    muxIndex = (selectedTrack->track_id < 16) ? 0 : 1;
 8002236:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2b0f      	cmp	r3, #15
 800223c:	bfcc      	ite	gt
 800223e:	2301      	movgt	r3, #1
 8002240:	2300      	movle	r3, #0
 8002242:	b2db      	uxtb	r3, r3
 8002244:	643b      	str	r3, [r7, #64]	@ 0x40

	for (size_t i = muxIndex; i < muxCount; i += 2) {
 8002246:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002248:	653b      	str	r3, [r7, #80]	@ 0x50
 800224a:	e06b      	b.n	8002324 <routeBreadboard+0x26c>
		for (int y = 0; y < 8; ++y) {
 800224c:	2300      	movs	r3, #0
 800224e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002250:	e05c      	b.n	800230c <routeBreadboard+0x254>
			if (strcmp((*muxes[i].yPins)[y], pin1Name) == 0 && mux1 == NULL) {
 8002252:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002254:	4613      	mov	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4413      	add	r3, r2
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	461a      	mov	r2, r3
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	4413      	add	r3, r2
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800226a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f7fd ffd7 	bl	8000224 <strcmp>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d117      	bne.n	80022ac <routeBreadboard+0x1f4>
 800227c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800227e:	2b00      	cmp	r3, #0
 8002280:	d114      	bne.n	80022ac <routeBreadboard+0x1f4>
				xIndex1 = selectedTrack->track_id % 16;
 8002282:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	425a      	negs	r2, r3
 8002288:	f003 030f 	and.w	r3, r3, #15
 800228c:	f002 020f 	and.w	r2, r2, #15
 8002290:	bf58      	it	pl
 8002292:	4253      	negpl	r3, r2
 8002294:	673b      	str	r3, [r7, #112]	@ 0x70
				yIndex1 = y;
 8002296:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002298:	66fb      	str	r3, [r7, #108]	@ 0x6c
				mux1 = &muxes[i];
 800229a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800229c:	4613      	mov	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4413      	add	r3, r2
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	461a      	mov	r2, r3
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	4413      	add	r3, r2
 80022aa:	663b      	str	r3, [r7, #96]	@ 0x60
			}
			if (strcmp((*muxes[i].yPins)[y], pin2Name) == 0 && mux2 == NULL) {
 80022ac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80022ae:	4613      	mov	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4413      	add	r3, r2
 80022b4:	011b      	lsls	r3, r3, #4
 80022b6:	461a      	mov	r2, r3
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	4413      	add	r3, r2
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80022c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80022c8:	4611      	mov	r1, r2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fd ffaa 	bl	8000224 <strcmp>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d117      	bne.n	8002306 <routeBreadboard+0x24e>
 80022d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d114      	bne.n	8002306 <routeBreadboard+0x24e>
				xIndex2 = selectedTrack->track_id % 16;
 80022dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	425a      	negs	r2, r3
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	f002 020f 	and.w	r2, r2, #15
 80022ea:	bf58      	it	pl
 80022ec:	4253      	negpl	r3, r2
 80022ee:	66bb      	str	r3, [r7, #104]	@ 0x68
				yIndex2 = y;
 80022f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022f2:	667b      	str	r3, [r7, #100]	@ 0x64
				mux2 = &muxes[i];
 80022f4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4413      	add	r3, r2
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	461a      	mov	r2, r3
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	4413      	add	r3, r2
 8002304:	65fb      	str	r3, [r7, #92]	@ 0x5c
		for (int y = 0; y < 8; ++y) {
 8002306:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002308:	3301      	adds	r3, #1
 800230a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800230c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800230e:	2b07      	cmp	r3, #7
 8002310:	dd9f      	ble.n	8002252 <routeBreadboard+0x19a>
			}
		}
		if (mux1 && mux2) break;
 8002312:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002314:	2b00      	cmp	r3, #0
 8002316:	d002      	beq.n	800231e <routeBreadboard+0x266>
 8002318:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800231a:	2b00      	cmp	r3, #0
 800231c:	d108      	bne.n	8002330 <routeBreadboard+0x278>
	for (size_t i = muxIndex; i < muxCount; i += 2) {
 800231e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002320:	3302      	adds	r3, #2
 8002322:	653b      	str	r3, [r7, #80]	@ 0x50
 8002324:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002326:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800232a:	429a      	cmp	r2, r3
 800232c:	d38e      	bcc.n	800224c <routeBreadboard+0x194>
 800232e:	e000      	b.n	8002332 <routeBreadboard+0x27a>
		if (mux1 && mux2) break;
 8002330:	bf00      	nop
	}


    // Update connection counter based on mode
	if (mode == 1) {
 8002332:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 8002336:	2b01      	cmp	r3, #1
 8002338:	d138      	bne.n	80023ac <routeBreadboard+0x2f4>
		if (mux1->usage[xIndex1][yIndex1] > 0 && mux2->usage[xIndex2][yIndex2] > 0) {
 800233a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800233c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	441a      	add	r2, r3
 8002342:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002344:	4413      	add	r3, r2
 8002346:	3310      	adds	r3, #16
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00d      	beq.n	800236a <routeBreadboard+0x2b2>
 800234e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002350:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	441a      	add	r2, r3
 8002356:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002358:	4413      	add	r3, r2
 800235a:	3310      	adds	r3, #16
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <routeBreadboard+0x2b2>
			printf("Already connected, skip. NOT incrementing usage or maintrack counters\n\n");
 8002362:	4810      	ldr	r0, [pc, #64]	@ (80023a4 <routeBreadboard+0x2ec>)
 8002364:	f002 f9e2 	bl	800472c <puts>
			return;
 8002368:	e19c      	b.n	80026a4 <routeBreadboard+0x5ec>
		}
		selectedTrack->current_connections++; // Increment current connections
 800236a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	1c5a      	adds	r2, r3, #1
 8002370:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002372:	60da      	str	r2, [r3, #12]
		printf("Main Track %d incremented. Current connections: %d\n", selectedTrack->track_id, selectedTrack->current_connections);
 8002374:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002376:	6819      	ldr	r1, [r3, #0]
 8002378:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	461a      	mov	r2, r3
 800237e:	480a      	ldr	r0, [pc, #40]	@ (80023a8 <routeBreadboard+0x2f0>)
 8002380:	f002 f964 	bl	800464c <iprintf>
 8002384:	e038      	b.n	80023f8 <routeBreadboard+0x340>
 8002386:	bf00      	nop
 8002388:	08006700 	.word	0x08006700
 800238c:	2000557c 	.word	0x2000557c
 8002390:	08006708 	.word	0x08006708
 8002394:	20001ff0 	.word	0x20001ff0
 8002398:	2000531c 	.word	0x2000531c
 800239c:	0800672c 	.word	0x0800672c
 80023a0:	08006744 	.word	0x08006744
 80023a4:	08006774 	.word	0x08006774
 80023a8:	080067bc 	.word	0x080067bc
	} else if (mode == 0) {
 80023ac:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d121      	bne.n	80023f8 <routeBreadboard+0x340>
		selectedTrack->current_connections--; // Decrement current connections
 80023b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	1e5a      	subs	r2, r3, #1
 80023ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023bc:	60da      	str	r2, [r3, #12]
		if (selectedTrack->current_connections <= 0) { // If counter is 0, free track
 80023be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	dc10      	bgt.n	80023e8 <routeBreadboard+0x330>
			printf("Main Track %d is now free\n", selectedTrack->track_id);
 80023c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4619      	mov	r1, r3
 80023cc:	4896      	ldr	r0, [pc, #600]	@ (8002628 <routeBreadboard+0x570>)
 80023ce:	f002 f93d 	bl	800464c <iprintf>
			selectedTrack->is_used = 0;
 80023d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023d4:	2200      	movs	r2, #0
 80023d6:	609a      	str	r2, [r3, #8]
			selectedTrack->net_id = -1;
 80023d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023da:	f04f 32ff 	mov.w	r2, #4294967295
 80023de:	605a      	str	r2, [r3, #4]
			selectedTrack->current_connections = 0;
 80023e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023e2:	2200      	movs	r2, #0
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	e007      	b.n	80023f8 <routeBreadboard+0x340>
		}else{
			printf("Main Track %d decremented, but still occupied. Current connections: %d\n", selectedTrack->track_id, selectedTrack->current_connections);
 80023e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023ea:	6819      	ldr	r1, [r3, #0]
 80023ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	461a      	mov	r2, r3
 80023f2:	488e      	ldr	r0, [pc, #568]	@ (800262c <routeBreadboard+0x574>)
 80023f4:	f002 f92a 	bl	800464c <iprintf>

		}
	}


	if (mux1 && mux2) {
 80023f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 8145 	beq.w	800268a <routeBreadboard+0x5d2>
 8002400:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 8141 	beq.w	800268a <routeBreadboard+0x5d2>
		const char *action1 = "SKIP";
 8002408:	4b89      	ldr	r3, [pc, #548]	@ (8002630 <routeBreadboard+0x578>)
 800240a:	64bb      	str	r3, [r7, #72]	@ 0x48
		const char *action2 = "SKIP";
 800240c:	4b88      	ldr	r3, [pc, #544]	@ (8002630 <routeBreadboard+0x578>)
 800240e:	647b      	str	r3, [r7, #68]	@ 0x44

		uint8_t *usage1 = &mux1->usage[xIndex1][yIndex1];
 8002410:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002412:	00da      	lsls	r2, r3, #3
 8002414:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002416:	4413      	add	r3, r2
 8002418:	3310      	adds	r3, #16
 800241a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800241c:	4413      	add	r3, r2
 800241e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		uint8_t *usage2 = &mux2->usage[xIndex2][yIndex2];
 8002420:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002422:	00da      	lsls	r2, r3, #3
 8002424:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002426:	4413      	add	r3, r2
 8002428:	3310      	adds	r3, #16
 800242a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800242c:	4413      	add	r3, r2
 800242e:	63bb      	str	r3, [r7, #56]	@ 0x38

		// Only connect if usage was 0 before
		if (mode == 1) {
 8002430:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 8002434:	2b01      	cmp	r3, #1
 8002436:	d144      	bne.n	80024c2 <routeBreadboard+0x40a>

			action1 = (*usage1 == 0) ? "Connecting" : "Already Connected";
 8002438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <routeBreadboard+0x38c>
 8002440:	4b7c      	ldr	r3, [pc, #496]	@ (8002634 <routeBreadboard+0x57c>)
 8002442:	e000      	b.n	8002446 <routeBreadboard+0x38e>
 8002444:	4b7c      	ldr	r3, [pc, #496]	@ (8002638 <routeBreadboard+0x580>)
 8002446:	64bb      	str	r3, [r7, #72]	@ 0x48
			action2 = (*usage2 == 0) ? "Connecting" : "Already Connected";
 8002448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <routeBreadboard+0x39c>
 8002450:	4b78      	ldr	r3, [pc, #480]	@ (8002634 <routeBreadboard+0x57c>)
 8002452:	e000      	b.n	8002456 <routeBreadboard+0x39e>
 8002454:	4b78      	ldr	r3, [pc, #480]	@ (8002638 <routeBreadboard+0x580>)
 8002456:	647b      	str	r3, [r7, #68]	@ 0x44

			if (*usage1 == 0) setConnection(xIndex1, yIndex1, *mux1, 1);
 8002458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10f      	bne.n	8002480 <routeBreadboard+0x3c8>
 8002460:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 8002462:	2301      	movs	r3, #1
 8002464:	9322      	str	r3, [sp, #136]	@ 0x88
 8002466:	4668      	mov	r0, sp
 8002468:	f104 0308 	add.w	r3, r4, #8
 800246c:	2288      	movs	r2, #136	@ 0x88
 800246e:	4619      	mov	r1, r3
 8002470:	f002 fb29 	bl	8004ac6 <memcpy>
 8002474:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002478:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800247a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800247c:	f7ff fd46 	bl	8001f0c <setConnection>
			if (*usage2 == 0) setConnection(xIndex2, yIndex2, *mux2, 1);
 8002480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10f      	bne.n	80024a8 <routeBreadboard+0x3f0>
 8002488:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 800248a:	2301      	movs	r3, #1
 800248c:	9322      	str	r3, [sp, #136]	@ 0x88
 800248e:	4668      	mov	r0, sp
 8002490:	f104 0308 	add.w	r3, r4, #8
 8002494:	2288      	movs	r2, #136	@ 0x88
 8002496:	4619      	mov	r1, r3
 8002498:	f002 fb15 	bl	8004ac6 <memcpy>
 800249c:	e894 000c 	ldmia.w	r4, {r2, r3}
 80024a0:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80024a2:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80024a4:	f7ff fd32 	bl	8001f0c <setConnection>

			(*usage1)++;
 80024a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	3301      	adds	r3, #1
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024b2:	701a      	strb	r2, [r3, #0]
			(*usage2)++;
 80024b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	3301      	adds	r3, #1
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024be:	701a      	strb	r2, [r3, #0]
 80024c0:	e04b      	b.n	800255a <routeBreadboard+0x4a2>
		} else {

			action1 = (*usage1 == 1) ? "Disconnecting" : "Still In Use";
 80024c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <routeBreadboard+0x416>
 80024ca:	4b5c      	ldr	r3, [pc, #368]	@ (800263c <routeBreadboard+0x584>)
 80024cc:	e000      	b.n	80024d0 <routeBreadboard+0x418>
 80024ce:	4b5c      	ldr	r3, [pc, #368]	@ (8002640 <routeBreadboard+0x588>)
 80024d0:	64bb      	str	r3, [r7, #72]	@ 0x48
			action2 = (*usage2 == 1) ? "Disconnecting" : "Still In Use";
 80024d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <routeBreadboard+0x426>
 80024da:	4b58      	ldr	r3, [pc, #352]	@ (800263c <routeBreadboard+0x584>)
 80024dc:	e000      	b.n	80024e0 <routeBreadboard+0x428>
 80024de:	4b58      	ldr	r3, [pc, #352]	@ (8002640 <routeBreadboard+0x588>)
 80024e0:	647b      	str	r3, [r7, #68]	@ 0x44

			if (*usage1 == 1) setConnection(xIndex1, yIndex1, *mux1, 0);
 80024e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d10f      	bne.n	800250a <routeBreadboard+0x452>
 80024ea:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 80024ec:	2300      	movs	r3, #0
 80024ee:	9322      	str	r3, [sp, #136]	@ 0x88
 80024f0:	4668      	mov	r0, sp
 80024f2:	f104 0308 	add.w	r3, r4, #8
 80024f6:	2288      	movs	r2, #136	@ 0x88
 80024f8:	4619      	mov	r1, r3
 80024fa:	f002 fae4 	bl	8004ac6 <memcpy>
 80024fe:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002502:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8002504:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002506:	f7ff fd01 	bl	8001f0c <setConnection>
			if (*usage2 == 1) setConnection(xIndex2, yIndex2, *mux2, 0);
 800250a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d10f      	bne.n	8002532 <routeBreadboard+0x47a>
 8002512:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 8002514:	2300      	movs	r3, #0
 8002516:	9322      	str	r3, [sp, #136]	@ 0x88
 8002518:	4668      	mov	r0, sp
 800251a:	f104 0308 	add.w	r3, r4, #8
 800251e:	2288      	movs	r2, #136	@ 0x88
 8002520:	4619      	mov	r1, r3
 8002522:	f002 fad0 	bl	8004ac6 <memcpy>
 8002526:	e894 000c 	ldmia.w	r4, {r2, r3}
 800252a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800252c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800252e:	f7ff fced 	bl	8001f0c <setConnection>

			if (*usage1 > 0) (*usage1)--;
 8002532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d005      	beq.n	8002546 <routeBreadboard+0x48e>
 800253a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	3b01      	subs	r3, #1
 8002540:	b2da      	uxtb	r2, r3
 8002542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002544:	701a      	strb	r2, [r3, #0]
			if (*usage2 > 0) (*usage2)--;
 8002546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d005      	beq.n	800255a <routeBreadboard+0x4a2>
 800254e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	3b01      	subs	r3, #1
 8002554:	b2da      	uxtb	r2, r3
 8002556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002558:	701a      	strb	r2, [r3, #0]
		}

		printf(
			"%s (X:%d, Y:%d, Usage:%d) at MUX[%ld] CS: %s, Pin: %s, Main Track: %d\n"
			"%s (X:%d, Y:%d, Usage:%d) at MUX[%ld] CS: %s, Pin: %s, Main Track: %d\n\n",
			action1, xIndex1, yIndex1, *usage1, mux1 - muxes + 1, getPortName(mux1->port), getPinName(mux1->pin), selectedTrack->track_id,
 800255a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800255c:	781b      	ldrb	r3, [r3, #0]
		printf(
 800255e:	617b      	str	r3, [r7, #20]
			action1, xIndex1, yIndex1, *usage1, mux1 - muxes + 1, getPortName(mux1->port), getPinName(mux1->pin), selectedTrack->track_id,
 8002560:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	111b      	asrs	r3, r3, #4
 8002568:	4a36      	ldr	r2, [pc, #216]	@ (8002644 <routeBreadboard+0x58c>)
 800256a:	fb02 f303 	mul.w	r3, r2, r3
		printf(
 800256e:	1c5c      	adds	r4, r3, #1
 8002570:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff fb9f 	bl	8001cb8 <getPortName>
 800257a:	6138      	str	r0, [r7, #16]
 800257c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff fbd7 	bl	8001d34 <getPinName>
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800258a:	681d      	ldr	r5, [r3, #0]
			action2, xIndex2, yIndex2, *usage2, mux2 - muxes + 1, getPortName(mux2->port), getPinName(mux2->pin), selectedTrack->track_id
 800258c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800258e:	781b      	ldrb	r3, [r3, #0]
		printf(
 8002590:	60bb      	str	r3, [r7, #8]
			action2, xIndex2, yIndex2, *usage2, mux2 - muxes + 1, getPortName(mux2->port), getPinName(mux2->pin), selectedTrack->track_id
 8002592:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	111b      	asrs	r3, r3, #4
 800259a:	4a2a      	ldr	r2, [pc, #168]	@ (8002644 <routeBreadboard+0x58c>)
 800259c:	fb02 f303 	mul.w	r3, r2, r3
		printf(
 80025a0:	1c5e      	adds	r6, r3, #1
 80025a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fb86 	bl	8001cb8 <getPortName>
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff fbbe 	bl	8001d34 <getPinName>
 80025b8:	4602      	mov	r2, r0
 80025ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	930c      	str	r3, [sp, #48]	@ 0x30
 80025c0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	920a      	str	r2, [sp, #40]	@ 0x28
 80025c6:	9609      	str	r6, [sp, #36]	@ 0x24
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	9208      	str	r2, [sp, #32]
 80025cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025ce:	9307      	str	r3, [sp, #28]
 80025d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025d2:	9306      	str	r3, [sp, #24]
 80025d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025d6:	9305      	str	r3, [sp, #20]
 80025d8:	9504      	str	r5, [sp, #16]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	9203      	str	r2, [sp, #12]
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	9202      	str	r2, [sp, #8]
 80025e2:	9401      	str	r4, [sp, #4]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025ea:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80025ec:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80025ee:	4816      	ldr	r0, [pc, #88]	@ (8002648 <routeBreadboard+0x590>)
 80025f0:	f002 f82c 	bl	800464c <iprintf>
		);

		fflush(stdout);
 80025f4:	4b15      	ldr	r3, [pc, #84]	@ (800264c <routeBreadboard+0x594>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f001 ff50 	bl	80044a0 <fflush>

		if (mode == 1){
 8002600:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 8002604:	2b01      	cmp	r3, #1
 8002606:	d123      	bne.n	8002650 <routeBreadboard+0x598>
			addToPin(breadboardPin1, rgb);
 8002608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260a:	b2db      	uxtb	r3, r3
 800260c:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8002610:	4618      	mov	r0, r3
 8002612:	f7fd ffed 	bl	80005f0 <addToPin>
			addToPin(breadboardPin2, rgb);
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	b2db      	uxtb	r3, r3
 800261a:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800261e:	4618      	mov	r0, r3
 8002620:	f7fd ffe6 	bl	80005f0 <addToPin>
 8002624:	e02e      	b.n	8002684 <routeBreadboard+0x5cc>
 8002626:	bf00      	nop
 8002628:	080067f0 	.word	0x080067f0
 800262c:	0800680c 	.word	0x0800680c
 8002630:	08006854 	.word	0x08006854
 8002634:	0800685c 	.word	0x0800685c
 8002638:	08006868 	.word	0x08006868
 800263c:	0800687c 	.word	0x0800687c
 8002640:	0800688c 	.word	0x0800688c
 8002644:	38e38e39 	.word	0x38e38e39
 8002648:	0800689c 	.word	0x0800689c
 800264c:	20001ff0 	.word	0x20001ff0
		}else if (mode == 0){
 8002650:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 8002654:	2b00      	cmp	r3, #0
 8002656:	d115      	bne.n	8002684 <routeBreadboard+0x5cc>
			ledsToMainTracks[breadboardPin1 - 1] == 0 ? removeFromPin(breadboardPin1) : (void)0;
 8002658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265a:	3b01      	subs	r3, #1
 800265c:	4a13      	ldr	r2, [pc, #76]	@ (80026ac <routeBreadboard+0x5f4>)
 800265e:	5cd3      	ldrb	r3, [r2, r3]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d104      	bne.n	800266e <routeBreadboard+0x5b6>
 8002664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002666:	b2db      	uxtb	r3, r3
 8002668:	4618      	mov	r0, r3
 800266a:	f7fe f809 	bl	8000680 <removeFromPin>
			ledsToMainTracks[breadboardPin2 - 1] == 0 ? removeFromPin(breadboardPin2) : (void)0;
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	3b01      	subs	r3, #1
 8002672:	4a0e      	ldr	r2, [pc, #56]	@ (80026ac <routeBreadboard+0x5f4>)
 8002674:	5cd3      	ldrb	r3, [r2, r3]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d104      	bne.n	8002684 <routeBreadboard+0x5cc>
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	4618      	mov	r0, r3
 8002680:	f7fd fffe 	bl	8000680 <removeFromPin>
		}

		sendPixelData();
 8002684:	f7fe f878 	bl	8000778 <sendPixelData>
	if (mux1 && mux2) {
 8002688:	e00c      	b.n	80026a4 <routeBreadboard+0x5ec>
	} else {
		printf("Error: Unable to route pins - No available MUX found!\n");
 800268a:	4809      	ldr	r0, [pc, #36]	@ (80026b0 <routeBreadboard+0x5f8>)
 800268c:	f002 f84e 	bl	800472c <puts>
		fflush(stdout);
 8002690:	4b08      	ldr	r3, [pc, #32]	@ (80026b4 <routeBreadboard+0x5fc>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	4618      	mov	r0, r3
 8002698:	f001 ff02 	bl	80044a0 <fflush>
 800269c:	e002      	b.n	80026a4 <routeBreadboard+0x5ec>
    	return; // Maybe message to UART idk?
 800269e:	bf00      	nop
 80026a0:	e000      	b.n	80026a4 <routeBreadboard+0x5ec>
		return; // Maybe message to UART idk?
 80026a2:	bf00      	nop
	}
}
 80026a4:	377c      	adds	r7, #124	@ 0x7c
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026aa:	bf00      	nop
 80026ac:	2000557c 	.word	0x2000557c
 80026b0:	0800692c 	.word	0x0800692c
 80026b4:	20001ff0 	.word	0x20001ff0

080026b8 <routeSignalAnalyzer>:

void routeSignalAnalyzer(int net_id, MUX *muxes, uint8_t mode) {
 80026b8:	b590      	push	{r4, r7, lr}
 80026ba:	b0b7      	sub	sp, #220	@ 0xdc
 80026bc:	af24      	add	r7, sp, #144	@ 0x90
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	4613      	mov	r3, r2
 80026c4:	71fb      	strb	r3, [r7, #7]
    MainTrack *selectedTrack = NULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	647b      	str	r3, [r7, #68]	@ 0x44
    int trackIndex = -1;
 80026ca:	f04f 33ff 	mov.w	r3, #4294967295
 80026ce:	627b      	str	r3, [r7, #36]	@ 0x24
    char trackName[10];  // Buffer for formatted string
    int xIndex = -1, yIndex = -1;
 80026d0:	f04f 33ff 	mov.w	r3, #4294967295
 80026d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80026d6:	f04f 33ff 	mov.w	r3, #4294967295
 80026da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    MUX *mux = NULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Step 1: Find a main track that is used and has the matching net_id
    for (int i = 0; i < 32; i++) {
 80026e0:	2300      	movs	r3, #0
 80026e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80026e4:	e02b      	b.n	800273e <routeSignalAnalyzer+0x86>
        if (mainTracks[i].is_used && mainTracks[i].net_id == net_id) {
 80026e6:	4a8f      	ldr	r2, [pc, #572]	@ (8002924 <routeSignalAnalyzer+0x26c>)
 80026e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	4413      	add	r3, r2
 80026ee:	3308      	adds	r3, #8
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d020      	beq.n	8002738 <routeSignalAnalyzer+0x80>
 80026f6:	4a8b      	ldr	r2, [pc, #556]	@ (8002924 <routeSignalAnalyzer+0x26c>)
 80026f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	4413      	add	r3, r2
 80026fe:	3304      	adds	r3, #4
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	429a      	cmp	r2, r3
 8002706:	d117      	bne.n	8002738 <routeSignalAnalyzer+0x80>
            selectedTrack = &mainTracks[i];
 8002708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	4a85      	ldr	r2, [pc, #532]	@ (8002924 <routeSignalAnalyzer+0x26c>)
 800270e:	4413      	add	r3, r2
 8002710:	647b      	str	r3, [r7, #68]	@ 0x44
            trackIndex = i;
 8002712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002714:	627b      	str	r3, [r7, #36]	@ 0x24
            snprintf(trackName, sizeof(trackName), "MT_%d", trackIndex + 1); // Convert to "MT_X"
 8002716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002718:	3301      	adds	r3, #1
 800271a:	f107 0010 	add.w	r0, r7, #16
 800271e:	4a82      	ldr	r2, [pc, #520]	@ (8002928 <routeSignalAnalyzer+0x270>)
 8002720:	210a      	movs	r1, #10
 8002722:	f002 f80b 	bl	800473c <sniprintf>
			printf("Found Main Track %d (Name: %s) for Net ID %d\n", selectedTrack->track_id, trackName, net_id);
 8002726:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002728:	6819      	ldr	r1, [r3, #0]
 800272a:	f107 0210 	add.w	r2, r7, #16
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	487e      	ldr	r0, [pc, #504]	@ (800292c <routeSignalAnalyzer+0x274>)
 8002732:	f001 ff8b 	bl	800464c <iprintf>
			break;
 8002736:	e005      	b.n	8002744 <routeSignalAnalyzer+0x8c>
    for (int i = 0; i < 32; i++) {
 8002738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800273a:	3301      	adds	r3, #1
 800273c:	637b      	str	r3, [r7, #52]	@ 0x34
 800273e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002740:	2b1f      	cmp	r3, #31
 8002742:	ddd0      	ble.n	80026e6 <routeSignalAnalyzer+0x2e>
        }
    }

    if (!selectedTrack) {
 8002744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002746:	2b00      	cmp	r3, #0
 8002748:	d104      	bne.n	8002754 <routeSignalAnalyzer+0x9c>
        printf("Error: No active Main Track found for Net ID %d\n", net_id);
 800274a:	68f9      	ldr	r1, [r7, #12]
 800274c:	4878      	ldr	r0, [pc, #480]	@ (8002930 <routeSignalAnalyzer+0x278>)
 800274e:	f001 ff7d 	bl	800464c <iprintf>
        return;
 8002752:	e0e4      	b.n	800291e <routeSignalAnalyzer+0x266>
    }

    // Step 2: Check MUX 33 and 34
    MUX *mux33 = &muxes[32]; // MUX 33 (Array index 32)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 800275a:	623b      	str	r3, [r7, #32]
    MUX *mux34 = &muxes[33]; // MUX 34 (Array index 33)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	f503 5394 	add.w	r3, r3, #4736	@ 0x1280
 8002762:	3310      	adds	r3, #16
 8002764:	61fb      	str	r3, [r7, #28]

    // Step 3: Look for the track ID in X Pins of MUX 33 and 34

    for (int i = 0; i < 16; i++) {
 8002766:	2300      	movs	r3, #0
 8002768:	633b      	str	r3, [r7, #48]	@ 0x30
 800276a:	e028      	b.n	80027be <routeSignalAnalyzer+0x106>
        if (strcmp((*mux33->xPins)[i], trackName) == 0) {
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002776:	f107 0210 	add.w	r2, r7, #16
 800277a:	4611      	mov	r1, r2
 800277c:	4618      	mov	r0, r3
 800277e:	f7fd fd51 	bl	8000224 <strcmp>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d104      	bne.n	8002792 <routeSignalAnalyzer+0xda>
            xIndex = i;
 8002788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800278a:	643b      	str	r3, [r7, #64]	@ 0x40
            mux = mux33;
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	63bb      	str	r3, [r7, #56]	@ 0x38
            break;
 8002790:	e018      	b.n	80027c4 <routeSignalAnalyzer+0x10c>
        }
        if (strcmp((*mux34->xPins)[i], trackName) == 0) {
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800279c:	f107 0210 	add.w	r2, r7, #16
 80027a0:	4611      	mov	r1, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fd fd3e 	bl	8000224 <strcmp>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d104      	bne.n	80027b8 <routeSignalAnalyzer+0x100>
            xIndex = i;
 80027ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027b0:	643b      	str	r3, [r7, #64]	@ 0x40
            mux = mux34;
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	63bb      	str	r3, [r7, #56]	@ 0x38
            break;
 80027b6:	e005      	b.n	80027c4 <routeSignalAnalyzer+0x10c>
    for (int i = 0; i < 16; i++) {
 80027b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ba:	3301      	adds	r3, #1
 80027bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80027be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027c0:	2b0f      	cmp	r3, #15
 80027c2:	ddd3      	ble.n	800276c <routeSignalAnalyzer+0xb4>
        }
    }

    if (mode == 1) {  // Connecting
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d139      	bne.n	800283e <routeSignalAnalyzer+0x186>
		for (int i = 0; i < 8; i++) {
 80027ca:	2300      	movs	r3, #0
 80027cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027ce:	e032      	b.n	8002836 <routeSignalAnalyzer+0x17e>
			if (!signalAnalyzerTracks[i].is_used) {
 80027d0:	4958      	ldr	r1, [pc, #352]	@ (8002934 <routeSignalAnalyzer+0x27c>)
 80027d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027d4:	4613      	mov	r3, r2
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	4413      	add	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	3308      	adds	r3, #8
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d124      	bne.n	8002830 <routeSignalAnalyzer+0x178>
				yIndex = i;
 80027e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
				signalAnalyzerTracks[i].is_used = 1;
 80027ea:	4952      	ldr	r1, [pc, #328]	@ (8002934 <routeSignalAnalyzer+0x27c>)
 80027ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027ee:	4613      	mov	r3, r2
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	4413      	add	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	3308      	adds	r3, #8
 80027fa:	2201      	movs	r2, #1
 80027fc:	601a      	str	r2, [r3, #0]
				signalAnalyzerTracks[i].net_id = net_id;
 80027fe:	494d      	ldr	r1, [pc, #308]	@ (8002934 <routeSignalAnalyzer+0x27c>)
 8002800:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002802:	4613      	mov	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4413      	add	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	3304      	adds	r3, #4
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	601a      	str	r2, [r3, #0]
				signalAnalyzerTracks[i].track_id = xIndex;
 8002812:	4948      	ldr	r1, [pc, #288]	@ (8002934 <routeSignalAnalyzer+0x27c>)
 8002814:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002816:	4613      	mov	r3, r2
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	4413      	add	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002822:	601a      	str	r2, [r3, #0]
				printf("Assigned Y Pin %d to Net ID %d\n", yIndex, net_id);
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002828:	4843      	ldr	r0, [pc, #268]	@ (8002938 <routeSignalAnalyzer+0x280>)
 800282a:	f001 ff0f 	bl	800464c <iprintf>
				break;
 800282e:	e04d      	b.n	80028cc <routeSignalAnalyzer+0x214>
		for (int i = 0; i < 8; i++) {
 8002830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002832:	3301      	adds	r3, #1
 8002834:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002838:	2b07      	cmp	r3, #7
 800283a:	ddc9      	ble.n	80027d0 <routeSignalAnalyzer+0x118>
 800283c:	e046      	b.n	80028cc <routeSignalAnalyzer+0x214>
			}
		}
	} else {  // Disconnecting
		for (int i = 0; i < 8; i++) {
 800283e:	2300      	movs	r3, #0
 8002840:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002842:	e040      	b.n	80028c6 <routeSignalAnalyzer+0x20e>
			if (signalAnalyzerTracks[i].is_used && signalAnalyzerTracks[i].net_id == net_id) {
 8002844:	493b      	ldr	r1, [pc, #236]	@ (8002934 <routeSignalAnalyzer+0x27c>)
 8002846:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002848:	4613      	mov	r3, r2
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	4413      	add	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	3308      	adds	r3, #8
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d032      	beq.n	80028c0 <routeSignalAnalyzer+0x208>
 800285a:	4936      	ldr	r1, [pc, #216]	@ (8002934 <routeSignalAnalyzer+0x27c>)
 800285c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800285e:	4613      	mov	r3, r2
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	4413      	add	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	440b      	add	r3, r1
 8002868:	3304      	adds	r3, #4
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	429a      	cmp	r2, r3
 8002870:	d126      	bne.n	80028c0 <routeSignalAnalyzer+0x208>
				yIndex = i;
 8002872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002874:	63fb      	str	r3, [r7, #60]	@ 0x3c
				signalAnalyzerTracks[i].is_used = 0;
 8002876:	492f      	ldr	r1, [pc, #188]	@ (8002934 <routeSignalAnalyzer+0x27c>)
 8002878:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800287a:	4613      	mov	r3, r2
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	4413      	add	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	3308      	adds	r3, #8
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
				signalAnalyzerTracks[i].net_id = -1;
 800288a:	492a      	ldr	r1, [pc, #168]	@ (8002934 <routeSignalAnalyzer+0x27c>)
 800288c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800288e:	4613      	mov	r3, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	3304      	adds	r3, #4
 800289a:	f04f 32ff 	mov.w	r2, #4294967295
 800289e:	601a      	str	r2, [r3, #0]
				signalAnalyzerTracks[i].track_id = -1;
 80028a0:	4924      	ldr	r1, [pc, #144]	@ (8002934 <routeSignalAnalyzer+0x27c>)
 80028a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028a4:	4613      	mov	r3, r2
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	4413      	add	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	f04f 32ff 	mov.w	r2, #4294967295
 80028b2:	601a      	str	r2, [r3, #0]
				printf("Freed Y Pin %d for Net ID %d\n", yIndex, net_id);
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80028b8:	4820      	ldr	r0, [pc, #128]	@ (800293c <routeSignalAnalyzer+0x284>)
 80028ba:	f001 fec7 	bl	800464c <iprintf>
				break;
 80028be:	e005      	b.n	80028cc <routeSignalAnalyzer+0x214>
		for (int i = 0; i < 8; i++) {
 80028c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c2:	3301      	adds	r3, #1
 80028c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c8:	2b07      	cmp	r3, #7
 80028ca:	ddbb      	ble.n	8002844 <routeSignalAnalyzer+0x18c>
			}
		}
	}

	if (yIndex == -1) {
 80028cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d2:	d103      	bne.n	80028dc <routeSignalAnalyzer+0x224>
		printf("Error: No available Y Pin found for Signal Analyzer\n");
 80028d4:	481a      	ldr	r0, [pc, #104]	@ (8002940 <routeSignalAnalyzer+0x288>)
 80028d6:	f001 ff29 	bl	800472c <puts>
		return;
 80028da:	e020      	b.n	800291e <routeSignalAnalyzer+0x266>
	}

	printf("Connecting Signal Analyzer to MUX %d at (X: %d, Y: %d) for Net ID %d\n",
 80028dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d101      	bne.n	80028e8 <routeSignalAnalyzer+0x230>
 80028e4:	2121      	movs	r1, #33	@ 0x21
 80028e6:	e000      	b.n	80028ea <routeSignalAnalyzer+0x232>
 80028e8:	2122      	movs	r1, #34	@ 0x22
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80028f2:	4814      	ldr	r0, [pc, #80]	@ (8002944 <routeSignalAnalyzer+0x28c>)
 80028f4:	f001 feaa 	bl	800464c <iprintf>
		   (mux == mux33 ? 33 : 34), xIndex, yIndex, net_id);

	printf("\n");
 80028f8:	200a      	movs	r0, #10
 80028fa:	f001 feb9 	bl	8004670 <putchar>

	// Step 5: Set the connection
	setConnection(xIndex, yIndex, *mux, mode);
 80028fe:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	9322      	str	r3, [sp, #136]	@ 0x88
 8002904:	4668      	mov	r0, sp
 8002906:	f104 0308 	add.w	r3, r4, #8
 800290a:	2288      	movs	r2, #136	@ 0x88
 800290c:	4619      	mov	r1, r3
 800290e:	f002 f8da 	bl	8004ac6 <memcpy>
 8002912:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002916:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002918:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800291a:	f7ff faf7 	bl	8001f0c <setConnection>
}
 800291e:	374c      	adds	r7, #76	@ 0x4c
 8002920:	46bd      	mov	sp, r7
 8002922:	bd90      	pop	{r4, r7, pc}
 8002924:	2000531c 	.word	0x2000531c
 8002928:	08006964 	.word	0x08006964
 800292c:	0800696c 	.word	0x0800696c
 8002930:	0800699c 	.word	0x0800699c
 8002934:	2000551c 	.word	0x2000551c
 8002938:	080069d0 	.word	0x080069d0
 800293c:	080069f0 	.word	0x080069f0
 8002940:	08006a10 	.word	0x08006a10
 8002944:	08006a44 	.word	0x08006a44

08002948 <clear>:

void clear() {
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
    // Step 1: Clear all main tracks
    for (int i = 0; i < 32; i++) {
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	e01f      	b.n	8002994 <clear+0x4c>
        mainTracks[i].is_used = 0;
 8002954:	4a4b      	ldr	r2, [pc, #300]	@ (8002a84 <clear+0x13c>)
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	4413      	add	r3, r2
 800295c:	3308      	adds	r3, #8
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
        mainTracks[i].net_id = -1;
 8002962:	4a48      	ldr	r2, [pc, #288]	@ (8002a84 <clear+0x13c>)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	4413      	add	r3, r2
 800296a:	3304      	adds	r3, #4
 800296c:	f04f 32ff 	mov.w	r2, #4294967295
 8002970:	601a      	str	r2, [r3, #0]
        mainTracks[i].current_connections = 0;
 8002972:	4a44      	ldr	r2, [pc, #272]	@ (8002a84 <clear+0x13c>)
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	4413      	add	r3, r2
 800297a:	330c      	adds	r3, #12
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
        mainTracks[i].track_id = -1;
 8002980:	4a40      	ldr	r2, [pc, #256]	@ (8002a84 <clear+0x13c>)
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	4413      	add	r3, r2
 8002988:	f04f 32ff 	mov.w	r2, #4294967295
 800298c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 32; i++) {
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	3301      	adds	r3, #1
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2b1f      	cmp	r3, #31
 8002998:	dddc      	ble.n	8002954 <clear+0xc>
    }

    // Step 2: Clear all signal analyzer tracks
    for (int i = 0; i < 8; i++) {
 800299a:	2300      	movs	r3, #0
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	e021      	b.n	80029e4 <clear+0x9c>
        signalAnalyzerTracks[i].is_used = 0;
 80029a0:	4939      	ldr	r1, [pc, #228]	@ (8002a88 <clear+0x140>)
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4613      	mov	r3, r2
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	4413      	add	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	3308      	adds	r3, #8
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
        signalAnalyzerTracks[i].net_id = -1;
 80029b4:	4934      	ldr	r1, [pc, #208]	@ (8002a88 <clear+0x140>)
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4613      	mov	r3, r2
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	4413      	add	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	3304      	adds	r3, #4
 80029c4:	f04f 32ff 	mov.w	r2, #4294967295
 80029c8:	601a      	str	r2, [r3, #0]
        signalAnalyzerTracks[i].track_id = -1;
 80029ca:	492f      	ldr	r1, [pc, #188]	@ (8002a88 <clear+0x140>)
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4613      	mov	r3, r2
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	4413      	add	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	f04f 32ff 	mov.w	r2, #4294967295
 80029dc:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	3301      	adds	r3, #1
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	2b07      	cmp	r3, #7
 80029e8:	ddda      	ble.n	80029a0 <clear+0x58>
    }

    // Step 3: Clear all Leds assigned to main tracks
    for (int i = 0; i < 120; i++){
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	e007      	b.n	8002a00 <clear+0xb8>
		ledsToMainTracks[i] = 0;
 80029f0:	4a26      	ldr	r2, [pc, #152]	@ (8002a8c <clear+0x144>)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4413      	add	r3, r2
 80029f6:	2200      	movs	r2, #0
 80029f8:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 120; i++){
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3301      	adds	r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b77      	cmp	r3, #119	@ 0x77
 8002a04:	ddf4      	ble.n	80029f0 <clear+0xa8>
//		printf("ledsToMainTracks[%d] = %d\n", i, ledsToMainTracks[i]);
    }

    // Step 4: Reset all multiplexer usage values
	for (int i = 0; i < 34; i++) {
 8002a06:	2300      	movs	r3, #0
 8002a08:	60bb      	str	r3, [r7, #8]
 8002a0a:	e023      	b.n	8002a54 <clear+0x10c>
		for (int x = 0; x < 16; x++) {
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	607b      	str	r3, [r7, #4]
 8002a10:	e01a      	b.n	8002a48 <clear+0x100>
			for (int y = 0; y < 8; y++) {
 8002a12:	2300      	movs	r3, #0
 8002a14:	603b      	str	r3, [r7, #0]
 8002a16:	e011      	b.n	8002a3c <clear+0xf4>
				muxes[i].usage[x][y] = 0;
 8002a18:	481d      	ldr	r0, [pc, #116]	@ (8002a90 <clear+0x148>)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	00d9      	lsls	r1, r3, #3
 8002a20:	4613      	mov	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4413      	add	r3, r2
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	440b      	add	r3, r1
 8002a2a:	18c2      	adds	r2, r0, r3
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	4413      	add	r3, r2
 8002a30:	3310      	adds	r3, #16
 8002a32:	2200      	movs	r2, #0
 8002a34:	701a      	strb	r2, [r3, #0]
			for (int y = 0; y < 8; y++) {
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	603b      	str	r3, [r7, #0]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	2b07      	cmp	r3, #7
 8002a40:	ddea      	ble.n	8002a18 <clear+0xd0>
		for (int x = 0; x < 16; x++) {
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	3301      	adds	r3, #1
 8002a46:	607b      	str	r3, [r7, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b0f      	cmp	r3, #15
 8002a4c:	dde1      	ble.n	8002a12 <clear+0xca>
	for (int i = 0; i < 34; i++) {
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	3301      	adds	r3, #1
 8002a52:	60bb      	str	r3, [r7, #8]
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b21      	cmp	r3, #33	@ 0x21
 8002a58:	ddd8      	ble.n	8002a0c <clear+0xc4>
			}
		}
	}

    // Step 5: Perform hardware reset using RST_GPIO
    LL_GPIO_SetOutputPin(RST_GPIO, RST_PIN);
 8002a5a:	490e      	ldr	r1, [pc, #56]	@ (8002a94 <clear+0x14c>)
 8002a5c:	480e      	ldr	r0, [pc, #56]	@ (8002a98 <clear+0x150>)
 8002a5e:	f7ff f90d 	bl	8001c7c <LL_GPIO_SetOutputPin>
    LL_mDelay(20);
 8002a62:	2014      	movs	r0, #20
 8002a64:	f001 fc42 	bl	80042ec <LL_mDelay>
    LL_GPIO_ResetOutputPin(RST_GPIO, RST_PIN);
 8002a68:	490a      	ldr	r1, [pc, #40]	@ (8002a94 <clear+0x14c>)
 8002a6a:	480b      	ldr	r0, [pc, #44]	@ (8002a98 <clear+0x150>)
 8002a6c:	f7ff f915 	bl	8001c9a <LL_GPIO_ResetOutputPin>
    LL_mDelay(20);
 8002a70:	2014      	movs	r0, #20
 8002a72:	f001 fc3b 	bl	80042ec <LL_mDelay>

    printf("CLR complete.\n\n");
 8002a76:	4809      	ldr	r0, [pc, #36]	@ (8002a9c <clear+0x154>)
 8002a78:	f001 fe58 	bl	800472c <puts>
}
 8002a7c:	bf00      	nop
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	2000531c 	.word	0x2000531c
 8002a88:	2000551c 	.word	0x2000551c
 8002a8c:	2000557c 	.word	0x2000557c
 8002a90:	20000cc0 	.word	0x20000cc0
 8002a94:	04020002 	.word	0x04020002
 8002a98:	40010c00 	.word	0x40010c00
 8002a9c:	08006a8c 	.word	0x08006a8c

08002aa0 <processCommand>:

void processCommand(char *command) {
 8002aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aa2:	b095      	sub	sp, #84	@ 0x54
 8002aa4:	af06      	add	r7, sp, #24
 8002aa6:	6078      	str	r0, [r7, #4]
	if (!fault_3v3_triggered || !fault_5v_triggered){ // test tmr
 8002aa8:	4b5e      	ldr	r3, [pc, #376]	@ (8002c24 <processCommand+0x184>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d004      	beq.n	8002abc <processCommand+0x1c>
 8002ab2:	4b5d      	ldr	r3, [pc, #372]	@ (8002c28 <processCommand+0x188>)
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d15d      	bne.n	8002b78 <processCommand+0xd8>

		if (strncmp(command, "RB", 2) == 0) {  // Check if it's a "ROUTE" command
 8002abc:	2202      	movs	r2, #2
 8002abe:	495b      	ldr	r1, [pc, #364]	@ (8002c2c <processCommand+0x18c>)
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f001 ff7b 	bl	80049bc <strncmp>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d155      	bne.n	8002b78 <processCommand+0xd8>
				int pin1, pin2, net_id, mode, r, g, b;
				int parsed = sscanf(command, "RB %d %d %d %d %d %d %d",
 8002acc:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8002ad0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002ad4:	f107 0314 	add.w	r3, r7, #20
 8002ad8:	9304      	str	r3, [sp, #16]
 8002ada:	f107 0318 	add.w	r3, r7, #24
 8002ade:	9303      	str	r3, [sp, #12]
 8002ae0:	f107 031c 	add.w	r3, r7, #28
 8002ae4:	9302      	str	r3, [sp, #8]
 8002ae6:	f107 0320 	add.w	r3, r7, #32
 8002aea:	9301      	str	r3, [sp, #4]
 8002aec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	460b      	mov	r3, r1
 8002af4:	494e      	ldr	r1, [pc, #312]	@ (8002c30 <processCommand+0x190>)
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f001 fe54 	bl	80047a4 <siscanf>
 8002afc:	6378      	str	r0, [r7, #52]	@ 0x34
									&pin1, &pin2, &net_id, &mode, &r, &g, &b);
				if (parsed == 7) {  // Ensure all arguments were parsed
 8002afe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b00:	2b07      	cmp	r3, #7
 8002b02:	d130      	bne.n	8002b66 <processCommand+0xc6>

					RGB_t color = {b, r, g}; // This is brg, because of the Union, the union is brg, cuz the leds take brg
 8002b04:	2300      	movs	r3, #0
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	743b      	strb	r3, [r7, #16]
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	747b      	strb	r3, [r7, #17]
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	74bb      	strb	r3, [r7, #18]
					printf("Calling routeBreadboard with: Pin1=%d, Pin2=%d, NetID=%d, Mode=%d, RGB(%d,%d,%d)\n",
 8002b1a:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 8002b1c:	6abd      	ldr	r5, [r7, #40]	@ 0x28
 8002b1e:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	69fa      	ldr	r2, [r7, #28]
 8002b24:	69b9      	ldr	r1, [r7, #24]
 8002b26:	6978      	ldr	r0, [r7, #20]
 8002b28:	9003      	str	r0, [sp, #12]
 8002b2a:	9102      	str	r1, [sp, #8]
 8002b2c:	9201      	str	r2, [sp, #4]
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	4633      	mov	r3, r6
 8002b32:	462a      	mov	r2, r5
 8002b34:	4621      	mov	r1, r4
 8002b36:	483f      	ldr	r0, [pc, #252]	@ (8002c34 <processCommand+0x194>)
 8002b38:	f001 fd88 	bl	800464c <iprintf>
						   pin1, pin2, net_id, mode, r, g, b);
					fflush(stdout);
 8002b3c:	4b3e      	ldr	r3, [pc, #248]	@ (8002c38 <processCommand+0x198>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f001 fcac 	bl	80044a0 <fflush>

					routeBreadboard(pin1, pin2, net_id, muxes, sizeof(muxes) / sizeof(muxes[0]), mode, color);
 8002b48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002b4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b4c:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	9202      	str	r2, [sp, #8]
 8002b56:	9301      	str	r3, [sp, #4]
 8002b58:	2322      	movs	r3, #34	@ 0x22
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	4b37      	ldr	r3, [pc, #220]	@ (8002c3c <processCommand+0x19c>)
 8002b5e:	4622      	mov	r2, r4
 8002b60:	f7ff faaa 	bl	80020b8 <routeBreadboard>
 8002b64:	e008      	b.n	8002b78 <processCommand+0xd8>
				} else {
					printf("Error: Invalid RB command format!\n");
 8002b66:	4836      	ldr	r0, [pc, #216]	@ (8002c40 <processCommand+0x1a0>)
 8002b68:	f001 fde0 	bl	800472c <puts>
					fflush(stdout);
 8002b6c:	4b32      	ldr	r3, [pc, #200]	@ (8002c38 <processCommand+0x198>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f001 fc94 	bl	80044a0 <fflush>
				}
			}
		}
		if (strncmp(command, "RS", 2) == 0) {
 8002b78:	2202      	movs	r2, #2
 8002b7a:	4932      	ldr	r1, [pc, #200]	@ (8002c44 <processCommand+0x1a4>)
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f001 ff1d 	bl	80049bc <strncmp>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d128      	bne.n	8002bda <processCommand+0x13a>
			int net_id, mode;
			int parsed = sscanf(command, "RS %d %d",
 8002b88:	f107 0308 	add.w	r3, r7, #8
 8002b8c:	f107 020c 	add.w	r2, r7, #12
 8002b90:	492d      	ldr	r1, [pc, #180]	@ (8002c48 <processCommand+0x1a8>)
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f001 fe06 	bl	80047a4 <siscanf>
 8002b98:	6338      	str	r0, [r7, #48]	@ 0x30
								&net_id, &mode);
			if (parsed == 2) {  // Ensure all arguments were parsed
 8002b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d113      	bne.n	8002bc8 <processCommand+0x128>
				printf("Calling routeSignalAnalyzer with: NetID=%d, Mode=%d\n",
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4829      	ldr	r0, [pc, #164]	@ (8002c4c <processCommand+0x1ac>)
 8002ba8:	f001 fd50 	bl	800464c <iprintf>
					   net_id, mode);
				fflush(stdout);
 8002bac:	4b22      	ldr	r3, [pc, #136]	@ (8002c38 <processCommand+0x198>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f001 fc74 	bl	80044a0 <fflush>

				routeSignalAnalyzer(net_id, muxes, mode);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	491f      	ldr	r1, [pc, #124]	@ (8002c3c <processCommand+0x19c>)
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff fd79 	bl	80026b8 <routeSignalAnalyzer>
 8002bc6:	e008      	b.n	8002bda <processCommand+0x13a>
			} else {
				printf("Error: Invalid RS command format!\n");
 8002bc8:	4821      	ldr	r0, [pc, #132]	@ (8002c50 <processCommand+0x1b0>)
 8002bca:	f001 fdaf 	bl	800472c <puts>
				fflush(stdout);
 8002bce:	4b1a      	ldr	r3, [pc, #104]	@ (8002c38 <processCommand+0x198>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f001 fc63 	bl	80044a0 <fflush>
		}

	}

    if (strncmp(command, "CLR", 3) == 0) {
 8002bda:	2203      	movs	r2, #3
 8002bdc:	491d      	ldr	r1, [pc, #116]	@ (8002c54 <processCommand+0x1b4>)
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f001 feec 	bl	80049bc <strncmp>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d103      	bne.n	8002bf2 <processCommand+0x152>
		clear();
 8002bea:	f7ff fead 	bl	8002948 <clear>
		clearLeds();
 8002bee:	f7fd fd91 	bl	8000714 <clearLeds>
	}

    if (strncmp(command, "EN 5V", 5) == 0) {
 8002bf2:	2205      	movs	r2, #5
 8002bf4:	4918      	ldr	r1, [pc, #96]	@ (8002c58 <processCommand+0x1b8>)
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f001 fee0 	bl	80049bc <strncmp>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <processCommand+0x166>
    	FAULT_5v_HandleMsg();
 8002c02:	f7fd fbab 	bl	800035c <FAULT_5v_HandleMsg>
	}

    if (strncmp(command, "EN 3V3", 6) == 0) {
 8002c06:	2206      	movs	r2, #6
 8002c08:	4914      	ldr	r1, [pc, #80]	@ (8002c5c <processCommand+0x1bc>)
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f001 fed6 	bl	80049bc <strncmp>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <processCommand+0x17a>
    	FAULT_3v3_HandleMsg();
 8002c16:	f7fd fbcb 	bl	80003b0 <FAULT_3v3_HandleMsg>
	}
}
 8002c1a:	bf00      	nop
 8002c1c:	373c      	adds	r7, #60	@ 0x3c
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c22:	bf00      	nop
 8002c24:	2000205c 	.word	0x2000205c
 8002c28:	2000205d 	.word	0x2000205d
 8002c2c:	08006a9c 	.word	0x08006a9c
 8002c30:	08006aa0 	.word	0x08006aa0
 8002c34:	08006ab8 	.word	0x08006ab8
 8002c38:	20001ff0 	.word	0x20001ff0
 8002c3c:	20000cc0 	.word	0x20000cc0
 8002c40:	08006b0c 	.word	0x08006b0c
 8002c44:	08006b30 	.word	0x08006b30
 8002c48:	08006b34 	.word	0x08006b34
 8002c4c:	08006b40 	.word	0x08006b40
 8002c50:	08006b78 	.word	0x08006b78
 8002c54:	08006b9c 	.word	0x08006b9c
 8002c58:	08006ba0 	.word	0x08006ba0
 8002c5c:	08006ba8 	.word	0x08006ba8

08002c60 <LL_USART_Enable>:
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	60da      	str	r2, [r3, #12]
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr

08002c7e <LL_USART_IsEnabled>:
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c92:	bf0c      	ite	eq
 8002c94:	2301      	moveq	r3, #1
 8002c96:	2300      	movne	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr

08002ca4 <LL_USART_IsActiveFlag_TC>:
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cb4:	2b40      	cmp	r3, #64	@ 0x40
 8002cb6:	bf0c      	ite	eq
 8002cb8:	2301      	moveq	r3, #1
 8002cba:	2300      	movne	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bc80      	pop	{r7}
 8002cc6:	4770      	bx	lr

08002cc8 <LL_USART_IsActiveFlag_TXE>:
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cd8:	2b80      	cmp	r3, #128	@ 0x80
 8002cda:	bf0c      	ite	eq
 8002cdc:	2301      	moveq	r3, #1
 8002cde:	2300      	movne	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <LL_USART_TransmitData8>:
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002cf8:	78fa      	ldrb	r2, [r7, #3]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	605a      	str	r2, [r3, #4]
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr

08002d08 <sendToUART>:

/**
  * @brief  Sends a string over UART.
  */
void sendToUART(USART_TypeDef *UARTx, const char *message)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
    uint16_t i = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	81fb      	strh	r3, [r7, #14]

    if (!LL_USART_IsEnabled(UARTx))
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff ffb1 	bl	8002c7e <LL_USART_IsEnabled>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d115      	bne.n	8002d4e <sendToUART+0x46>
        LL_USART_Enable(UARTx);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff ff9c 	bl	8002c60 <LL_USART_Enable>

    while (message[i] != '\0')
 8002d28:	e011      	b.n	8002d4e <sendToUART+0x46>
    {
        while (!LL_USART_IsActiveFlag_TXE(UARTx));  // Wait for TX buffer empty
 8002d2a:	bf00      	nop
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7ff ffcb 	bl	8002cc8 <LL_USART_IsActiveFlag_TXE>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0f9      	beq.n	8002d2c <sendToUART+0x24>
        LL_USART_TransmitData8(UARTx, (uint8_t)message[i]);
 8002d38:	89fb      	ldrh	r3, [r7, #14]
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	4619      	mov	r1, r3
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7ff ffd2 	bl	8002cec <LL_USART_TransmitData8>
        i++;
 8002d48:	89fb      	ldrh	r3, [r7, #14]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	81fb      	strh	r3, [r7, #14]
    while (message[i] != '\0')
 8002d4e:	89fb      	ldrh	r3, [r7, #14]
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	4413      	add	r3, r2
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1e7      	bne.n	8002d2a <sendToUART+0x22>
    }

    while (!LL_USART_IsActiveFlag_TC(UARTx));  // Wait for transmission complete
 8002d5a:	bf00      	nop
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7ff ffa1 	bl	8002ca4 <LL_USART_IsActiveFlag_TC>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f9      	beq.n	8002d5c <sendToUART+0x54>


}
 8002d68:	bf00      	nop
 8002d6a:	bf00      	nop
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <UART_ProcessReceivedByte>:



void UART_ProcessReceivedByte(uint8_t byte, uint8_t uartNumber)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	460a      	mov	r2, r1
 8002d7e:	71fb      	strb	r3, [r7, #7]
 8002d80:	4613      	mov	r3, r2
 8002d82:	71bb      	strb	r3, [r7, #6]
    static uint8_t rxBuffer[RX_BUFFER_SIZE];
    static uint8_t rxIndex = 0;

    if (rxIndex < (RX_BUFFER_SIZE - 1))
 8002d84:	4b1a      	ldr	r3, [pc, #104]	@ (8002df0 <UART_ProcessReceivedByte+0x7c>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b62      	cmp	r3, #98	@ 0x62
 8002d8a:	d809      	bhi.n	8002da0 <UART_ProcessReceivedByte+0x2c>
    {
        rxBuffer[rxIndex++] = byte;
 8002d8c:	4b18      	ldr	r3, [pc, #96]	@ (8002df0 <UART_ProcessReceivedByte+0x7c>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	1c5a      	adds	r2, r3, #1
 8002d92:	b2d1      	uxtb	r1, r2
 8002d94:	4a16      	ldr	r2, [pc, #88]	@ (8002df0 <UART_ProcessReceivedByte+0x7c>)
 8002d96:	7011      	strb	r1, [r2, #0]
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4a16      	ldr	r2, [pc, #88]	@ (8002df4 <UART_ProcessReceivedByte+0x80>)
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	5453      	strb	r3, [r2, r1]
    }

    if (byte == '\n' || byte == '\r')
 8002da0:	79fb      	ldrb	r3, [r7, #7]
 8002da2:	2b0a      	cmp	r3, #10
 8002da4:	d002      	beq.n	8002dac <UART_ProcessReceivedByte+0x38>
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	2b0d      	cmp	r3, #13
 8002daa:	d11c      	bne.n	8002de6 <UART_ProcessReceivedByte+0x72>
    {
        rxBuffer[rxIndex] = '\0';  // Null-terminate
 8002dac:	4b10      	ldr	r3, [pc, #64]	@ (8002df0 <UART_ProcessReceivedByte+0x7c>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	461a      	mov	r2, r3
 8002db2:	4b10      	ldr	r3, [pc, #64]	@ (8002df4 <UART_ProcessReceivedByte+0x80>)
 8002db4:	2100      	movs	r1, #0
 8002db6:	5499      	strb	r1, [r3, r2]
        printf("Received from UART%d: %s\n", uartNumber, rxBuffer);
 8002db8:	79bb      	ldrb	r3, [r7, #6]
 8002dba:	4a0e      	ldr	r2, [pc, #56]	@ (8002df4 <UART_ProcessReceivedByte+0x80>)
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	480e      	ldr	r0, [pc, #56]	@ (8002df8 <UART_ProcessReceivedByte+0x84>)
 8002dc0:	f001 fc44 	bl	800464c <iprintf>
		fflush(stdout);
 8002dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8002dfc <UART_ProcessReceivedByte+0x88>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f001 fb68 	bl	80044a0 <fflush>
        processCommand((char *)rxBuffer);  // Pass to processing function
 8002dd0:	4808      	ldr	r0, [pc, #32]	@ (8002df4 <UART_ProcessReceivedByte+0x80>)
 8002dd2:	f7ff fe65 	bl	8002aa0 <processCommand>

        memset(rxBuffer, 0, RX_BUFFER_SIZE);
 8002dd6:	2264      	movs	r2, #100	@ 0x64
 8002dd8:	2100      	movs	r1, #0
 8002dda:	4806      	ldr	r0, [pc, #24]	@ (8002df4 <UART_ProcessReceivedByte+0x80>)
 8002ddc:	f001 fde6 	bl	80049ac <memset>
        rxIndex = 0;
 8002de0:	4b03      	ldr	r3, [pc, #12]	@ (8002df0 <UART_ProcessReceivedByte+0x7c>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	701a      	strb	r2, [r3, #0]
    }
}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	200055f4 	.word	0x200055f4
 8002df4:	200055f8 	.word	0x200055f8
 8002df8:	08006bb0 	.word	0x08006bb0
 8002dfc:	20001ff0 	.word	0x20001ff0

08002e00 <LL_ADC_REG_SetContinuousMode>:
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_CONT, Continuous);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f023 0202 	bic.w	r2, r3, #2
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	609a      	str	r2, [r3, #8]
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr

08002e24 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f043 0201 	orr.w	r2, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	609a      	str	r2, [r3, #8]
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bc80      	pop	{r7}
 8002e40:	4770      	bx	lr

08002e42 <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f043 0204 	orr.w	r2, r3, #4
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	609a      	str	r2, [r3, #8]
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr

08002e60 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR2      CAL            LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	bf0c      	ite	eq
 8002e74:	2301      	moveq	r3, #1
 8002e76:	2300      	movne	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr

08002e84 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f443 02a0 	orr.w	r2, r3, #5242880	@ 0x500000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	609a      	str	r2, [r3, #8]
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bc80      	pop	{r7}
 8002ea0:	4770      	bx	lr

08002ea2 <LL_TIM_EnableCounter>:
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f043 0201 	orr.w	r2, r3, #1
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	601a      	str	r2, [r3, #0]
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr

08002ec0 <SignalAnalyzer_Init>:

/**
  * @brief  Initializes the ADC and TIM6.
  */
void SignalAnalyzer_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
    // Enable ADC
    LL_ADC_Enable(ADC1);
 8002ec4:	480d      	ldr	r0, [pc, #52]	@ (8002efc <SignalAnalyzer_Init+0x3c>)
 8002ec6:	f7ff ffad 	bl	8002e24 <LL_ADC_Enable>
    LL_mDelay(1);
 8002eca:	2001      	movs	r0, #1
 8002ecc:	f001 fa0e 	bl	80042ec <LL_mDelay>

    // Calibrate ADC before use (optional but recommended)
    LL_ADC_StartCalibration(ADC1);
 8002ed0:	480a      	ldr	r0, [pc, #40]	@ (8002efc <SignalAnalyzer_Init+0x3c>)
 8002ed2:	f7ff ffb6 	bl	8002e42 <LL_ADC_StartCalibration>
    while (LL_ADC_IsCalibrationOnGoing(ADC1));
 8002ed6:	bf00      	nop
 8002ed8:	4808      	ldr	r0, [pc, #32]	@ (8002efc <SignalAnalyzer_Init+0x3c>)
 8002eda:	f7ff ffc1 	bl	8002e60 <LL_ADC_IsCalibrationOnGoing>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1f9      	bne.n	8002ed8 <SignalAnalyzer_Init+0x18>

    // Ensure ADC is set in continuous mode (if not set in CubeMX)
    LL_ADC_REG_SetContinuousMode(ADC1, LL_ADC_REG_CONV_CONTINUOUS);
 8002ee4:	2102      	movs	r1, #2
 8002ee6:	4805      	ldr	r0, [pc, #20]	@ (8002efc <SignalAnalyzer_Init+0x3c>)
 8002ee8:	f7ff ff8a 	bl	8002e00 <LL_ADC_REG_SetContinuousMode>

    // Start ADC conversion
    LL_ADC_REG_StartConversionSWStart(ADC1);
 8002eec:	4803      	ldr	r0, [pc, #12]	@ (8002efc <SignalAnalyzer_Init+0x3c>)
 8002eee:	f7ff ffc9 	bl	8002e84 <LL_ADC_REG_StartConversionSWStart>

    // Enable TIM6 for timestamping
    LL_TIM_EnableCounter(TIM6);
 8002ef2:	4803      	ldr	r0, [pc, #12]	@ (8002f00 <SignalAnalyzer_Init+0x40>)
 8002ef4:	f7ff ffd5 	bl	8002ea2 <LL_TIM_EnableCounter>
}
 8002ef8:	bf00      	nop
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40012400 	.word	0x40012400
 8002f00:	40001000 	.word	0x40001000

08002f04 <LL_DMA_IsActiveFlag_TC5>:
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f18:	bf0c      	ite	eq
 8002f1a:	2301      	moveq	r3, #1
 8002f1c:	2300      	movne	r3, #0
 8002f1e:	b2db      	uxtb	r3, r3
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr

08002f2a <LL_DMA_ClearFlag_TC5>:
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002f38:	605a      	str	r2, [r3, #4]
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr

08002f44 <LL_DMA_ClearFlag_HT5>:
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF5);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002f52:	605a      	str	r2, [r3, #4]
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr

08002f5e <LL_DMA_ClearFlag_TE5>:
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF5);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002f6c:	605a      	str	r2, [r3, #4]
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr

08002f78 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8002f80:	4b07      	ldr	r3, [pc, #28]	@ (8002fa0 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8002f82:	695a      	ldr	r2, [r3, #20]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4013      	ands	r3, r2
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	bf0c      	ite	eq
 8002f8e:	2301      	moveq	r3, #1
 8002f90:	2300      	movne	r3, #0
 8002f92:	b2db      	uxtb	r3, r3
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	40010400 	.word	0x40010400

08002fa4 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8002fac:	4a03      	ldr	r2, [pc, #12]	@ (8002fbc <LL_EXTI_ClearFlag_0_31+0x18>)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6153      	str	r3, [r2, #20]
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr
 8002fbc:	40010400 	.word	0x40010400

08002fc0 <LL_USART_IsActiveFlag_RXNE>:
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0320 	and.w	r3, r3, #32
 8002fd0:	2b20      	cmp	r3, #32
 8002fd2:	bf0c      	ite	eq
 8002fd4:	2301      	moveq	r3, #1
 8002fd6:	2300      	movne	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <LL_USART_ReceiveData8>:
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	b2db      	uxtb	r3, r3
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr

08002ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003000:	bf00      	nop
 8003002:	e7fd      	b.n	8003000 <NMI_Handler+0x4>

08003004 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003008:	bf00      	nop
 800300a:	e7fd      	b.n	8003008 <HardFault_Handler+0x4>

0800300c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003010:	bf00      	nop
 8003012:	e7fd      	b.n	8003010 <MemManage_Handler+0x4>

08003014 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003018:	bf00      	nop
 800301a:	e7fd      	b.n	8003018 <BusFault_Handler+0x4>

0800301c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003020:	bf00      	nop
 8003022:	e7fd      	b.n	8003020 <UsageFault_Handler+0x4>

08003024 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003028:	bf00      	nop
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr

08003030 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003034:	bf00      	nop
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr

0800303c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003040:	bf00      	nop
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr

08003048 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800304c:	bf00      	nop
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr

08003054 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

	if (LL_DMA_IsActiveFlag_TC5(DMA1)) {
 8003058:	480a      	ldr	r0, [pc, #40]	@ (8003084 <DMA1_Channel5_IRQHandler+0x30>)
 800305a:	f7ff ff53 	bl	8002f04 <LL_DMA_IsActiveFlag_TC5>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00c      	beq.n	800307e <DMA1_Channel5_IRQHandler+0x2a>
//		LL_DMA_ClearFlag_GI5(DMA1);
		LL_DMA_ClearFlag_TC5(DMA1);  // Clear transfer complete flag
 8003064:	4807      	ldr	r0, [pc, #28]	@ (8003084 <DMA1_Channel5_IRQHandler+0x30>)
 8003066:	f7ff ff60 	bl	8002f2a <LL_DMA_ClearFlag_TC5>
		LL_DMA_ClearFlag_HT5(DMA1);  // Clear half transfer flag
 800306a:	4806      	ldr	r0, [pc, #24]	@ (8003084 <DMA1_Channel5_IRQHandler+0x30>)
 800306c:	f7ff ff6a 	bl	8002f44 <LL_DMA_ClearFlag_HT5>
		LL_DMA_ClearFlag_TE5(DMA1);  // Clear transfer error flag
 8003070:	4804      	ldr	r0, [pc, #16]	@ (8003084 <DMA1_Channel5_IRQHandler+0x30>)
 8003072:	f7ff ff74 	bl	8002f5e <LL_DMA_ClearFlag_TE5>

		// Trigger callback when transfer is complete
		LL_TIM_PWM_PulseFinishedCallback(TIM2);
 8003076:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800307a:	f7fd fc53 	bl	8000924 <LL_TIM_PWM_PulseFinishedCallback>
	}

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800307e:	bf00      	nop
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40020000 	.word	0x40020000

08003088 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
	if (LL_USART_IsActiveFlag_RXNE(USART1))
 800308e:	480a      	ldr	r0, [pc, #40]	@ (80030b8 <USART1_IRQHandler+0x30>)
 8003090:	f7ff ff96 	bl	8002fc0 <LL_USART_IsActiveFlag_RXNE>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d009      	beq.n	80030ae <USART1_IRQHandler+0x26>
	{
		uint8_t receivedByte = LL_USART_ReceiveData8(USART1);
 800309a:	4807      	ldr	r0, [pc, #28]	@ (80030b8 <USART1_IRQHandler+0x30>)
 800309c:	f7ff ffa2 	bl	8002fe4 <LL_USART_ReceiveData8>
 80030a0:	4603      	mov	r3, r0
 80030a2:	71fb      	strb	r3, [r7, #7]
		UART_ProcessReceivedByte(receivedByte, 1);  // Process received data for UART1
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	2101      	movs	r1, #1
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff fe63 	bl	8002d74 <UART_ProcessReceivedByte>
	}
  /* USER CODE END USART1_IRQn 1 */
}
 80030ae:	bf00      	nop
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40013800 	.word	0x40013800

080030bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */
	 if (LL_USART_IsActiveFlag_RXNE(USART3))
 80030c2:	480a      	ldr	r0, [pc, #40]	@ (80030ec <USART3_IRQHandler+0x30>)
 80030c4:	f7ff ff7c 	bl	8002fc0 <LL_USART_IsActiveFlag_RXNE>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d009      	beq.n	80030e2 <USART3_IRQHandler+0x26>
	{
		uint8_t receivedByte = LL_USART_ReceiveData8(USART3);
 80030ce:	4807      	ldr	r0, [pc, #28]	@ (80030ec <USART3_IRQHandler+0x30>)
 80030d0:	f7ff ff88 	bl	8002fe4 <LL_USART_ReceiveData8>
 80030d4:	4603      	mov	r3, r0
 80030d6:	71fb      	strb	r3, [r7, #7]
		UART_ProcessReceivedByte(receivedByte, 3);  // Process received data for UART3
 80030d8:	79fb      	ldrb	r3, [r7, #7]
 80030da:	2103      	movs	r1, #3
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff fe49 	bl	8002d74 <UART_ProcessReceivedByte>
	}
  /* USER CODE END USART3_IRQn 1 */
}
 80030e2:	bf00      	nop
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40004800 	.word	0x40004800

080030f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_12) != RESET)
 80030f4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80030f8:	f7ff ff3e 	bl	8002f78 <LL_EXTI_IsActiveFlag_0_31>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d005      	beq.n	800310e <EXTI15_10_IRQHandler+0x1e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_12);
 8003102:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003106:	f7ff ff4d 	bl	8002fa4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_12 */
    FAULT_3v3_HandleInterrupt();  // Handle FAULT 3V3
 800310a:	f7fd f917 	bl	800033c <FAULT_3v3_HandleInterrupt>
    /* USER CODE END LL_EXTI_LINE_12 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 800310e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003112:	f7ff ff31 	bl	8002f78 <LL_EXTI_IsActiveFlag_0_31>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 800311c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003120:	f7ff ff40 	bl	8002fa4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */
    FAULT_5v_HandleInterrupt();  // Handle FAULT 3V3
 8003124:	f7fd f8fa 	bl	800031c <FAULT_5v_HandleInterrupt>
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003128:	bf00      	nop
 800312a:	bd80      	pop	{r7, pc}

0800312c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]
 800313c:	e00a      	b.n	8003154 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800313e:	f3af 8000 	nop.w
 8003142:	4601      	mov	r1, r0
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	1c5a      	adds	r2, r3, #1
 8003148:	60ba      	str	r2, [r7, #8]
 800314a:	b2ca      	uxtb	r2, r1
 800314c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	3301      	adds	r3, #1
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	429a      	cmp	r2, r3
 800315a:	dbf0      	blt.n	800313e <_read+0x12>
  }

  return len;
 800315c:	687b      	ldr	r3, [r7, #4]
}
 800315e:	4618      	mov	r0, r3
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800316e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003172:	4618      	mov	r0, r3
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr

0800317c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800318c:	605a      	str	r2, [r3, #4]
  return 0;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr

0800319a <_isatty>:

int _isatty(int file)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031a2:	2301      	movs	r3, #1
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr

080031ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b085      	sub	sp, #20
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr
	...

080031c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031d0:	4a14      	ldr	r2, [pc, #80]	@ (8003224 <_sbrk+0x5c>)
 80031d2:	4b15      	ldr	r3, [pc, #84]	@ (8003228 <_sbrk+0x60>)
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031dc:	4b13      	ldr	r3, [pc, #76]	@ (800322c <_sbrk+0x64>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d102      	bne.n	80031ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031e4:	4b11      	ldr	r3, [pc, #68]	@ (800322c <_sbrk+0x64>)
 80031e6:	4a12      	ldr	r2, [pc, #72]	@ (8003230 <_sbrk+0x68>)
 80031e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031ea:	4b10      	ldr	r3, [pc, #64]	@ (800322c <_sbrk+0x64>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4413      	add	r3, r2
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d207      	bcs.n	8003208 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031f8:	f001 fc38 	bl	8004a6c <__errno>
 80031fc:	4603      	mov	r3, r0
 80031fe:	220c      	movs	r2, #12
 8003200:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003202:	f04f 33ff 	mov.w	r3, #4294967295
 8003206:	e009      	b.n	800321c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003208:	4b08      	ldr	r3, [pc, #32]	@ (800322c <_sbrk+0x64>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800320e:	4b07      	ldr	r3, [pc, #28]	@ (800322c <_sbrk+0x64>)
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4413      	add	r3, r2
 8003216:	4a05      	ldr	r2, [pc, #20]	@ (800322c <_sbrk+0x64>)
 8003218:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800321a:	68fb      	ldr	r3, [r7, #12]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	20010000 	.word	0x20010000
 8003228:	00000400 	.word	0x00000400
 800322c:	2000565c 	.word	0x2000565c
 8003230:	200057b0 	.word	0x200057b0

08003234 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003238:	bf00      	nop
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr

08003240 <Reset_Handler>:
 8003240:	f7ff fff8 	bl	8003234 <SystemInit>
 8003244:	480b      	ldr	r0, [pc, #44]	@ (8003274 <LoopFillZerobss+0xe>)
 8003246:	490c      	ldr	r1, [pc, #48]	@ (8003278 <LoopFillZerobss+0x12>)
 8003248:	4a0c      	ldr	r2, [pc, #48]	@ (800327c <LoopFillZerobss+0x16>)
 800324a:	2300      	movs	r3, #0
 800324c:	e002      	b.n	8003254 <LoopCopyDataInit>

0800324e <CopyDataInit>:
 800324e:	58d4      	ldr	r4, [r2, r3]
 8003250:	50c4      	str	r4, [r0, r3]
 8003252:	3304      	adds	r3, #4

08003254 <LoopCopyDataInit>:
 8003254:	18c4      	adds	r4, r0, r3
 8003256:	428c      	cmp	r4, r1
 8003258:	d3f9      	bcc.n	800324e <CopyDataInit>
 800325a:	4a09      	ldr	r2, [pc, #36]	@ (8003280 <LoopFillZerobss+0x1a>)
 800325c:	4c09      	ldr	r4, [pc, #36]	@ (8003284 <LoopFillZerobss+0x1e>)
 800325e:	2300      	movs	r3, #0
 8003260:	e001      	b.n	8003266 <LoopFillZerobss>

08003262 <FillZerobss>:
 8003262:	6013      	str	r3, [r2, #0]
 8003264:	3204      	adds	r2, #4

08003266 <LoopFillZerobss>:
 8003266:	42a2      	cmp	r2, r4
 8003268:	d3fb      	bcc.n	8003262 <FillZerobss>
 800326a:	f001 fc05 	bl	8004a78 <__libc_init_array>
 800326e:	f7fe f923 	bl	80014b8 <main>
 8003272:	4770      	bx	lr
 8003274:	20000000 	.word	0x20000000
 8003278:	20002040 	.word	0x20002040
 800327c:	08006d70 	.word	0x08006d70
 8003280:	20002040 	.word	0x20002040
 8003284:	200057ac 	.word	0x200057ac

08003288 <ADC1_2_IRQHandler>:
 8003288:	e7fe      	b.n	8003288 <ADC1_2_IRQHandler>

0800328a <LL_ADC_REG_SetSequencerLength>:
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003298:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr

080032ae <LL_ADC_IsEnabled>:
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b01      	cmp	r3, #1
 80032c0:	bf0c      	ite	eq
 80032c2:	2301      	moveq	r3, #1
 80032c4:	2300      	movne	r3, #0
 80032c6:	b2db      	uxtb	r3, r3
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr
	...

080032d4 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 80032d4:	b590      	push	{r4, r7, lr}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80032de:	2300      	movs	r3, #0
 80032e0:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 80032e2:	4813      	ldr	r0, [pc, #76]	@ (8003330 <LL_ADC_CommonInit+0x5c>)
 80032e4:	f7ff ffe3 	bl	80032ae <LL_ADC_IsEnabled>
 80032e8:	4604      	mov	r4, r0
 80032ea:	4812      	ldr	r0, [pc, #72]	@ (8003334 <LL_ADC_CommonInit+0x60>)
 80032ec:	f7ff ffdf 	bl	80032ae <LL_ADC_IsEnabled>
 80032f0:	4603      	mov	r3, r0
 80032f2:	4323      	orrs	r3, r4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d114      	bne.n	8003322 <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d009      	beq.n	8003314 <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	605a      	str	r2, [r3, #4]
 8003312:	e008      	b.n	8003326 <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	605a      	str	r2, [r3, #4]
 8003320:	e001      	b.n	8003326 <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8003326:	7bfb      	ldrb	r3, [r7, #15]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	bd90      	pop	{r4, r7, pc}
 8003330:	40012400 	.word	0x40012400
 8003334:	40012800 	.word	0x40012800

08003338 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003342:	2300      	movs	r3, #0
 8003344:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7ff ffb1 	bl	80032ae <LL_ADC_IsEnabled>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d112      	bne.n	8003378 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	431a      	orrs	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	609a      	str	r2, [r3, #8]
 8003376:	e001      	b.n	800337c <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800337c:	7bfb      	ldrb	r3, [r7, #15]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b084      	sub	sp, #16
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
 800338e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003390:	2300      	movs	r3, #0
 8003392:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff ff8a 	bl	80032ae <LL_ADC_IsEnabled>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d131      	bne.n	8003404 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00c      	beq.n	80033c2 <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	6859      	ldr	r1, [r3, #4]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	430b      	orrs	r3, r1
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	605a      	str	r2, [r3, #4]
 80033c0:	e008      	b.n	80033d4 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 80033dc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	6811      	ldr	r1, [r2, #0]
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	68d2      	ldr	r2, [r2, #12]
 80033e8:	4311      	orrs	r1, r2
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	6912      	ldr	r2, [r2, #16]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	431a      	orrs	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	4619      	mov	r1, r3
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7ff ff44 	bl	800328a <LL_ADC_REG_SetSequencerLength>
 8003402:	e001      	b.n	8003408 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003408:	7bfb      	ldrb	r3, [r7, #15]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <LL_EXTI_EnableIT_0_31>:
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800341c:	4b05      	ldr	r3, [pc, #20]	@ (8003434 <LL_EXTI_EnableIT_0_31+0x20>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	4904      	ldr	r1, [pc, #16]	@ (8003434 <LL_EXTI_EnableIT_0_31+0x20>)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4313      	orrs	r3, r2
 8003426:	600b      	str	r3, [r1, #0]
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	40010400 	.word	0x40010400

08003438 <LL_EXTI_DisableIT_0_31>:
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8003440:	4b05      	ldr	r3, [pc, #20]	@ (8003458 <LL_EXTI_DisableIT_0_31+0x20>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	43db      	mvns	r3, r3
 8003448:	4903      	ldr	r1, [pc, #12]	@ (8003458 <LL_EXTI_DisableIT_0_31+0x20>)
 800344a:	4013      	ands	r3, r2
 800344c:	600b      	str	r3, [r1, #0]
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr
 8003458:	40010400 	.word	0x40010400

0800345c <LL_EXTI_EnableEvent_0_31>:
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8003464:	4b05      	ldr	r3, [pc, #20]	@ (800347c <LL_EXTI_EnableEvent_0_31+0x20>)
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	4904      	ldr	r1, [pc, #16]	@ (800347c <LL_EXTI_EnableEvent_0_31+0x20>)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4313      	orrs	r3, r2
 800346e:	604b      	str	r3, [r1, #4]
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	bc80      	pop	{r7}
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40010400 	.word	0x40010400

08003480 <LL_EXTI_DisableEvent_0_31>:
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8003488:	4b05      	ldr	r3, [pc, #20]	@ (80034a0 <LL_EXTI_DisableEvent_0_31+0x20>)
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	43db      	mvns	r3, r3
 8003490:	4903      	ldr	r1, [pc, #12]	@ (80034a0 <LL_EXTI_DisableEvent_0_31+0x20>)
 8003492:	4013      	ands	r3, r2
 8003494:	604b      	str	r3, [r1, #4]
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr
 80034a0:	40010400 	.word	0x40010400

080034a4 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80034ac:	4b05      	ldr	r3, [pc, #20]	@ (80034c4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	4904      	ldr	r1, [pc, #16]	@ (80034c4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	608b      	str	r3, [r1, #8]
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	bc80      	pop	{r7}
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40010400 	.word	0x40010400

080034c8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80034d0:	4b05      	ldr	r3, [pc, #20]	@ (80034e8 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	43db      	mvns	r3, r3
 80034d8:	4903      	ldr	r1, [pc, #12]	@ (80034e8 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80034da:	4013      	ands	r3, r2
 80034dc:	608b      	str	r3, [r1, #8]
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr
 80034e8:	40010400 	.word	0x40010400

080034ec <LL_EXTI_EnableFallingTrig_0_31>:
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80034f4:	4b05      	ldr	r3, [pc, #20]	@ (800350c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	4904      	ldr	r1, [pc, #16]	@ (800350c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	60cb      	str	r3, [r1, #12]
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40010400 	.word	0x40010400

08003510 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8003518:	4b05      	ldr	r3, [pc, #20]	@ (8003530 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	43db      	mvns	r3, r3
 8003520:	4903      	ldr	r1, [pc, #12]	@ (8003530 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8003522:	4013      	ands	r3, r2
 8003524:	60cb      	str	r3, [r1, #12]
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	bc80      	pop	{r7}
 800352e:	4770      	bx	lr
 8003530:	40010400 	.word	0x40010400

08003534 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 800353c:	2300      	movs	r3, #0
 800353e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	791b      	ldrb	r3, [r3, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d065      	beq.n	8003614 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d06b      	beq.n	8003628 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	795b      	ldrb	r3, [r3, #5]
 8003554:	2b02      	cmp	r3, #2
 8003556:	d01c      	beq.n	8003592 <LL_EXTI_Init+0x5e>
 8003558:	2b02      	cmp	r3, #2
 800355a:	dc25      	bgt.n	80035a8 <LL_EXTI_Init+0x74>
 800355c:	2b00      	cmp	r3, #0
 800355e:	d002      	beq.n	8003566 <LL_EXTI_Init+0x32>
 8003560:	2b01      	cmp	r3, #1
 8003562:	d00b      	beq.n	800357c <LL_EXTI_Init+0x48>
 8003564:	e020      	b.n	80035a8 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff ff88 	bl	8003480 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff ff4d 	bl	8003414 <LL_EXTI_EnableIT_0_31>
          break;
 800357a:	e018      	b.n	80035ae <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff ff59 	bl	8003438 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff ff66 	bl	800345c <LL_EXTI_EnableEvent_0_31>
          break;
 8003590:	e00d      	b.n	80035ae <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff ff3c 	bl	8003414 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff ff5b 	bl	800345c <LL_EXTI_EnableEvent_0_31>
          break;
 80035a6:	e002      	b.n	80035ae <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	73fb      	strb	r3, [r7, #15]
          break;
 80035ac:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	799b      	ldrb	r3, [r3, #6]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d038      	beq.n	8003628 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	799b      	ldrb	r3, [r3, #6]
 80035ba:	2b03      	cmp	r3, #3
 80035bc:	d01c      	beq.n	80035f8 <LL_EXTI_Init+0xc4>
 80035be:	2b03      	cmp	r3, #3
 80035c0:	dc25      	bgt.n	800360e <LL_EXTI_Init+0xda>
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d002      	beq.n	80035cc <LL_EXTI_Init+0x98>
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d00b      	beq.n	80035e2 <LL_EXTI_Init+0xae>
 80035ca:	e020      	b.n	800360e <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff ff9d 	bl	8003510 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff ff62 	bl	80034a4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80035e0:	e022      	b.n	8003628 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff ff6e 	bl	80034c8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff ff7b 	bl	80034ec <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80035f6:	e017      	b.n	8003628 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff ff51 	bl	80034a4 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff ff70 	bl	80034ec <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800360c:	e00c      	b.n	8003628 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	73fb      	strb	r3, [r7, #15]
            break;
 8003612:	e009      	b.n	8003628 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff ff0d 	bl	8003438 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff ff2c 	bl	8003480 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8003628:	7bfb      	ldrb	r3, [r7, #15]
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <LL_GPIO_SetPinMode>:
{
 8003632:	b490      	push	{r4, r7}
 8003634:	b088      	sub	sp, #32
 8003636:	af00      	add	r7, sp, #0
 8003638:	60f8      	str	r0, [r7, #12]
 800363a:	60b9      	str	r1, [r7, #8]
 800363c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	461a      	mov	r2, r3
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	0e1b      	lsrs	r3, r3, #24
 8003646:	4413      	add	r3, r2
 8003648:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800364a:	6822      	ldr	r2, [r4, #0]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	fa93 f3a3 	rbit	r3, r3
 8003656:	613b      	str	r3, [r7, #16]
  return result;
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	fab3 f383 	clz	r3, r3
 800365e:	b2db      	uxtb	r3, r3
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	210f      	movs	r1, #15
 8003664:	fa01 f303 	lsl.w	r3, r1, r3
 8003668:	43db      	mvns	r3, r3
 800366a:	401a      	ands	r2, r3
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	fa93 f3a3 	rbit	r3, r3
 8003676:	61bb      	str	r3, [r7, #24]
  return result;
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	fab3 f383 	clz	r3, r3
 800367e:	b2db      	uxtb	r3, r3
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	fa01 f303 	lsl.w	r3, r1, r3
 8003688:	4313      	orrs	r3, r2
 800368a:	6023      	str	r3, [r4, #0]
}
 800368c:	bf00      	nop
 800368e:	3720      	adds	r7, #32
 8003690:	46bd      	mov	sp, r7
 8003692:	bc90      	pop	{r4, r7}
 8003694:	4770      	bx	lr

08003696 <LL_GPIO_SetPinSpeed>:
{
 8003696:	b490      	push	{r4, r7}
 8003698:	b088      	sub	sp, #32
 800369a:	af00      	add	r7, sp, #0
 800369c:	60f8      	str	r0, [r7, #12]
 800369e:	60b9      	str	r1, [r7, #8]
 80036a0:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	461a      	mov	r2, r3
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	0e1b      	lsrs	r3, r3, #24
 80036aa:	4413      	add	r3, r2
 80036ac:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80036ae:	6822      	ldr	r2, [r4, #0]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	fa93 f3a3 	rbit	r3, r3
 80036ba:	613b      	str	r3, [r7, #16]
  return result;
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	fab3 f383 	clz	r3, r3
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	2103      	movs	r1, #3
 80036c8:	fa01 f303 	lsl.w	r3, r1, r3
 80036cc:	43db      	mvns	r3, r3
 80036ce:	401a      	ands	r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	fa93 f3a3 	rbit	r3, r3
 80036da:	61bb      	str	r3, [r7, #24]
  return result;
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	fab3 f383 	clz	r3, r3
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	fa01 f303 	lsl.w	r3, r1, r3
 80036ec:	4313      	orrs	r3, r2
 80036ee:	6023      	str	r3, [r4, #0]
}
 80036f0:	bf00      	nop
 80036f2:	3720      	adds	r7, #32
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc90      	pop	{r4, r7}
 80036f8:	4770      	bx	lr

080036fa <LL_GPIO_SetPinOutputType>:
{
 80036fa:	b490      	push	{r4, r7}
 80036fc:	b088      	sub	sp, #32
 80036fe:	af00      	add	r7, sp, #0
 8003700:	60f8      	str	r0, [r7, #12]
 8003702:	60b9      	str	r1, [r7, #8]
 8003704:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	461a      	mov	r2, r3
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	0e1b      	lsrs	r3, r3, #24
 800370e:	4413      	add	r3, r2
 8003710:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8003712:	6822      	ldr	r2, [r4, #0]
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	fa93 f3a3 	rbit	r3, r3
 800371e:	613b      	str	r3, [r7, #16]
  return result;
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	fab3 f383 	clz	r3, r3
 8003726:	b2db      	uxtb	r3, r3
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	2104      	movs	r1, #4
 800372c:	fa01 f303 	lsl.w	r3, r1, r3
 8003730:	43db      	mvns	r3, r3
 8003732:	401a      	ands	r2, r3
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	fa93 f3a3 	rbit	r3, r3
 800373e:	61bb      	str	r3, [r7, #24]
  return result;
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	fab3 f383 	clz	r3, r3
 8003746:	b2db      	uxtb	r3, r3
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	fa01 f303 	lsl.w	r3, r1, r3
 8003750:	4313      	orrs	r3, r2
 8003752:	6023      	str	r3, [r4, #0]
}
 8003754:	bf00      	nop
 8003756:	3720      	adds	r7, #32
 8003758:	46bd      	mov	sp, r7
 800375a:	bc90      	pop	{r4, r7}
 800375c:	4770      	bx	lr

0800375e <LL_GPIO_SetPinPull>:
{
 800375e:	b480      	push	{r7}
 8003760:	b087      	sub	sp, #28
 8003762:	af00      	add	r7, sp, #0
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	0a1b      	lsrs	r3, r3, #8
 8003772:	43db      	mvns	r3, r3
 8003774:	401a      	ands	r2, r3
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	0a1b      	lsrs	r3, r3, #8
 800377a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	fa93 f3a3 	rbit	r3, r3
 8003782:	613b      	str	r3, [r7, #16]
  return result;
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	fab3 f383 	clz	r3, r3
 800378a:	b2db      	uxtb	r3, r3
 800378c:	4619      	mov	r1, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	408b      	lsls	r3, r1
 8003792:	431a      	orrs	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	60da      	str	r2, [r3, #12]
}
 8003798:	bf00      	nop
 800379a:	371c      	adds	r7, #28
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr

080037a2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b088      	sub	sp, #32
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
 80037aa:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	021b      	lsls	r3, r3, #8
 80037b2:	0c1b      	lsrs	r3, r3, #16
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	fa93 f3a3 	rbit	r3, r3
 80037c0:	60fb      	str	r3, [r7, #12]
  return result;
 80037c2:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80037c4:	fab3 f383 	clz	r3, r3
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80037cc:	e044      	b.n	8003858 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80037ce:	2201      	movs	r2, #1
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	409a      	lsls	r2, r3
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	4013      	ands	r3, r2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d03a      	beq.n	8003852 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	2b07      	cmp	r3, #7
 80037e0:	d806      	bhi.n	80037f0 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 80037e2:	f240 1201 	movw	r2, #257	@ 0x101
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	e008      	b.n	8003802 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	3b08      	subs	r3, #8
 80037f4:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003800:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b08      	cmp	r3, #8
 8003808:	d106      	bne.n	8003818 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	461a      	mov	r2, r3
 8003810:	69b9      	ldr	r1, [r7, #24]
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7ff ffa3 	bl	800375e <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	461a      	mov	r2, r3
 800381e:	69b9      	ldr	r1, [r7, #24]
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7ff ff06 	bl	8003632 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d003      	beq.n	8003836 <LL_GPIO_Init+0x94>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b09      	cmp	r3, #9
 8003834:	d10d      	bne.n	8003852 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	461a      	mov	r2, r3
 800383c:	69b9      	ldr	r1, [r7, #24]
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7ff ff29 	bl	8003696 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	461a      	mov	r2, r3
 800384a:	69b9      	ldr	r1, [r7, #24]
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7ff ff54 	bl	80036fa <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	3301      	adds	r3, #1
 8003856:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	fa22 f303 	lsr.w	r3, r2, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1b4      	bne.n	80037ce <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3720      	adds	r7, #32
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <LL_RCC_HSE_GetPrediv2>:
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV2));
 8003874:	4b03      	ldr	r3, [pc, #12]	@ (8003884 <LL_RCC_HSE_GetPrediv2+0x14>)
 8003876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003878:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800387c:	4618      	mov	r0, r3
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr
 8003884:	40021000 	.word	0x40021000

08003888 <LL_RCC_GetSysClkSource>:
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800388c:	4b03      	ldr	r3, [pc, #12]	@ (800389c <LL_RCC_GetSysClkSource+0x14>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f003 030c 	and.w	r3, r3, #12
}
 8003894:	4618      	mov	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr
 800389c:	40021000 	.word	0x40021000

080038a0 <LL_RCC_GetAHBPrescaler>:
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80038a4:	4b03      	ldr	r3, [pc, #12]	@ (80038b4 <LL_RCC_GetAHBPrescaler+0x14>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr
 80038b4:	40021000 	.word	0x40021000

080038b8 <LL_RCC_GetAPB1Prescaler>:
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80038bc:	4b03      	ldr	r3, [pc, #12]	@ (80038cc <LL_RCC_GetAPB1Prescaler+0x14>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr
 80038cc:	40021000 	.word	0x40021000

080038d0 <LL_RCC_GetAPB2Prescaler>:
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80038d4:	4b03      	ldr	r3, [pc, #12]	@ (80038e4 <LL_RCC_GetAPB2Prescaler+0x14>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80038dc:	4618      	mov	r0, r3
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr
 80038e4:	40021000 	.word	0x40021000

080038e8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
 80038ee:	4b09      	ldr	r3, [pc, #36]	@ (8003914 <LL_RCC_PLL_GetMainSource+0x2c>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038f6:	607b      	str	r3, [r7, #4]
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
 80038f8:	4b06      	ldr	r3, [pc, #24]	@ (8003914 <LL_RCC_PLL_GetMainSource+0x2c>)
 80038fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003902:	603b      	str	r3, [r7, #0]
  return (uint32_t)(pllsrc | predivsrc);
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	4313      	orrs	r3, r2
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 800390a:	4618      	mov	r0, r3
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr
 8003914:	40021000 	.word	0x40021000

08003918 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 800391c:	4b03      	ldr	r3, [pc, #12]	@ (800392c <LL_RCC_PLL_GetMultiplicator+0x14>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 8003924:	4618      	mov	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr
 800392c:	40021000 	.word	0x40021000

08003930 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
 8003934:	4b03      	ldr	r3, [pc, #12]	@ (8003944 <LL_RCC_PLL_GetPrediv+0x14>)
 8003936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003938:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
#endif /*RCC_CFGR2_PREDIV1*/
}
 800393c:	4618      	mov	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	bc80      	pop	{r7}
 8003942:	4770      	bx	lr
 8003944:	40021000 	.word	0x40021000

08003948 <LL_RCC_PLL2_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL2_MUL_14
  *         @arg @ref LL_RCC_PLL2_MUL_16
  *         @arg @ref LL_RCC_PLL2_MUL_20
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetMultiplicator(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL2MUL));
 800394c:	4b03      	ldr	r3, [pc, #12]	@ (800395c <LL_RCC_PLL2_GetMultiplicator+0x14>)
 800394e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003950:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8003954:	4618      	mov	r0, r3
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr
 800395c:	40021000 	.word	0x40021000

08003960 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003968:	f000 f820 	bl	80039ac <RCC_GetSystemClockFreq>
 800396c:	4602      	mov	r2, r0
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f000 f83e 	bl	80039f8 <RCC_GetHCLKClockFreq>
 800397c:	4602      	mov	r2, r0
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	4618      	mov	r0, r3
 8003988:	f000 f84c 	bl	8003a24 <RCC_GetPCLK1ClockFreq>
 800398c:	4602      	mov	r2, r0
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	4618      	mov	r0, r3
 8003998:	f000 f858 	bl	8003a4c <RCC_GetPCLK2ClockFreq>
 800399c:	4602      	mov	r2, r0
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	60da      	str	r2, [r3, #12]
}
 80039a2:	bf00      	nop
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80039b6:	f7ff ff67 	bl	8003888 <LL_RCC_GetSysClkSource>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d00c      	beq.n	80039da <RCC_GetSystemClockFreq+0x2e>
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d80e      	bhi.n	80039e2 <RCC_GetSystemClockFreq+0x36>
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d002      	beq.n	80039ce <RCC_GetSystemClockFreq+0x22>
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d003      	beq.n	80039d4 <RCC_GetSystemClockFreq+0x28>
 80039cc:	e009      	b.n	80039e2 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80039ce:	4b09      	ldr	r3, [pc, #36]	@ (80039f4 <RCC_GetSystemClockFreq+0x48>)
 80039d0:	607b      	str	r3, [r7, #4]
      break;
 80039d2:	e009      	b.n	80039e8 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80039d4:	4b07      	ldr	r3, [pc, #28]	@ (80039f4 <RCC_GetSystemClockFreq+0x48>)
 80039d6:	607b      	str	r3, [r7, #4]
      break;
 80039d8:	e006      	b.n	80039e8 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80039da:	f000 f84b 	bl	8003a74 <RCC_PLL_GetFreqDomain_SYS>
 80039de:	6078      	str	r0, [r7, #4]
      break;
 80039e0:	e002      	b.n	80039e8 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 80039e2:	4b04      	ldr	r3, [pc, #16]	@ (80039f4 <RCC_GetSystemClockFreq+0x48>)
 80039e4:	607b      	str	r3, [r7, #4]
      break;
 80039e6:	bf00      	nop
  }

  return frequency;
 80039e8:	687b      	ldr	r3, [r7, #4]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	007a1200 	.word	0x007a1200

080039f8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003a00:	f7ff ff4e 	bl	80038a0 <LL_RCC_GetAHBPrescaler>
 8003a04:	4603      	mov	r3, r0
 8003a06:	091b      	lsrs	r3, r3, #4
 8003a08:	f003 030f 	and.w	r3, r3, #15
 8003a0c:	4a04      	ldr	r2, [pc, #16]	@ (8003a20 <RCC_GetHCLKClockFreq+0x28>)
 8003a0e:	5cd3      	ldrb	r3, [r2, r3]
 8003a10:	461a      	mov	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	40d3      	lsrs	r3, r2
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	08006bf8 	.word	0x08006bf8

08003a24 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003a2c:	f7ff ff44 	bl	80038b8 <LL_RCC_GetAPB1Prescaler>
 8003a30:	4603      	mov	r3, r0
 8003a32:	0a1b      	lsrs	r3, r3, #8
 8003a34:	4a04      	ldr	r2, [pc, #16]	@ (8003a48 <RCC_GetPCLK1ClockFreq+0x24>)
 8003a36:	5cd3      	ldrb	r3, [r2, r3]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	40d3      	lsrs	r3, r2
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	08006c08 	.word	0x08006c08

08003a4c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003a54:	f7ff ff3c 	bl	80038d0 <LL_RCC_GetAPB2Prescaler>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	0adb      	lsrs	r3, r3, #11
 8003a5c:	4a04      	ldr	r2, [pc, #16]	@ (8003a70 <RCC_GetPCLK2ClockFreq+0x24>)
 8003a5e:	5cd3      	ldrb	r3, [r2, r3]
 8003a60:	461a      	mov	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	40d3      	lsrs	r3, r2
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	08006c08 	.word	0x08006c08

08003a74 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003a74:	b590      	push	{r4, r7, lr}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	607b      	str	r3, [r7, #4]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003a82:	f7ff ff31 	bl	80038e8 <LL_RCC_PLL_GetMainSource>
 8003a86:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8003a8e:	d017      	beq.n	8003ac0 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8003a96:	d81e      	bhi.n	8003ad6 <RCC_PLL_GetFreqDomain_SYS+0x62>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d004      	beq.n	8003aa8 <RCC_PLL_GetFreqDomain_SYS+0x34>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aa4:	d003      	beq.n	8003aae <RCC_PLL_GetFreqDomain_SYS+0x3a>
 8003aa6:	e016      	b.n	8003ad6 <RCC_PLL_GetFreqDomain_SYS+0x62>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8003aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b14 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 8003aaa:	607b      	str	r3, [r7, #4]
      break;
 8003aac:	e016      	b.n	8003adc <RCC_PLL_GetFreqDomain_SYS+0x68>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8003aae:	f7ff ff3f 	bl	8003930 <LL_RCC_PLL_GetPrediv>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	4a18      	ldr	r2, [pc, #96]	@ (8003b18 <RCC_PLL_GetFreqDomain_SYS+0xa4>)
 8003ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003abc:	607b      	str	r3, [r7, #4]
      break;
 8003abe:	e00d      	b.n	8003adc <RCC_PLL_GetFreqDomain_SYS+0x68>

#if defined(RCC_PLL2_SUPPORT)
    case LL_RCC_PLLSOURCE_PLL2:       /* PLL2 used as PLL clock source */
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
 8003ac0:	f000 f82c 	bl	8003b1c <RCC_PLL2_GetFreqClockFreq>
 8003ac4:	4604      	mov	r4, r0
 8003ac6:	f7ff ff33 	bl	8003930 <LL_RCC_PLL_GetPrediv>
 8003aca:	4603      	mov	r3, r0
 8003acc:	3301      	adds	r3, #1
 8003ace:	fbb4 f3f3 	udiv	r3, r4, r3
 8003ad2:	607b      	str	r3, [r7, #4]
      break;
 8003ad4:	e002      	b.n	8003adc <RCC_PLL_GetFreqDomain_SYS+0x68>
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8003ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8003b14 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 8003ad8:	607b      	str	r3, [r7, #4]
      break;
 8003ada:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8003adc:	f7ff ff1c 	bl	8003918 <LL_RCC_PLL_GetMultiplicator>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f5b3 1f50 	cmp.w	r3, #3407872	@ 0x340000
 8003ae6:	d00a      	beq.n	8003afe <RCC_PLL_GetFreqDomain_SYS+0x8a>
 8003ae8:	f7ff ff16 	bl	8003918 <LL_RCC_PLL_GetMultiplicator>
 8003aec:	4603      	mov	r3, r0
 8003aee:	0c9b      	lsrs	r3, r3, #18
 8003af0:	f003 030f 	and.w	r3, r3, #15
 8003af4:	3302      	adds	r3, #2
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	fb02 f303 	mul.w	r3, r2, r3
 8003afc:	e006      	b.n	8003b0c <RCC_PLL_GetFreqDomain_SYS+0x98>
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	4613      	mov	r3, r2
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	4413      	add	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	085b      	lsrs	r3, r3, #1
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd90      	pop	{r4, r7, pc}
 8003b14:	003d0900 	.word	0x003d0900
 8003b18:	007a1200 	.word	0x007a1200

08003b1c <RCC_PLL2_GetFreqClockFreq>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL2_GetFreqClockFreq(void)
{
 8003b1c:	b598      	push	{r3, r4, r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  return __LL_RCC_CALC_PLL2CLK_FREQ(HSE_VALUE, LL_RCC_PLL2_GetMultiplicator(), LL_RCC_HSE_GetPrediv2());
 8003b20:	f7ff ff12 	bl	8003948 <LL_RCC_PLL2_GetMultiplicator>
 8003b24:	4603      	mov	r3, r0
 8003b26:	0a1b      	lsrs	r3, r3, #8
 8003b28:	4a07      	ldr	r2, [pc, #28]	@ (8003b48 <RCC_PLL2_GetFreqClockFreq+0x2c>)
 8003b2a:	fb02 f303 	mul.w	r3, r2, r3
 8003b2e:	f503 0474 	add.w	r4, r3, #15990784	@ 0xf40000
 8003b32:	f504 5410 	add.w	r4, r4, #9216	@ 0x2400
 8003b36:	f7ff fe9b 	bl	8003870 <LL_RCC_HSE_GetPrediv2>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	091b      	lsrs	r3, r3, #4
 8003b3e:	3301      	adds	r3, #1
 8003b40:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	bd98      	pop	{r3, r4, r7, pc}
 8003b48:	007a1200 	.word	0x007a1200

08003b4c <LL_TIM_SetPrescaler>:
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bc80      	pop	{r7}
 8003b64:	4770      	bx	lr

08003b66 <LL_TIM_SetAutoReload>:
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr

08003b80 <LL_TIM_SetRepetitionCounter>:
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bc80      	pop	{r7}
 8003b98:	4770      	bx	lr

08003b9a <LL_TIM_OC_SetCompareCH1>:
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
 8003ba2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr

08003bb4 <LL_TIM_OC_SetCompareCH2>:
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr

08003bce <LL_TIM_OC_SetCompareCH3>:
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
 8003bd6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bc80      	pop	{r7}
 8003be6:	4770      	bx	lr

08003be8 <LL_TIM_OC_SetCompareCH4>:
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr

08003c02 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	f043 0201 	orr.w	r2, r3, #1
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	615a      	str	r2, [r3, #20]
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bc80      	pop	{r7}
 8003c1e:	4770      	bx	lr

08003c20 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a2b      	ldr	r2, [pc, #172]	@ (8003ce0 <LL_TIM_Init+0xc0>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d00f      	beq.n	8003c58 <LL_TIM_Init+0x38>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c3e:	d00b      	beq.n	8003c58 <LL_TIM_Init+0x38>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a28      	ldr	r2, [pc, #160]	@ (8003ce4 <LL_TIM_Init+0xc4>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d007      	beq.n	8003c58 <LL_TIM_Init+0x38>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a27      	ldr	r2, [pc, #156]	@ (8003ce8 <LL_TIM_Init+0xc8>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d003      	beq.n	8003c58 <LL_TIM_Init+0x38>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a26      	ldr	r2, [pc, #152]	@ (8003cec <LL_TIM_Init+0xcc>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d106      	bne.n	8003c66 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a1d      	ldr	r2, [pc, #116]	@ (8003ce0 <LL_TIM_Init+0xc0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d00f      	beq.n	8003c8e <LL_TIM_Init+0x6e>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c74:	d00b      	beq.n	8003c8e <LL_TIM_Init+0x6e>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a1a      	ldr	r2, [pc, #104]	@ (8003ce4 <LL_TIM_Init+0xc4>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d007      	beq.n	8003c8e <LL_TIM_Init+0x6e>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a19      	ldr	r2, [pc, #100]	@ (8003ce8 <LL_TIM_Init+0xc8>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d003      	beq.n	8003c8e <LL_TIM_Init+0x6e>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a18      	ldr	r2, [pc, #96]	@ (8003cec <LL_TIM_Init+0xcc>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d106      	bne.n	8003c9c <LL_TIM_Init+0x7c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7ff ff5c 	bl	8003b66 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7ff ff49 	bl	8003b4c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a08      	ldr	r2, [pc, #32]	@ (8003ce0 <LL_TIM_Init+0xc0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d105      	bne.n	8003cce <LL_TIM_Init+0xae>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7ff ff59 	bl	8003b80 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7ff ff97 	bl	8003c02 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40012c00 	.word	0x40012c00
 8003ce4:	40000400 	.word	0x40000400
 8003ce8:	40000800 	.word	0x40000800
 8003cec:	40000c00 	.word	0x40000c00

08003cf0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d06:	d027      	beq.n	8003d58 <LL_TIM_OC_Init+0x68>
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d0e:	d82a      	bhi.n	8003d66 <LL_TIM_OC_Init+0x76>
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d16:	d018      	beq.n	8003d4a <LL_TIM_OC_Init+0x5a>
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d1e:	d822      	bhi.n	8003d66 <LL_TIM_OC_Init+0x76>
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d003      	beq.n	8003d2e <LL_TIM_OC_Init+0x3e>
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b10      	cmp	r3, #16
 8003d2a:	d007      	beq.n	8003d3c <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8003d2c:	e01b      	b.n	8003d66 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8003d2e:	6879      	ldr	r1, [r7, #4]
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 f81f 	bl	8003d74 <OC1Config>
 8003d36:	4603      	mov	r3, r0
 8003d38:	75fb      	strb	r3, [r7, #23]
      break;
 8003d3a:	e015      	b.n	8003d68 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 f87e 	bl	8003e40 <OC2Config>
 8003d44:	4603      	mov	r3, r0
 8003d46:	75fb      	strb	r3, [r7, #23]
      break;
 8003d48:	e00e      	b.n	8003d68 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 f8e1 	bl	8003f14 <OC3Config>
 8003d52:	4603      	mov	r3, r0
 8003d54:	75fb      	strb	r3, [r7, #23]
      break;
 8003d56:	e007      	b.n	8003d68 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003d58:	6879      	ldr	r1, [r7, #4]
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 f944 	bl	8003fe8 <OC4Config>
 8003d60:	4603      	mov	r3, r0
 8003d62:	75fb      	strb	r3, [r7, #23]
      break;
 8003d64:	e000      	b.n	8003d68 <LL_TIM_OC_Init+0x78>
      break;
 8003d66:	bf00      	nop
  }

  return result;
 8003d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	f023 0201 	bic.w	r2, r3, #1
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f023 0303 	bic.w	r3, r3, #3
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f023 0202 	bic.w	r2, r3, #2
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f023 0201 	bic.w	r2, r3, #1
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a1a      	ldr	r2, [pc, #104]	@ (8003e3c <OC1Config+0xc8>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d11e      	bne.n	8003e14 <OC1Config+0xa0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f023 0208 	bic.w	r2, r3, #8
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4313      	orrs	r3, r2
 8003de4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f023 0204 	bic.w	r2, r3, #4
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4313      	orrs	r3, r2
 8003df4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	4313      	orrs	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	4619      	mov	r1, r3
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7ff feb7 	bl	8003b9a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	40012c00 	.word	0x40012c00

08003e40 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	f023 0210 	bic.w	r2, r3, #16
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	021b      	lsls	r3, r3, #8
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f023 0220 	bic.w	r2, r3, #32
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f023 0210 	bic.w	r2, r3, #16
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a1b      	ldr	r2, [pc, #108]	@ (8003f10 <OC2Config+0xd0>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d11f      	bne.n	8003ee8 <OC2Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	019b      	lsls	r3, r3, #6
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	019b      	lsls	r3, r3, #6
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	4619      	mov	r1, r3
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7ff fe5a 	bl	8003bb4 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3718      	adds	r7, #24
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40012c00 	.word	0x40012c00

08003f14 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f023 0303 	bic.w	r3, r3, #3
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	021b      	lsls	r3, r3, #8
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	021b      	lsls	r3, r3, #8
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a1b      	ldr	r2, [pc, #108]	@ (8003fe4 <OC3Config+0xd0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d11f      	bne.n	8003fba <OC3Config+0xa6>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	029b      	lsls	r3, r3, #10
 8003f86:	4313      	orrs	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	029b      	lsls	r3, r3, #10
 8003f96:	4313      	orrs	r3, r2
 8003f98:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	015b      	lsls	r3, r3, #5
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	4619      	mov	r1, r3
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7ff fdfe 	bl	8003bce <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40012c00 	.word	0x40012c00

08003fe8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	021b      	lsls	r3, r3, #8
 8004024:	4313      	orrs	r3, r2
 8004026:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	031b      	lsls	r3, r3, #12
 8004034:	4313      	orrs	r3, r2
 8004036:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	031b      	lsls	r3, r3, #12
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a0f      	ldr	r2, [pc, #60]	@ (8004088 <OC4Config+0xa0>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d107      	bne.n	8004060 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	019b      	lsls	r3, r3, #6
 800405c:	4313      	orrs	r3, r2
 800405e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	4619      	mov	r1, r3
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7ff fdb8 	bl	8003be8 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40012c00 	.word	0x40012c00

0800408c <LL_USART_IsEnabled>:
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800409c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040a0:	bf0c      	ite	eq
 80040a2:	2301      	moveq	r3, #1
 80040a4:	2300      	movne	r3, #0
 80040a6:	b2db      	uxtb	r3, r3
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	4770      	bx	lr

080040b2 <LL_USART_SetStopBitsLength>:
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	611a      	str	r2, [r3, #16]
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bc80      	pop	{r7}
 80040d4:	4770      	bx	lr

080040d6 <LL_USART_SetHWFlowCtrl>:
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	431a      	orrs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	615a      	str	r2, [r3, #20]
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bc80      	pop	{r7}
 80040f8:	4770      	bx	lr
	...

080040fc <LL_USART_SetBaudRate>:
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	4613      	mov	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	009a      	lsls	r2, r3, #2
 8004112:	441a      	add	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	fbb2 f3f3 	udiv	r3, r2, r3
 800411c:	4a25      	ldr	r2, [pc, #148]	@ (80041b4 <LL_USART_SetBaudRate+0xb8>)
 800411e:	fba2 2303 	umull	r2, r3, r2, r3
 8004122:	095b      	lsrs	r3, r3, #5
 8004124:	b29b      	uxth	r3, r3
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	b299      	uxth	r1, r3
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	4613      	mov	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	009a      	lsls	r2, r3, #2
 8004134:	441a      	add	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	fbb2 f2f3 	udiv	r2, r2, r3
 800413e:	4b1d      	ldr	r3, [pc, #116]	@ (80041b4 <LL_USART_SetBaudRate+0xb8>)
 8004140:	fba3 0302 	umull	r0, r3, r3, r2
 8004144:	095b      	lsrs	r3, r3, #5
 8004146:	2064      	movs	r0, #100	@ 0x64
 8004148:	fb00 f303 	mul.w	r3, r0, r3
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	3332      	adds	r3, #50	@ 0x32
 8004152:	4a18      	ldr	r2, [pc, #96]	@ (80041b4 <LL_USART_SetBaudRate+0xb8>)
 8004154:	fba2 2303 	umull	r2, r3, r2, r3
 8004158:	095b      	lsrs	r3, r3, #5
 800415a:	b29b      	uxth	r3, r3
 800415c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004160:	b29b      	uxth	r3, r3
 8004162:	440b      	add	r3, r1
 8004164:	b299      	uxth	r1, r3
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	4613      	mov	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	009a      	lsls	r2, r3, #2
 8004170:	441a      	add	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	fbb2 f2f3 	udiv	r2, r2, r3
 800417a:	4b0e      	ldr	r3, [pc, #56]	@ (80041b4 <LL_USART_SetBaudRate+0xb8>)
 800417c:	fba3 0302 	umull	r0, r3, r3, r2
 8004180:	095b      	lsrs	r3, r3, #5
 8004182:	2064      	movs	r0, #100	@ 0x64
 8004184:	fb00 f303 	mul.w	r3, r0, r3
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	3332      	adds	r3, #50	@ 0x32
 800418e:	4a09      	ldr	r2, [pc, #36]	@ (80041b4 <LL_USART_SetBaudRate+0xb8>)
 8004190:	fba2 2303 	umull	r2, r3, r2, r3
 8004194:	095b      	lsrs	r3, r3, #5
 8004196:	b29b      	uxth	r3, r3
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	b29b      	uxth	r3, r3
 800419e:	440b      	add	r3, r1
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	461a      	mov	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	609a      	str	r2, [r3, #8]
}
 80041a8:	bf00      	nop
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	51eb851f 	.word	0x51eb851f

080041b8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80041c6:	2300      	movs	r3, #0
 80041c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7ff ff5e 	bl	800408c <LL_USART_IsEnabled>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d153      	bne.n	800427e <LL_USART_Init+0xc6>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80041de:	f023 030c 	bic.w	r3, r3, #12
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	6851      	ldr	r1, [r2, #4]
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	68d2      	ldr	r2, [r2, #12]
 80041ea:	4311      	orrs	r1, r2
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	6912      	ldr	r2, [r2, #16]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	4619      	mov	r1, r3
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff ff57 	bl	80040b2 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	4619      	mov	r1, r3
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7ff ff63 	bl	80040d6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004210:	f107 0308 	add.w	r3, r7, #8
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff fba3 	bl	8003960 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a1a      	ldr	r2, [pc, #104]	@ (8004288 <LL_USART_Init+0xd0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d102      	bne.n	8004228 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	61bb      	str	r3, [r7, #24]
 8004226:	e01a      	b.n	800425e <LL_USART_Init+0xa6>
    }
    else if (USARTx == USART2)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a18      	ldr	r2, [pc, #96]	@ (800428c <LL_USART_Init+0xd4>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d102      	bne.n	8004236 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	61bb      	str	r3, [r7, #24]
 8004234:	e013      	b.n	800425e <LL_USART_Init+0xa6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a15      	ldr	r2, [pc, #84]	@ (8004290 <LL_USART_Init+0xd8>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d102      	bne.n	8004244 <LL_USART_Init+0x8c>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	61bb      	str	r3, [r7, #24]
 8004242:	e00c      	b.n	800425e <LL_USART_Init+0xa6>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a13      	ldr	r2, [pc, #76]	@ (8004294 <LL_USART_Init+0xdc>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d102      	bne.n	8004252 <LL_USART_Init+0x9a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	61bb      	str	r3, [r7, #24]
 8004250:	e005      	b.n	800425e <LL_USART_Init+0xa6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a10      	ldr	r2, [pc, #64]	@ (8004298 <LL_USART_Init+0xe0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d101      	bne.n	800425e <LL_USART_Init+0xa6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00c      	beq.n	800427e <LL_USART_Init+0xc6>
        && (USART_InitStruct->BaudRate != 0U))
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d008      	beq.n	800427e <LL_USART_Init+0xc6>
    {
      status = SUCCESS;
 800426c:	2300      	movs	r3, #0
 800426e:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8004274:	461a      	mov	r2, r3
 8004276:	69b9      	ldr	r1, [r7, #24]
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f7ff ff3f 	bl	80040fc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800427e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3720      	adds	r7, #32
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40013800 	.word	0x40013800
 800428c:	40004400 	.word	0x40004400
 8004290:	40004800 	.word	0x40004800
 8004294:	40004c00 	.word	0x40004c00
 8004298:	40005000 	.word	0x40005000

0800429c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ae:	4a07      	ldr	r2, [pc, #28]	@ (80042cc <LL_InitTick+0x30>)
 80042b0:	3b01      	subs	r3, #1
 80042b2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80042b4:	4b05      	ldr	r3, [pc, #20]	@ (80042cc <LL_InitTick+0x30>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042ba:	4b04      	ldr	r3, [pc, #16]	@ (80042cc <LL_InitTick+0x30>)
 80042bc:	2205      	movs	r2, #5
 80042be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bc80      	pop	{r7}
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	e000e010 	.word	0xe000e010

080042d0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80042d8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7ff ffdd 	bl	800429c <LL_InitTick>
}
 80042e2:	bf00      	nop
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80042f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004330 <LL_mDelay+0x44>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80042fa:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004302:	d00c      	beq.n	800431e <LL_mDelay+0x32>
  {
    Delay++;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3301      	adds	r3, #1
 8004308:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800430a:	e008      	b.n	800431e <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800430c:	4b08      	ldr	r3, [pc, #32]	@ (8004330 <LL_mDelay+0x44>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <LL_mDelay+0x32>
    {
      Delay--;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3b01      	subs	r3, #1
 800431c:	607b      	str	r3, [r7, #4]
  while (Delay)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1f3      	bne.n	800430c <LL_mDelay+0x20>
    }
  }
}
 8004324:	bf00      	nop
 8004326:	bf00      	nop
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	bc80      	pop	{r7}
 800432e:	4770      	bx	lr
 8004330:	e000e010 	.word	0xe000e010

08004334 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800433c:	4a03      	ldr	r2, [pc, #12]	@ (800434c <LL_SetSystemCoreClock+0x18>)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6013      	str	r3, [r2, #0]
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr
 800434c:	20001fe0 	.word	0x20001fe0

08004350 <__sflush_r>:
 8004350:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004356:	0716      	lsls	r6, r2, #28
 8004358:	4605      	mov	r5, r0
 800435a:	460c      	mov	r4, r1
 800435c:	d454      	bmi.n	8004408 <__sflush_r+0xb8>
 800435e:	684b      	ldr	r3, [r1, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	dc02      	bgt.n	800436a <__sflush_r+0x1a>
 8004364:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004366:	2b00      	cmp	r3, #0
 8004368:	dd48      	ble.n	80043fc <__sflush_r+0xac>
 800436a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800436c:	2e00      	cmp	r6, #0
 800436e:	d045      	beq.n	80043fc <__sflush_r+0xac>
 8004370:	2300      	movs	r3, #0
 8004372:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004376:	682f      	ldr	r7, [r5, #0]
 8004378:	6a21      	ldr	r1, [r4, #32]
 800437a:	602b      	str	r3, [r5, #0]
 800437c:	d030      	beq.n	80043e0 <__sflush_r+0x90>
 800437e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004380:	89a3      	ldrh	r3, [r4, #12]
 8004382:	0759      	lsls	r1, r3, #29
 8004384:	d505      	bpl.n	8004392 <__sflush_r+0x42>
 8004386:	6863      	ldr	r3, [r4, #4]
 8004388:	1ad2      	subs	r2, r2, r3
 800438a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800438c:	b10b      	cbz	r3, 8004392 <__sflush_r+0x42>
 800438e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004390:	1ad2      	subs	r2, r2, r3
 8004392:	2300      	movs	r3, #0
 8004394:	4628      	mov	r0, r5
 8004396:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004398:	6a21      	ldr	r1, [r4, #32]
 800439a:	47b0      	blx	r6
 800439c:	1c43      	adds	r3, r0, #1
 800439e:	89a3      	ldrh	r3, [r4, #12]
 80043a0:	d106      	bne.n	80043b0 <__sflush_r+0x60>
 80043a2:	6829      	ldr	r1, [r5, #0]
 80043a4:	291d      	cmp	r1, #29
 80043a6:	d82b      	bhi.n	8004400 <__sflush_r+0xb0>
 80043a8:	4a28      	ldr	r2, [pc, #160]	@ (800444c <__sflush_r+0xfc>)
 80043aa:	410a      	asrs	r2, r1
 80043ac:	07d6      	lsls	r6, r2, #31
 80043ae:	d427      	bmi.n	8004400 <__sflush_r+0xb0>
 80043b0:	2200      	movs	r2, #0
 80043b2:	6062      	str	r2, [r4, #4]
 80043b4:	6922      	ldr	r2, [r4, #16]
 80043b6:	04d9      	lsls	r1, r3, #19
 80043b8:	6022      	str	r2, [r4, #0]
 80043ba:	d504      	bpl.n	80043c6 <__sflush_r+0x76>
 80043bc:	1c42      	adds	r2, r0, #1
 80043be:	d101      	bne.n	80043c4 <__sflush_r+0x74>
 80043c0:	682b      	ldr	r3, [r5, #0]
 80043c2:	b903      	cbnz	r3, 80043c6 <__sflush_r+0x76>
 80043c4:	6560      	str	r0, [r4, #84]	@ 0x54
 80043c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80043c8:	602f      	str	r7, [r5, #0]
 80043ca:	b1b9      	cbz	r1, 80043fc <__sflush_r+0xac>
 80043cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80043d0:	4299      	cmp	r1, r3
 80043d2:	d002      	beq.n	80043da <__sflush_r+0x8a>
 80043d4:	4628      	mov	r0, r5
 80043d6:	f000 fb85 	bl	8004ae4 <_free_r>
 80043da:	2300      	movs	r3, #0
 80043dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80043de:	e00d      	b.n	80043fc <__sflush_r+0xac>
 80043e0:	2301      	movs	r3, #1
 80043e2:	4628      	mov	r0, r5
 80043e4:	47b0      	blx	r6
 80043e6:	4602      	mov	r2, r0
 80043e8:	1c50      	adds	r0, r2, #1
 80043ea:	d1c9      	bne.n	8004380 <__sflush_r+0x30>
 80043ec:	682b      	ldr	r3, [r5, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0c6      	beq.n	8004380 <__sflush_r+0x30>
 80043f2:	2b1d      	cmp	r3, #29
 80043f4:	d001      	beq.n	80043fa <__sflush_r+0xaa>
 80043f6:	2b16      	cmp	r3, #22
 80043f8:	d11d      	bne.n	8004436 <__sflush_r+0xe6>
 80043fa:	602f      	str	r7, [r5, #0]
 80043fc:	2000      	movs	r0, #0
 80043fe:	e021      	b.n	8004444 <__sflush_r+0xf4>
 8004400:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004404:	b21b      	sxth	r3, r3
 8004406:	e01a      	b.n	800443e <__sflush_r+0xee>
 8004408:	690f      	ldr	r7, [r1, #16]
 800440a:	2f00      	cmp	r7, #0
 800440c:	d0f6      	beq.n	80043fc <__sflush_r+0xac>
 800440e:	0793      	lsls	r3, r2, #30
 8004410:	bf18      	it	ne
 8004412:	2300      	movne	r3, #0
 8004414:	680e      	ldr	r6, [r1, #0]
 8004416:	bf08      	it	eq
 8004418:	694b      	ldreq	r3, [r1, #20]
 800441a:	1bf6      	subs	r6, r6, r7
 800441c:	600f      	str	r7, [r1, #0]
 800441e:	608b      	str	r3, [r1, #8]
 8004420:	2e00      	cmp	r6, #0
 8004422:	ddeb      	ble.n	80043fc <__sflush_r+0xac>
 8004424:	4633      	mov	r3, r6
 8004426:	463a      	mov	r2, r7
 8004428:	4628      	mov	r0, r5
 800442a:	6a21      	ldr	r1, [r4, #32]
 800442c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004430:	47e0      	blx	ip
 8004432:	2800      	cmp	r0, #0
 8004434:	dc07      	bgt.n	8004446 <__sflush_r+0xf6>
 8004436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800443a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800443e:	f04f 30ff 	mov.w	r0, #4294967295
 8004442:	81a3      	strh	r3, [r4, #12]
 8004444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004446:	4407      	add	r7, r0
 8004448:	1a36      	subs	r6, r6, r0
 800444a:	e7e9      	b.n	8004420 <__sflush_r+0xd0>
 800444c:	dfbffffe 	.word	0xdfbffffe

08004450 <_fflush_r>:
 8004450:	b538      	push	{r3, r4, r5, lr}
 8004452:	690b      	ldr	r3, [r1, #16]
 8004454:	4605      	mov	r5, r0
 8004456:	460c      	mov	r4, r1
 8004458:	b913      	cbnz	r3, 8004460 <_fflush_r+0x10>
 800445a:	2500      	movs	r5, #0
 800445c:	4628      	mov	r0, r5
 800445e:	bd38      	pop	{r3, r4, r5, pc}
 8004460:	b118      	cbz	r0, 800446a <_fflush_r+0x1a>
 8004462:	6a03      	ldr	r3, [r0, #32]
 8004464:	b90b      	cbnz	r3, 800446a <_fflush_r+0x1a>
 8004466:	f000 f8bb 	bl	80045e0 <__sinit>
 800446a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0f3      	beq.n	800445a <_fflush_r+0xa>
 8004472:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004474:	07d0      	lsls	r0, r2, #31
 8004476:	d404      	bmi.n	8004482 <_fflush_r+0x32>
 8004478:	0599      	lsls	r1, r3, #22
 800447a:	d402      	bmi.n	8004482 <_fflush_r+0x32>
 800447c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800447e:	f000 fb20 	bl	8004ac2 <__retarget_lock_acquire_recursive>
 8004482:	4628      	mov	r0, r5
 8004484:	4621      	mov	r1, r4
 8004486:	f7ff ff63 	bl	8004350 <__sflush_r>
 800448a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800448c:	4605      	mov	r5, r0
 800448e:	07da      	lsls	r2, r3, #31
 8004490:	d4e4      	bmi.n	800445c <_fflush_r+0xc>
 8004492:	89a3      	ldrh	r3, [r4, #12]
 8004494:	059b      	lsls	r3, r3, #22
 8004496:	d4e1      	bmi.n	800445c <_fflush_r+0xc>
 8004498:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800449a:	f000 fb13 	bl	8004ac4 <__retarget_lock_release_recursive>
 800449e:	e7dd      	b.n	800445c <_fflush_r+0xc>

080044a0 <fflush>:
 80044a0:	4601      	mov	r1, r0
 80044a2:	b920      	cbnz	r0, 80044ae <fflush+0xe>
 80044a4:	4a04      	ldr	r2, [pc, #16]	@ (80044b8 <fflush+0x18>)
 80044a6:	4905      	ldr	r1, [pc, #20]	@ (80044bc <fflush+0x1c>)
 80044a8:	4805      	ldr	r0, [pc, #20]	@ (80044c0 <fflush+0x20>)
 80044aa:	f000 b8b1 	b.w	8004610 <_fwalk_sglue>
 80044ae:	4b05      	ldr	r3, [pc, #20]	@ (80044c4 <fflush+0x24>)
 80044b0:	6818      	ldr	r0, [r3, #0]
 80044b2:	f7ff bfcd 	b.w	8004450 <_fflush_r>
 80044b6:	bf00      	nop
 80044b8:	20001fe4 	.word	0x20001fe4
 80044bc:	08004451 	.word	0x08004451
 80044c0:	20001ff4 	.word	0x20001ff4
 80044c4:	20001ff0 	.word	0x20001ff0

080044c8 <std>:
 80044c8:	2300      	movs	r3, #0
 80044ca:	b510      	push	{r4, lr}
 80044cc:	4604      	mov	r4, r0
 80044ce:	e9c0 3300 	strd	r3, r3, [r0]
 80044d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044d6:	6083      	str	r3, [r0, #8]
 80044d8:	8181      	strh	r1, [r0, #12]
 80044da:	6643      	str	r3, [r0, #100]	@ 0x64
 80044dc:	81c2      	strh	r2, [r0, #14]
 80044de:	6183      	str	r3, [r0, #24]
 80044e0:	4619      	mov	r1, r3
 80044e2:	2208      	movs	r2, #8
 80044e4:	305c      	adds	r0, #92	@ 0x5c
 80044e6:	f000 fa61 	bl	80049ac <memset>
 80044ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004520 <std+0x58>)
 80044ec:	6224      	str	r4, [r4, #32]
 80044ee:	6263      	str	r3, [r4, #36]	@ 0x24
 80044f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004524 <std+0x5c>)
 80044f2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80044f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004528 <std+0x60>)
 80044f6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80044f8:	4b0c      	ldr	r3, [pc, #48]	@ (800452c <std+0x64>)
 80044fa:	6323      	str	r3, [r4, #48]	@ 0x30
 80044fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004530 <std+0x68>)
 80044fe:	429c      	cmp	r4, r3
 8004500:	d006      	beq.n	8004510 <std+0x48>
 8004502:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004506:	4294      	cmp	r4, r2
 8004508:	d002      	beq.n	8004510 <std+0x48>
 800450a:	33d0      	adds	r3, #208	@ 0xd0
 800450c:	429c      	cmp	r4, r3
 800450e:	d105      	bne.n	800451c <std+0x54>
 8004510:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004518:	f000 bad2 	b.w	8004ac0 <__retarget_lock_init_recursive>
 800451c:	bd10      	pop	{r4, pc}
 800451e:	bf00      	nop
 8004520:	080047f9 	.word	0x080047f9
 8004524:	0800481f 	.word	0x0800481f
 8004528:	08004857 	.word	0x08004857
 800452c:	0800487b 	.word	0x0800487b
 8004530:	20005660 	.word	0x20005660

08004534 <stdio_exit_handler>:
 8004534:	4a02      	ldr	r2, [pc, #8]	@ (8004540 <stdio_exit_handler+0xc>)
 8004536:	4903      	ldr	r1, [pc, #12]	@ (8004544 <stdio_exit_handler+0x10>)
 8004538:	4803      	ldr	r0, [pc, #12]	@ (8004548 <stdio_exit_handler+0x14>)
 800453a:	f000 b869 	b.w	8004610 <_fwalk_sglue>
 800453e:	bf00      	nop
 8004540:	20001fe4 	.word	0x20001fe4
 8004544:	08004451 	.word	0x08004451
 8004548:	20001ff4 	.word	0x20001ff4

0800454c <cleanup_stdio>:
 800454c:	6841      	ldr	r1, [r0, #4]
 800454e:	4b0c      	ldr	r3, [pc, #48]	@ (8004580 <cleanup_stdio+0x34>)
 8004550:	b510      	push	{r4, lr}
 8004552:	4299      	cmp	r1, r3
 8004554:	4604      	mov	r4, r0
 8004556:	d001      	beq.n	800455c <cleanup_stdio+0x10>
 8004558:	f7ff ff7a 	bl	8004450 <_fflush_r>
 800455c:	68a1      	ldr	r1, [r4, #8]
 800455e:	4b09      	ldr	r3, [pc, #36]	@ (8004584 <cleanup_stdio+0x38>)
 8004560:	4299      	cmp	r1, r3
 8004562:	d002      	beq.n	800456a <cleanup_stdio+0x1e>
 8004564:	4620      	mov	r0, r4
 8004566:	f7ff ff73 	bl	8004450 <_fflush_r>
 800456a:	68e1      	ldr	r1, [r4, #12]
 800456c:	4b06      	ldr	r3, [pc, #24]	@ (8004588 <cleanup_stdio+0x3c>)
 800456e:	4299      	cmp	r1, r3
 8004570:	d004      	beq.n	800457c <cleanup_stdio+0x30>
 8004572:	4620      	mov	r0, r4
 8004574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004578:	f7ff bf6a 	b.w	8004450 <_fflush_r>
 800457c:	bd10      	pop	{r4, pc}
 800457e:	bf00      	nop
 8004580:	20005660 	.word	0x20005660
 8004584:	200056c8 	.word	0x200056c8
 8004588:	20005730 	.word	0x20005730

0800458c <global_stdio_init.part.0>:
 800458c:	b510      	push	{r4, lr}
 800458e:	4b0b      	ldr	r3, [pc, #44]	@ (80045bc <global_stdio_init.part.0+0x30>)
 8004590:	4c0b      	ldr	r4, [pc, #44]	@ (80045c0 <global_stdio_init.part.0+0x34>)
 8004592:	4a0c      	ldr	r2, [pc, #48]	@ (80045c4 <global_stdio_init.part.0+0x38>)
 8004594:	4620      	mov	r0, r4
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	2104      	movs	r1, #4
 800459a:	2200      	movs	r2, #0
 800459c:	f7ff ff94 	bl	80044c8 <std>
 80045a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80045a4:	2201      	movs	r2, #1
 80045a6:	2109      	movs	r1, #9
 80045a8:	f7ff ff8e 	bl	80044c8 <std>
 80045ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80045b0:	2202      	movs	r2, #2
 80045b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045b6:	2112      	movs	r1, #18
 80045b8:	f7ff bf86 	b.w	80044c8 <std>
 80045bc:	20005798 	.word	0x20005798
 80045c0:	20005660 	.word	0x20005660
 80045c4:	08004535 	.word	0x08004535

080045c8 <__sfp_lock_acquire>:
 80045c8:	4801      	ldr	r0, [pc, #4]	@ (80045d0 <__sfp_lock_acquire+0x8>)
 80045ca:	f000 ba7a 	b.w	8004ac2 <__retarget_lock_acquire_recursive>
 80045ce:	bf00      	nop
 80045d0:	200057a1 	.word	0x200057a1

080045d4 <__sfp_lock_release>:
 80045d4:	4801      	ldr	r0, [pc, #4]	@ (80045dc <__sfp_lock_release+0x8>)
 80045d6:	f000 ba75 	b.w	8004ac4 <__retarget_lock_release_recursive>
 80045da:	bf00      	nop
 80045dc:	200057a1 	.word	0x200057a1

080045e0 <__sinit>:
 80045e0:	b510      	push	{r4, lr}
 80045e2:	4604      	mov	r4, r0
 80045e4:	f7ff fff0 	bl	80045c8 <__sfp_lock_acquire>
 80045e8:	6a23      	ldr	r3, [r4, #32]
 80045ea:	b11b      	cbz	r3, 80045f4 <__sinit+0x14>
 80045ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045f0:	f7ff bff0 	b.w	80045d4 <__sfp_lock_release>
 80045f4:	4b04      	ldr	r3, [pc, #16]	@ (8004608 <__sinit+0x28>)
 80045f6:	6223      	str	r3, [r4, #32]
 80045f8:	4b04      	ldr	r3, [pc, #16]	@ (800460c <__sinit+0x2c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1f5      	bne.n	80045ec <__sinit+0xc>
 8004600:	f7ff ffc4 	bl	800458c <global_stdio_init.part.0>
 8004604:	e7f2      	b.n	80045ec <__sinit+0xc>
 8004606:	bf00      	nop
 8004608:	0800454d 	.word	0x0800454d
 800460c:	20005798 	.word	0x20005798

08004610 <_fwalk_sglue>:
 8004610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004614:	4607      	mov	r7, r0
 8004616:	4688      	mov	r8, r1
 8004618:	4614      	mov	r4, r2
 800461a:	2600      	movs	r6, #0
 800461c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004620:	f1b9 0901 	subs.w	r9, r9, #1
 8004624:	d505      	bpl.n	8004632 <_fwalk_sglue+0x22>
 8004626:	6824      	ldr	r4, [r4, #0]
 8004628:	2c00      	cmp	r4, #0
 800462a:	d1f7      	bne.n	800461c <_fwalk_sglue+0xc>
 800462c:	4630      	mov	r0, r6
 800462e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004632:	89ab      	ldrh	r3, [r5, #12]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d907      	bls.n	8004648 <_fwalk_sglue+0x38>
 8004638:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800463c:	3301      	adds	r3, #1
 800463e:	d003      	beq.n	8004648 <_fwalk_sglue+0x38>
 8004640:	4629      	mov	r1, r5
 8004642:	4638      	mov	r0, r7
 8004644:	47c0      	blx	r8
 8004646:	4306      	orrs	r6, r0
 8004648:	3568      	adds	r5, #104	@ 0x68
 800464a:	e7e9      	b.n	8004620 <_fwalk_sglue+0x10>

0800464c <iprintf>:
 800464c:	b40f      	push	{r0, r1, r2, r3}
 800464e:	b507      	push	{r0, r1, r2, lr}
 8004650:	4906      	ldr	r1, [pc, #24]	@ (800466c <iprintf+0x20>)
 8004652:	ab04      	add	r3, sp, #16
 8004654:	6808      	ldr	r0, [r1, #0]
 8004656:	f853 2b04 	ldr.w	r2, [r3], #4
 800465a:	6881      	ldr	r1, [r0, #8]
 800465c:	9301      	str	r3, [sp, #4]
 800465e:	f000 fe81 	bl	8005364 <_vfiprintf_r>
 8004662:	b003      	add	sp, #12
 8004664:	f85d eb04 	ldr.w	lr, [sp], #4
 8004668:	b004      	add	sp, #16
 800466a:	4770      	bx	lr
 800466c:	20001ff0 	.word	0x20001ff0

08004670 <putchar>:
 8004670:	4b02      	ldr	r3, [pc, #8]	@ (800467c <putchar+0xc>)
 8004672:	4601      	mov	r1, r0
 8004674:	6818      	ldr	r0, [r3, #0]
 8004676:	6882      	ldr	r2, [r0, #8]
 8004678:	f001 bacb 	b.w	8005c12 <_putc_r>
 800467c:	20001ff0 	.word	0x20001ff0

08004680 <_puts_r>:
 8004680:	6a03      	ldr	r3, [r0, #32]
 8004682:	b570      	push	{r4, r5, r6, lr}
 8004684:	4605      	mov	r5, r0
 8004686:	460e      	mov	r6, r1
 8004688:	6884      	ldr	r4, [r0, #8]
 800468a:	b90b      	cbnz	r3, 8004690 <_puts_r+0x10>
 800468c:	f7ff ffa8 	bl	80045e0 <__sinit>
 8004690:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004692:	07db      	lsls	r3, r3, #31
 8004694:	d405      	bmi.n	80046a2 <_puts_r+0x22>
 8004696:	89a3      	ldrh	r3, [r4, #12]
 8004698:	0598      	lsls	r0, r3, #22
 800469a:	d402      	bmi.n	80046a2 <_puts_r+0x22>
 800469c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800469e:	f000 fa10 	bl	8004ac2 <__retarget_lock_acquire_recursive>
 80046a2:	89a3      	ldrh	r3, [r4, #12]
 80046a4:	0719      	lsls	r1, r3, #28
 80046a6:	d502      	bpl.n	80046ae <_puts_r+0x2e>
 80046a8:	6923      	ldr	r3, [r4, #16]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d135      	bne.n	800471a <_puts_r+0x9a>
 80046ae:	4621      	mov	r1, r4
 80046b0:	4628      	mov	r0, r5
 80046b2:	f000 f925 	bl	8004900 <__swsetup_r>
 80046b6:	b380      	cbz	r0, 800471a <_puts_r+0x9a>
 80046b8:	f04f 35ff 	mov.w	r5, #4294967295
 80046bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80046be:	07da      	lsls	r2, r3, #31
 80046c0:	d405      	bmi.n	80046ce <_puts_r+0x4e>
 80046c2:	89a3      	ldrh	r3, [r4, #12]
 80046c4:	059b      	lsls	r3, r3, #22
 80046c6:	d402      	bmi.n	80046ce <_puts_r+0x4e>
 80046c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046ca:	f000 f9fb 	bl	8004ac4 <__retarget_lock_release_recursive>
 80046ce:	4628      	mov	r0, r5
 80046d0:	bd70      	pop	{r4, r5, r6, pc}
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	da04      	bge.n	80046e0 <_puts_r+0x60>
 80046d6:	69a2      	ldr	r2, [r4, #24]
 80046d8:	429a      	cmp	r2, r3
 80046da:	dc17      	bgt.n	800470c <_puts_r+0x8c>
 80046dc:	290a      	cmp	r1, #10
 80046de:	d015      	beq.n	800470c <_puts_r+0x8c>
 80046e0:	6823      	ldr	r3, [r4, #0]
 80046e2:	1c5a      	adds	r2, r3, #1
 80046e4:	6022      	str	r2, [r4, #0]
 80046e6:	7019      	strb	r1, [r3, #0]
 80046e8:	68a3      	ldr	r3, [r4, #8]
 80046ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80046ee:	3b01      	subs	r3, #1
 80046f0:	60a3      	str	r3, [r4, #8]
 80046f2:	2900      	cmp	r1, #0
 80046f4:	d1ed      	bne.n	80046d2 <_puts_r+0x52>
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	da11      	bge.n	800471e <_puts_r+0x9e>
 80046fa:	4622      	mov	r2, r4
 80046fc:	210a      	movs	r1, #10
 80046fe:	4628      	mov	r0, r5
 8004700:	f000 f8bf 	bl	8004882 <__swbuf_r>
 8004704:	3001      	adds	r0, #1
 8004706:	d0d7      	beq.n	80046b8 <_puts_r+0x38>
 8004708:	250a      	movs	r5, #10
 800470a:	e7d7      	b.n	80046bc <_puts_r+0x3c>
 800470c:	4622      	mov	r2, r4
 800470e:	4628      	mov	r0, r5
 8004710:	f000 f8b7 	bl	8004882 <__swbuf_r>
 8004714:	3001      	adds	r0, #1
 8004716:	d1e7      	bne.n	80046e8 <_puts_r+0x68>
 8004718:	e7ce      	b.n	80046b8 <_puts_r+0x38>
 800471a:	3e01      	subs	r6, #1
 800471c:	e7e4      	b.n	80046e8 <_puts_r+0x68>
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	6022      	str	r2, [r4, #0]
 8004724:	220a      	movs	r2, #10
 8004726:	701a      	strb	r2, [r3, #0]
 8004728:	e7ee      	b.n	8004708 <_puts_r+0x88>
	...

0800472c <puts>:
 800472c:	4b02      	ldr	r3, [pc, #8]	@ (8004738 <puts+0xc>)
 800472e:	4601      	mov	r1, r0
 8004730:	6818      	ldr	r0, [r3, #0]
 8004732:	f7ff bfa5 	b.w	8004680 <_puts_r>
 8004736:	bf00      	nop
 8004738:	20001ff0 	.word	0x20001ff0

0800473c <sniprintf>:
 800473c:	b40c      	push	{r2, r3}
 800473e:	b530      	push	{r4, r5, lr}
 8004740:	4b17      	ldr	r3, [pc, #92]	@ (80047a0 <sniprintf+0x64>)
 8004742:	1e0c      	subs	r4, r1, #0
 8004744:	681d      	ldr	r5, [r3, #0]
 8004746:	b09d      	sub	sp, #116	@ 0x74
 8004748:	da08      	bge.n	800475c <sniprintf+0x20>
 800474a:	238b      	movs	r3, #139	@ 0x8b
 800474c:	f04f 30ff 	mov.w	r0, #4294967295
 8004750:	602b      	str	r3, [r5, #0]
 8004752:	b01d      	add	sp, #116	@ 0x74
 8004754:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004758:	b002      	add	sp, #8
 800475a:	4770      	bx	lr
 800475c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004760:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004764:	bf0c      	ite	eq
 8004766:	4623      	moveq	r3, r4
 8004768:	f104 33ff 	addne.w	r3, r4, #4294967295
 800476c:	9304      	str	r3, [sp, #16]
 800476e:	9307      	str	r3, [sp, #28]
 8004770:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004774:	9002      	str	r0, [sp, #8]
 8004776:	9006      	str	r0, [sp, #24]
 8004778:	f8ad 3016 	strh.w	r3, [sp, #22]
 800477c:	4628      	mov	r0, r5
 800477e:	ab21      	add	r3, sp, #132	@ 0x84
 8004780:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004782:	a902      	add	r1, sp, #8
 8004784:	9301      	str	r3, [sp, #4]
 8004786:	f000 faff 	bl	8004d88 <_svfiprintf_r>
 800478a:	1c43      	adds	r3, r0, #1
 800478c:	bfbc      	itt	lt
 800478e:	238b      	movlt	r3, #139	@ 0x8b
 8004790:	602b      	strlt	r3, [r5, #0]
 8004792:	2c00      	cmp	r4, #0
 8004794:	d0dd      	beq.n	8004752 <sniprintf+0x16>
 8004796:	2200      	movs	r2, #0
 8004798:	9b02      	ldr	r3, [sp, #8]
 800479a:	701a      	strb	r2, [r3, #0]
 800479c:	e7d9      	b.n	8004752 <sniprintf+0x16>
 800479e:	bf00      	nop
 80047a0:	20001ff0 	.word	0x20001ff0

080047a4 <siscanf>:
 80047a4:	b40e      	push	{r1, r2, r3}
 80047a6:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80047aa:	b530      	push	{r4, r5, lr}
 80047ac:	b09c      	sub	sp, #112	@ 0x70
 80047ae:	ac1f      	add	r4, sp, #124	@ 0x7c
 80047b0:	f854 5b04 	ldr.w	r5, [r4], #4
 80047b4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80047b8:	9002      	str	r0, [sp, #8]
 80047ba:	9006      	str	r0, [sp, #24]
 80047bc:	f7fb fd3c 	bl	8000238 <strlen>
 80047c0:	4b0b      	ldr	r3, [pc, #44]	@ (80047f0 <siscanf+0x4c>)
 80047c2:	9003      	str	r0, [sp, #12]
 80047c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80047c6:	2300      	movs	r3, #0
 80047c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80047ca:	9314      	str	r3, [sp, #80]	@ 0x50
 80047cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80047d0:	9007      	str	r0, [sp, #28]
 80047d2:	4808      	ldr	r0, [pc, #32]	@ (80047f4 <siscanf+0x50>)
 80047d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80047d8:	462a      	mov	r2, r5
 80047da:	4623      	mov	r3, r4
 80047dc:	a902      	add	r1, sp, #8
 80047de:	6800      	ldr	r0, [r0, #0]
 80047e0:	9401      	str	r4, [sp, #4]
 80047e2:	f000 fc25 	bl	8005030 <__ssvfiscanf_r>
 80047e6:	b01c      	add	sp, #112	@ 0x70
 80047e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047ec:	b003      	add	sp, #12
 80047ee:	4770      	bx	lr
 80047f0:	0800481b 	.word	0x0800481b
 80047f4:	20001ff0 	.word	0x20001ff0

080047f8 <__sread>:
 80047f8:	b510      	push	{r4, lr}
 80047fa:	460c      	mov	r4, r1
 80047fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004800:	f000 f910 	bl	8004a24 <_read_r>
 8004804:	2800      	cmp	r0, #0
 8004806:	bfab      	itete	ge
 8004808:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800480a:	89a3      	ldrhlt	r3, [r4, #12]
 800480c:	181b      	addge	r3, r3, r0
 800480e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004812:	bfac      	ite	ge
 8004814:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004816:	81a3      	strhlt	r3, [r4, #12]
 8004818:	bd10      	pop	{r4, pc}

0800481a <__seofread>:
 800481a:	2000      	movs	r0, #0
 800481c:	4770      	bx	lr

0800481e <__swrite>:
 800481e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004822:	461f      	mov	r7, r3
 8004824:	898b      	ldrh	r3, [r1, #12]
 8004826:	4605      	mov	r5, r0
 8004828:	05db      	lsls	r3, r3, #23
 800482a:	460c      	mov	r4, r1
 800482c:	4616      	mov	r6, r2
 800482e:	d505      	bpl.n	800483c <__swrite+0x1e>
 8004830:	2302      	movs	r3, #2
 8004832:	2200      	movs	r2, #0
 8004834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004838:	f000 f8e2 	bl	8004a00 <_lseek_r>
 800483c:	89a3      	ldrh	r3, [r4, #12]
 800483e:	4632      	mov	r2, r6
 8004840:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004844:	81a3      	strh	r3, [r4, #12]
 8004846:	4628      	mov	r0, r5
 8004848:	463b      	mov	r3, r7
 800484a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800484e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004852:	f000 b8f9 	b.w	8004a48 <_write_r>

08004856 <__sseek>:
 8004856:	b510      	push	{r4, lr}
 8004858:	460c      	mov	r4, r1
 800485a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800485e:	f000 f8cf 	bl	8004a00 <_lseek_r>
 8004862:	1c43      	adds	r3, r0, #1
 8004864:	89a3      	ldrh	r3, [r4, #12]
 8004866:	bf15      	itete	ne
 8004868:	6560      	strne	r0, [r4, #84]	@ 0x54
 800486a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800486e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004872:	81a3      	strheq	r3, [r4, #12]
 8004874:	bf18      	it	ne
 8004876:	81a3      	strhne	r3, [r4, #12]
 8004878:	bd10      	pop	{r4, pc}

0800487a <__sclose>:
 800487a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800487e:	f000 b8af 	b.w	80049e0 <_close_r>

08004882 <__swbuf_r>:
 8004882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004884:	460e      	mov	r6, r1
 8004886:	4614      	mov	r4, r2
 8004888:	4605      	mov	r5, r0
 800488a:	b118      	cbz	r0, 8004894 <__swbuf_r+0x12>
 800488c:	6a03      	ldr	r3, [r0, #32]
 800488e:	b90b      	cbnz	r3, 8004894 <__swbuf_r+0x12>
 8004890:	f7ff fea6 	bl	80045e0 <__sinit>
 8004894:	69a3      	ldr	r3, [r4, #24]
 8004896:	60a3      	str	r3, [r4, #8]
 8004898:	89a3      	ldrh	r3, [r4, #12]
 800489a:	071a      	lsls	r2, r3, #28
 800489c:	d501      	bpl.n	80048a2 <__swbuf_r+0x20>
 800489e:	6923      	ldr	r3, [r4, #16]
 80048a0:	b943      	cbnz	r3, 80048b4 <__swbuf_r+0x32>
 80048a2:	4621      	mov	r1, r4
 80048a4:	4628      	mov	r0, r5
 80048a6:	f000 f82b 	bl	8004900 <__swsetup_r>
 80048aa:	b118      	cbz	r0, 80048b4 <__swbuf_r+0x32>
 80048ac:	f04f 37ff 	mov.w	r7, #4294967295
 80048b0:	4638      	mov	r0, r7
 80048b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048b4:	6823      	ldr	r3, [r4, #0]
 80048b6:	6922      	ldr	r2, [r4, #16]
 80048b8:	b2f6      	uxtb	r6, r6
 80048ba:	1a98      	subs	r0, r3, r2
 80048bc:	6963      	ldr	r3, [r4, #20]
 80048be:	4637      	mov	r7, r6
 80048c0:	4283      	cmp	r3, r0
 80048c2:	dc05      	bgt.n	80048d0 <__swbuf_r+0x4e>
 80048c4:	4621      	mov	r1, r4
 80048c6:	4628      	mov	r0, r5
 80048c8:	f7ff fdc2 	bl	8004450 <_fflush_r>
 80048cc:	2800      	cmp	r0, #0
 80048ce:	d1ed      	bne.n	80048ac <__swbuf_r+0x2a>
 80048d0:	68a3      	ldr	r3, [r4, #8]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	60a3      	str	r3, [r4, #8]
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	1c5a      	adds	r2, r3, #1
 80048da:	6022      	str	r2, [r4, #0]
 80048dc:	701e      	strb	r6, [r3, #0]
 80048de:	6962      	ldr	r2, [r4, #20]
 80048e0:	1c43      	adds	r3, r0, #1
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d004      	beq.n	80048f0 <__swbuf_r+0x6e>
 80048e6:	89a3      	ldrh	r3, [r4, #12]
 80048e8:	07db      	lsls	r3, r3, #31
 80048ea:	d5e1      	bpl.n	80048b0 <__swbuf_r+0x2e>
 80048ec:	2e0a      	cmp	r6, #10
 80048ee:	d1df      	bne.n	80048b0 <__swbuf_r+0x2e>
 80048f0:	4621      	mov	r1, r4
 80048f2:	4628      	mov	r0, r5
 80048f4:	f7ff fdac 	bl	8004450 <_fflush_r>
 80048f8:	2800      	cmp	r0, #0
 80048fa:	d0d9      	beq.n	80048b0 <__swbuf_r+0x2e>
 80048fc:	e7d6      	b.n	80048ac <__swbuf_r+0x2a>
	...

08004900 <__swsetup_r>:
 8004900:	b538      	push	{r3, r4, r5, lr}
 8004902:	4b29      	ldr	r3, [pc, #164]	@ (80049a8 <__swsetup_r+0xa8>)
 8004904:	4605      	mov	r5, r0
 8004906:	6818      	ldr	r0, [r3, #0]
 8004908:	460c      	mov	r4, r1
 800490a:	b118      	cbz	r0, 8004914 <__swsetup_r+0x14>
 800490c:	6a03      	ldr	r3, [r0, #32]
 800490e:	b90b      	cbnz	r3, 8004914 <__swsetup_r+0x14>
 8004910:	f7ff fe66 	bl	80045e0 <__sinit>
 8004914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004918:	0719      	lsls	r1, r3, #28
 800491a:	d422      	bmi.n	8004962 <__swsetup_r+0x62>
 800491c:	06da      	lsls	r2, r3, #27
 800491e:	d407      	bmi.n	8004930 <__swsetup_r+0x30>
 8004920:	2209      	movs	r2, #9
 8004922:	602a      	str	r2, [r5, #0]
 8004924:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004928:	f04f 30ff 	mov.w	r0, #4294967295
 800492c:	81a3      	strh	r3, [r4, #12]
 800492e:	e033      	b.n	8004998 <__swsetup_r+0x98>
 8004930:	0758      	lsls	r0, r3, #29
 8004932:	d512      	bpl.n	800495a <__swsetup_r+0x5a>
 8004934:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004936:	b141      	cbz	r1, 800494a <__swsetup_r+0x4a>
 8004938:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800493c:	4299      	cmp	r1, r3
 800493e:	d002      	beq.n	8004946 <__swsetup_r+0x46>
 8004940:	4628      	mov	r0, r5
 8004942:	f000 f8cf 	bl	8004ae4 <_free_r>
 8004946:	2300      	movs	r3, #0
 8004948:	6363      	str	r3, [r4, #52]	@ 0x34
 800494a:	89a3      	ldrh	r3, [r4, #12]
 800494c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004950:	81a3      	strh	r3, [r4, #12]
 8004952:	2300      	movs	r3, #0
 8004954:	6063      	str	r3, [r4, #4]
 8004956:	6923      	ldr	r3, [r4, #16]
 8004958:	6023      	str	r3, [r4, #0]
 800495a:	89a3      	ldrh	r3, [r4, #12]
 800495c:	f043 0308 	orr.w	r3, r3, #8
 8004960:	81a3      	strh	r3, [r4, #12]
 8004962:	6923      	ldr	r3, [r4, #16]
 8004964:	b94b      	cbnz	r3, 800497a <__swsetup_r+0x7a>
 8004966:	89a3      	ldrh	r3, [r4, #12]
 8004968:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800496c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004970:	d003      	beq.n	800497a <__swsetup_r+0x7a>
 8004972:	4621      	mov	r1, r4
 8004974:	4628      	mov	r0, r5
 8004976:	f001 f910 	bl	8005b9a <__smakebuf_r>
 800497a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800497e:	f013 0201 	ands.w	r2, r3, #1
 8004982:	d00a      	beq.n	800499a <__swsetup_r+0x9a>
 8004984:	2200      	movs	r2, #0
 8004986:	60a2      	str	r2, [r4, #8]
 8004988:	6962      	ldr	r2, [r4, #20]
 800498a:	4252      	negs	r2, r2
 800498c:	61a2      	str	r2, [r4, #24]
 800498e:	6922      	ldr	r2, [r4, #16]
 8004990:	b942      	cbnz	r2, 80049a4 <__swsetup_r+0xa4>
 8004992:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004996:	d1c5      	bne.n	8004924 <__swsetup_r+0x24>
 8004998:	bd38      	pop	{r3, r4, r5, pc}
 800499a:	0799      	lsls	r1, r3, #30
 800499c:	bf58      	it	pl
 800499e:	6962      	ldrpl	r2, [r4, #20]
 80049a0:	60a2      	str	r2, [r4, #8]
 80049a2:	e7f4      	b.n	800498e <__swsetup_r+0x8e>
 80049a4:	2000      	movs	r0, #0
 80049a6:	e7f7      	b.n	8004998 <__swsetup_r+0x98>
 80049a8:	20001ff0 	.word	0x20001ff0

080049ac <memset>:
 80049ac:	4603      	mov	r3, r0
 80049ae:	4402      	add	r2, r0
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d100      	bne.n	80049b6 <memset+0xa>
 80049b4:	4770      	bx	lr
 80049b6:	f803 1b01 	strb.w	r1, [r3], #1
 80049ba:	e7f9      	b.n	80049b0 <memset+0x4>

080049bc <strncmp>:
 80049bc:	b510      	push	{r4, lr}
 80049be:	b16a      	cbz	r2, 80049dc <strncmp+0x20>
 80049c0:	3901      	subs	r1, #1
 80049c2:	1884      	adds	r4, r0, r2
 80049c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049c8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d103      	bne.n	80049d8 <strncmp+0x1c>
 80049d0:	42a0      	cmp	r0, r4
 80049d2:	d001      	beq.n	80049d8 <strncmp+0x1c>
 80049d4:	2a00      	cmp	r2, #0
 80049d6:	d1f5      	bne.n	80049c4 <strncmp+0x8>
 80049d8:	1ad0      	subs	r0, r2, r3
 80049da:	bd10      	pop	{r4, pc}
 80049dc:	4610      	mov	r0, r2
 80049de:	e7fc      	b.n	80049da <strncmp+0x1e>

080049e0 <_close_r>:
 80049e0:	b538      	push	{r3, r4, r5, lr}
 80049e2:	2300      	movs	r3, #0
 80049e4:	4d05      	ldr	r5, [pc, #20]	@ (80049fc <_close_r+0x1c>)
 80049e6:	4604      	mov	r4, r0
 80049e8:	4608      	mov	r0, r1
 80049ea:	602b      	str	r3, [r5, #0]
 80049ec:	f7fe fbbb 	bl	8003166 <_close>
 80049f0:	1c43      	adds	r3, r0, #1
 80049f2:	d102      	bne.n	80049fa <_close_r+0x1a>
 80049f4:	682b      	ldr	r3, [r5, #0]
 80049f6:	b103      	cbz	r3, 80049fa <_close_r+0x1a>
 80049f8:	6023      	str	r3, [r4, #0]
 80049fa:	bd38      	pop	{r3, r4, r5, pc}
 80049fc:	2000579c 	.word	0x2000579c

08004a00 <_lseek_r>:
 8004a00:	b538      	push	{r3, r4, r5, lr}
 8004a02:	4604      	mov	r4, r0
 8004a04:	4608      	mov	r0, r1
 8004a06:	4611      	mov	r1, r2
 8004a08:	2200      	movs	r2, #0
 8004a0a:	4d05      	ldr	r5, [pc, #20]	@ (8004a20 <_lseek_r+0x20>)
 8004a0c:	602a      	str	r2, [r5, #0]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	f7fe fbcd 	bl	80031ae <_lseek>
 8004a14:	1c43      	adds	r3, r0, #1
 8004a16:	d102      	bne.n	8004a1e <_lseek_r+0x1e>
 8004a18:	682b      	ldr	r3, [r5, #0]
 8004a1a:	b103      	cbz	r3, 8004a1e <_lseek_r+0x1e>
 8004a1c:	6023      	str	r3, [r4, #0]
 8004a1e:	bd38      	pop	{r3, r4, r5, pc}
 8004a20:	2000579c 	.word	0x2000579c

08004a24 <_read_r>:
 8004a24:	b538      	push	{r3, r4, r5, lr}
 8004a26:	4604      	mov	r4, r0
 8004a28:	4608      	mov	r0, r1
 8004a2a:	4611      	mov	r1, r2
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	4d05      	ldr	r5, [pc, #20]	@ (8004a44 <_read_r+0x20>)
 8004a30:	602a      	str	r2, [r5, #0]
 8004a32:	461a      	mov	r2, r3
 8004a34:	f7fe fb7a 	bl	800312c <_read>
 8004a38:	1c43      	adds	r3, r0, #1
 8004a3a:	d102      	bne.n	8004a42 <_read_r+0x1e>
 8004a3c:	682b      	ldr	r3, [r5, #0]
 8004a3e:	b103      	cbz	r3, 8004a42 <_read_r+0x1e>
 8004a40:	6023      	str	r3, [r4, #0]
 8004a42:	bd38      	pop	{r3, r4, r5, pc}
 8004a44:	2000579c 	.word	0x2000579c

08004a48 <_write_r>:
 8004a48:	b538      	push	{r3, r4, r5, lr}
 8004a4a:	4604      	mov	r4, r0
 8004a4c:	4608      	mov	r0, r1
 8004a4e:	4611      	mov	r1, r2
 8004a50:	2200      	movs	r2, #0
 8004a52:	4d05      	ldr	r5, [pc, #20]	@ (8004a68 <_write_r+0x20>)
 8004a54:	602a      	str	r2, [r5, #0]
 8004a56:	461a      	mov	r2, r3
 8004a58:	f7fc fd00 	bl	800145c <_write>
 8004a5c:	1c43      	adds	r3, r0, #1
 8004a5e:	d102      	bne.n	8004a66 <_write_r+0x1e>
 8004a60:	682b      	ldr	r3, [r5, #0]
 8004a62:	b103      	cbz	r3, 8004a66 <_write_r+0x1e>
 8004a64:	6023      	str	r3, [r4, #0]
 8004a66:	bd38      	pop	{r3, r4, r5, pc}
 8004a68:	2000579c 	.word	0x2000579c

08004a6c <__errno>:
 8004a6c:	4b01      	ldr	r3, [pc, #4]	@ (8004a74 <__errno+0x8>)
 8004a6e:	6818      	ldr	r0, [r3, #0]
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	20001ff0 	.word	0x20001ff0

08004a78 <__libc_init_array>:
 8004a78:	b570      	push	{r4, r5, r6, lr}
 8004a7a:	2600      	movs	r6, #0
 8004a7c:	4d0c      	ldr	r5, [pc, #48]	@ (8004ab0 <__libc_init_array+0x38>)
 8004a7e:	4c0d      	ldr	r4, [pc, #52]	@ (8004ab4 <__libc_init_array+0x3c>)
 8004a80:	1b64      	subs	r4, r4, r5
 8004a82:	10a4      	asrs	r4, r4, #2
 8004a84:	42a6      	cmp	r6, r4
 8004a86:	d109      	bne.n	8004a9c <__libc_init_array+0x24>
 8004a88:	f001 fae4 	bl	8006054 <_init>
 8004a8c:	2600      	movs	r6, #0
 8004a8e:	4d0a      	ldr	r5, [pc, #40]	@ (8004ab8 <__libc_init_array+0x40>)
 8004a90:	4c0a      	ldr	r4, [pc, #40]	@ (8004abc <__libc_init_array+0x44>)
 8004a92:	1b64      	subs	r4, r4, r5
 8004a94:	10a4      	asrs	r4, r4, #2
 8004a96:	42a6      	cmp	r6, r4
 8004a98:	d105      	bne.n	8004aa6 <__libc_init_array+0x2e>
 8004a9a:	bd70      	pop	{r4, r5, r6, pc}
 8004a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aa0:	4798      	blx	r3
 8004aa2:	3601      	adds	r6, #1
 8004aa4:	e7ee      	b.n	8004a84 <__libc_init_array+0xc>
 8004aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aaa:	4798      	blx	r3
 8004aac:	3601      	adds	r6, #1
 8004aae:	e7f2      	b.n	8004a96 <__libc_init_array+0x1e>
 8004ab0:	08006d68 	.word	0x08006d68
 8004ab4:	08006d68 	.word	0x08006d68
 8004ab8:	08006d68 	.word	0x08006d68
 8004abc:	08006d6c 	.word	0x08006d6c

08004ac0 <__retarget_lock_init_recursive>:
 8004ac0:	4770      	bx	lr

08004ac2 <__retarget_lock_acquire_recursive>:
 8004ac2:	4770      	bx	lr

08004ac4 <__retarget_lock_release_recursive>:
 8004ac4:	4770      	bx	lr

08004ac6 <memcpy>:
 8004ac6:	440a      	add	r2, r1
 8004ac8:	4291      	cmp	r1, r2
 8004aca:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ace:	d100      	bne.n	8004ad2 <memcpy+0xc>
 8004ad0:	4770      	bx	lr
 8004ad2:	b510      	push	{r4, lr}
 8004ad4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ad8:	4291      	cmp	r1, r2
 8004ada:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ade:	d1f9      	bne.n	8004ad4 <memcpy+0xe>
 8004ae0:	bd10      	pop	{r4, pc}
	...

08004ae4 <_free_r>:
 8004ae4:	b538      	push	{r3, r4, r5, lr}
 8004ae6:	4605      	mov	r5, r0
 8004ae8:	2900      	cmp	r1, #0
 8004aea:	d040      	beq.n	8004b6e <_free_r+0x8a>
 8004aec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004af0:	1f0c      	subs	r4, r1, #4
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	bfb8      	it	lt
 8004af6:	18e4      	addlt	r4, r4, r3
 8004af8:	f000 f8de 	bl	8004cb8 <__malloc_lock>
 8004afc:	4a1c      	ldr	r2, [pc, #112]	@ (8004b70 <_free_r+0x8c>)
 8004afe:	6813      	ldr	r3, [r2, #0]
 8004b00:	b933      	cbnz	r3, 8004b10 <_free_r+0x2c>
 8004b02:	6063      	str	r3, [r4, #4]
 8004b04:	6014      	str	r4, [r2, #0]
 8004b06:	4628      	mov	r0, r5
 8004b08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b0c:	f000 b8da 	b.w	8004cc4 <__malloc_unlock>
 8004b10:	42a3      	cmp	r3, r4
 8004b12:	d908      	bls.n	8004b26 <_free_r+0x42>
 8004b14:	6820      	ldr	r0, [r4, #0]
 8004b16:	1821      	adds	r1, r4, r0
 8004b18:	428b      	cmp	r3, r1
 8004b1a:	bf01      	itttt	eq
 8004b1c:	6819      	ldreq	r1, [r3, #0]
 8004b1e:	685b      	ldreq	r3, [r3, #4]
 8004b20:	1809      	addeq	r1, r1, r0
 8004b22:	6021      	streq	r1, [r4, #0]
 8004b24:	e7ed      	b.n	8004b02 <_free_r+0x1e>
 8004b26:	461a      	mov	r2, r3
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	b10b      	cbz	r3, 8004b30 <_free_r+0x4c>
 8004b2c:	42a3      	cmp	r3, r4
 8004b2e:	d9fa      	bls.n	8004b26 <_free_r+0x42>
 8004b30:	6811      	ldr	r1, [r2, #0]
 8004b32:	1850      	adds	r0, r2, r1
 8004b34:	42a0      	cmp	r0, r4
 8004b36:	d10b      	bne.n	8004b50 <_free_r+0x6c>
 8004b38:	6820      	ldr	r0, [r4, #0]
 8004b3a:	4401      	add	r1, r0
 8004b3c:	1850      	adds	r0, r2, r1
 8004b3e:	4283      	cmp	r3, r0
 8004b40:	6011      	str	r1, [r2, #0]
 8004b42:	d1e0      	bne.n	8004b06 <_free_r+0x22>
 8004b44:	6818      	ldr	r0, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	4408      	add	r0, r1
 8004b4a:	6010      	str	r0, [r2, #0]
 8004b4c:	6053      	str	r3, [r2, #4]
 8004b4e:	e7da      	b.n	8004b06 <_free_r+0x22>
 8004b50:	d902      	bls.n	8004b58 <_free_r+0x74>
 8004b52:	230c      	movs	r3, #12
 8004b54:	602b      	str	r3, [r5, #0]
 8004b56:	e7d6      	b.n	8004b06 <_free_r+0x22>
 8004b58:	6820      	ldr	r0, [r4, #0]
 8004b5a:	1821      	adds	r1, r4, r0
 8004b5c:	428b      	cmp	r3, r1
 8004b5e:	bf01      	itttt	eq
 8004b60:	6819      	ldreq	r1, [r3, #0]
 8004b62:	685b      	ldreq	r3, [r3, #4]
 8004b64:	1809      	addeq	r1, r1, r0
 8004b66:	6021      	streq	r1, [r4, #0]
 8004b68:	6063      	str	r3, [r4, #4]
 8004b6a:	6054      	str	r4, [r2, #4]
 8004b6c:	e7cb      	b.n	8004b06 <_free_r+0x22>
 8004b6e:	bd38      	pop	{r3, r4, r5, pc}
 8004b70:	200057a8 	.word	0x200057a8

08004b74 <sbrk_aligned>:
 8004b74:	b570      	push	{r4, r5, r6, lr}
 8004b76:	4e0f      	ldr	r6, [pc, #60]	@ (8004bb4 <sbrk_aligned+0x40>)
 8004b78:	460c      	mov	r4, r1
 8004b7a:	6831      	ldr	r1, [r6, #0]
 8004b7c:	4605      	mov	r5, r0
 8004b7e:	b911      	cbnz	r1, 8004b86 <sbrk_aligned+0x12>
 8004b80:	f001 f928 	bl	8005dd4 <_sbrk_r>
 8004b84:	6030      	str	r0, [r6, #0]
 8004b86:	4621      	mov	r1, r4
 8004b88:	4628      	mov	r0, r5
 8004b8a:	f001 f923 	bl	8005dd4 <_sbrk_r>
 8004b8e:	1c43      	adds	r3, r0, #1
 8004b90:	d103      	bne.n	8004b9a <sbrk_aligned+0x26>
 8004b92:	f04f 34ff 	mov.w	r4, #4294967295
 8004b96:	4620      	mov	r0, r4
 8004b98:	bd70      	pop	{r4, r5, r6, pc}
 8004b9a:	1cc4      	adds	r4, r0, #3
 8004b9c:	f024 0403 	bic.w	r4, r4, #3
 8004ba0:	42a0      	cmp	r0, r4
 8004ba2:	d0f8      	beq.n	8004b96 <sbrk_aligned+0x22>
 8004ba4:	1a21      	subs	r1, r4, r0
 8004ba6:	4628      	mov	r0, r5
 8004ba8:	f001 f914 	bl	8005dd4 <_sbrk_r>
 8004bac:	3001      	adds	r0, #1
 8004bae:	d1f2      	bne.n	8004b96 <sbrk_aligned+0x22>
 8004bb0:	e7ef      	b.n	8004b92 <sbrk_aligned+0x1e>
 8004bb2:	bf00      	nop
 8004bb4:	200057a4 	.word	0x200057a4

08004bb8 <_malloc_r>:
 8004bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bbc:	1ccd      	adds	r5, r1, #3
 8004bbe:	f025 0503 	bic.w	r5, r5, #3
 8004bc2:	3508      	adds	r5, #8
 8004bc4:	2d0c      	cmp	r5, #12
 8004bc6:	bf38      	it	cc
 8004bc8:	250c      	movcc	r5, #12
 8004bca:	2d00      	cmp	r5, #0
 8004bcc:	4606      	mov	r6, r0
 8004bce:	db01      	blt.n	8004bd4 <_malloc_r+0x1c>
 8004bd0:	42a9      	cmp	r1, r5
 8004bd2:	d904      	bls.n	8004bde <_malloc_r+0x26>
 8004bd4:	230c      	movs	r3, #12
 8004bd6:	6033      	str	r3, [r6, #0]
 8004bd8:	2000      	movs	r0, #0
 8004bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004cb4 <_malloc_r+0xfc>
 8004be2:	f000 f869 	bl	8004cb8 <__malloc_lock>
 8004be6:	f8d8 3000 	ldr.w	r3, [r8]
 8004bea:	461c      	mov	r4, r3
 8004bec:	bb44      	cbnz	r4, 8004c40 <_malloc_r+0x88>
 8004bee:	4629      	mov	r1, r5
 8004bf0:	4630      	mov	r0, r6
 8004bf2:	f7ff ffbf 	bl	8004b74 <sbrk_aligned>
 8004bf6:	1c43      	adds	r3, r0, #1
 8004bf8:	4604      	mov	r4, r0
 8004bfa:	d158      	bne.n	8004cae <_malloc_r+0xf6>
 8004bfc:	f8d8 4000 	ldr.w	r4, [r8]
 8004c00:	4627      	mov	r7, r4
 8004c02:	2f00      	cmp	r7, #0
 8004c04:	d143      	bne.n	8004c8e <_malloc_r+0xd6>
 8004c06:	2c00      	cmp	r4, #0
 8004c08:	d04b      	beq.n	8004ca2 <_malloc_r+0xea>
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	4639      	mov	r1, r7
 8004c0e:	4630      	mov	r0, r6
 8004c10:	eb04 0903 	add.w	r9, r4, r3
 8004c14:	f001 f8de 	bl	8005dd4 <_sbrk_r>
 8004c18:	4581      	cmp	r9, r0
 8004c1a:	d142      	bne.n	8004ca2 <_malloc_r+0xea>
 8004c1c:	6821      	ldr	r1, [r4, #0]
 8004c1e:	4630      	mov	r0, r6
 8004c20:	1a6d      	subs	r5, r5, r1
 8004c22:	4629      	mov	r1, r5
 8004c24:	f7ff ffa6 	bl	8004b74 <sbrk_aligned>
 8004c28:	3001      	adds	r0, #1
 8004c2a:	d03a      	beq.n	8004ca2 <_malloc_r+0xea>
 8004c2c:	6823      	ldr	r3, [r4, #0]
 8004c2e:	442b      	add	r3, r5
 8004c30:	6023      	str	r3, [r4, #0]
 8004c32:	f8d8 3000 	ldr.w	r3, [r8]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	bb62      	cbnz	r2, 8004c94 <_malloc_r+0xdc>
 8004c3a:	f8c8 7000 	str.w	r7, [r8]
 8004c3e:	e00f      	b.n	8004c60 <_malloc_r+0xa8>
 8004c40:	6822      	ldr	r2, [r4, #0]
 8004c42:	1b52      	subs	r2, r2, r5
 8004c44:	d420      	bmi.n	8004c88 <_malloc_r+0xd0>
 8004c46:	2a0b      	cmp	r2, #11
 8004c48:	d917      	bls.n	8004c7a <_malloc_r+0xc2>
 8004c4a:	1961      	adds	r1, r4, r5
 8004c4c:	42a3      	cmp	r3, r4
 8004c4e:	6025      	str	r5, [r4, #0]
 8004c50:	bf18      	it	ne
 8004c52:	6059      	strne	r1, [r3, #4]
 8004c54:	6863      	ldr	r3, [r4, #4]
 8004c56:	bf08      	it	eq
 8004c58:	f8c8 1000 	streq.w	r1, [r8]
 8004c5c:	5162      	str	r2, [r4, r5]
 8004c5e:	604b      	str	r3, [r1, #4]
 8004c60:	4630      	mov	r0, r6
 8004c62:	f000 f82f 	bl	8004cc4 <__malloc_unlock>
 8004c66:	f104 000b 	add.w	r0, r4, #11
 8004c6a:	1d23      	adds	r3, r4, #4
 8004c6c:	f020 0007 	bic.w	r0, r0, #7
 8004c70:	1ac2      	subs	r2, r0, r3
 8004c72:	bf1c      	itt	ne
 8004c74:	1a1b      	subne	r3, r3, r0
 8004c76:	50a3      	strne	r3, [r4, r2]
 8004c78:	e7af      	b.n	8004bda <_malloc_r+0x22>
 8004c7a:	6862      	ldr	r2, [r4, #4]
 8004c7c:	42a3      	cmp	r3, r4
 8004c7e:	bf0c      	ite	eq
 8004c80:	f8c8 2000 	streq.w	r2, [r8]
 8004c84:	605a      	strne	r2, [r3, #4]
 8004c86:	e7eb      	b.n	8004c60 <_malloc_r+0xa8>
 8004c88:	4623      	mov	r3, r4
 8004c8a:	6864      	ldr	r4, [r4, #4]
 8004c8c:	e7ae      	b.n	8004bec <_malloc_r+0x34>
 8004c8e:	463c      	mov	r4, r7
 8004c90:	687f      	ldr	r7, [r7, #4]
 8004c92:	e7b6      	b.n	8004c02 <_malloc_r+0x4a>
 8004c94:	461a      	mov	r2, r3
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	42a3      	cmp	r3, r4
 8004c9a:	d1fb      	bne.n	8004c94 <_malloc_r+0xdc>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	6053      	str	r3, [r2, #4]
 8004ca0:	e7de      	b.n	8004c60 <_malloc_r+0xa8>
 8004ca2:	230c      	movs	r3, #12
 8004ca4:	4630      	mov	r0, r6
 8004ca6:	6033      	str	r3, [r6, #0]
 8004ca8:	f000 f80c 	bl	8004cc4 <__malloc_unlock>
 8004cac:	e794      	b.n	8004bd8 <_malloc_r+0x20>
 8004cae:	6005      	str	r5, [r0, #0]
 8004cb0:	e7d6      	b.n	8004c60 <_malloc_r+0xa8>
 8004cb2:	bf00      	nop
 8004cb4:	200057a8 	.word	0x200057a8

08004cb8 <__malloc_lock>:
 8004cb8:	4801      	ldr	r0, [pc, #4]	@ (8004cc0 <__malloc_lock+0x8>)
 8004cba:	f7ff bf02 	b.w	8004ac2 <__retarget_lock_acquire_recursive>
 8004cbe:	bf00      	nop
 8004cc0:	200057a0 	.word	0x200057a0

08004cc4 <__malloc_unlock>:
 8004cc4:	4801      	ldr	r0, [pc, #4]	@ (8004ccc <__malloc_unlock+0x8>)
 8004cc6:	f7ff befd 	b.w	8004ac4 <__retarget_lock_release_recursive>
 8004cca:	bf00      	nop
 8004ccc:	200057a0 	.word	0x200057a0

08004cd0 <__ssputs_r>:
 8004cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cd4:	461f      	mov	r7, r3
 8004cd6:	688e      	ldr	r6, [r1, #8]
 8004cd8:	4682      	mov	sl, r0
 8004cda:	42be      	cmp	r6, r7
 8004cdc:	460c      	mov	r4, r1
 8004cde:	4690      	mov	r8, r2
 8004ce0:	680b      	ldr	r3, [r1, #0]
 8004ce2:	d82d      	bhi.n	8004d40 <__ssputs_r+0x70>
 8004ce4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ce8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004cec:	d026      	beq.n	8004d3c <__ssputs_r+0x6c>
 8004cee:	6965      	ldr	r5, [r4, #20]
 8004cf0:	6909      	ldr	r1, [r1, #16]
 8004cf2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004cf6:	eba3 0901 	sub.w	r9, r3, r1
 8004cfa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004cfe:	1c7b      	adds	r3, r7, #1
 8004d00:	444b      	add	r3, r9
 8004d02:	106d      	asrs	r5, r5, #1
 8004d04:	429d      	cmp	r5, r3
 8004d06:	bf38      	it	cc
 8004d08:	461d      	movcc	r5, r3
 8004d0a:	0553      	lsls	r3, r2, #21
 8004d0c:	d527      	bpl.n	8004d5e <__ssputs_r+0x8e>
 8004d0e:	4629      	mov	r1, r5
 8004d10:	f7ff ff52 	bl	8004bb8 <_malloc_r>
 8004d14:	4606      	mov	r6, r0
 8004d16:	b360      	cbz	r0, 8004d72 <__ssputs_r+0xa2>
 8004d18:	464a      	mov	r2, r9
 8004d1a:	6921      	ldr	r1, [r4, #16]
 8004d1c:	f7ff fed3 	bl	8004ac6 <memcpy>
 8004d20:	89a3      	ldrh	r3, [r4, #12]
 8004d22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004d26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d2a:	81a3      	strh	r3, [r4, #12]
 8004d2c:	6126      	str	r6, [r4, #16]
 8004d2e:	444e      	add	r6, r9
 8004d30:	6026      	str	r6, [r4, #0]
 8004d32:	463e      	mov	r6, r7
 8004d34:	6165      	str	r5, [r4, #20]
 8004d36:	eba5 0509 	sub.w	r5, r5, r9
 8004d3a:	60a5      	str	r5, [r4, #8]
 8004d3c:	42be      	cmp	r6, r7
 8004d3e:	d900      	bls.n	8004d42 <__ssputs_r+0x72>
 8004d40:	463e      	mov	r6, r7
 8004d42:	4632      	mov	r2, r6
 8004d44:	4641      	mov	r1, r8
 8004d46:	6820      	ldr	r0, [r4, #0]
 8004d48:	f001 f808 	bl	8005d5c <memmove>
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	68a3      	ldr	r3, [r4, #8]
 8004d50:	1b9b      	subs	r3, r3, r6
 8004d52:	60a3      	str	r3, [r4, #8]
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	4433      	add	r3, r6
 8004d58:	6023      	str	r3, [r4, #0]
 8004d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d5e:	462a      	mov	r2, r5
 8004d60:	f001 f856 	bl	8005e10 <_realloc_r>
 8004d64:	4606      	mov	r6, r0
 8004d66:	2800      	cmp	r0, #0
 8004d68:	d1e0      	bne.n	8004d2c <__ssputs_r+0x5c>
 8004d6a:	4650      	mov	r0, sl
 8004d6c:	6921      	ldr	r1, [r4, #16]
 8004d6e:	f7ff feb9 	bl	8004ae4 <_free_r>
 8004d72:	230c      	movs	r3, #12
 8004d74:	f8ca 3000 	str.w	r3, [sl]
 8004d78:	89a3      	ldrh	r3, [r4, #12]
 8004d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d82:	81a3      	strh	r3, [r4, #12]
 8004d84:	e7e9      	b.n	8004d5a <__ssputs_r+0x8a>
	...

08004d88 <_svfiprintf_r>:
 8004d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d8c:	4698      	mov	r8, r3
 8004d8e:	898b      	ldrh	r3, [r1, #12]
 8004d90:	4607      	mov	r7, r0
 8004d92:	061b      	lsls	r3, r3, #24
 8004d94:	460d      	mov	r5, r1
 8004d96:	4614      	mov	r4, r2
 8004d98:	b09d      	sub	sp, #116	@ 0x74
 8004d9a:	d510      	bpl.n	8004dbe <_svfiprintf_r+0x36>
 8004d9c:	690b      	ldr	r3, [r1, #16]
 8004d9e:	b973      	cbnz	r3, 8004dbe <_svfiprintf_r+0x36>
 8004da0:	2140      	movs	r1, #64	@ 0x40
 8004da2:	f7ff ff09 	bl	8004bb8 <_malloc_r>
 8004da6:	6028      	str	r0, [r5, #0]
 8004da8:	6128      	str	r0, [r5, #16]
 8004daa:	b930      	cbnz	r0, 8004dba <_svfiprintf_r+0x32>
 8004dac:	230c      	movs	r3, #12
 8004dae:	603b      	str	r3, [r7, #0]
 8004db0:	f04f 30ff 	mov.w	r0, #4294967295
 8004db4:	b01d      	add	sp, #116	@ 0x74
 8004db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dba:	2340      	movs	r3, #64	@ 0x40
 8004dbc:	616b      	str	r3, [r5, #20]
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dc2:	2320      	movs	r3, #32
 8004dc4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004dc8:	2330      	movs	r3, #48	@ 0x30
 8004dca:	f04f 0901 	mov.w	r9, #1
 8004dce:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dd2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004f6c <_svfiprintf_r+0x1e4>
 8004dd6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004dda:	4623      	mov	r3, r4
 8004ddc:	469a      	mov	sl, r3
 8004dde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004de2:	b10a      	cbz	r2, 8004de8 <_svfiprintf_r+0x60>
 8004de4:	2a25      	cmp	r2, #37	@ 0x25
 8004de6:	d1f9      	bne.n	8004ddc <_svfiprintf_r+0x54>
 8004de8:	ebba 0b04 	subs.w	fp, sl, r4
 8004dec:	d00b      	beq.n	8004e06 <_svfiprintf_r+0x7e>
 8004dee:	465b      	mov	r3, fp
 8004df0:	4622      	mov	r2, r4
 8004df2:	4629      	mov	r1, r5
 8004df4:	4638      	mov	r0, r7
 8004df6:	f7ff ff6b 	bl	8004cd0 <__ssputs_r>
 8004dfa:	3001      	adds	r0, #1
 8004dfc:	f000 80a7 	beq.w	8004f4e <_svfiprintf_r+0x1c6>
 8004e00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e02:	445a      	add	r2, fp
 8004e04:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e06:	f89a 3000 	ldrb.w	r3, [sl]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 809f 	beq.w	8004f4e <_svfiprintf_r+0x1c6>
 8004e10:	2300      	movs	r3, #0
 8004e12:	f04f 32ff 	mov.w	r2, #4294967295
 8004e16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e1a:	f10a 0a01 	add.w	sl, sl, #1
 8004e1e:	9304      	str	r3, [sp, #16]
 8004e20:	9307      	str	r3, [sp, #28]
 8004e22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e26:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e28:	4654      	mov	r4, sl
 8004e2a:	2205      	movs	r2, #5
 8004e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e30:	484e      	ldr	r0, [pc, #312]	@ (8004f6c <_svfiprintf_r+0x1e4>)
 8004e32:	f000 ffdf 	bl	8005df4 <memchr>
 8004e36:	9a04      	ldr	r2, [sp, #16]
 8004e38:	b9d8      	cbnz	r0, 8004e72 <_svfiprintf_r+0xea>
 8004e3a:	06d0      	lsls	r0, r2, #27
 8004e3c:	bf44      	itt	mi
 8004e3e:	2320      	movmi	r3, #32
 8004e40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e44:	0711      	lsls	r1, r2, #28
 8004e46:	bf44      	itt	mi
 8004e48:	232b      	movmi	r3, #43	@ 0x2b
 8004e4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e4e:	f89a 3000 	ldrb.w	r3, [sl]
 8004e52:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e54:	d015      	beq.n	8004e82 <_svfiprintf_r+0xfa>
 8004e56:	4654      	mov	r4, sl
 8004e58:	2000      	movs	r0, #0
 8004e5a:	f04f 0c0a 	mov.w	ip, #10
 8004e5e:	9a07      	ldr	r2, [sp, #28]
 8004e60:	4621      	mov	r1, r4
 8004e62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e66:	3b30      	subs	r3, #48	@ 0x30
 8004e68:	2b09      	cmp	r3, #9
 8004e6a:	d94b      	bls.n	8004f04 <_svfiprintf_r+0x17c>
 8004e6c:	b1b0      	cbz	r0, 8004e9c <_svfiprintf_r+0x114>
 8004e6e:	9207      	str	r2, [sp, #28]
 8004e70:	e014      	b.n	8004e9c <_svfiprintf_r+0x114>
 8004e72:	eba0 0308 	sub.w	r3, r0, r8
 8004e76:	fa09 f303 	lsl.w	r3, r9, r3
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	46a2      	mov	sl, r4
 8004e7e:	9304      	str	r3, [sp, #16]
 8004e80:	e7d2      	b.n	8004e28 <_svfiprintf_r+0xa0>
 8004e82:	9b03      	ldr	r3, [sp, #12]
 8004e84:	1d19      	adds	r1, r3, #4
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	9103      	str	r1, [sp, #12]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	bfbb      	ittet	lt
 8004e8e:	425b      	neglt	r3, r3
 8004e90:	f042 0202 	orrlt.w	r2, r2, #2
 8004e94:	9307      	strge	r3, [sp, #28]
 8004e96:	9307      	strlt	r3, [sp, #28]
 8004e98:	bfb8      	it	lt
 8004e9a:	9204      	strlt	r2, [sp, #16]
 8004e9c:	7823      	ldrb	r3, [r4, #0]
 8004e9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ea0:	d10a      	bne.n	8004eb8 <_svfiprintf_r+0x130>
 8004ea2:	7863      	ldrb	r3, [r4, #1]
 8004ea4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ea6:	d132      	bne.n	8004f0e <_svfiprintf_r+0x186>
 8004ea8:	9b03      	ldr	r3, [sp, #12]
 8004eaa:	3402      	adds	r4, #2
 8004eac:	1d1a      	adds	r2, r3, #4
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	9203      	str	r2, [sp, #12]
 8004eb2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004eb6:	9305      	str	r3, [sp, #20]
 8004eb8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004f70 <_svfiprintf_r+0x1e8>
 8004ebc:	2203      	movs	r2, #3
 8004ebe:	4650      	mov	r0, sl
 8004ec0:	7821      	ldrb	r1, [r4, #0]
 8004ec2:	f000 ff97 	bl	8005df4 <memchr>
 8004ec6:	b138      	cbz	r0, 8004ed8 <_svfiprintf_r+0x150>
 8004ec8:	2240      	movs	r2, #64	@ 0x40
 8004eca:	9b04      	ldr	r3, [sp, #16]
 8004ecc:	eba0 000a 	sub.w	r0, r0, sl
 8004ed0:	4082      	lsls	r2, r0
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	3401      	adds	r4, #1
 8004ed6:	9304      	str	r3, [sp, #16]
 8004ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004edc:	2206      	movs	r2, #6
 8004ede:	4825      	ldr	r0, [pc, #148]	@ (8004f74 <_svfiprintf_r+0x1ec>)
 8004ee0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ee4:	f000 ff86 	bl	8005df4 <memchr>
 8004ee8:	2800      	cmp	r0, #0
 8004eea:	d036      	beq.n	8004f5a <_svfiprintf_r+0x1d2>
 8004eec:	4b22      	ldr	r3, [pc, #136]	@ (8004f78 <_svfiprintf_r+0x1f0>)
 8004eee:	bb1b      	cbnz	r3, 8004f38 <_svfiprintf_r+0x1b0>
 8004ef0:	9b03      	ldr	r3, [sp, #12]
 8004ef2:	3307      	adds	r3, #7
 8004ef4:	f023 0307 	bic.w	r3, r3, #7
 8004ef8:	3308      	adds	r3, #8
 8004efa:	9303      	str	r3, [sp, #12]
 8004efc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004efe:	4433      	add	r3, r6
 8004f00:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f02:	e76a      	b.n	8004dda <_svfiprintf_r+0x52>
 8004f04:	460c      	mov	r4, r1
 8004f06:	2001      	movs	r0, #1
 8004f08:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f0c:	e7a8      	b.n	8004e60 <_svfiprintf_r+0xd8>
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f04f 0c0a 	mov.w	ip, #10
 8004f14:	4619      	mov	r1, r3
 8004f16:	3401      	adds	r4, #1
 8004f18:	9305      	str	r3, [sp, #20]
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f20:	3a30      	subs	r2, #48	@ 0x30
 8004f22:	2a09      	cmp	r2, #9
 8004f24:	d903      	bls.n	8004f2e <_svfiprintf_r+0x1a6>
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d0c6      	beq.n	8004eb8 <_svfiprintf_r+0x130>
 8004f2a:	9105      	str	r1, [sp, #20]
 8004f2c:	e7c4      	b.n	8004eb8 <_svfiprintf_r+0x130>
 8004f2e:	4604      	mov	r4, r0
 8004f30:	2301      	movs	r3, #1
 8004f32:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f36:	e7f0      	b.n	8004f1a <_svfiprintf_r+0x192>
 8004f38:	ab03      	add	r3, sp, #12
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	462a      	mov	r2, r5
 8004f3e:	4638      	mov	r0, r7
 8004f40:	4b0e      	ldr	r3, [pc, #56]	@ (8004f7c <_svfiprintf_r+0x1f4>)
 8004f42:	a904      	add	r1, sp, #16
 8004f44:	f3af 8000 	nop.w
 8004f48:	1c42      	adds	r2, r0, #1
 8004f4a:	4606      	mov	r6, r0
 8004f4c:	d1d6      	bne.n	8004efc <_svfiprintf_r+0x174>
 8004f4e:	89ab      	ldrh	r3, [r5, #12]
 8004f50:	065b      	lsls	r3, r3, #25
 8004f52:	f53f af2d 	bmi.w	8004db0 <_svfiprintf_r+0x28>
 8004f56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f58:	e72c      	b.n	8004db4 <_svfiprintf_r+0x2c>
 8004f5a:	ab03      	add	r3, sp, #12
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	462a      	mov	r2, r5
 8004f60:	4638      	mov	r0, r7
 8004f62:	4b06      	ldr	r3, [pc, #24]	@ (8004f7c <_svfiprintf_r+0x1f4>)
 8004f64:	a904      	add	r1, sp, #16
 8004f66:	f000 fb87 	bl	8005678 <_printf_i>
 8004f6a:	e7ed      	b.n	8004f48 <_svfiprintf_r+0x1c0>
 8004f6c:	08006c10 	.word	0x08006c10
 8004f70:	08006c16 	.word	0x08006c16
 8004f74:	08006c1a 	.word	0x08006c1a
 8004f78:	00000000 	.word	0x00000000
 8004f7c:	08004cd1 	.word	0x08004cd1

08004f80 <_sungetc_r>:
 8004f80:	b538      	push	{r3, r4, r5, lr}
 8004f82:	1c4b      	adds	r3, r1, #1
 8004f84:	4614      	mov	r4, r2
 8004f86:	d103      	bne.n	8004f90 <_sungetc_r+0x10>
 8004f88:	f04f 35ff 	mov.w	r5, #4294967295
 8004f8c:	4628      	mov	r0, r5
 8004f8e:	bd38      	pop	{r3, r4, r5, pc}
 8004f90:	8993      	ldrh	r3, [r2, #12]
 8004f92:	b2cd      	uxtb	r5, r1
 8004f94:	f023 0320 	bic.w	r3, r3, #32
 8004f98:	8193      	strh	r3, [r2, #12]
 8004f9a:	6853      	ldr	r3, [r2, #4]
 8004f9c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f9e:	b18a      	cbz	r2, 8004fc4 <_sungetc_r+0x44>
 8004fa0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	dd08      	ble.n	8004fb8 <_sungetc_r+0x38>
 8004fa6:	6823      	ldr	r3, [r4, #0]
 8004fa8:	1e5a      	subs	r2, r3, #1
 8004faa:	6022      	str	r2, [r4, #0]
 8004fac:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004fb0:	6863      	ldr	r3, [r4, #4]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	6063      	str	r3, [r4, #4]
 8004fb6:	e7e9      	b.n	8004f8c <_sungetc_r+0xc>
 8004fb8:	4621      	mov	r1, r4
 8004fba:	f000 fe97 	bl	8005cec <__submore>
 8004fbe:	2800      	cmp	r0, #0
 8004fc0:	d0f1      	beq.n	8004fa6 <_sungetc_r+0x26>
 8004fc2:	e7e1      	b.n	8004f88 <_sungetc_r+0x8>
 8004fc4:	6921      	ldr	r1, [r4, #16]
 8004fc6:	6822      	ldr	r2, [r4, #0]
 8004fc8:	b141      	cbz	r1, 8004fdc <_sungetc_r+0x5c>
 8004fca:	4291      	cmp	r1, r2
 8004fcc:	d206      	bcs.n	8004fdc <_sungetc_r+0x5c>
 8004fce:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8004fd2:	42a9      	cmp	r1, r5
 8004fd4:	d102      	bne.n	8004fdc <_sungetc_r+0x5c>
 8004fd6:	3a01      	subs	r2, #1
 8004fd8:	6022      	str	r2, [r4, #0]
 8004fda:	e7ea      	b.n	8004fb2 <_sungetc_r+0x32>
 8004fdc:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8004fe0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004fe4:	6363      	str	r3, [r4, #52]	@ 0x34
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004fea:	4623      	mov	r3, r4
 8004fec:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004ff0:	6023      	str	r3, [r4, #0]
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e7de      	b.n	8004fb4 <_sungetc_r+0x34>

08004ff6 <__ssrefill_r>:
 8004ff6:	b510      	push	{r4, lr}
 8004ff8:	460c      	mov	r4, r1
 8004ffa:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8004ffc:	b169      	cbz	r1, 800501a <__ssrefill_r+0x24>
 8004ffe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005002:	4299      	cmp	r1, r3
 8005004:	d001      	beq.n	800500a <__ssrefill_r+0x14>
 8005006:	f7ff fd6d 	bl	8004ae4 <_free_r>
 800500a:	2000      	movs	r0, #0
 800500c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800500e:	6360      	str	r0, [r4, #52]	@ 0x34
 8005010:	6063      	str	r3, [r4, #4]
 8005012:	b113      	cbz	r3, 800501a <__ssrefill_r+0x24>
 8005014:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005016:	6023      	str	r3, [r4, #0]
 8005018:	bd10      	pop	{r4, pc}
 800501a:	6923      	ldr	r3, [r4, #16]
 800501c:	f04f 30ff 	mov.w	r0, #4294967295
 8005020:	6023      	str	r3, [r4, #0]
 8005022:	2300      	movs	r3, #0
 8005024:	6063      	str	r3, [r4, #4]
 8005026:	89a3      	ldrh	r3, [r4, #12]
 8005028:	f043 0320 	orr.w	r3, r3, #32
 800502c:	81a3      	strh	r3, [r4, #12]
 800502e:	e7f3      	b.n	8005018 <__ssrefill_r+0x22>

08005030 <__ssvfiscanf_r>:
 8005030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005034:	460c      	mov	r4, r1
 8005036:	2100      	movs	r1, #0
 8005038:	4606      	mov	r6, r0
 800503a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800503e:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8005042:	49aa      	ldr	r1, [pc, #680]	@ (80052ec <__ssvfiscanf_r+0x2bc>)
 8005044:	f10d 0804 	add.w	r8, sp, #4
 8005048:	91a0      	str	r1, [sp, #640]	@ 0x280
 800504a:	49a9      	ldr	r1, [pc, #676]	@ (80052f0 <__ssvfiscanf_r+0x2c0>)
 800504c:	4fa9      	ldr	r7, [pc, #676]	@ (80052f4 <__ssvfiscanf_r+0x2c4>)
 800504e:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8005052:	91a1      	str	r1, [sp, #644]	@ 0x284
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	7813      	ldrb	r3, [r2, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 8159 	beq.w	8005310 <__ssvfiscanf_r+0x2e0>
 800505e:	5cf9      	ldrb	r1, [r7, r3]
 8005060:	1c55      	adds	r5, r2, #1
 8005062:	f011 0108 	ands.w	r1, r1, #8
 8005066:	d019      	beq.n	800509c <__ssvfiscanf_r+0x6c>
 8005068:	6863      	ldr	r3, [r4, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	dd0f      	ble.n	800508e <__ssvfiscanf_r+0x5e>
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	781a      	ldrb	r2, [r3, #0]
 8005072:	5cba      	ldrb	r2, [r7, r2]
 8005074:	0712      	lsls	r2, r2, #28
 8005076:	d401      	bmi.n	800507c <__ssvfiscanf_r+0x4c>
 8005078:	462a      	mov	r2, r5
 800507a:	e7ec      	b.n	8005056 <__ssvfiscanf_r+0x26>
 800507c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800507e:	3301      	adds	r3, #1
 8005080:	3201      	adds	r2, #1
 8005082:	9245      	str	r2, [sp, #276]	@ 0x114
 8005084:	6862      	ldr	r2, [r4, #4]
 8005086:	6023      	str	r3, [r4, #0]
 8005088:	3a01      	subs	r2, #1
 800508a:	6062      	str	r2, [r4, #4]
 800508c:	e7ec      	b.n	8005068 <__ssvfiscanf_r+0x38>
 800508e:	4621      	mov	r1, r4
 8005090:	4630      	mov	r0, r6
 8005092:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005094:	4798      	blx	r3
 8005096:	2800      	cmp	r0, #0
 8005098:	d0e9      	beq.n	800506e <__ssvfiscanf_r+0x3e>
 800509a:	e7ed      	b.n	8005078 <__ssvfiscanf_r+0x48>
 800509c:	2b25      	cmp	r3, #37	@ 0x25
 800509e:	d012      	beq.n	80050c6 <__ssvfiscanf_r+0x96>
 80050a0:	4699      	mov	r9, r3
 80050a2:	6863      	ldr	r3, [r4, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f340 8094 	ble.w	80051d2 <__ssvfiscanf_r+0x1a2>
 80050aa:	6822      	ldr	r2, [r4, #0]
 80050ac:	7813      	ldrb	r3, [r2, #0]
 80050ae:	454b      	cmp	r3, r9
 80050b0:	f040 812e 	bne.w	8005310 <__ssvfiscanf_r+0x2e0>
 80050b4:	6863      	ldr	r3, [r4, #4]
 80050b6:	3201      	adds	r2, #1
 80050b8:	3b01      	subs	r3, #1
 80050ba:	6063      	str	r3, [r4, #4]
 80050bc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80050be:	6022      	str	r2, [r4, #0]
 80050c0:	3301      	adds	r3, #1
 80050c2:	9345      	str	r3, [sp, #276]	@ 0x114
 80050c4:	e7d8      	b.n	8005078 <__ssvfiscanf_r+0x48>
 80050c6:	9141      	str	r1, [sp, #260]	@ 0x104
 80050c8:	9143      	str	r1, [sp, #268]	@ 0x10c
 80050ca:	7853      	ldrb	r3, [r2, #1]
 80050cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80050ce:	bf04      	itt	eq
 80050d0:	2310      	moveq	r3, #16
 80050d2:	1c95      	addeq	r5, r2, #2
 80050d4:	f04f 020a 	mov.w	r2, #10
 80050d8:	bf08      	it	eq
 80050da:	9341      	streq	r3, [sp, #260]	@ 0x104
 80050dc:	46a9      	mov	r9, r5
 80050de:	f819 1b01 	ldrb.w	r1, [r9], #1
 80050e2:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80050e6:	2b09      	cmp	r3, #9
 80050e8:	d91e      	bls.n	8005128 <__ssvfiscanf_r+0xf8>
 80050ea:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 80052f8 <__ssvfiscanf_r+0x2c8>
 80050ee:	2203      	movs	r2, #3
 80050f0:	4650      	mov	r0, sl
 80050f2:	f000 fe7f 	bl	8005df4 <memchr>
 80050f6:	b138      	cbz	r0, 8005108 <__ssvfiscanf_r+0xd8>
 80050f8:	2301      	movs	r3, #1
 80050fa:	464d      	mov	r5, r9
 80050fc:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80050fe:	eba0 000a 	sub.w	r0, r0, sl
 8005102:	4083      	lsls	r3, r0
 8005104:	4313      	orrs	r3, r2
 8005106:	9341      	str	r3, [sp, #260]	@ 0x104
 8005108:	f815 3b01 	ldrb.w	r3, [r5], #1
 800510c:	2b78      	cmp	r3, #120	@ 0x78
 800510e:	d806      	bhi.n	800511e <__ssvfiscanf_r+0xee>
 8005110:	2b57      	cmp	r3, #87	@ 0x57
 8005112:	d810      	bhi.n	8005136 <__ssvfiscanf_r+0x106>
 8005114:	2b25      	cmp	r3, #37	@ 0x25
 8005116:	d0c3      	beq.n	80050a0 <__ssvfiscanf_r+0x70>
 8005118:	d856      	bhi.n	80051c8 <__ssvfiscanf_r+0x198>
 800511a:	2b00      	cmp	r3, #0
 800511c:	d064      	beq.n	80051e8 <__ssvfiscanf_r+0x1b8>
 800511e:	2303      	movs	r3, #3
 8005120:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005122:	230a      	movs	r3, #10
 8005124:	9342      	str	r3, [sp, #264]	@ 0x108
 8005126:	e077      	b.n	8005218 <__ssvfiscanf_r+0x1e8>
 8005128:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800512a:	464d      	mov	r5, r9
 800512c:	fb02 1103 	mla	r1, r2, r3, r1
 8005130:	3930      	subs	r1, #48	@ 0x30
 8005132:	9143      	str	r1, [sp, #268]	@ 0x10c
 8005134:	e7d2      	b.n	80050dc <__ssvfiscanf_r+0xac>
 8005136:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800513a:	2a20      	cmp	r2, #32
 800513c:	d8ef      	bhi.n	800511e <__ssvfiscanf_r+0xee>
 800513e:	a101      	add	r1, pc, #4	@ (adr r1, 8005144 <__ssvfiscanf_r+0x114>)
 8005140:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005144:	080051f7 	.word	0x080051f7
 8005148:	0800511f 	.word	0x0800511f
 800514c:	0800511f 	.word	0x0800511f
 8005150:	08005251 	.word	0x08005251
 8005154:	0800511f 	.word	0x0800511f
 8005158:	0800511f 	.word	0x0800511f
 800515c:	0800511f 	.word	0x0800511f
 8005160:	0800511f 	.word	0x0800511f
 8005164:	0800511f 	.word	0x0800511f
 8005168:	0800511f 	.word	0x0800511f
 800516c:	0800511f 	.word	0x0800511f
 8005170:	08005267 	.word	0x08005267
 8005174:	0800524d 	.word	0x0800524d
 8005178:	080051cf 	.word	0x080051cf
 800517c:	080051cf 	.word	0x080051cf
 8005180:	080051cf 	.word	0x080051cf
 8005184:	0800511f 	.word	0x0800511f
 8005188:	08005209 	.word	0x08005209
 800518c:	0800511f 	.word	0x0800511f
 8005190:	0800511f 	.word	0x0800511f
 8005194:	0800511f 	.word	0x0800511f
 8005198:	0800511f 	.word	0x0800511f
 800519c:	08005277 	.word	0x08005277
 80051a0:	08005211 	.word	0x08005211
 80051a4:	080051ef 	.word	0x080051ef
 80051a8:	0800511f 	.word	0x0800511f
 80051ac:	0800511f 	.word	0x0800511f
 80051b0:	08005273 	.word	0x08005273
 80051b4:	0800511f 	.word	0x0800511f
 80051b8:	0800524d 	.word	0x0800524d
 80051bc:	0800511f 	.word	0x0800511f
 80051c0:	0800511f 	.word	0x0800511f
 80051c4:	080051f7 	.word	0x080051f7
 80051c8:	3b45      	subs	r3, #69	@ 0x45
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d8a7      	bhi.n	800511e <__ssvfiscanf_r+0xee>
 80051ce:	2305      	movs	r3, #5
 80051d0:	e021      	b.n	8005216 <__ssvfiscanf_r+0x1e6>
 80051d2:	4621      	mov	r1, r4
 80051d4:	4630      	mov	r0, r6
 80051d6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80051d8:	4798      	blx	r3
 80051da:	2800      	cmp	r0, #0
 80051dc:	f43f af65 	beq.w	80050aa <__ssvfiscanf_r+0x7a>
 80051e0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80051e2:	2800      	cmp	r0, #0
 80051e4:	f040 808c 	bne.w	8005300 <__ssvfiscanf_r+0x2d0>
 80051e8:	f04f 30ff 	mov.w	r0, #4294967295
 80051ec:	e08c      	b.n	8005308 <__ssvfiscanf_r+0x2d8>
 80051ee:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80051f0:	f042 0220 	orr.w	r2, r2, #32
 80051f4:	9241      	str	r2, [sp, #260]	@ 0x104
 80051f6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80051f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051fc:	9241      	str	r2, [sp, #260]	@ 0x104
 80051fe:	2210      	movs	r2, #16
 8005200:	2b6e      	cmp	r3, #110	@ 0x6e
 8005202:	9242      	str	r2, [sp, #264]	@ 0x108
 8005204:	d902      	bls.n	800520c <__ssvfiscanf_r+0x1dc>
 8005206:	e005      	b.n	8005214 <__ssvfiscanf_r+0x1e4>
 8005208:	2300      	movs	r3, #0
 800520a:	9342      	str	r3, [sp, #264]	@ 0x108
 800520c:	2303      	movs	r3, #3
 800520e:	e002      	b.n	8005216 <__ssvfiscanf_r+0x1e6>
 8005210:	2308      	movs	r3, #8
 8005212:	9342      	str	r3, [sp, #264]	@ 0x108
 8005214:	2304      	movs	r3, #4
 8005216:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005218:	6863      	ldr	r3, [r4, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	dd39      	ble.n	8005292 <__ssvfiscanf_r+0x262>
 800521e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005220:	0659      	lsls	r1, r3, #25
 8005222:	d404      	bmi.n	800522e <__ssvfiscanf_r+0x1fe>
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	781a      	ldrb	r2, [r3, #0]
 8005228:	5cba      	ldrb	r2, [r7, r2]
 800522a:	0712      	lsls	r2, r2, #28
 800522c:	d438      	bmi.n	80052a0 <__ssvfiscanf_r+0x270>
 800522e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8005230:	2b02      	cmp	r3, #2
 8005232:	dc47      	bgt.n	80052c4 <__ssvfiscanf_r+0x294>
 8005234:	466b      	mov	r3, sp
 8005236:	4622      	mov	r2, r4
 8005238:	4630      	mov	r0, r6
 800523a:	a941      	add	r1, sp, #260	@ 0x104
 800523c:	f000 fb3c 	bl	80058b8 <_scanf_chars>
 8005240:	2801      	cmp	r0, #1
 8005242:	d065      	beq.n	8005310 <__ssvfiscanf_r+0x2e0>
 8005244:	2802      	cmp	r0, #2
 8005246:	f47f af17 	bne.w	8005078 <__ssvfiscanf_r+0x48>
 800524a:	e7c9      	b.n	80051e0 <__ssvfiscanf_r+0x1b0>
 800524c:	220a      	movs	r2, #10
 800524e:	e7d7      	b.n	8005200 <__ssvfiscanf_r+0x1d0>
 8005250:	4629      	mov	r1, r5
 8005252:	4640      	mov	r0, r8
 8005254:	f000 fd11 	bl	8005c7a <__sccl>
 8005258:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800525a:	4605      	mov	r5, r0
 800525c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005260:	9341      	str	r3, [sp, #260]	@ 0x104
 8005262:	2301      	movs	r3, #1
 8005264:	e7d7      	b.n	8005216 <__ssvfiscanf_r+0x1e6>
 8005266:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005268:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800526c:	9341      	str	r3, [sp, #260]	@ 0x104
 800526e:	2300      	movs	r3, #0
 8005270:	e7d1      	b.n	8005216 <__ssvfiscanf_r+0x1e6>
 8005272:	2302      	movs	r3, #2
 8005274:	e7cf      	b.n	8005216 <__ssvfiscanf_r+0x1e6>
 8005276:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8005278:	06c3      	lsls	r3, r0, #27
 800527a:	f53f aefd 	bmi.w	8005078 <__ssvfiscanf_r+0x48>
 800527e:	9b00      	ldr	r3, [sp, #0]
 8005280:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005282:	1d19      	adds	r1, r3, #4
 8005284:	9100      	str	r1, [sp, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	07c0      	lsls	r0, r0, #31
 800528a:	bf4c      	ite	mi
 800528c:	801a      	strhmi	r2, [r3, #0]
 800528e:	601a      	strpl	r2, [r3, #0]
 8005290:	e6f2      	b.n	8005078 <__ssvfiscanf_r+0x48>
 8005292:	4621      	mov	r1, r4
 8005294:	4630      	mov	r0, r6
 8005296:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005298:	4798      	blx	r3
 800529a:	2800      	cmp	r0, #0
 800529c:	d0bf      	beq.n	800521e <__ssvfiscanf_r+0x1ee>
 800529e:	e79f      	b.n	80051e0 <__ssvfiscanf_r+0x1b0>
 80052a0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80052a2:	3201      	adds	r2, #1
 80052a4:	9245      	str	r2, [sp, #276]	@ 0x114
 80052a6:	6862      	ldr	r2, [r4, #4]
 80052a8:	3a01      	subs	r2, #1
 80052aa:	2a00      	cmp	r2, #0
 80052ac:	6062      	str	r2, [r4, #4]
 80052ae:	dd02      	ble.n	80052b6 <__ssvfiscanf_r+0x286>
 80052b0:	3301      	adds	r3, #1
 80052b2:	6023      	str	r3, [r4, #0]
 80052b4:	e7b6      	b.n	8005224 <__ssvfiscanf_r+0x1f4>
 80052b6:	4621      	mov	r1, r4
 80052b8:	4630      	mov	r0, r6
 80052ba:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80052bc:	4798      	blx	r3
 80052be:	2800      	cmp	r0, #0
 80052c0:	d0b0      	beq.n	8005224 <__ssvfiscanf_r+0x1f4>
 80052c2:	e78d      	b.n	80051e0 <__ssvfiscanf_r+0x1b0>
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	dc06      	bgt.n	80052d6 <__ssvfiscanf_r+0x2a6>
 80052c8:	466b      	mov	r3, sp
 80052ca:	4622      	mov	r2, r4
 80052cc:	4630      	mov	r0, r6
 80052ce:	a941      	add	r1, sp, #260	@ 0x104
 80052d0:	f000 fb4c 	bl	800596c <_scanf_i>
 80052d4:	e7b4      	b.n	8005240 <__ssvfiscanf_r+0x210>
 80052d6:	4b09      	ldr	r3, [pc, #36]	@ (80052fc <__ssvfiscanf_r+0x2cc>)
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f43f aecd 	beq.w	8005078 <__ssvfiscanf_r+0x48>
 80052de:	466b      	mov	r3, sp
 80052e0:	4622      	mov	r2, r4
 80052e2:	4630      	mov	r0, r6
 80052e4:	a941      	add	r1, sp, #260	@ 0x104
 80052e6:	f3af 8000 	nop.w
 80052ea:	e7a9      	b.n	8005240 <__ssvfiscanf_r+0x210>
 80052ec:	08004f81 	.word	0x08004f81
 80052f0:	08004ff7 	.word	0x08004ff7
 80052f4:	08006c5f 	.word	0x08006c5f
 80052f8:	08006c16 	.word	0x08006c16
 80052fc:	00000000 	.word	0x00000000
 8005300:	89a3      	ldrh	r3, [r4, #12]
 8005302:	065b      	lsls	r3, r3, #25
 8005304:	f53f af70 	bmi.w	80051e8 <__ssvfiscanf_r+0x1b8>
 8005308:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800530c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005310:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8005312:	e7f9      	b.n	8005308 <__ssvfiscanf_r+0x2d8>

08005314 <__sfputc_r>:
 8005314:	6893      	ldr	r3, [r2, #8]
 8005316:	b410      	push	{r4}
 8005318:	3b01      	subs	r3, #1
 800531a:	2b00      	cmp	r3, #0
 800531c:	6093      	str	r3, [r2, #8]
 800531e:	da07      	bge.n	8005330 <__sfputc_r+0x1c>
 8005320:	6994      	ldr	r4, [r2, #24]
 8005322:	42a3      	cmp	r3, r4
 8005324:	db01      	blt.n	800532a <__sfputc_r+0x16>
 8005326:	290a      	cmp	r1, #10
 8005328:	d102      	bne.n	8005330 <__sfputc_r+0x1c>
 800532a:	bc10      	pop	{r4}
 800532c:	f7ff baa9 	b.w	8004882 <__swbuf_r>
 8005330:	6813      	ldr	r3, [r2, #0]
 8005332:	1c58      	adds	r0, r3, #1
 8005334:	6010      	str	r0, [r2, #0]
 8005336:	7019      	strb	r1, [r3, #0]
 8005338:	4608      	mov	r0, r1
 800533a:	bc10      	pop	{r4}
 800533c:	4770      	bx	lr

0800533e <__sfputs_r>:
 800533e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005340:	4606      	mov	r6, r0
 8005342:	460f      	mov	r7, r1
 8005344:	4614      	mov	r4, r2
 8005346:	18d5      	adds	r5, r2, r3
 8005348:	42ac      	cmp	r4, r5
 800534a:	d101      	bne.n	8005350 <__sfputs_r+0x12>
 800534c:	2000      	movs	r0, #0
 800534e:	e007      	b.n	8005360 <__sfputs_r+0x22>
 8005350:	463a      	mov	r2, r7
 8005352:	4630      	mov	r0, r6
 8005354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005358:	f7ff ffdc 	bl	8005314 <__sfputc_r>
 800535c:	1c43      	adds	r3, r0, #1
 800535e:	d1f3      	bne.n	8005348 <__sfputs_r+0xa>
 8005360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005364 <_vfiprintf_r>:
 8005364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005368:	460d      	mov	r5, r1
 800536a:	4614      	mov	r4, r2
 800536c:	4698      	mov	r8, r3
 800536e:	4606      	mov	r6, r0
 8005370:	b09d      	sub	sp, #116	@ 0x74
 8005372:	b118      	cbz	r0, 800537c <_vfiprintf_r+0x18>
 8005374:	6a03      	ldr	r3, [r0, #32]
 8005376:	b90b      	cbnz	r3, 800537c <_vfiprintf_r+0x18>
 8005378:	f7ff f932 	bl	80045e0 <__sinit>
 800537c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800537e:	07d9      	lsls	r1, r3, #31
 8005380:	d405      	bmi.n	800538e <_vfiprintf_r+0x2a>
 8005382:	89ab      	ldrh	r3, [r5, #12]
 8005384:	059a      	lsls	r2, r3, #22
 8005386:	d402      	bmi.n	800538e <_vfiprintf_r+0x2a>
 8005388:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800538a:	f7ff fb9a 	bl	8004ac2 <__retarget_lock_acquire_recursive>
 800538e:	89ab      	ldrh	r3, [r5, #12]
 8005390:	071b      	lsls	r3, r3, #28
 8005392:	d501      	bpl.n	8005398 <_vfiprintf_r+0x34>
 8005394:	692b      	ldr	r3, [r5, #16]
 8005396:	b99b      	cbnz	r3, 80053c0 <_vfiprintf_r+0x5c>
 8005398:	4629      	mov	r1, r5
 800539a:	4630      	mov	r0, r6
 800539c:	f7ff fab0 	bl	8004900 <__swsetup_r>
 80053a0:	b170      	cbz	r0, 80053c0 <_vfiprintf_r+0x5c>
 80053a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80053a4:	07dc      	lsls	r4, r3, #31
 80053a6:	d504      	bpl.n	80053b2 <_vfiprintf_r+0x4e>
 80053a8:	f04f 30ff 	mov.w	r0, #4294967295
 80053ac:	b01d      	add	sp, #116	@ 0x74
 80053ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053b2:	89ab      	ldrh	r3, [r5, #12]
 80053b4:	0598      	lsls	r0, r3, #22
 80053b6:	d4f7      	bmi.n	80053a8 <_vfiprintf_r+0x44>
 80053b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80053ba:	f7ff fb83 	bl	8004ac4 <__retarget_lock_release_recursive>
 80053be:	e7f3      	b.n	80053a8 <_vfiprintf_r+0x44>
 80053c0:	2300      	movs	r3, #0
 80053c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80053c4:	2320      	movs	r3, #32
 80053c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80053ca:	2330      	movs	r3, #48	@ 0x30
 80053cc:	f04f 0901 	mov.w	r9, #1
 80053d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80053d4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005580 <_vfiprintf_r+0x21c>
 80053d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80053dc:	4623      	mov	r3, r4
 80053de:	469a      	mov	sl, r3
 80053e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053e4:	b10a      	cbz	r2, 80053ea <_vfiprintf_r+0x86>
 80053e6:	2a25      	cmp	r2, #37	@ 0x25
 80053e8:	d1f9      	bne.n	80053de <_vfiprintf_r+0x7a>
 80053ea:	ebba 0b04 	subs.w	fp, sl, r4
 80053ee:	d00b      	beq.n	8005408 <_vfiprintf_r+0xa4>
 80053f0:	465b      	mov	r3, fp
 80053f2:	4622      	mov	r2, r4
 80053f4:	4629      	mov	r1, r5
 80053f6:	4630      	mov	r0, r6
 80053f8:	f7ff ffa1 	bl	800533e <__sfputs_r>
 80053fc:	3001      	adds	r0, #1
 80053fe:	f000 80a7 	beq.w	8005550 <_vfiprintf_r+0x1ec>
 8005402:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005404:	445a      	add	r2, fp
 8005406:	9209      	str	r2, [sp, #36]	@ 0x24
 8005408:	f89a 3000 	ldrb.w	r3, [sl]
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 809f 	beq.w	8005550 <_vfiprintf_r+0x1ec>
 8005412:	2300      	movs	r3, #0
 8005414:	f04f 32ff 	mov.w	r2, #4294967295
 8005418:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800541c:	f10a 0a01 	add.w	sl, sl, #1
 8005420:	9304      	str	r3, [sp, #16]
 8005422:	9307      	str	r3, [sp, #28]
 8005424:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005428:	931a      	str	r3, [sp, #104]	@ 0x68
 800542a:	4654      	mov	r4, sl
 800542c:	2205      	movs	r2, #5
 800542e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005432:	4853      	ldr	r0, [pc, #332]	@ (8005580 <_vfiprintf_r+0x21c>)
 8005434:	f000 fcde 	bl	8005df4 <memchr>
 8005438:	9a04      	ldr	r2, [sp, #16]
 800543a:	b9d8      	cbnz	r0, 8005474 <_vfiprintf_r+0x110>
 800543c:	06d1      	lsls	r1, r2, #27
 800543e:	bf44      	itt	mi
 8005440:	2320      	movmi	r3, #32
 8005442:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005446:	0713      	lsls	r3, r2, #28
 8005448:	bf44      	itt	mi
 800544a:	232b      	movmi	r3, #43	@ 0x2b
 800544c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005450:	f89a 3000 	ldrb.w	r3, [sl]
 8005454:	2b2a      	cmp	r3, #42	@ 0x2a
 8005456:	d015      	beq.n	8005484 <_vfiprintf_r+0x120>
 8005458:	4654      	mov	r4, sl
 800545a:	2000      	movs	r0, #0
 800545c:	f04f 0c0a 	mov.w	ip, #10
 8005460:	9a07      	ldr	r2, [sp, #28]
 8005462:	4621      	mov	r1, r4
 8005464:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005468:	3b30      	subs	r3, #48	@ 0x30
 800546a:	2b09      	cmp	r3, #9
 800546c:	d94b      	bls.n	8005506 <_vfiprintf_r+0x1a2>
 800546e:	b1b0      	cbz	r0, 800549e <_vfiprintf_r+0x13a>
 8005470:	9207      	str	r2, [sp, #28]
 8005472:	e014      	b.n	800549e <_vfiprintf_r+0x13a>
 8005474:	eba0 0308 	sub.w	r3, r0, r8
 8005478:	fa09 f303 	lsl.w	r3, r9, r3
 800547c:	4313      	orrs	r3, r2
 800547e:	46a2      	mov	sl, r4
 8005480:	9304      	str	r3, [sp, #16]
 8005482:	e7d2      	b.n	800542a <_vfiprintf_r+0xc6>
 8005484:	9b03      	ldr	r3, [sp, #12]
 8005486:	1d19      	adds	r1, r3, #4
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	9103      	str	r1, [sp, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	bfbb      	ittet	lt
 8005490:	425b      	neglt	r3, r3
 8005492:	f042 0202 	orrlt.w	r2, r2, #2
 8005496:	9307      	strge	r3, [sp, #28]
 8005498:	9307      	strlt	r3, [sp, #28]
 800549a:	bfb8      	it	lt
 800549c:	9204      	strlt	r2, [sp, #16]
 800549e:	7823      	ldrb	r3, [r4, #0]
 80054a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80054a2:	d10a      	bne.n	80054ba <_vfiprintf_r+0x156>
 80054a4:	7863      	ldrb	r3, [r4, #1]
 80054a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80054a8:	d132      	bne.n	8005510 <_vfiprintf_r+0x1ac>
 80054aa:	9b03      	ldr	r3, [sp, #12]
 80054ac:	3402      	adds	r4, #2
 80054ae:	1d1a      	adds	r2, r3, #4
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	9203      	str	r2, [sp, #12]
 80054b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80054b8:	9305      	str	r3, [sp, #20]
 80054ba:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005584 <_vfiprintf_r+0x220>
 80054be:	2203      	movs	r2, #3
 80054c0:	4650      	mov	r0, sl
 80054c2:	7821      	ldrb	r1, [r4, #0]
 80054c4:	f000 fc96 	bl	8005df4 <memchr>
 80054c8:	b138      	cbz	r0, 80054da <_vfiprintf_r+0x176>
 80054ca:	2240      	movs	r2, #64	@ 0x40
 80054cc:	9b04      	ldr	r3, [sp, #16]
 80054ce:	eba0 000a 	sub.w	r0, r0, sl
 80054d2:	4082      	lsls	r2, r0
 80054d4:	4313      	orrs	r3, r2
 80054d6:	3401      	adds	r4, #1
 80054d8:	9304      	str	r3, [sp, #16]
 80054da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054de:	2206      	movs	r2, #6
 80054e0:	4829      	ldr	r0, [pc, #164]	@ (8005588 <_vfiprintf_r+0x224>)
 80054e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80054e6:	f000 fc85 	bl	8005df4 <memchr>
 80054ea:	2800      	cmp	r0, #0
 80054ec:	d03f      	beq.n	800556e <_vfiprintf_r+0x20a>
 80054ee:	4b27      	ldr	r3, [pc, #156]	@ (800558c <_vfiprintf_r+0x228>)
 80054f0:	bb1b      	cbnz	r3, 800553a <_vfiprintf_r+0x1d6>
 80054f2:	9b03      	ldr	r3, [sp, #12]
 80054f4:	3307      	adds	r3, #7
 80054f6:	f023 0307 	bic.w	r3, r3, #7
 80054fa:	3308      	adds	r3, #8
 80054fc:	9303      	str	r3, [sp, #12]
 80054fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005500:	443b      	add	r3, r7
 8005502:	9309      	str	r3, [sp, #36]	@ 0x24
 8005504:	e76a      	b.n	80053dc <_vfiprintf_r+0x78>
 8005506:	460c      	mov	r4, r1
 8005508:	2001      	movs	r0, #1
 800550a:	fb0c 3202 	mla	r2, ip, r2, r3
 800550e:	e7a8      	b.n	8005462 <_vfiprintf_r+0xfe>
 8005510:	2300      	movs	r3, #0
 8005512:	f04f 0c0a 	mov.w	ip, #10
 8005516:	4619      	mov	r1, r3
 8005518:	3401      	adds	r4, #1
 800551a:	9305      	str	r3, [sp, #20]
 800551c:	4620      	mov	r0, r4
 800551e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005522:	3a30      	subs	r2, #48	@ 0x30
 8005524:	2a09      	cmp	r2, #9
 8005526:	d903      	bls.n	8005530 <_vfiprintf_r+0x1cc>
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0c6      	beq.n	80054ba <_vfiprintf_r+0x156>
 800552c:	9105      	str	r1, [sp, #20]
 800552e:	e7c4      	b.n	80054ba <_vfiprintf_r+0x156>
 8005530:	4604      	mov	r4, r0
 8005532:	2301      	movs	r3, #1
 8005534:	fb0c 2101 	mla	r1, ip, r1, r2
 8005538:	e7f0      	b.n	800551c <_vfiprintf_r+0x1b8>
 800553a:	ab03      	add	r3, sp, #12
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	462a      	mov	r2, r5
 8005540:	4630      	mov	r0, r6
 8005542:	4b13      	ldr	r3, [pc, #76]	@ (8005590 <_vfiprintf_r+0x22c>)
 8005544:	a904      	add	r1, sp, #16
 8005546:	f3af 8000 	nop.w
 800554a:	4607      	mov	r7, r0
 800554c:	1c78      	adds	r0, r7, #1
 800554e:	d1d6      	bne.n	80054fe <_vfiprintf_r+0x19a>
 8005550:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005552:	07d9      	lsls	r1, r3, #31
 8005554:	d405      	bmi.n	8005562 <_vfiprintf_r+0x1fe>
 8005556:	89ab      	ldrh	r3, [r5, #12]
 8005558:	059a      	lsls	r2, r3, #22
 800555a:	d402      	bmi.n	8005562 <_vfiprintf_r+0x1fe>
 800555c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800555e:	f7ff fab1 	bl	8004ac4 <__retarget_lock_release_recursive>
 8005562:	89ab      	ldrh	r3, [r5, #12]
 8005564:	065b      	lsls	r3, r3, #25
 8005566:	f53f af1f 	bmi.w	80053a8 <_vfiprintf_r+0x44>
 800556a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800556c:	e71e      	b.n	80053ac <_vfiprintf_r+0x48>
 800556e:	ab03      	add	r3, sp, #12
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	462a      	mov	r2, r5
 8005574:	4630      	mov	r0, r6
 8005576:	4b06      	ldr	r3, [pc, #24]	@ (8005590 <_vfiprintf_r+0x22c>)
 8005578:	a904      	add	r1, sp, #16
 800557a:	f000 f87d 	bl	8005678 <_printf_i>
 800557e:	e7e4      	b.n	800554a <_vfiprintf_r+0x1e6>
 8005580:	08006c10 	.word	0x08006c10
 8005584:	08006c16 	.word	0x08006c16
 8005588:	08006c1a 	.word	0x08006c1a
 800558c:	00000000 	.word	0x00000000
 8005590:	0800533f 	.word	0x0800533f

08005594 <_printf_common>:
 8005594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005598:	4616      	mov	r6, r2
 800559a:	4698      	mov	r8, r3
 800559c:	688a      	ldr	r2, [r1, #8]
 800559e:	690b      	ldr	r3, [r1, #16]
 80055a0:	4607      	mov	r7, r0
 80055a2:	4293      	cmp	r3, r2
 80055a4:	bfb8      	it	lt
 80055a6:	4613      	movlt	r3, r2
 80055a8:	6033      	str	r3, [r6, #0]
 80055aa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80055ae:	460c      	mov	r4, r1
 80055b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055b4:	b10a      	cbz	r2, 80055ba <_printf_common+0x26>
 80055b6:	3301      	adds	r3, #1
 80055b8:	6033      	str	r3, [r6, #0]
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	0699      	lsls	r1, r3, #26
 80055be:	bf42      	ittt	mi
 80055c0:	6833      	ldrmi	r3, [r6, #0]
 80055c2:	3302      	addmi	r3, #2
 80055c4:	6033      	strmi	r3, [r6, #0]
 80055c6:	6825      	ldr	r5, [r4, #0]
 80055c8:	f015 0506 	ands.w	r5, r5, #6
 80055cc:	d106      	bne.n	80055dc <_printf_common+0x48>
 80055ce:	f104 0a19 	add.w	sl, r4, #25
 80055d2:	68e3      	ldr	r3, [r4, #12]
 80055d4:	6832      	ldr	r2, [r6, #0]
 80055d6:	1a9b      	subs	r3, r3, r2
 80055d8:	42ab      	cmp	r3, r5
 80055da:	dc2b      	bgt.n	8005634 <_printf_common+0xa0>
 80055dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80055e0:	6822      	ldr	r2, [r4, #0]
 80055e2:	3b00      	subs	r3, #0
 80055e4:	bf18      	it	ne
 80055e6:	2301      	movne	r3, #1
 80055e8:	0692      	lsls	r2, r2, #26
 80055ea:	d430      	bmi.n	800564e <_printf_common+0xba>
 80055ec:	4641      	mov	r1, r8
 80055ee:	4638      	mov	r0, r7
 80055f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80055f4:	47c8      	blx	r9
 80055f6:	3001      	adds	r0, #1
 80055f8:	d023      	beq.n	8005642 <_printf_common+0xae>
 80055fa:	6823      	ldr	r3, [r4, #0]
 80055fc:	6922      	ldr	r2, [r4, #16]
 80055fe:	f003 0306 	and.w	r3, r3, #6
 8005602:	2b04      	cmp	r3, #4
 8005604:	bf14      	ite	ne
 8005606:	2500      	movne	r5, #0
 8005608:	6833      	ldreq	r3, [r6, #0]
 800560a:	f04f 0600 	mov.w	r6, #0
 800560e:	bf08      	it	eq
 8005610:	68e5      	ldreq	r5, [r4, #12]
 8005612:	f104 041a 	add.w	r4, r4, #26
 8005616:	bf08      	it	eq
 8005618:	1aed      	subeq	r5, r5, r3
 800561a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800561e:	bf08      	it	eq
 8005620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005624:	4293      	cmp	r3, r2
 8005626:	bfc4      	itt	gt
 8005628:	1a9b      	subgt	r3, r3, r2
 800562a:	18ed      	addgt	r5, r5, r3
 800562c:	42b5      	cmp	r5, r6
 800562e:	d11a      	bne.n	8005666 <_printf_common+0xd2>
 8005630:	2000      	movs	r0, #0
 8005632:	e008      	b.n	8005646 <_printf_common+0xb2>
 8005634:	2301      	movs	r3, #1
 8005636:	4652      	mov	r2, sl
 8005638:	4641      	mov	r1, r8
 800563a:	4638      	mov	r0, r7
 800563c:	47c8      	blx	r9
 800563e:	3001      	adds	r0, #1
 8005640:	d103      	bne.n	800564a <_printf_common+0xb6>
 8005642:	f04f 30ff 	mov.w	r0, #4294967295
 8005646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800564a:	3501      	adds	r5, #1
 800564c:	e7c1      	b.n	80055d2 <_printf_common+0x3e>
 800564e:	2030      	movs	r0, #48	@ 0x30
 8005650:	18e1      	adds	r1, r4, r3
 8005652:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005656:	1c5a      	adds	r2, r3, #1
 8005658:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800565c:	4422      	add	r2, r4
 800565e:	3302      	adds	r3, #2
 8005660:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005664:	e7c2      	b.n	80055ec <_printf_common+0x58>
 8005666:	2301      	movs	r3, #1
 8005668:	4622      	mov	r2, r4
 800566a:	4641      	mov	r1, r8
 800566c:	4638      	mov	r0, r7
 800566e:	47c8      	blx	r9
 8005670:	3001      	adds	r0, #1
 8005672:	d0e6      	beq.n	8005642 <_printf_common+0xae>
 8005674:	3601      	adds	r6, #1
 8005676:	e7d9      	b.n	800562c <_printf_common+0x98>

08005678 <_printf_i>:
 8005678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800567c:	7e0f      	ldrb	r7, [r1, #24]
 800567e:	4691      	mov	r9, r2
 8005680:	2f78      	cmp	r7, #120	@ 0x78
 8005682:	4680      	mov	r8, r0
 8005684:	460c      	mov	r4, r1
 8005686:	469a      	mov	sl, r3
 8005688:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800568a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800568e:	d807      	bhi.n	80056a0 <_printf_i+0x28>
 8005690:	2f62      	cmp	r7, #98	@ 0x62
 8005692:	d80a      	bhi.n	80056aa <_printf_i+0x32>
 8005694:	2f00      	cmp	r7, #0
 8005696:	f000 80d3 	beq.w	8005840 <_printf_i+0x1c8>
 800569a:	2f58      	cmp	r7, #88	@ 0x58
 800569c:	f000 80ba 	beq.w	8005814 <_printf_i+0x19c>
 80056a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80056a8:	e03a      	b.n	8005720 <_printf_i+0xa8>
 80056aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80056ae:	2b15      	cmp	r3, #21
 80056b0:	d8f6      	bhi.n	80056a0 <_printf_i+0x28>
 80056b2:	a101      	add	r1, pc, #4	@ (adr r1, 80056b8 <_printf_i+0x40>)
 80056b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056b8:	08005711 	.word	0x08005711
 80056bc:	08005725 	.word	0x08005725
 80056c0:	080056a1 	.word	0x080056a1
 80056c4:	080056a1 	.word	0x080056a1
 80056c8:	080056a1 	.word	0x080056a1
 80056cc:	080056a1 	.word	0x080056a1
 80056d0:	08005725 	.word	0x08005725
 80056d4:	080056a1 	.word	0x080056a1
 80056d8:	080056a1 	.word	0x080056a1
 80056dc:	080056a1 	.word	0x080056a1
 80056e0:	080056a1 	.word	0x080056a1
 80056e4:	08005827 	.word	0x08005827
 80056e8:	0800574f 	.word	0x0800574f
 80056ec:	080057e1 	.word	0x080057e1
 80056f0:	080056a1 	.word	0x080056a1
 80056f4:	080056a1 	.word	0x080056a1
 80056f8:	08005849 	.word	0x08005849
 80056fc:	080056a1 	.word	0x080056a1
 8005700:	0800574f 	.word	0x0800574f
 8005704:	080056a1 	.word	0x080056a1
 8005708:	080056a1 	.word	0x080056a1
 800570c:	080057e9 	.word	0x080057e9
 8005710:	6833      	ldr	r3, [r6, #0]
 8005712:	1d1a      	adds	r2, r3, #4
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6032      	str	r2, [r6, #0]
 8005718:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800571c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005720:	2301      	movs	r3, #1
 8005722:	e09e      	b.n	8005862 <_printf_i+0x1ea>
 8005724:	6833      	ldr	r3, [r6, #0]
 8005726:	6820      	ldr	r0, [r4, #0]
 8005728:	1d19      	adds	r1, r3, #4
 800572a:	6031      	str	r1, [r6, #0]
 800572c:	0606      	lsls	r6, r0, #24
 800572e:	d501      	bpl.n	8005734 <_printf_i+0xbc>
 8005730:	681d      	ldr	r5, [r3, #0]
 8005732:	e003      	b.n	800573c <_printf_i+0xc4>
 8005734:	0645      	lsls	r5, r0, #25
 8005736:	d5fb      	bpl.n	8005730 <_printf_i+0xb8>
 8005738:	f9b3 5000 	ldrsh.w	r5, [r3]
 800573c:	2d00      	cmp	r5, #0
 800573e:	da03      	bge.n	8005748 <_printf_i+0xd0>
 8005740:	232d      	movs	r3, #45	@ 0x2d
 8005742:	426d      	negs	r5, r5
 8005744:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005748:	230a      	movs	r3, #10
 800574a:	4859      	ldr	r0, [pc, #356]	@ (80058b0 <_printf_i+0x238>)
 800574c:	e011      	b.n	8005772 <_printf_i+0xfa>
 800574e:	6821      	ldr	r1, [r4, #0]
 8005750:	6833      	ldr	r3, [r6, #0]
 8005752:	0608      	lsls	r0, r1, #24
 8005754:	f853 5b04 	ldr.w	r5, [r3], #4
 8005758:	d402      	bmi.n	8005760 <_printf_i+0xe8>
 800575a:	0649      	lsls	r1, r1, #25
 800575c:	bf48      	it	mi
 800575e:	b2ad      	uxthmi	r5, r5
 8005760:	2f6f      	cmp	r7, #111	@ 0x6f
 8005762:	6033      	str	r3, [r6, #0]
 8005764:	bf14      	ite	ne
 8005766:	230a      	movne	r3, #10
 8005768:	2308      	moveq	r3, #8
 800576a:	4851      	ldr	r0, [pc, #324]	@ (80058b0 <_printf_i+0x238>)
 800576c:	2100      	movs	r1, #0
 800576e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005772:	6866      	ldr	r6, [r4, #4]
 8005774:	2e00      	cmp	r6, #0
 8005776:	bfa8      	it	ge
 8005778:	6821      	ldrge	r1, [r4, #0]
 800577a:	60a6      	str	r6, [r4, #8]
 800577c:	bfa4      	itt	ge
 800577e:	f021 0104 	bicge.w	r1, r1, #4
 8005782:	6021      	strge	r1, [r4, #0]
 8005784:	b90d      	cbnz	r5, 800578a <_printf_i+0x112>
 8005786:	2e00      	cmp	r6, #0
 8005788:	d04b      	beq.n	8005822 <_printf_i+0x1aa>
 800578a:	4616      	mov	r6, r2
 800578c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005790:	fb03 5711 	mls	r7, r3, r1, r5
 8005794:	5dc7      	ldrb	r7, [r0, r7]
 8005796:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800579a:	462f      	mov	r7, r5
 800579c:	42bb      	cmp	r3, r7
 800579e:	460d      	mov	r5, r1
 80057a0:	d9f4      	bls.n	800578c <_printf_i+0x114>
 80057a2:	2b08      	cmp	r3, #8
 80057a4:	d10b      	bne.n	80057be <_printf_i+0x146>
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	07df      	lsls	r7, r3, #31
 80057aa:	d508      	bpl.n	80057be <_printf_i+0x146>
 80057ac:	6923      	ldr	r3, [r4, #16]
 80057ae:	6861      	ldr	r1, [r4, #4]
 80057b0:	4299      	cmp	r1, r3
 80057b2:	bfde      	ittt	le
 80057b4:	2330      	movle	r3, #48	@ 0x30
 80057b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057be:	1b92      	subs	r2, r2, r6
 80057c0:	6122      	str	r2, [r4, #16]
 80057c2:	464b      	mov	r3, r9
 80057c4:	4621      	mov	r1, r4
 80057c6:	4640      	mov	r0, r8
 80057c8:	f8cd a000 	str.w	sl, [sp]
 80057cc:	aa03      	add	r2, sp, #12
 80057ce:	f7ff fee1 	bl	8005594 <_printf_common>
 80057d2:	3001      	adds	r0, #1
 80057d4:	d14a      	bne.n	800586c <_printf_i+0x1f4>
 80057d6:	f04f 30ff 	mov.w	r0, #4294967295
 80057da:	b004      	add	sp, #16
 80057dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e0:	6823      	ldr	r3, [r4, #0]
 80057e2:	f043 0320 	orr.w	r3, r3, #32
 80057e6:	6023      	str	r3, [r4, #0]
 80057e8:	2778      	movs	r7, #120	@ 0x78
 80057ea:	4832      	ldr	r0, [pc, #200]	@ (80058b4 <_printf_i+0x23c>)
 80057ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80057f0:	6823      	ldr	r3, [r4, #0]
 80057f2:	6831      	ldr	r1, [r6, #0]
 80057f4:	061f      	lsls	r7, r3, #24
 80057f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80057fa:	d402      	bmi.n	8005802 <_printf_i+0x18a>
 80057fc:	065f      	lsls	r7, r3, #25
 80057fe:	bf48      	it	mi
 8005800:	b2ad      	uxthmi	r5, r5
 8005802:	6031      	str	r1, [r6, #0]
 8005804:	07d9      	lsls	r1, r3, #31
 8005806:	bf44      	itt	mi
 8005808:	f043 0320 	orrmi.w	r3, r3, #32
 800580c:	6023      	strmi	r3, [r4, #0]
 800580e:	b11d      	cbz	r5, 8005818 <_printf_i+0x1a0>
 8005810:	2310      	movs	r3, #16
 8005812:	e7ab      	b.n	800576c <_printf_i+0xf4>
 8005814:	4826      	ldr	r0, [pc, #152]	@ (80058b0 <_printf_i+0x238>)
 8005816:	e7e9      	b.n	80057ec <_printf_i+0x174>
 8005818:	6823      	ldr	r3, [r4, #0]
 800581a:	f023 0320 	bic.w	r3, r3, #32
 800581e:	6023      	str	r3, [r4, #0]
 8005820:	e7f6      	b.n	8005810 <_printf_i+0x198>
 8005822:	4616      	mov	r6, r2
 8005824:	e7bd      	b.n	80057a2 <_printf_i+0x12a>
 8005826:	6833      	ldr	r3, [r6, #0]
 8005828:	6825      	ldr	r5, [r4, #0]
 800582a:	1d18      	adds	r0, r3, #4
 800582c:	6961      	ldr	r1, [r4, #20]
 800582e:	6030      	str	r0, [r6, #0]
 8005830:	062e      	lsls	r6, r5, #24
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	d501      	bpl.n	800583a <_printf_i+0x1c2>
 8005836:	6019      	str	r1, [r3, #0]
 8005838:	e002      	b.n	8005840 <_printf_i+0x1c8>
 800583a:	0668      	lsls	r0, r5, #25
 800583c:	d5fb      	bpl.n	8005836 <_printf_i+0x1be>
 800583e:	8019      	strh	r1, [r3, #0]
 8005840:	2300      	movs	r3, #0
 8005842:	4616      	mov	r6, r2
 8005844:	6123      	str	r3, [r4, #16]
 8005846:	e7bc      	b.n	80057c2 <_printf_i+0x14a>
 8005848:	6833      	ldr	r3, [r6, #0]
 800584a:	2100      	movs	r1, #0
 800584c:	1d1a      	adds	r2, r3, #4
 800584e:	6032      	str	r2, [r6, #0]
 8005850:	681e      	ldr	r6, [r3, #0]
 8005852:	6862      	ldr	r2, [r4, #4]
 8005854:	4630      	mov	r0, r6
 8005856:	f000 facd 	bl	8005df4 <memchr>
 800585a:	b108      	cbz	r0, 8005860 <_printf_i+0x1e8>
 800585c:	1b80      	subs	r0, r0, r6
 800585e:	6060      	str	r0, [r4, #4]
 8005860:	6863      	ldr	r3, [r4, #4]
 8005862:	6123      	str	r3, [r4, #16]
 8005864:	2300      	movs	r3, #0
 8005866:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800586a:	e7aa      	b.n	80057c2 <_printf_i+0x14a>
 800586c:	4632      	mov	r2, r6
 800586e:	4649      	mov	r1, r9
 8005870:	4640      	mov	r0, r8
 8005872:	6923      	ldr	r3, [r4, #16]
 8005874:	47d0      	blx	sl
 8005876:	3001      	adds	r0, #1
 8005878:	d0ad      	beq.n	80057d6 <_printf_i+0x15e>
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	079b      	lsls	r3, r3, #30
 800587e:	d413      	bmi.n	80058a8 <_printf_i+0x230>
 8005880:	68e0      	ldr	r0, [r4, #12]
 8005882:	9b03      	ldr	r3, [sp, #12]
 8005884:	4298      	cmp	r0, r3
 8005886:	bfb8      	it	lt
 8005888:	4618      	movlt	r0, r3
 800588a:	e7a6      	b.n	80057da <_printf_i+0x162>
 800588c:	2301      	movs	r3, #1
 800588e:	4632      	mov	r2, r6
 8005890:	4649      	mov	r1, r9
 8005892:	4640      	mov	r0, r8
 8005894:	47d0      	blx	sl
 8005896:	3001      	adds	r0, #1
 8005898:	d09d      	beq.n	80057d6 <_printf_i+0x15e>
 800589a:	3501      	adds	r5, #1
 800589c:	68e3      	ldr	r3, [r4, #12]
 800589e:	9903      	ldr	r1, [sp, #12]
 80058a0:	1a5b      	subs	r3, r3, r1
 80058a2:	42ab      	cmp	r3, r5
 80058a4:	dcf2      	bgt.n	800588c <_printf_i+0x214>
 80058a6:	e7eb      	b.n	8005880 <_printf_i+0x208>
 80058a8:	2500      	movs	r5, #0
 80058aa:	f104 0619 	add.w	r6, r4, #25
 80058ae:	e7f5      	b.n	800589c <_printf_i+0x224>
 80058b0:	08006c21 	.word	0x08006c21
 80058b4:	08006c32 	.word	0x08006c32

080058b8 <_scanf_chars>:
 80058b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058bc:	4615      	mov	r5, r2
 80058be:	688a      	ldr	r2, [r1, #8]
 80058c0:	4680      	mov	r8, r0
 80058c2:	460c      	mov	r4, r1
 80058c4:	b932      	cbnz	r2, 80058d4 <_scanf_chars+0x1c>
 80058c6:	698a      	ldr	r2, [r1, #24]
 80058c8:	2a00      	cmp	r2, #0
 80058ca:	bf14      	ite	ne
 80058cc:	f04f 32ff 	movne.w	r2, #4294967295
 80058d0:	2201      	moveq	r2, #1
 80058d2:	608a      	str	r2, [r1, #8]
 80058d4:	2700      	movs	r7, #0
 80058d6:	6822      	ldr	r2, [r4, #0]
 80058d8:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8005968 <_scanf_chars+0xb0>
 80058dc:	06d1      	lsls	r1, r2, #27
 80058de:	bf5f      	itttt	pl
 80058e0:	681a      	ldrpl	r2, [r3, #0]
 80058e2:	1d11      	addpl	r1, r2, #4
 80058e4:	6019      	strpl	r1, [r3, #0]
 80058e6:	6816      	ldrpl	r6, [r2, #0]
 80058e8:	69a0      	ldr	r0, [r4, #24]
 80058ea:	b188      	cbz	r0, 8005910 <_scanf_chars+0x58>
 80058ec:	2801      	cmp	r0, #1
 80058ee:	d107      	bne.n	8005900 <_scanf_chars+0x48>
 80058f0:	682b      	ldr	r3, [r5, #0]
 80058f2:	781a      	ldrb	r2, [r3, #0]
 80058f4:	6963      	ldr	r3, [r4, #20]
 80058f6:	5c9b      	ldrb	r3, [r3, r2]
 80058f8:	b953      	cbnz	r3, 8005910 <_scanf_chars+0x58>
 80058fa:	2f00      	cmp	r7, #0
 80058fc:	d031      	beq.n	8005962 <_scanf_chars+0xaa>
 80058fe:	e022      	b.n	8005946 <_scanf_chars+0x8e>
 8005900:	2802      	cmp	r0, #2
 8005902:	d120      	bne.n	8005946 <_scanf_chars+0x8e>
 8005904:	682b      	ldr	r3, [r5, #0]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	f819 3003 	ldrb.w	r3, [r9, r3]
 800590c:	071b      	lsls	r3, r3, #28
 800590e:	d41a      	bmi.n	8005946 <_scanf_chars+0x8e>
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	3701      	adds	r7, #1
 8005914:	06da      	lsls	r2, r3, #27
 8005916:	bf5e      	ittt	pl
 8005918:	682b      	ldrpl	r3, [r5, #0]
 800591a:	781b      	ldrbpl	r3, [r3, #0]
 800591c:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005920:	682a      	ldr	r2, [r5, #0]
 8005922:	686b      	ldr	r3, [r5, #4]
 8005924:	3201      	adds	r2, #1
 8005926:	602a      	str	r2, [r5, #0]
 8005928:	68a2      	ldr	r2, [r4, #8]
 800592a:	3b01      	subs	r3, #1
 800592c:	3a01      	subs	r2, #1
 800592e:	606b      	str	r3, [r5, #4]
 8005930:	60a2      	str	r2, [r4, #8]
 8005932:	b142      	cbz	r2, 8005946 <_scanf_chars+0x8e>
 8005934:	2b00      	cmp	r3, #0
 8005936:	dcd7      	bgt.n	80058e8 <_scanf_chars+0x30>
 8005938:	4629      	mov	r1, r5
 800593a:	4640      	mov	r0, r8
 800593c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005940:	4798      	blx	r3
 8005942:	2800      	cmp	r0, #0
 8005944:	d0d0      	beq.n	80058e8 <_scanf_chars+0x30>
 8005946:	6823      	ldr	r3, [r4, #0]
 8005948:	f013 0310 	ands.w	r3, r3, #16
 800594c:	d105      	bne.n	800595a <_scanf_chars+0xa2>
 800594e:	68e2      	ldr	r2, [r4, #12]
 8005950:	3201      	adds	r2, #1
 8005952:	60e2      	str	r2, [r4, #12]
 8005954:	69a2      	ldr	r2, [r4, #24]
 8005956:	b102      	cbz	r2, 800595a <_scanf_chars+0xa2>
 8005958:	7033      	strb	r3, [r6, #0]
 800595a:	2000      	movs	r0, #0
 800595c:	6923      	ldr	r3, [r4, #16]
 800595e:	443b      	add	r3, r7
 8005960:	6123      	str	r3, [r4, #16]
 8005962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005966:	bf00      	nop
 8005968:	08006c5f 	.word	0x08006c5f

0800596c <_scanf_i>:
 800596c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005970:	460c      	mov	r4, r1
 8005972:	4698      	mov	r8, r3
 8005974:	4b72      	ldr	r3, [pc, #456]	@ (8005b40 <_scanf_i+0x1d4>)
 8005976:	b087      	sub	sp, #28
 8005978:	4682      	mov	sl, r0
 800597a:	4616      	mov	r6, r2
 800597c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005980:	ab03      	add	r3, sp, #12
 8005982:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005986:	4b6f      	ldr	r3, [pc, #444]	@ (8005b44 <_scanf_i+0x1d8>)
 8005988:	69a1      	ldr	r1, [r4, #24]
 800598a:	4a6f      	ldr	r2, [pc, #444]	@ (8005b48 <_scanf_i+0x1dc>)
 800598c:	4627      	mov	r7, r4
 800598e:	2903      	cmp	r1, #3
 8005990:	bf08      	it	eq
 8005992:	461a      	moveq	r2, r3
 8005994:	68a3      	ldr	r3, [r4, #8]
 8005996:	9201      	str	r2, [sp, #4]
 8005998:	1e5a      	subs	r2, r3, #1
 800599a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800599e:	bf81      	itttt	hi
 80059a0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80059a4:	eb03 0905 	addhi.w	r9, r3, r5
 80059a8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80059ac:	60a3      	strhi	r3, [r4, #8]
 80059ae:	f857 3b1c 	ldr.w	r3, [r7], #28
 80059b2:	bf98      	it	ls
 80059b4:	f04f 0900 	movls.w	r9, #0
 80059b8:	463d      	mov	r5, r7
 80059ba:	f04f 0b00 	mov.w	fp, #0
 80059be:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80059c2:	6023      	str	r3, [r4, #0]
 80059c4:	6831      	ldr	r1, [r6, #0]
 80059c6:	ab03      	add	r3, sp, #12
 80059c8:	2202      	movs	r2, #2
 80059ca:	7809      	ldrb	r1, [r1, #0]
 80059cc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80059d0:	f000 fa10 	bl	8005df4 <memchr>
 80059d4:	b328      	cbz	r0, 8005a22 <_scanf_i+0xb6>
 80059d6:	f1bb 0f01 	cmp.w	fp, #1
 80059da:	d159      	bne.n	8005a90 <_scanf_i+0x124>
 80059dc:	6862      	ldr	r2, [r4, #4]
 80059de:	b92a      	cbnz	r2, 80059ec <_scanf_i+0x80>
 80059e0:	2108      	movs	r1, #8
 80059e2:	6822      	ldr	r2, [r4, #0]
 80059e4:	6061      	str	r1, [r4, #4]
 80059e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059ea:	6022      	str	r2, [r4, #0]
 80059ec:	6822      	ldr	r2, [r4, #0]
 80059ee:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80059f2:	6022      	str	r2, [r4, #0]
 80059f4:	68a2      	ldr	r2, [r4, #8]
 80059f6:	1e51      	subs	r1, r2, #1
 80059f8:	60a1      	str	r1, [r4, #8]
 80059fa:	b192      	cbz	r2, 8005a22 <_scanf_i+0xb6>
 80059fc:	6832      	ldr	r2, [r6, #0]
 80059fe:	1c51      	adds	r1, r2, #1
 8005a00:	6031      	str	r1, [r6, #0]
 8005a02:	7812      	ldrb	r2, [r2, #0]
 8005a04:	f805 2b01 	strb.w	r2, [r5], #1
 8005a08:	6872      	ldr	r2, [r6, #4]
 8005a0a:	3a01      	subs	r2, #1
 8005a0c:	2a00      	cmp	r2, #0
 8005a0e:	6072      	str	r2, [r6, #4]
 8005a10:	dc07      	bgt.n	8005a22 <_scanf_i+0xb6>
 8005a12:	4631      	mov	r1, r6
 8005a14:	4650      	mov	r0, sl
 8005a16:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8005a1a:	4790      	blx	r2
 8005a1c:	2800      	cmp	r0, #0
 8005a1e:	f040 8085 	bne.w	8005b2c <_scanf_i+0x1c0>
 8005a22:	f10b 0b01 	add.w	fp, fp, #1
 8005a26:	f1bb 0f03 	cmp.w	fp, #3
 8005a2a:	d1cb      	bne.n	80059c4 <_scanf_i+0x58>
 8005a2c:	6863      	ldr	r3, [r4, #4]
 8005a2e:	b90b      	cbnz	r3, 8005a34 <_scanf_i+0xc8>
 8005a30:	230a      	movs	r3, #10
 8005a32:	6063      	str	r3, [r4, #4]
 8005a34:	6863      	ldr	r3, [r4, #4]
 8005a36:	4945      	ldr	r1, [pc, #276]	@ (8005b4c <_scanf_i+0x1e0>)
 8005a38:	6960      	ldr	r0, [r4, #20]
 8005a3a:	1ac9      	subs	r1, r1, r3
 8005a3c:	f000 f91d 	bl	8005c7a <__sccl>
 8005a40:	f04f 0b00 	mov.w	fp, #0
 8005a44:	68a3      	ldr	r3, [r4, #8]
 8005a46:	6822      	ldr	r2, [r4, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d03d      	beq.n	8005ac8 <_scanf_i+0x15c>
 8005a4c:	6831      	ldr	r1, [r6, #0]
 8005a4e:	6960      	ldr	r0, [r4, #20]
 8005a50:	f891 c000 	ldrb.w	ip, [r1]
 8005a54:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005a58:	2800      	cmp	r0, #0
 8005a5a:	d035      	beq.n	8005ac8 <_scanf_i+0x15c>
 8005a5c:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8005a60:	d124      	bne.n	8005aac <_scanf_i+0x140>
 8005a62:	0510      	lsls	r0, r2, #20
 8005a64:	d522      	bpl.n	8005aac <_scanf_i+0x140>
 8005a66:	f10b 0b01 	add.w	fp, fp, #1
 8005a6a:	f1b9 0f00 	cmp.w	r9, #0
 8005a6e:	d003      	beq.n	8005a78 <_scanf_i+0x10c>
 8005a70:	3301      	adds	r3, #1
 8005a72:	f109 39ff 	add.w	r9, r9, #4294967295
 8005a76:	60a3      	str	r3, [r4, #8]
 8005a78:	6873      	ldr	r3, [r6, #4]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	6073      	str	r3, [r6, #4]
 8005a80:	dd1b      	ble.n	8005aba <_scanf_i+0x14e>
 8005a82:	6833      	ldr	r3, [r6, #0]
 8005a84:	3301      	adds	r3, #1
 8005a86:	6033      	str	r3, [r6, #0]
 8005a88:	68a3      	ldr	r3, [r4, #8]
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	60a3      	str	r3, [r4, #8]
 8005a8e:	e7d9      	b.n	8005a44 <_scanf_i+0xd8>
 8005a90:	f1bb 0f02 	cmp.w	fp, #2
 8005a94:	d1ae      	bne.n	80059f4 <_scanf_i+0x88>
 8005a96:	6822      	ldr	r2, [r4, #0]
 8005a98:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8005a9c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8005aa0:	d1bf      	bne.n	8005a22 <_scanf_i+0xb6>
 8005aa2:	2110      	movs	r1, #16
 8005aa4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005aa8:	6061      	str	r1, [r4, #4]
 8005aaa:	e7a2      	b.n	80059f2 <_scanf_i+0x86>
 8005aac:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8005ab0:	6022      	str	r2, [r4, #0]
 8005ab2:	780b      	ldrb	r3, [r1, #0]
 8005ab4:	f805 3b01 	strb.w	r3, [r5], #1
 8005ab8:	e7de      	b.n	8005a78 <_scanf_i+0x10c>
 8005aba:	4631      	mov	r1, r6
 8005abc:	4650      	mov	r0, sl
 8005abe:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005ac2:	4798      	blx	r3
 8005ac4:	2800      	cmp	r0, #0
 8005ac6:	d0df      	beq.n	8005a88 <_scanf_i+0x11c>
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	05d9      	lsls	r1, r3, #23
 8005acc:	d50d      	bpl.n	8005aea <_scanf_i+0x17e>
 8005ace:	42bd      	cmp	r5, r7
 8005ad0:	d909      	bls.n	8005ae6 <_scanf_i+0x17a>
 8005ad2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005ad6:	4632      	mov	r2, r6
 8005ad8:	4650      	mov	r0, sl
 8005ada:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005ade:	f105 39ff 	add.w	r9, r5, #4294967295
 8005ae2:	4798      	blx	r3
 8005ae4:	464d      	mov	r5, r9
 8005ae6:	42bd      	cmp	r5, r7
 8005ae8:	d028      	beq.n	8005b3c <_scanf_i+0x1d0>
 8005aea:	6822      	ldr	r2, [r4, #0]
 8005aec:	f012 0210 	ands.w	r2, r2, #16
 8005af0:	d113      	bne.n	8005b1a <_scanf_i+0x1ae>
 8005af2:	702a      	strb	r2, [r5, #0]
 8005af4:	4639      	mov	r1, r7
 8005af6:	6863      	ldr	r3, [r4, #4]
 8005af8:	4650      	mov	r0, sl
 8005afa:	9e01      	ldr	r6, [sp, #4]
 8005afc:	47b0      	blx	r6
 8005afe:	f8d8 3000 	ldr.w	r3, [r8]
 8005b02:	6821      	ldr	r1, [r4, #0]
 8005b04:	1d1a      	adds	r2, r3, #4
 8005b06:	f8c8 2000 	str.w	r2, [r8]
 8005b0a:	f011 0f20 	tst.w	r1, #32
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	d00f      	beq.n	8005b32 <_scanf_i+0x1c6>
 8005b12:	6018      	str	r0, [r3, #0]
 8005b14:	68e3      	ldr	r3, [r4, #12]
 8005b16:	3301      	adds	r3, #1
 8005b18:	60e3      	str	r3, [r4, #12]
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	6923      	ldr	r3, [r4, #16]
 8005b1e:	1bed      	subs	r5, r5, r7
 8005b20:	445d      	add	r5, fp
 8005b22:	442b      	add	r3, r5
 8005b24:	6123      	str	r3, [r4, #16]
 8005b26:	b007      	add	sp, #28
 8005b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b2c:	f04f 0b00 	mov.w	fp, #0
 8005b30:	e7ca      	b.n	8005ac8 <_scanf_i+0x15c>
 8005b32:	07ca      	lsls	r2, r1, #31
 8005b34:	bf4c      	ite	mi
 8005b36:	8018      	strhmi	r0, [r3, #0]
 8005b38:	6018      	strpl	r0, [r3, #0]
 8005b3a:	e7eb      	b.n	8005b14 <_scanf_i+0x1a8>
 8005b3c:	2001      	movs	r0, #1
 8005b3e:	e7f2      	b.n	8005b26 <_scanf_i+0x1ba>
 8005b40:	08006bcc 	.word	0x08006bcc
 8005b44:	08005f61 	.word	0x08005f61
 8005b48:	08006041 	.word	0x08006041
 8005b4c:	08006c53 	.word	0x08006c53

08005b50 <__swhatbuf_r>:
 8005b50:	b570      	push	{r4, r5, r6, lr}
 8005b52:	460c      	mov	r4, r1
 8005b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b58:	4615      	mov	r5, r2
 8005b5a:	2900      	cmp	r1, #0
 8005b5c:	461e      	mov	r6, r3
 8005b5e:	b096      	sub	sp, #88	@ 0x58
 8005b60:	da0c      	bge.n	8005b7c <__swhatbuf_r+0x2c>
 8005b62:	89a3      	ldrh	r3, [r4, #12]
 8005b64:	2100      	movs	r1, #0
 8005b66:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005b6a:	bf14      	ite	ne
 8005b6c:	2340      	movne	r3, #64	@ 0x40
 8005b6e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005b72:	2000      	movs	r0, #0
 8005b74:	6031      	str	r1, [r6, #0]
 8005b76:	602b      	str	r3, [r5, #0]
 8005b78:	b016      	add	sp, #88	@ 0x58
 8005b7a:	bd70      	pop	{r4, r5, r6, pc}
 8005b7c:	466a      	mov	r2, sp
 8005b7e:	f000 f907 	bl	8005d90 <_fstat_r>
 8005b82:	2800      	cmp	r0, #0
 8005b84:	dbed      	blt.n	8005b62 <__swhatbuf_r+0x12>
 8005b86:	9901      	ldr	r1, [sp, #4]
 8005b88:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005b8c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005b90:	4259      	negs	r1, r3
 8005b92:	4159      	adcs	r1, r3
 8005b94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b98:	e7eb      	b.n	8005b72 <__swhatbuf_r+0x22>

08005b9a <__smakebuf_r>:
 8005b9a:	898b      	ldrh	r3, [r1, #12]
 8005b9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b9e:	079d      	lsls	r5, r3, #30
 8005ba0:	4606      	mov	r6, r0
 8005ba2:	460c      	mov	r4, r1
 8005ba4:	d507      	bpl.n	8005bb6 <__smakebuf_r+0x1c>
 8005ba6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005baa:	6023      	str	r3, [r4, #0]
 8005bac:	6123      	str	r3, [r4, #16]
 8005bae:	2301      	movs	r3, #1
 8005bb0:	6163      	str	r3, [r4, #20]
 8005bb2:	b003      	add	sp, #12
 8005bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bb6:	466a      	mov	r2, sp
 8005bb8:	ab01      	add	r3, sp, #4
 8005bba:	f7ff ffc9 	bl	8005b50 <__swhatbuf_r>
 8005bbe:	9f00      	ldr	r7, [sp, #0]
 8005bc0:	4605      	mov	r5, r0
 8005bc2:	4639      	mov	r1, r7
 8005bc4:	4630      	mov	r0, r6
 8005bc6:	f7fe fff7 	bl	8004bb8 <_malloc_r>
 8005bca:	b948      	cbnz	r0, 8005be0 <__smakebuf_r+0x46>
 8005bcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bd0:	059a      	lsls	r2, r3, #22
 8005bd2:	d4ee      	bmi.n	8005bb2 <__smakebuf_r+0x18>
 8005bd4:	f023 0303 	bic.w	r3, r3, #3
 8005bd8:	f043 0302 	orr.w	r3, r3, #2
 8005bdc:	81a3      	strh	r3, [r4, #12]
 8005bde:	e7e2      	b.n	8005ba6 <__smakebuf_r+0xc>
 8005be0:	89a3      	ldrh	r3, [r4, #12]
 8005be2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005be6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bea:	81a3      	strh	r3, [r4, #12]
 8005bec:	9b01      	ldr	r3, [sp, #4]
 8005bee:	6020      	str	r0, [r4, #0]
 8005bf0:	b15b      	cbz	r3, 8005c0a <__smakebuf_r+0x70>
 8005bf2:	4630      	mov	r0, r6
 8005bf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bf8:	f000 f8dc 	bl	8005db4 <_isatty_r>
 8005bfc:	b128      	cbz	r0, 8005c0a <__smakebuf_r+0x70>
 8005bfe:	89a3      	ldrh	r3, [r4, #12]
 8005c00:	f023 0303 	bic.w	r3, r3, #3
 8005c04:	f043 0301 	orr.w	r3, r3, #1
 8005c08:	81a3      	strh	r3, [r4, #12]
 8005c0a:	89a3      	ldrh	r3, [r4, #12]
 8005c0c:	431d      	orrs	r5, r3
 8005c0e:	81a5      	strh	r5, [r4, #12]
 8005c10:	e7cf      	b.n	8005bb2 <__smakebuf_r+0x18>

08005c12 <_putc_r>:
 8005c12:	b570      	push	{r4, r5, r6, lr}
 8005c14:	460d      	mov	r5, r1
 8005c16:	4614      	mov	r4, r2
 8005c18:	4606      	mov	r6, r0
 8005c1a:	b118      	cbz	r0, 8005c24 <_putc_r+0x12>
 8005c1c:	6a03      	ldr	r3, [r0, #32]
 8005c1e:	b90b      	cbnz	r3, 8005c24 <_putc_r+0x12>
 8005c20:	f7fe fcde 	bl	80045e0 <__sinit>
 8005c24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c26:	07d8      	lsls	r0, r3, #31
 8005c28:	d405      	bmi.n	8005c36 <_putc_r+0x24>
 8005c2a:	89a3      	ldrh	r3, [r4, #12]
 8005c2c:	0599      	lsls	r1, r3, #22
 8005c2e:	d402      	bmi.n	8005c36 <_putc_r+0x24>
 8005c30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c32:	f7fe ff46 	bl	8004ac2 <__retarget_lock_acquire_recursive>
 8005c36:	68a3      	ldr	r3, [r4, #8]
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	60a3      	str	r3, [r4, #8]
 8005c3e:	da05      	bge.n	8005c4c <_putc_r+0x3a>
 8005c40:	69a2      	ldr	r2, [r4, #24]
 8005c42:	4293      	cmp	r3, r2
 8005c44:	db12      	blt.n	8005c6c <_putc_r+0x5a>
 8005c46:	b2eb      	uxtb	r3, r5
 8005c48:	2b0a      	cmp	r3, #10
 8005c4a:	d00f      	beq.n	8005c6c <_putc_r+0x5a>
 8005c4c:	6823      	ldr	r3, [r4, #0]
 8005c4e:	1c5a      	adds	r2, r3, #1
 8005c50:	6022      	str	r2, [r4, #0]
 8005c52:	701d      	strb	r5, [r3, #0]
 8005c54:	b2ed      	uxtb	r5, r5
 8005c56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c58:	07da      	lsls	r2, r3, #31
 8005c5a:	d405      	bmi.n	8005c68 <_putc_r+0x56>
 8005c5c:	89a3      	ldrh	r3, [r4, #12]
 8005c5e:	059b      	lsls	r3, r3, #22
 8005c60:	d402      	bmi.n	8005c68 <_putc_r+0x56>
 8005c62:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c64:	f7fe ff2e 	bl	8004ac4 <__retarget_lock_release_recursive>
 8005c68:	4628      	mov	r0, r5
 8005c6a:	bd70      	pop	{r4, r5, r6, pc}
 8005c6c:	4629      	mov	r1, r5
 8005c6e:	4622      	mov	r2, r4
 8005c70:	4630      	mov	r0, r6
 8005c72:	f7fe fe06 	bl	8004882 <__swbuf_r>
 8005c76:	4605      	mov	r5, r0
 8005c78:	e7ed      	b.n	8005c56 <_putc_r+0x44>

08005c7a <__sccl>:
 8005c7a:	b570      	push	{r4, r5, r6, lr}
 8005c7c:	780b      	ldrb	r3, [r1, #0]
 8005c7e:	4604      	mov	r4, r0
 8005c80:	2b5e      	cmp	r3, #94	@ 0x5e
 8005c82:	bf0b      	itete	eq
 8005c84:	784b      	ldrbeq	r3, [r1, #1]
 8005c86:	1c4a      	addne	r2, r1, #1
 8005c88:	1c8a      	addeq	r2, r1, #2
 8005c8a:	2100      	movne	r1, #0
 8005c8c:	bf08      	it	eq
 8005c8e:	2101      	moveq	r1, #1
 8005c90:	3801      	subs	r0, #1
 8005c92:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8005c96:	f800 1f01 	strb.w	r1, [r0, #1]!
 8005c9a:	42a8      	cmp	r0, r5
 8005c9c:	d1fb      	bne.n	8005c96 <__sccl+0x1c>
 8005c9e:	b90b      	cbnz	r3, 8005ca4 <__sccl+0x2a>
 8005ca0:	1e50      	subs	r0, r2, #1
 8005ca2:	bd70      	pop	{r4, r5, r6, pc}
 8005ca4:	f081 0101 	eor.w	r1, r1, #1
 8005ca8:	4610      	mov	r0, r2
 8005caa:	54e1      	strb	r1, [r4, r3]
 8005cac:	4602      	mov	r2, r0
 8005cae:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005cb2:	2d2d      	cmp	r5, #45	@ 0x2d
 8005cb4:	d005      	beq.n	8005cc2 <__sccl+0x48>
 8005cb6:	2d5d      	cmp	r5, #93	@ 0x5d
 8005cb8:	d016      	beq.n	8005ce8 <__sccl+0x6e>
 8005cba:	2d00      	cmp	r5, #0
 8005cbc:	d0f1      	beq.n	8005ca2 <__sccl+0x28>
 8005cbe:	462b      	mov	r3, r5
 8005cc0:	e7f2      	b.n	8005ca8 <__sccl+0x2e>
 8005cc2:	7846      	ldrb	r6, [r0, #1]
 8005cc4:	2e5d      	cmp	r6, #93	@ 0x5d
 8005cc6:	d0fa      	beq.n	8005cbe <__sccl+0x44>
 8005cc8:	42b3      	cmp	r3, r6
 8005cca:	dcf8      	bgt.n	8005cbe <__sccl+0x44>
 8005ccc:	461a      	mov	r2, r3
 8005cce:	3002      	adds	r0, #2
 8005cd0:	3201      	adds	r2, #1
 8005cd2:	4296      	cmp	r6, r2
 8005cd4:	54a1      	strb	r1, [r4, r2]
 8005cd6:	dcfb      	bgt.n	8005cd0 <__sccl+0x56>
 8005cd8:	1af2      	subs	r2, r6, r3
 8005cda:	3a01      	subs	r2, #1
 8005cdc:	42b3      	cmp	r3, r6
 8005cde:	bfa8      	it	ge
 8005ce0:	2200      	movge	r2, #0
 8005ce2:	1c5d      	adds	r5, r3, #1
 8005ce4:	18ab      	adds	r3, r5, r2
 8005ce6:	e7e1      	b.n	8005cac <__sccl+0x32>
 8005ce8:	4610      	mov	r0, r2
 8005cea:	e7da      	b.n	8005ca2 <__sccl+0x28>

08005cec <__submore>:
 8005cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cf0:	460c      	mov	r4, r1
 8005cf2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005cf4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005cf8:	4299      	cmp	r1, r3
 8005cfa:	d11b      	bne.n	8005d34 <__submore+0x48>
 8005cfc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005d00:	f7fe ff5a 	bl	8004bb8 <_malloc_r>
 8005d04:	b918      	cbnz	r0, 8005d0e <__submore+0x22>
 8005d06:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d12:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005d14:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8005d18:	6360      	str	r0, [r4, #52]	@ 0x34
 8005d1a:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8005d1e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005d22:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8005d26:	7043      	strb	r3, [r0, #1]
 8005d28:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005d2c:	7003      	strb	r3, [r0, #0]
 8005d2e:	6020      	str	r0, [r4, #0]
 8005d30:	2000      	movs	r0, #0
 8005d32:	e7ea      	b.n	8005d0a <__submore+0x1e>
 8005d34:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8005d36:	0077      	lsls	r7, r6, #1
 8005d38:	463a      	mov	r2, r7
 8005d3a:	f000 f869 	bl	8005e10 <_realloc_r>
 8005d3e:	4605      	mov	r5, r0
 8005d40:	2800      	cmp	r0, #0
 8005d42:	d0e0      	beq.n	8005d06 <__submore+0x1a>
 8005d44:	eb00 0806 	add.w	r8, r0, r6
 8005d48:	4601      	mov	r1, r0
 8005d4a:	4632      	mov	r2, r6
 8005d4c:	4640      	mov	r0, r8
 8005d4e:	f7fe feba 	bl	8004ac6 <memcpy>
 8005d52:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8005d56:	f8c4 8000 	str.w	r8, [r4]
 8005d5a:	e7e9      	b.n	8005d30 <__submore+0x44>

08005d5c <memmove>:
 8005d5c:	4288      	cmp	r0, r1
 8005d5e:	b510      	push	{r4, lr}
 8005d60:	eb01 0402 	add.w	r4, r1, r2
 8005d64:	d902      	bls.n	8005d6c <memmove+0x10>
 8005d66:	4284      	cmp	r4, r0
 8005d68:	4623      	mov	r3, r4
 8005d6a:	d807      	bhi.n	8005d7c <memmove+0x20>
 8005d6c:	1e43      	subs	r3, r0, #1
 8005d6e:	42a1      	cmp	r1, r4
 8005d70:	d008      	beq.n	8005d84 <memmove+0x28>
 8005d72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d7a:	e7f8      	b.n	8005d6e <memmove+0x12>
 8005d7c:	4601      	mov	r1, r0
 8005d7e:	4402      	add	r2, r0
 8005d80:	428a      	cmp	r2, r1
 8005d82:	d100      	bne.n	8005d86 <memmove+0x2a>
 8005d84:	bd10      	pop	{r4, pc}
 8005d86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d8e:	e7f7      	b.n	8005d80 <memmove+0x24>

08005d90 <_fstat_r>:
 8005d90:	b538      	push	{r3, r4, r5, lr}
 8005d92:	2300      	movs	r3, #0
 8005d94:	4d06      	ldr	r5, [pc, #24]	@ (8005db0 <_fstat_r+0x20>)
 8005d96:	4604      	mov	r4, r0
 8005d98:	4608      	mov	r0, r1
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	602b      	str	r3, [r5, #0]
 8005d9e:	f7fd f9ed 	bl	800317c <_fstat>
 8005da2:	1c43      	adds	r3, r0, #1
 8005da4:	d102      	bne.n	8005dac <_fstat_r+0x1c>
 8005da6:	682b      	ldr	r3, [r5, #0]
 8005da8:	b103      	cbz	r3, 8005dac <_fstat_r+0x1c>
 8005daa:	6023      	str	r3, [r4, #0]
 8005dac:	bd38      	pop	{r3, r4, r5, pc}
 8005dae:	bf00      	nop
 8005db0:	2000579c 	.word	0x2000579c

08005db4 <_isatty_r>:
 8005db4:	b538      	push	{r3, r4, r5, lr}
 8005db6:	2300      	movs	r3, #0
 8005db8:	4d05      	ldr	r5, [pc, #20]	@ (8005dd0 <_isatty_r+0x1c>)
 8005dba:	4604      	mov	r4, r0
 8005dbc:	4608      	mov	r0, r1
 8005dbe:	602b      	str	r3, [r5, #0]
 8005dc0:	f7fd f9eb 	bl	800319a <_isatty>
 8005dc4:	1c43      	adds	r3, r0, #1
 8005dc6:	d102      	bne.n	8005dce <_isatty_r+0x1a>
 8005dc8:	682b      	ldr	r3, [r5, #0]
 8005dca:	b103      	cbz	r3, 8005dce <_isatty_r+0x1a>
 8005dcc:	6023      	str	r3, [r4, #0]
 8005dce:	bd38      	pop	{r3, r4, r5, pc}
 8005dd0:	2000579c 	.word	0x2000579c

08005dd4 <_sbrk_r>:
 8005dd4:	b538      	push	{r3, r4, r5, lr}
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	4d05      	ldr	r5, [pc, #20]	@ (8005df0 <_sbrk_r+0x1c>)
 8005dda:	4604      	mov	r4, r0
 8005ddc:	4608      	mov	r0, r1
 8005dde:	602b      	str	r3, [r5, #0]
 8005de0:	f7fd f9f2 	bl	80031c8 <_sbrk>
 8005de4:	1c43      	adds	r3, r0, #1
 8005de6:	d102      	bne.n	8005dee <_sbrk_r+0x1a>
 8005de8:	682b      	ldr	r3, [r5, #0]
 8005dea:	b103      	cbz	r3, 8005dee <_sbrk_r+0x1a>
 8005dec:	6023      	str	r3, [r4, #0]
 8005dee:	bd38      	pop	{r3, r4, r5, pc}
 8005df0:	2000579c 	.word	0x2000579c

08005df4 <memchr>:
 8005df4:	4603      	mov	r3, r0
 8005df6:	b510      	push	{r4, lr}
 8005df8:	b2c9      	uxtb	r1, r1
 8005dfa:	4402      	add	r2, r0
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	4618      	mov	r0, r3
 8005e00:	d101      	bne.n	8005e06 <memchr+0x12>
 8005e02:	2000      	movs	r0, #0
 8005e04:	e003      	b.n	8005e0e <memchr+0x1a>
 8005e06:	7804      	ldrb	r4, [r0, #0]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	428c      	cmp	r4, r1
 8005e0c:	d1f6      	bne.n	8005dfc <memchr+0x8>
 8005e0e:	bd10      	pop	{r4, pc}

08005e10 <_realloc_r>:
 8005e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e14:	4680      	mov	r8, r0
 8005e16:	4615      	mov	r5, r2
 8005e18:	460c      	mov	r4, r1
 8005e1a:	b921      	cbnz	r1, 8005e26 <_realloc_r+0x16>
 8005e1c:	4611      	mov	r1, r2
 8005e1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e22:	f7fe bec9 	b.w	8004bb8 <_malloc_r>
 8005e26:	b92a      	cbnz	r2, 8005e34 <_realloc_r+0x24>
 8005e28:	f7fe fe5c 	bl	8004ae4 <_free_r>
 8005e2c:	2400      	movs	r4, #0
 8005e2e:	4620      	mov	r0, r4
 8005e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e34:	f000 f906 	bl	8006044 <_malloc_usable_size_r>
 8005e38:	4285      	cmp	r5, r0
 8005e3a:	4606      	mov	r6, r0
 8005e3c:	d802      	bhi.n	8005e44 <_realloc_r+0x34>
 8005e3e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005e42:	d8f4      	bhi.n	8005e2e <_realloc_r+0x1e>
 8005e44:	4629      	mov	r1, r5
 8005e46:	4640      	mov	r0, r8
 8005e48:	f7fe feb6 	bl	8004bb8 <_malloc_r>
 8005e4c:	4607      	mov	r7, r0
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	d0ec      	beq.n	8005e2c <_realloc_r+0x1c>
 8005e52:	42b5      	cmp	r5, r6
 8005e54:	462a      	mov	r2, r5
 8005e56:	4621      	mov	r1, r4
 8005e58:	bf28      	it	cs
 8005e5a:	4632      	movcs	r2, r6
 8005e5c:	f7fe fe33 	bl	8004ac6 <memcpy>
 8005e60:	4621      	mov	r1, r4
 8005e62:	4640      	mov	r0, r8
 8005e64:	f7fe fe3e 	bl	8004ae4 <_free_r>
 8005e68:	463c      	mov	r4, r7
 8005e6a:	e7e0      	b.n	8005e2e <_realloc_r+0x1e>

08005e6c <_strtol_l.constprop.0>:
 8005e6c:	2b24      	cmp	r3, #36	@ 0x24
 8005e6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e72:	4686      	mov	lr, r0
 8005e74:	4690      	mov	r8, r2
 8005e76:	d801      	bhi.n	8005e7c <_strtol_l.constprop.0+0x10>
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d106      	bne.n	8005e8a <_strtol_l.constprop.0+0x1e>
 8005e7c:	f7fe fdf6 	bl	8004a6c <__errno>
 8005e80:	2316      	movs	r3, #22
 8005e82:	6003      	str	r3, [r0, #0]
 8005e84:	2000      	movs	r0, #0
 8005e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e8a:	460d      	mov	r5, r1
 8005e8c:	4833      	ldr	r0, [pc, #204]	@ (8005f5c <_strtol_l.constprop.0+0xf0>)
 8005e8e:	462a      	mov	r2, r5
 8005e90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e94:	5d06      	ldrb	r6, [r0, r4]
 8005e96:	f016 0608 	ands.w	r6, r6, #8
 8005e9a:	d1f8      	bne.n	8005e8e <_strtol_l.constprop.0+0x22>
 8005e9c:	2c2d      	cmp	r4, #45	@ 0x2d
 8005e9e:	d12d      	bne.n	8005efc <_strtol_l.constprop.0+0x90>
 8005ea0:	2601      	movs	r6, #1
 8005ea2:	782c      	ldrb	r4, [r5, #0]
 8005ea4:	1c95      	adds	r5, r2, #2
 8005ea6:	f033 0210 	bics.w	r2, r3, #16
 8005eaa:	d109      	bne.n	8005ec0 <_strtol_l.constprop.0+0x54>
 8005eac:	2c30      	cmp	r4, #48	@ 0x30
 8005eae:	d12a      	bne.n	8005f06 <_strtol_l.constprop.0+0x9a>
 8005eb0:	782a      	ldrb	r2, [r5, #0]
 8005eb2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005eb6:	2a58      	cmp	r2, #88	@ 0x58
 8005eb8:	d125      	bne.n	8005f06 <_strtol_l.constprop.0+0x9a>
 8005eba:	2310      	movs	r3, #16
 8005ebc:	786c      	ldrb	r4, [r5, #1]
 8005ebe:	3502      	adds	r5, #2
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005ec6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005eca:	fbbc f9f3 	udiv	r9, ip, r3
 8005ece:	4610      	mov	r0, r2
 8005ed0:	fb03 ca19 	mls	sl, r3, r9, ip
 8005ed4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005ed8:	2f09      	cmp	r7, #9
 8005eda:	d81b      	bhi.n	8005f14 <_strtol_l.constprop.0+0xa8>
 8005edc:	463c      	mov	r4, r7
 8005ede:	42a3      	cmp	r3, r4
 8005ee0:	dd27      	ble.n	8005f32 <_strtol_l.constprop.0+0xc6>
 8005ee2:	1c57      	adds	r7, r2, #1
 8005ee4:	d007      	beq.n	8005ef6 <_strtol_l.constprop.0+0x8a>
 8005ee6:	4581      	cmp	r9, r0
 8005ee8:	d320      	bcc.n	8005f2c <_strtol_l.constprop.0+0xc0>
 8005eea:	d101      	bne.n	8005ef0 <_strtol_l.constprop.0+0x84>
 8005eec:	45a2      	cmp	sl, r4
 8005eee:	db1d      	blt.n	8005f2c <_strtol_l.constprop.0+0xc0>
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	fb00 4003 	mla	r0, r0, r3, r4
 8005ef6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005efa:	e7eb      	b.n	8005ed4 <_strtol_l.constprop.0+0x68>
 8005efc:	2c2b      	cmp	r4, #43	@ 0x2b
 8005efe:	bf04      	itt	eq
 8005f00:	782c      	ldrbeq	r4, [r5, #0]
 8005f02:	1c95      	addeq	r5, r2, #2
 8005f04:	e7cf      	b.n	8005ea6 <_strtol_l.constprop.0+0x3a>
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1da      	bne.n	8005ec0 <_strtol_l.constprop.0+0x54>
 8005f0a:	2c30      	cmp	r4, #48	@ 0x30
 8005f0c:	bf0c      	ite	eq
 8005f0e:	2308      	moveq	r3, #8
 8005f10:	230a      	movne	r3, #10
 8005f12:	e7d5      	b.n	8005ec0 <_strtol_l.constprop.0+0x54>
 8005f14:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005f18:	2f19      	cmp	r7, #25
 8005f1a:	d801      	bhi.n	8005f20 <_strtol_l.constprop.0+0xb4>
 8005f1c:	3c37      	subs	r4, #55	@ 0x37
 8005f1e:	e7de      	b.n	8005ede <_strtol_l.constprop.0+0x72>
 8005f20:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005f24:	2f19      	cmp	r7, #25
 8005f26:	d804      	bhi.n	8005f32 <_strtol_l.constprop.0+0xc6>
 8005f28:	3c57      	subs	r4, #87	@ 0x57
 8005f2a:	e7d8      	b.n	8005ede <_strtol_l.constprop.0+0x72>
 8005f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f30:	e7e1      	b.n	8005ef6 <_strtol_l.constprop.0+0x8a>
 8005f32:	1c53      	adds	r3, r2, #1
 8005f34:	d108      	bne.n	8005f48 <_strtol_l.constprop.0+0xdc>
 8005f36:	2322      	movs	r3, #34	@ 0x22
 8005f38:	4660      	mov	r0, ip
 8005f3a:	f8ce 3000 	str.w	r3, [lr]
 8005f3e:	f1b8 0f00 	cmp.w	r8, #0
 8005f42:	d0a0      	beq.n	8005e86 <_strtol_l.constprop.0+0x1a>
 8005f44:	1e69      	subs	r1, r5, #1
 8005f46:	e006      	b.n	8005f56 <_strtol_l.constprop.0+0xea>
 8005f48:	b106      	cbz	r6, 8005f4c <_strtol_l.constprop.0+0xe0>
 8005f4a:	4240      	negs	r0, r0
 8005f4c:	f1b8 0f00 	cmp.w	r8, #0
 8005f50:	d099      	beq.n	8005e86 <_strtol_l.constprop.0+0x1a>
 8005f52:	2a00      	cmp	r2, #0
 8005f54:	d1f6      	bne.n	8005f44 <_strtol_l.constprop.0+0xd8>
 8005f56:	f8c8 1000 	str.w	r1, [r8]
 8005f5a:	e794      	b.n	8005e86 <_strtol_l.constprop.0+0x1a>
 8005f5c:	08006c5f 	.word	0x08006c5f

08005f60 <_strtol_r>:
 8005f60:	f7ff bf84 	b.w	8005e6c <_strtol_l.constprop.0>

08005f64 <_strtoul_l.constprop.0>:
 8005f64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f68:	4686      	mov	lr, r0
 8005f6a:	460d      	mov	r5, r1
 8005f6c:	4e33      	ldr	r6, [pc, #204]	@ (800603c <_strtoul_l.constprop.0+0xd8>)
 8005f6e:	4628      	mov	r0, r5
 8005f70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f74:	5d37      	ldrb	r7, [r6, r4]
 8005f76:	f017 0708 	ands.w	r7, r7, #8
 8005f7a:	d1f8      	bne.n	8005f6e <_strtoul_l.constprop.0+0xa>
 8005f7c:	2c2d      	cmp	r4, #45	@ 0x2d
 8005f7e:	d12f      	bne.n	8005fe0 <_strtoul_l.constprop.0+0x7c>
 8005f80:	2701      	movs	r7, #1
 8005f82:	782c      	ldrb	r4, [r5, #0]
 8005f84:	1c85      	adds	r5, r0, #2
 8005f86:	f033 0010 	bics.w	r0, r3, #16
 8005f8a:	d109      	bne.n	8005fa0 <_strtoul_l.constprop.0+0x3c>
 8005f8c:	2c30      	cmp	r4, #48	@ 0x30
 8005f8e:	d12c      	bne.n	8005fea <_strtoul_l.constprop.0+0x86>
 8005f90:	7828      	ldrb	r0, [r5, #0]
 8005f92:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8005f96:	2858      	cmp	r0, #88	@ 0x58
 8005f98:	d127      	bne.n	8005fea <_strtoul_l.constprop.0+0x86>
 8005f9a:	2310      	movs	r3, #16
 8005f9c:	786c      	ldrb	r4, [r5, #1]
 8005f9e:	3502      	adds	r5, #2
 8005fa0:	f04f 38ff 	mov.w	r8, #4294967295
 8005fa4:	fbb8 f8f3 	udiv	r8, r8, r3
 8005fa8:	2600      	movs	r6, #0
 8005faa:	fb03 f908 	mul.w	r9, r3, r8
 8005fae:	4630      	mov	r0, r6
 8005fb0:	ea6f 0909 	mvn.w	r9, r9
 8005fb4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8005fb8:	f1bc 0f09 	cmp.w	ip, #9
 8005fbc:	d81c      	bhi.n	8005ff8 <_strtoul_l.constprop.0+0x94>
 8005fbe:	4664      	mov	r4, ip
 8005fc0:	42a3      	cmp	r3, r4
 8005fc2:	dd2a      	ble.n	800601a <_strtoul_l.constprop.0+0xb6>
 8005fc4:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005fc8:	d007      	beq.n	8005fda <_strtoul_l.constprop.0+0x76>
 8005fca:	4580      	cmp	r8, r0
 8005fcc:	d322      	bcc.n	8006014 <_strtoul_l.constprop.0+0xb0>
 8005fce:	d101      	bne.n	8005fd4 <_strtoul_l.constprop.0+0x70>
 8005fd0:	45a1      	cmp	r9, r4
 8005fd2:	db1f      	blt.n	8006014 <_strtoul_l.constprop.0+0xb0>
 8005fd4:	2601      	movs	r6, #1
 8005fd6:	fb00 4003 	mla	r0, r0, r3, r4
 8005fda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005fde:	e7e9      	b.n	8005fb4 <_strtoul_l.constprop.0+0x50>
 8005fe0:	2c2b      	cmp	r4, #43	@ 0x2b
 8005fe2:	bf04      	itt	eq
 8005fe4:	782c      	ldrbeq	r4, [r5, #0]
 8005fe6:	1c85      	addeq	r5, r0, #2
 8005fe8:	e7cd      	b.n	8005f86 <_strtoul_l.constprop.0+0x22>
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1d8      	bne.n	8005fa0 <_strtoul_l.constprop.0+0x3c>
 8005fee:	2c30      	cmp	r4, #48	@ 0x30
 8005ff0:	bf0c      	ite	eq
 8005ff2:	2308      	moveq	r3, #8
 8005ff4:	230a      	movne	r3, #10
 8005ff6:	e7d3      	b.n	8005fa0 <_strtoul_l.constprop.0+0x3c>
 8005ff8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8005ffc:	f1bc 0f19 	cmp.w	ip, #25
 8006000:	d801      	bhi.n	8006006 <_strtoul_l.constprop.0+0xa2>
 8006002:	3c37      	subs	r4, #55	@ 0x37
 8006004:	e7dc      	b.n	8005fc0 <_strtoul_l.constprop.0+0x5c>
 8006006:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800600a:	f1bc 0f19 	cmp.w	ip, #25
 800600e:	d804      	bhi.n	800601a <_strtoul_l.constprop.0+0xb6>
 8006010:	3c57      	subs	r4, #87	@ 0x57
 8006012:	e7d5      	b.n	8005fc0 <_strtoul_l.constprop.0+0x5c>
 8006014:	f04f 36ff 	mov.w	r6, #4294967295
 8006018:	e7df      	b.n	8005fda <_strtoul_l.constprop.0+0x76>
 800601a:	1c73      	adds	r3, r6, #1
 800601c:	d106      	bne.n	800602c <_strtoul_l.constprop.0+0xc8>
 800601e:	2322      	movs	r3, #34	@ 0x22
 8006020:	4630      	mov	r0, r6
 8006022:	f8ce 3000 	str.w	r3, [lr]
 8006026:	b932      	cbnz	r2, 8006036 <_strtoul_l.constprop.0+0xd2>
 8006028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800602c:	b107      	cbz	r7, 8006030 <_strtoul_l.constprop.0+0xcc>
 800602e:	4240      	negs	r0, r0
 8006030:	2a00      	cmp	r2, #0
 8006032:	d0f9      	beq.n	8006028 <_strtoul_l.constprop.0+0xc4>
 8006034:	b106      	cbz	r6, 8006038 <_strtoul_l.constprop.0+0xd4>
 8006036:	1e69      	subs	r1, r5, #1
 8006038:	6011      	str	r1, [r2, #0]
 800603a:	e7f5      	b.n	8006028 <_strtoul_l.constprop.0+0xc4>
 800603c:	08006c5f 	.word	0x08006c5f

08006040 <_strtoul_r>:
 8006040:	f7ff bf90 	b.w	8005f64 <_strtoul_l.constprop.0>

08006044 <_malloc_usable_size_r>:
 8006044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006048:	1f18      	subs	r0, r3, #4
 800604a:	2b00      	cmp	r3, #0
 800604c:	bfbc      	itt	lt
 800604e:	580b      	ldrlt	r3, [r1, r0]
 8006050:	18c0      	addlt	r0, r0, r3
 8006052:	4770      	bx	lr

08006054 <_init>:
 8006054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006056:	bf00      	nop
 8006058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800605a:	bc08      	pop	{r3}
 800605c:	469e      	mov	lr, r3
 800605e:	4770      	bx	lr

08006060 <_fini>:
 8006060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006062:	bf00      	nop
 8006064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006066:	bc08      	pop	{r3}
 8006068:	469e      	mov	lr, r3
 800606a:	4770      	bx	lr
